{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/image/CSAPP_1.png","path":"image/CSAPP_1.png","modified":0,"renderable":0},{"_id":"source/image/CSAPP_2.png","path":"image/CSAPP_2.png","modified":0,"renderable":0},{"_id":"source/image/C_1.png","path":"image/C_1.png","modified":0,"renderable":0},{"_id":"source/image/C_2.png","path":"image/C_2.png","modified":0,"renderable":0},{"_id":"source/image/C_3.png","path":"image/C_3.png","modified":0,"renderable":0},{"_id":"source/image/C_4.png","path":"image/C_4.png","modified":0,"renderable":0},{"_id":"source/image/C_5.png","path":"image/C_5.png","modified":0,"renderable":0},{"_id":"source/image/HB_1.png","path":"image/HB_1.png","modified":0,"renderable":0},{"_id":"source/image/ppt_1.png","path":"image/ppt_1.png","modified":0,"renderable":0},{"_id":"source/image/ppt_10.png","path":"image/ppt_10.png","modified":0,"renderable":0},{"_id":"source/image/ppt_11.png","path":"image/ppt_11.png","modified":0,"renderable":0},{"_id":"source/image/ppt_12.png","path":"image/ppt_12.png","modified":0,"renderable":0},{"_id":"source/image/ppt_13.png","path":"image/ppt_13.png","modified":0,"renderable":0},{"_id":"source/image/ppt_14.png","path":"image/ppt_14.png","modified":0,"renderable":0},{"_id":"source/image/ppt_15.png","path":"image/ppt_15.png","modified":0,"renderable":0},{"_id":"source/image/ppt_16.png","path":"image/ppt_16.png","modified":0,"renderable":0},{"_id":"source/image/ppt_17.png","path":"image/ppt_17.png","modified":0,"renderable":0},{"_id":"source/image/ppt_18.png","path":"image/ppt_18.png","modified":0,"renderable":0},{"_id":"source/image/ppt_20.png","path":"image/ppt_20.png","modified":0,"renderable":0},{"_id":"source/image/ppt_2.png","path":"image/ppt_2.png","modified":0,"renderable":0},{"_id":"source/image/ppt_19.png","path":"image/ppt_19.png","modified":0,"renderable":0},{"_id":"source/image/ppt_21.png","path":"image/ppt_21.png","modified":0,"renderable":0},{"_id":"source/image/ppt_23.png","path":"image/ppt_23.png","modified":0,"renderable":0},{"_id":"source/image/ppt_24.png","path":"image/ppt_24.png","modified":0,"renderable":0},{"_id":"source/image/ppt_22.png","path":"image/ppt_22.png","modified":0,"renderable":0},{"_id":"source/image/ppt_25.png","path":"image/ppt_25.png","modified":0,"renderable":0},{"_id":"source/image/ppt_27.png","path":"image/ppt_27.png","modified":0,"renderable":0},{"_id":"source/image/ppt_26.png","path":"image/ppt_26.png","modified":0,"renderable":0},{"_id":"source/image/ppt_28.png","path":"image/ppt_28.png","modified":0,"renderable":0},{"_id":"source/image/ppt_29.png","path":"image/ppt_29.png","modified":0,"renderable":0},{"_id":"source/image/ppt_30.png","path":"image/ppt_30.png","modified":0,"renderable":0},{"_id":"source/image/ppt_3.png","path":"image/ppt_3.png","modified":0,"renderable":0},{"_id":"source/image/ppt_31.png","path":"image/ppt_31.png","modified":0,"renderable":0},{"_id":"source/image/ppt_34.png","path":"image/ppt_34.png","modified":0,"renderable":0},{"_id":"source/image/ppt_35.png","path":"image/ppt_35.png","modified":0,"renderable":0},{"_id":"source/image/ppt_36.png","path":"image/ppt_36.png","modified":0,"renderable":0},{"_id":"source/image/ppt_37.png","path":"image/ppt_37.png","modified":0,"renderable":0},{"_id":"source/image/ppt_38.png","path":"image/ppt_38.png","modified":0,"renderable":0},{"_id":"source/image/ppt_39.png","path":"image/ppt_39.png","modified":0,"renderable":0},{"_id":"source/image/ppt_4.png","path":"image/ppt_4.png","modified":0,"renderable":0},{"_id":"source/image/ppt_40.png","path":"image/ppt_40.png","modified":0,"renderable":0},{"_id":"source/image/ppt_41.png","path":"image/ppt_41.png","modified":0,"renderable":0},{"_id":"source/image/ppt_42.png","path":"image/ppt_42.png","modified":0,"renderable":0},{"_id":"source/image/ppt_32.png","path":"image/ppt_32.png","modified":0,"renderable":0},{"_id":"source/image/ppt_43.png","path":"image/ppt_43.png","modified":0,"renderable":0},{"_id":"source/image/ppt_33.png","path":"image/ppt_33.png","modified":0,"renderable":0},{"_id":"source/image/ppt_45.png","path":"image/ppt_45.png","modified":0,"renderable":0},{"_id":"source/image/ppt_6.png","path":"image/ppt_6.png","modified":0,"renderable":0},{"_id":"source/image/ppt_7.png","path":"image/ppt_7.png","modified":0,"renderable":0},{"_id":"source/image/ppt_44.png","path":"image/ppt_44.png","modified":0,"renderable":0},{"_id":"source/image/ppt_5.png","path":"image/ppt_5.png","modified":0,"renderable":0},{"_id":"source/image/ppt_8.png","path":"image/ppt_8.png","modified":0,"renderable":0},{"_id":"source/image/ppt_9.png","path":"image/ppt_9.png","modified":0,"renderable":0},{"_id":"source/image/python_2.png","path":"image/python_2.png","modified":0,"renderable":0},{"_id":"source/image/python_1.png","path":"image/python_1.png","modified":0,"renderable":0},{"_id":"source/image/python_4.png","path":"image/python_4.png","modified":0,"renderable":0},{"_id":"source/image/python_3.png","path":"image/python_3.png","modified":0,"renderable":0},{"_id":"source/image/python_6.png","path":"image/python_6.png","modified":0,"renderable":0},{"_id":"source/image/python_5.png","path":"image/python_5.png","modified":0,"renderable":0},{"_id":"source/image/python_7.png","path":"image/python_7.png","modified":0,"renderable":0},{"_id":"source/image/python_8.png","path":"image/python_8.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_1.png","path":"image/sjjg_1.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_10.png","path":"image/sjjg_10.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_13.png","path":"image/sjjg_13.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_11.png","path":"image/sjjg_11.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_14.png","path":"image/sjjg_14.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_12.png","path":"image/sjjg_12.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_15.png","path":"image/sjjg_15.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_17.png","path":"image/sjjg_17.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_18.png","path":"image/sjjg_18.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_16.png","path":"image/sjjg_16.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_2.png","path":"image/sjjg_2.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_20.png","path":"image/sjjg_20.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_19.png","path":"image/sjjg_19.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_21.png","path":"image/sjjg_21.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_23.png","path":"image/sjjg_23.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_22.png","path":"image/sjjg_22.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_24.png","path":"image/sjjg_24.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_25.png","path":"image/sjjg_25.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_28.png","path":"image/sjjg_28.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_27.png","path":"image/sjjg_27.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_26.png","path":"image/sjjg_26.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_29.png","path":"image/sjjg_29.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_31.png","path":"image/sjjg_31.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_3.png","path":"image/sjjg_3.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_30.png","path":"image/sjjg_30.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_32.png","path":"image/sjjg_32.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_34.png","path":"image/sjjg_34.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_33.png","path":"image/sjjg_33.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_35.png","path":"image/sjjg_35.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_36.png","path":"image/sjjg_36.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_38.png","path":"image/sjjg_38.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_37.png","path":"image/sjjg_37.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_39.png","path":"image/sjjg_39.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_4.png","path":"image/sjjg_4.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_40.png","path":"image/sjjg_40.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_41.png","path":"image/sjjg_41.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_42.png","path":"image/sjjg_42.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_43.png","path":"image/sjjg_43.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_45.png","path":"image/sjjg_45.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_44.png","path":"image/sjjg_44.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_46.png","path":"image/sjjg_46.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_47.png","path":"image/sjjg_47.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_49.png","path":"image/sjjg_49.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_5.png","path":"image/sjjg_5.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_48.png","path":"image/sjjg_48.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_51.png","path":"image/sjjg_51.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_50.png","path":"image/sjjg_50.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_52.png","path":"image/sjjg_52.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_53.png","path":"image/sjjg_53.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_56.png","path":"image/sjjg_56.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_55.png","path":"image/sjjg_55.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_54.png","path":"image/sjjg_54.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_57.png","path":"image/sjjg_57.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_58.png","path":"image/sjjg_58.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_6.png","path":"image/sjjg_6.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_59.png","path":"image/sjjg_59.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_60.png","path":"image/sjjg_60.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_61.png","path":"image/sjjg_61.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_63.png","path":"image/sjjg_63.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_62.png","path":"image/sjjg_62.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_64.png","path":"image/sjjg_64.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_65.png","path":"image/sjjg_65.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_66.png","path":"image/sjjg_66.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_67.png","path":"image/sjjg_67.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_69.png","path":"image/sjjg_69.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_68.png","path":"image/sjjg_68.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_7.png","path":"image/sjjg_7.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_70.png","path":"image/sjjg_70.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_71.png","path":"image/sjjg_71.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_73.png","path":"image/sjjg_73.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_72.png","path":"image/sjjg_72.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_74.png","path":"image/sjjg_74.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_75.png","path":"image/sjjg_75.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_76.png","path":"image/sjjg_76.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_77.png","path":"image/sjjg_77.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_8.png","path":"image/sjjg_8.png","modified":0,"renderable":0},{"_id":"source/image/sjjg_9.png","path":"image/sjjg_9.png","modified":0,"renderable":0},{"_id":"themes/hexo-theme-matery/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/bb.css","path":"css/bb.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/cursor.js","path":"js/cursor.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my.css","path":"css/my.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/author.png","path":"medias/author.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/contact.png","path":"medias/contact.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","path":"medias/icp.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/loading.gif","path":"medias/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/my_logo.png","path":"medias/my_logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/clipboard.min.js","path":"libs/codeBlock/clipboard.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","path":"libs/jquery/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","path":"libs/minivaline/MiniValine.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.css","path":"libs/prism/prism.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.webp","path":"medias/featureimages/0.webp","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.webp","path":"medias/featureimages/1.webp","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.webp","path":"medias/featureimages/10.webp","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.webp","path":"medias/featureimages/12.webp","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.webp","path":"medias/featureimages/13.webp","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.webp","path":"medias/featureimages/15.webp","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.webp","path":"medias/featureimages/16.webp","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.webp","path":"medias/featureimages/14.webp","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.webp","path":"medias/featureimages/17.webp","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.webp","path":"medias/featureimages/18.webp","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.webp","path":"medias/featureimages/2.webp","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.webp","path":"medias/featureimages/19.webp","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.webp","path":"medias/featureimages/20.webp","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.webp","path":"medias/featureimages/21.webp","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.webp","path":"medias/featureimages/23.webp","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.webp","path":"medias/featureimages/22.webp","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/25.webp","path":"medias/featureimages/25.webp","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/24.webp","path":"medias/featureimages/24.webp","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/26.webp","path":"medias/featureimages/26.webp","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/27.webp","path":"medias/featureimages/27.webp","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/28.webp","path":"medias/featureimages/28.webp","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/29.webp","path":"medias/featureimages/29.webp","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.webp","path":"medias/featureimages/3.webp","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/30.webp","path":"medias/featureimages/30.webp","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/31.webp","path":"medias/featureimages/31.webp","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/33.webp","path":"medias/featureimages/33.webp","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/32.webp","path":"medias/featureimages/32.webp","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/34.webp","path":"medias/featureimages/34.webp","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/38.webp","path":"medias/featureimages/38.webp","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/36.webp","path":"medias/featureimages/36.webp","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/37.webp","path":"medias/featureimages/37.webp","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/39.webp","path":"medias/featureimages/39.webp","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.webp","path":"medias/featureimages/4.webp","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/35.webp","path":"medias/featureimages/35.webp","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.webp","path":"medias/featureimages/5.webp","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.webp","path":"medias/featureimages/6.webp","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.webp","path":"medias/featureimages/7.webp","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.webp","path":"medias/featureimages/8.webp","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.webp","path":"medias/featureimages/9.webp","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","path":"libs/awesome/webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","path":"libs/awesome/webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","path":"libs/awesome/webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","path":"libs/awesome/webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","path":"libs/awesome/webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","path":"libs/awesome/webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","path":"libs/awesome/webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","path":"libs/awesome/webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","path":"libs/awesome/webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":1,"renderable":1},{"_id":"source/image/HB_2.png","path":"image/HB_2.png","modified":0,"renderable":0},{"_id":"source/image/HB_3.png","path":"image/HB_3.png","modified":0,"renderable":0},{"_id":"source/image/HB_4.png","path":"image/HB_4.png","modified":0,"renderable":0},{"_id":"source/image/Cpp_1.png","path":"image/Cpp_1.png","modified":0,"renderable":0},{"_id":"source/image/HB_10.png","path":"image/HB_10.png","modified":0,"renderable":0},{"_id":"source/image/HB_12.png","path":"image/HB_12.png","modified":0,"renderable":0},{"_id":"source/image/HB_11.png","path":"image/HB_11.png","modified":0,"renderable":0},{"_id":"source/image/HB_5.png","path":"image/HB_5.png","modified":0,"renderable":0},{"_id":"source/image/HB_6.png","path":"image/HB_6.png","modified":0,"renderable":0},{"_id":"source/image/HB_7.png","path":"image/HB_7.png","modified":0,"renderable":0},{"_id":"source/image/HB_8.png","path":"image/HB_8.png","modified":0,"renderable":0},{"_id":"source/image/HB_9.png","path":"image/HB_9.png","modified":0,"renderable":0},{"_id":"source/image/HB_13.png","path":"image/HB_13.png","modified":0,"renderable":0},{"_id":"source/image/HB_14.png","path":"image/HB_14.png","modified":0,"renderable":0},{"_id":"source/image/HB_15.png","path":"image/HB_15.png","modified":0,"renderable":0},{"_id":"source/image/HB_16.png","path":"image/HB_16.png","modified":0,"renderable":0},{"_id":"source/image/HB_17.png","path":"image/HB_17.png","modified":0,"renderable":0},{"_id":"source/image/HB_18.png","path":"image/HB_18.png","modified":0,"renderable":0},{"_id":"source/image/HB_19.png","path":"image/HB_19.png","modified":0,"renderable":0},{"_id":"source/image/Cpp_2.png","path":"image/Cpp_2.png","modified":0,"renderable":0},{"_id":"source/image/Cpp_3.png","path":"image/Cpp_3.png","modified":0,"renderable":0},{"_id":"source/image/Cpp_4.png","path":"image/Cpp_4.png","modified":0,"renderable":0},{"_id":"source/image/HB_20.png","path":"image/HB_20.png","modified":0,"renderable":0},{"_id":"source/image/HB_21.png","path":"image/HB_21.png","modified":0,"renderable":0},{"_id":"source/image/HB_22.png","path":"image/HB_22.png","modified":0,"renderable":0},{"_id":"source/image/HB_23.png","path":"image/HB_23.png","modified":0,"renderable":0},{"_id":"source/image/HB_24.png","path":"image/HB_24.png","modified":0,"renderable":0},{"_id":"source/image/HB_25.png","path":"image/HB_25.png","modified":0,"renderable":0},{"_id":"source/image/HB_26.png","path":"image/HB_26.png","modified":0,"renderable":0},{"_id":"source/image/HB_27.png","path":"image/HB_27.png","modified":0,"renderable":0},{"_id":"source/image/JZ_1.png","path":"image/JZ_1.png","modified":0,"renderable":0},{"_id":"source/image/JZ_2.png","path":"image/JZ_2.png","modified":0,"renderable":0},{"_id":"source/image/JZ_3.png","path":"image/JZ_3.png","modified":0,"renderable":0},{"_id":"source/image/JZ_4.png","path":"image/JZ_4.png","modified":0,"renderable":0},{"_id":"source/image/JZ_5.png","path":"image/JZ_5.png","modified":0,"renderable":0},{"_id":"source/image/JZ_6.png","path":"image/JZ_6.png","modified":0,"renderable":0},{"_id":"source/image/JZ_7.png","path":"image/JZ_7.png","modified":0,"renderable":0},{"_id":"source/image/JZ_12.png","path":"image/JZ_12.png","modified":0,"renderable":0},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.webp","path":"medias/featureimages/11.webp","modified":0,"renderable":1},{"_id":"source/image/OS_1.png","path":"image/OS_1.png","modified":0,"renderable":0},{"_id":"source/image/JZ_20.png","path":"image/JZ_20.png","modified":0,"renderable":0},{"_id":"source/image/JZ_21.png","path":"image/JZ_21.png","modified":0,"renderable":0},{"_id":"source/image/JZ_22.png","path":"image/JZ_22.png","modified":0,"renderable":0},{"_id":"source/image/JZ_23.png","path":"image/JZ_23.png","modified":0,"renderable":0},{"_id":"source/image/JZ_24.png","path":"image/JZ_24.png","modified":0,"renderable":0},{"_id":"source/image/JZ_25.png","path":"image/JZ_25.png","modified":0,"renderable":0},{"_id":"source/image/JZ_26.png","path":"image/JZ_26.png","modified":0,"renderable":0},{"_id":"source/image/JZ_29.png","path":"image/JZ_29.png","modified":0,"renderable":0},{"_id":"source/image/JZ_27.png","path":"image/JZ_27.png","modified":0,"renderable":0},{"_id":"source/image/JZ_28.png","path":"image/JZ_28.png","modified":0,"renderable":0},{"_id":"source/image/JZ_30.png","path":"image/JZ_30.png","modified":0,"renderable":0},{"_id":"source/image/JZ_31.png","path":"image/JZ_31.png","modified":0,"renderable":0},{"_id":"source/image/JZ_32.png","path":"image/JZ_32.png","modified":0,"renderable":0},{"_id":"source/image/JZ_33.png","path":"image/JZ_33.png","modified":0,"renderable":0},{"_id":"source/image/JZ_34.png","path":"image/JZ_34.png","modified":0,"renderable":0},{"_id":"source/image/JZ_35.png","path":"image/JZ_35.png","modified":0,"renderable":0},{"_id":"source/image/JZ_36.png","path":"image/JZ_36.png","modified":0,"renderable":0},{"_id":"source/image/JZ_8.png","path":"image/JZ_8.png","modified":0,"renderable":0},{"_id":"source/image/git_1.png","path":"image/git_1.png","modified":0,"renderable":0},{"_id":"source/image/git_2.png","path":"image/git_2.png","modified":0,"renderable":0},{"_id":"source/image/JZ_9.png","path":"image/JZ_9.png","modified":0,"renderable":0},{"_id":"source/image/git_3.png","path":"image/git_3.png","modified":0,"renderable":0},{"_id":"source/image/JZ_11.png","path":"image/JZ_11.png","modified":0,"renderable":0},{"_id":"source/image/JZ_10.png","path":"image/JZ_10.png","modified":0,"renderable":0},{"_id":"source/image/OS_2.png","path":"image/OS_2.png","modified":0,"renderable":0},{"_id":"source/image/OS_3.png","path":"image/OS_3.png","modified":0,"renderable":0},{"_id":"source/image/OS_4.png","path":"image/OS_4.png","modified":0,"renderable":0},{"_id":"source/image/OS_5.png","path":"image/OS_5.png","modified":0,"renderable":0},{"_id":"source/image/OS_6.png","path":"image/OS_6.png","modified":0,"renderable":0},{"_id":"source/image/OS_7.png","path":"image/OS_7.png","modified":0,"renderable":0},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/40.webp","path":"medias/featureimages/40.webp","modified":0,"renderable":1},{"_id":"source/image/JW_1.png","path":"image/JW_1.png","modified":0,"renderable":0},{"_id":"source/image/JW_2.png","path":"image/JW_2.png","modified":0,"renderable":0},{"_id":"source/image/SF_0.png","path":"image/SF_0.png","modified":0,"renderable":0},{"_id":"source/image/SF_1.png","path":"image/SF_1.png","modified":0,"renderable":0},{"_id":"source/image/SF_2.png","path":"image/SF_2.png","modified":0,"renderable":0},{"_id":"source/image/SF_3.png","path":"image/SF_3.png","modified":0,"renderable":0},{"_id":"source/image/SF_4.png","path":"image/SF_4.png","modified":0,"renderable":0},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/41.webp","path":"medias/featureimages/41.webp","modified":0,"renderable":1},{"_id":"source/image/SF_5.png","path":"image/SF_5.png","modified":0,"renderable":0},{"_id":"source/image/SF_6.png","path":"image/SF_6.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/404/index.md","hash":"d9fc9751809f20894316513f392e80892c930d2a","modified":1699366258014},{"_id":"source/_data/friends.json","hash":"b7f6186e35c40653a8349eb641922d770189bdf6","modified":1677070538000},{"_id":"source/_posts/C4D学习笔记（一）.md","hash":"3a1673e5da19a070082558f829eff0801a42087d","modified":1694782591718},{"_id":"source/_posts/Cpp学习笔记（一）.md","hash":"60c8410caf6626ba5e0f012aecfc4d2724d9b51e","modified":1699366258014},{"_id":"source/_posts/Cpp学习笔记（二）.md","hash":"ad06133f6f05fa51f9039a30554d6ca8c96d3181","modified":1695369517188},{"_id":"source/_posts/C语言学习笔记（一）.md","hash":"e913e2e667fc8be33e4443d01118e707bf6aeddb","modified":1699366258014},{"_id":"source/_posts/LeeCode刷题笔记（一）.md","hash":"28db44a7e9a5af7011c9e7d3a38e5c13f910261a","modified":1699366258014},{"_id":"source/_posts/C语言学习笔记（三）.md","hash":"787f4ed7f1f54b8fcec65658e0430e1cf8c5478b","modified":1699366258014},{"_id":"source/_posts/C语言学习笔记（二）.md","hash":"c1828664e78595fc07b82c26e6b0280baad5ecff","modified":1699366258014},{"_id":"source/_posts/Linux内核设计与实现（二）.md","hash":"490d24851490568423053992a8485f681508868f","modified":1699366258014},{"_id":"source/_posts/Linux下基于VScode和CMake的C语言开发.md","hash":"136a6e5e651d64e31a857f4832608dfd715c9c2a","modified":1699366258014},{"_id":"source/_posts/MITS6-081环境配置.md","hash":"768450f557ea3425501774763b0d960df2ad585e","modified":1699366258014},{"_id":"source/_posts/Linux系统配置.md","hash":"3a6a22d15e3051257c063bb536897fea032aaa7d","modified":1699366258014},{"_id":"source/_posts/PPT制作（基础篇）.md","hash":"d44c0f8655585296833eaf67e9c987db55a963b5","modified":1699428255705},{"_id":"source/_posts/Linux内核设计与实现（一）.md","hash":"5ea36069b646f1ee4a01cf1818b469ad76ddd5ab","modified":1699366258014},{"_id":"source/_posts/PPT制作（进阶篇）.md","hash":"649e3a34dbe62a40cd45fb2557699658e8c98251","modified":1699366258014},{"_id":"source/_posts/hexo博客框架搭建以及个性化.md","hash":"33be3fb35becc3f95596e9335d53054340a019da","modified":1699366258014},{"_id":"source/_posts/python学习笔记（一）.md","hash":"9138500477037fa7f7657f24bc3983d813f13a97","modified":1699366258014},{"_id":"source/_posts/python学习笔记（三）.md","hash":"680c3371c183e9ce5086423d05b2276692c34206","modified":1699366258014},{"_id":"source/_posts/python学习笔记（二）.md","hash":"e3fdc7c7d1ef5be905990e54aee14e3fddc63096","modified":1699366258014},{"_id":"source/_posts/python（深度学习篇）.md","hash":"8232cd581692bca07244d302b046cb8e5a0384dc","modified":1699366258014},{"_id":"source/_posts/操作系统（一）.md","hash":"9a209c8fc7b98395f3184beed7f007debb18062f","modified":1699503782447},{"_id":"source/_posts/数据结构与算法（一）.md","hash":"bd46dc64025f205a2ac8291b5c86f759affd2c38","modified":1699366258014},{"_id":"source/_posts/数据结构与算法（二）.md","hash":"9c4bee845314b438f648f845a579a44977e5a06d","modified":1699366258029},{"_id":"source/_posts/数据结构与算法（三）.md","hash":"2e3b7f77419e65e37dcfa20172b6c296c55b987d","modified":1699366258029},{"_id":"source/_posts/数据结构与算法（五）.md","hash":"1dba7c0bb903b6aeb861b8b2ce2c1ddc7f0a098b","modified":1699366258029},{"_id":"source/_posts/数据结构与算法（四）.md","hash":"11dc048bd81566dfb92ef4e1b879cbf1d196302b","modified":1699433801249},{"_id":"source/_posts/数据结构与算法（六）.md","hash":"b30564028456d5cf18c1014282fad698fede6150","modified":1699366258029},{"_id":"source/_posts/深入理解计算机系统（一）.md","hash":"de858694c464d13f85b1e826d9bd216220ffc267","modified":1694782418846},{"_id":"source/_posts/汇编语言（一）.md","hash":"2998688f9f6982669bdb2122e8c6e8ae9efd9ad8","modified":1699366258029},{"_id":"source/categories/index.md","hash":"42a0639e32216a24bcdb6ffb47ff6769934bbebf","modified":1699366258029},{"_id":"source/about/index.md","hash":"4748e388e89a1d15afc73ec3cf858c8ba6da9e7c","modified":1699366258029},{"_id":"source/contact/index.md","hash":"f42c3e06e92a0eae5e4d59f9f123b9b9ff23fa4c","modified":1699366258029},{"_id":"source/friends/index.md","hash":"d9a322e81df8fc54c32a7522fd75a68c85e823c6","modified":1699366258029},{"_id":"source/image/C_1.png","hash":"93b46571ea2fd51e83a5ef6719b0c45f2596f742","modified":1678964506000},{"_id":"source/_posts/编程风格.md","hash":"a8e8fbca596108877b195f5650fbb7684dd35cac","modified":1694782456031},{"_id":"source/_posts/面向对象编程思想.md","hash":"611d4250f47255f32b274a804602a1898011dace","modified":1694782424869},{"_id":"source/image/CSAPP_2.png","hash":"cc64e2c2ed8149d06739cc6e2eb1f1b2b0061342","modified":1677761268000},{"_id":"source/image/C_2.png","hash":"b0cd0c65018d311af9063572e15cf2b6ed5e3303","modified":1693985201053},{"_id":"source/image/C_3.png","hash":"699d3e5a2168fff43f9e46b52546581d031e269e","modified":1694332093761},{"_id":"source/image/C_4.png","hash":"5b11e7eb1e85b15e26868a9cede1807069e330a6","modified":1694333160911},{"_id":"source/image/C_5.png","hash":"ed33659c37ab76641084cc90331d70763960fd47","modified":1694425532578},{"_id":"source/image/ppt_13.png","hash":"ed5db1c6843ec82a4ccd0fcb700a16caffb483d1","modified":1679116416000},{"_id":"source/image/ppt_18.png","hash":"f6499ee21f10d52e0885cb81fb5ad0a88c36cade","modified":1679185598000},{"_id":"source/image/ppt_24.png","hash":"94498e928a05889787d6032b265b1cef83a04667","modified":1679186732000},{"_id":"source/image/ppt_30.png","hash":"42ce88fbc1f17b975fd50f6b70d221c5e7b46b22","modified":1679190486000},{"_id":"source/image/ppt_40.png","hash":"becaed0a9e5cbf47b8f3b00a75eb9efdcdc9f048","modified":1679408822000},{"_id":"source/image/ppt_33.png","hash":"827d1db2beffa61c649b7c9bf2abc8d663e40d9c","modified":1679280238000},{"_id":"source/image/python_2.png","hash":"879d303f5153af2174442b47ff1368441a619652","modified":1678870792000},{"_id":"source/image/python_1.png","hash":"0e0e204d51926bd57985d506b48197bb514ce585","modified":1678867972000},{"_id":"source/image/python_4.png","hash":"35ff09b948807cdce5e6403ee239640dcb92deab","modified":1679122434000},{"_id":"source/image/python_3.png","hash":"e50158458a825b97872e2720c97bef0f55f9bbb5","modified":1678949554000},{"_id":"source/image/python_6.png","hash":"81d61c2f467550e8c60650e545611ce9a18b5473","modified":1679136156000},{"_id":"source/image/python_5.png","hash":"2a151a05c3181513db9f3ab8d5ea5ef803f8a762","modified":1679135468000},{"_id":"source/image/python_8.png","hash":"371facffe7e391c0541b56f35ef004cd2f34c366","modified":1679805312000},{"_id":"source/image/python_7.png","hash":"544bdad9142d9bc31c2691ad5936279e2341535a","modified":1679557292000},{"_id":"source/tags/index.md","hash":"537363fac47f4ae4b5fabcdc252212fe369e2278","modified":1699366258265},{"_id":"source/image/ppt_1.png","hash":"227ded74f6470ff533181ad4a60caf75b988b1a3","modified":1678860168000},{"_id":"source/image/ppt_14.png","hash":"44ad3bb373e68d9254ad7b66cf41f0608f3de23e","modified":1679117780000},{"_id":"source/image/ppt_15.png","hash":"3db84848cf3f94682b6fbdd11d036deee987561d","modified":1679117864000},{"_id":"source/image/ppt_2.png","hash":"865a06cfad8c9bb0d10c8a7bce11fd9797f95117","modified":1678861018000},{"_id":"source/image/ppt_19.png","hash":"44c0667781f2014da41e78837616eb97999837bb","modified":1679185922000},{"_id":"source/image/ppt_25.png","hash":"ae595cbc62dd59c564a1fdb0b0512220440c9e02","modified":1679188642000},{"_id":"source/image/ppt_34.png","hash":"b4cc071b98f0219a2fb43d756a8229a3d49cfa4e","modified":1679280954000},{"_id":"source/image/ppt_36.png","hash":"c3f4d48efd93dfe84341270b1b3961f984f53119","modified":1679281900000},{"_id":"source/image/ppt_38.png","hash":"57307ff85c2c9c57601f83830c986d13ab8e4d8c","modified":1679282038000},{"_id":"source/image/ppt_5.png","hash":"4802ca112f20166af420b519a1412fbfc9d17794","modified":1678944902000},{"_id":"source/image/sjjg_57.png","hash":"9a9b27c2dc48dcb7170bfe2c9e86f899f33712cb","modified":1688970249754},{"_id":"source/image/ppt_17.png","hash":"72a59faed92dd7ba3d7eb0d17870335bece6cd48","modified":1679117804000},{"_id":"source/image/ppt_16.png","hash":"0fdcbe7dab4a36a508ba236af7611002ec5ec8d8","modified":1679117898000},{"_id":"source/image/ppt_21.png","hash":"7ee377ffec5e12b56bb09667e65c7c8db4be9967","modified":1679186290000},{"_id":"source/image/ppt_27.png","hash":"13675114d8352dab29178426ea45756c98f5603a","modified":1679188800000},{"_id":"source/image/ppt_29.png","hash":"2bb09e6e00f37eb77f604885a416f3c70ac0b0fe","modified":1679189894000},{"_id":"source/image/ppt_28.png","hash":"8b8f873f8d6426a77b7bf846310a5d6126aa6f97","modified":1679189736000},{"_id":"source/image/ppt_31.png","hash":"c86eb2c31c27f2426958ab29175a1116f33f8ae2","modified":1679279934000},{"_id":"source/image/ppt_43.png","hash":"d98f6d4abc69d5251d3ea28f1078d9ce1b9954b0","modified":1679465368000},{"_id":"source/image/sjjg_1.png","hash":"5d7a8fd4596c7cc0821d680adf0e95c7690d47a8","modified":1687929460128},{"_id":"source/image/sjjg_74.png","hash":"7f948c9dd840d9f2750756d3c465e879b11f2feb","modified":1689166971508},{"_id":"source/image/HB_1.png","hash":"62a2c0e8fb7f9327d103b5b4ad91216696769ec3","modified":1694756762987},{"_id":"source/image/ppt_10.png","hash":"2bc777bfb94b30d484b22b8c98777c311a7d525e","modified":1679020178000},{"_id":"source/image/ppt_12.png","hash":"0969cfbdce59df0ee42b4602d97322b9166d72c6","modified":1679020650000},{"_id":"source/image/ppt_26.png","hash":"d8077d7714d200a9e740ae56dc82e4b7968d643e","modified":1679188702000},{"_id":"source/image/ppt_4.png","hash":"0a7224ff447c52a0a3f542a6a60ab4936119d7a5","modified":1678861062000},{"_id":"source/image/ppt_8.png","hash":"84e03bb71037c7fea9cc2c968673024d81563ae9","modified":1678945880000},{"_id":"source/image/sjjg_2.png","hash":"9b522a971b18656fb168af7a3d97d5556fca4ac6","modified":1687932660877},{"_id":"source/image/sjjg_28.png","hash":"6ba5f583e891cbea7ec6d9d5979b10be7b8ed3f8","modified":1688642065364},{"_id":"source/image/sjjg_30.png","hash":"4e96a5d89325998ea5f4799b096f88ebde7f1da9","modified":1688642934232},{"_id":"source/image/sjjg_35.png","hash":"7f9197e8758627f51cb0f33c578bfd85f27c473f","modified":1688703138085},{"_id":"source/image/sjjg_45.png","hash":"5e360e992164145964db34d067cc9f6c5957ec06","modified":1688963924139},{"_id":"source/image/sjjg_47.png","hash":"5531944335e72b83b5764946cc04dd42f423b6a5","modified":1688964754950},{"_id":"source/image/sjjg_49.png","hash":"079b9c78813b2b829bae571633e2826446befd8d","modified":1688965652023},{"_id":"source/image/sjjg_52.png","hash":"cf6b32c9e02f834251f7d496fe524adc19947d32","modified":1688968571077},{"_id":"source/image/sjjg_53.png","hash":"7c813aa247e77a683b0526801485e33106ce5f69","modified":1688968586816},{"_id":"source/image/ppt_20.png","hash":"60999f2762a81607cdb42b7b49054f054b6ca371","modified":1679186238000},{"_id":"source/image/ppt_39.png","hash":"8ef6cef19688b87ec85b3adad2aa754b51b24d2e","modified":1679282356000},{"_id":"source/image/ppt_32.png","hash":"be1412c2b8bf2e001c9d8834db57b5594fd58e28","modified":1679280078000},{"_id":"source/image/ppt_6.png","hash":"b9e5c67028a1cedf07d65df188f0eed03a127cb8","modified":1678945070000},{"_id":"source/image/ppt_9.png","hash":"18ac973a4ba38880fbd9f18822e0ca8bb21b969a","modified":1678945976000},{"_id":"source/image/sjjg_13.png","hash":"4c76a0e6dea1bba9dc21549295c826db9075fa56","modified":1688365194539},{"_id":"source/image/sjjg_21.png","hash":"3e36fa2b0578e597d88da36840fa116ee6862786","modified":1688535355239},{"_id":"source/image/sjjg_22.png","hash":"8b0a965ab562926149ddc0303fa62d558b28bbe9","modified":1688540000893},{"_id":"source/image/sjjg_25.png","hash":"8c5448ae051c5fa11ca22b0067634bb6df23564e","modified":1688641273004},{"_id":"source/image/sjjg_26.png","hash":"5f3ff0c6fdbe992a8fd0d92e55c0041d81a71a99","modified":1688641355139},{"_id":"source/image/sjjg_32.png","hash":"a97278a148a392263144db6960c87d50c4ad1cad","modified":1688646864396},{"_id":"source/image/sjjg_36.png","hash":"fc1e24441decbf6680c6f61f6b8039fd77383fcb","modified":1688703244290},{"_id":"source/image/sjjg_37.png","hash":"77c386bb6b0790cacebe4fd1cd9997c4f98ca115","modified":1688703697307},{"_id":"source/image/sjjg_39.png","hash":"fc5f04972ff604545f86bb686177dbdda8083e51","modified":1688900725104},{"_id":"source/image/sjjg_46.png","hash":"76b53d6606dbc1ab6c6e4e6616fe6ced3cd0ab4e","modified":1688964410163},{"_id":"source/image/sjjg_5.png","hash":"bd826bbc1e2f8278f3a588b308e490fc2a5a619e","modified":1687932753356},{"_id":"source/image/sjjg_51.png","hash":"26b459e6338a4620481bc41cf85a86dca4e9fac4","modified":1688968246783},{"_id":"source/image/sjjg_55.png","hash":"20bdeb22ccedcac771c3ba11448d0827380bae14","modified":1688969010198},{"_id":"source/image/sjjg_54.png","hash":"bca18711abf3071e650be2c53f9e070545218370","modified":1688968996348},{"_id":"source/image/sjjg_6.png","hash":"b4f11e20eaf65a6ca6205a381edb3a0965adae1e","modified":1687932772249},{"_id":"source/image/sjjg_59.png","hash":"f201bb1b2139af6232c9b53f1b8182941ce022f5","modified":1688971149298},{"_id":"source/image/sjjg_60.png","hash":"478f63bd35334d796979df4f1d8f6c22f87da77b","modified":1688971463287},{"_id":"source/image/sjjg_61.png","hash":"8f8fe57c3b3e9b95131f6bb57a464e2b681a06f0","modified":1688975640066},{"_id":"source/image/sjjg_65.png","hash":"b5723d367e0ed2d936b391c5948e38b65764bc97","modified":1688976539327},{"_id":"source/image/sjjg_69.png","hash":"20eb234d945bef5d0c0ec504de32a50664df43ca","modified":1689164746578},{"_id":"source/image/sjjg_68.png","hash":"8f608f50c7edca9e942fad37a18865f5e92653c5","modified":1689145329077},{"_id":"source/image/sjjg_7.png","hash":"6bd2daad6d0fcb05971c374a6dbeb81d42ecd2b9","modified":1687932852460},{"_id":"source/image/sjjg_73.png","hash":"bfdc1b013651a4741ada0ce0cb4401d209a92676","modified":1689166829259},{"_id":"source/image/CSAPP_1.png","hash":"be4ed002850341af7c5e7bf482bce15860fbb6e8","modified":1677759184000},{"_id":"source/image/ppt_11.png","hash":"9b5db8e4800d4894219ab64e8e6a0d1b82296bb8","modified":1679020630000},{"_id":"source/image/ppt_35.png","hash":"4707fc60dd6d5a4d59a2102177ad023e503fad78","modified":1679281204000},{"_id":"source/image/ppt_22.png","hash":"33d83a4bb8e3704f436776a1f02b2805eaca4392","modified":1679186404000},{"_id":"source/image/ppt_41.png","hash":"c938207893c83401c869c81c4fa86f1769469684","modified":1679465006000},{"_id":"source/image/ppt_37.png","hash":"15e86b9c12249ad793dace24ad1b6036161b1d06","modified":1679281644000},{"_id":"source/image/sjjg_18.png","hash":"4f26471e9ee5825b3561e1e3c81da4d22570113a","modified":1688458199183},{"_id":"source/image/sjjg_16.png","hash":"d8820a39fbaa862a443eee233dcbfc90304a9953","modified":1688456465165},{"_id":"source/image/sjjg_20.png","hash":"abf1bfe105b0b810cd7d9201b11090719154136e","modified":1688460198943},{"_id":"source/image/sjjg_23.png","hash":"cbf1422baceb7fd6c1044beb22d8437403b3065c","modified":1688540259780},{"_id":"source/image/sjjg_27.png","hash":"3633cc7fc0706b2f4c5a6887761c1144ce2da6cf","modified":1688642048730},{"_id":"source/image/sjjg_29.png","hash":"f775e664dc80d38935722b02bb968c137fc53f2d","modified":1688642357876},{"_id":"source/image/sjjg_3.png","hash":"f075e2efffda18ad0a5775b7912c2352368912be","modified":1687932694511},{"_id":"source/image/sjjg_34.png","hash":"d26ed9001967a16614f54e9129cff5be22f02eec","modified":1688702838531},{"_id":"source/image/sjjg_33.png","hash":"3f1b770176c99e9794a910a056eeef6edef1d7b1","modified":1688647129127},{"_id":"source/image/sjjg_4.png","hash":"6cfa90cba885d9da56e5408e49596af3ba6620f6","modified":1687932725029},{"_id":"source/image/sjjg_40.png","hash":"b51319523769ea9228ecb925b8c73c70c70ef733","modified":1688962963224},{"_id":"source/image/sjjg_41.png","hash":"1357cbd6a59f75219391e32847fe3bb65988ae0b","modified":1688963328112},{"_id":"source/image/sjjg_42.png","hash":"f94928d904c88f61874ccbd6759da2b8d5b4dc9d","modified":1688963355372},{"_id":"source/image/sjjg_44.png","hash":"fc26715c3a02d54119b1b1cb0824a69e8bd2c864","modified":1688963909156},{"_id":"source/image/sjjg_48.png","hash":"82edf7b36a142becb2046515a8d1f647d4e904e0","modified":1688964773176},{"_id":"source/image/sjjg_56.png","hash":"2e86c7be7c15f30199ed2bf38266570da5cac31d","modified":1688969583947},{"_id":"source/image/sjjg_58.png","hash":"673838e8624da021e538f8b33f71274d593427a7","modified":1688970916537},{"_id":"source/image/sjjg_63.png","hash":"e45c20a8170358918769da6842541197c5a66ff1","modified":1688976280705},{"_id":"source/image/sjjg_62.png","hash":"1af9d23e186419b7049f0c336d0ac07c3d52c33b","modified":1688975839611},{"_id":"source/image/sjjg_64.png","hash":"b3c72383913e02225204a288c67f28367234b8ac","modified":1688976453916},{"_id":"source/image/sjjg_66.png","hash":"38b0af48e74065a6daa1791c910f3a7ca74c7269","modified":1688976557451},{"_id":"source/image/sjjg_71.png","hash":"7b9e7977f295bcb059ad16648debd92271efc6b7","modified":1689165492897},{"_id":"source/image/sjjg_77.png","hash":"467ab0d1ed64b97899d15850244eca4d20349f07","modified":1689168927183},{"_id":"source/image/sjjg_8.png","hash":"e16dd5338eddbbeacba5c2c24906afb05f9c6021","modified":1687934894938},{"_id":"source/image/ppt_3.png","hash":"7e1eaf9353e028871eaca8985fa53cd3223bdccb","modified":1678860844000},{"_id":"source/image/ppt_7.png","hash":"dcf7785822819d0a46029a449bdbdd03d8c6547d","modified":1678945468000},{"_id":"source/image/sjjg_11.png","hash":"974c6016dd0ddd1aaa7ab80e142785908737d74b","modified":1688113538811},{"_id":"source/image/sjjg_15.png","hash":"bf857dd6f78c75453191aaaf5a07e7e6b050e6df","modified":1688456435902},{"_id":"source/image/sjjg_17.png","hash":"20cf689a9301f2e9e4ae306068645c735d4d0920","modified":1688456821129},{"_id":"source/image/sjjg_19.png","hash":"256c6fe6a138ac59aa7da85bf5d77f9f2b01079c","modified":1688458452086},{"_id":"source/image/sjjg_31.png","hash":"9eeb0002ff44d9a618e91fc6fb10c82cff2da927","modified":1688643321658},{"_id":"source/image/sjjg_38.png","hash":"347d1fb837541d81f7d2f2ee5fd4b33b63ed5a29","modified":1688703665013},{"_id":"source/image/sjjg_43.png","hash":"8cfb30401e2c1e7e37c183886c25ef9160a920d0","modified":1688963823851},{"_id":"source/image/sjjg_50.png","hash":"90f982fd3425b90d313b39a12dec480ff0b62b64","modified":1688965850529},{"_id":"source/image/sjjg_70.png","hash":"46d9036f877b0f877479df7f77c870293362dc3d","modified":1689165072556},{"_id":"source/image/sjjg_72.png","hash":"f981c05470cb0361a0048125615d1a4f51067fa2","modified":1689165793211},{"_id":"source/image/sjjg_75.png","hash":"6c2bd39c6a853bf9d10a7e5969d722a7075b3c3f","modified":1689167870041},{"_id":"source/image/sjjg_76.png","hash":"5b79b0aebfd43df8bdb242f42ae15ae009112081","modified":1689168612360},{"_id":"source/image/sjjg_9.png","hash":"70b64eafa4b279316e6dd77108d7488373fe06fc","modified":1688111561834},{"_id":"source/image/os_1.png","hash":"9f71dc8f1fc1865848296eecd7125be78f888e78","modified":1688997995101},{"_id":"source/image/ppt_42.png","hash":"6a9c2d3a931d153a2733a7ff6662ece147fe2d02","modified":1679467234000},{"_id":"source/image/sjjg_10.png","hash":"1b4285ea5f16360dc9f15d591a147dc53b12f72e","modified":1688113372433},{"_id":"source/image/sjjg_14.png","hash":"a50bef888916efdc6f4697932c268550ca8e2710","modified":1688365416196},{"_id":"source/image/sjjg_12.png","hash":"c898856879a1c1deab43e36ed23ccd94242344ed","modified":1688113599091},{"_id":"source/image/sjjg_24.png","hash":"f7d614255c6fbd8579abb7368e9eafbb7ba53faa","modified":1688640806057},{"_id":"source/image/cpp_1.png","hash":"cfec28bc784599b84713b418ac3a0d578b801918","modified":1688715912110},{"_id":"source/image/cpp_2.png","hash":"90f57b955af24e70fb751e4cc81d5d174f35dec6","modified":1688715948942},{"_id":"source/image/ppt_23.png","hash":"319904c321e5975ce7d216047edeb9f17f401858","modified":1679186576000},{"_id":"source/image/ppt_44.png","hash":"1826c917edc758f3da62bd3df123307f23e6c982","modified":1679555456000},{"_id":"source/image/ppt_45.png","hash":"0e858728f13b7a7ddeefd2276569dee2215fe65e","modified":1679465630000},{"_id":"source/image/sjjg_67.png","hash":"96d58527d4b9187bc6e3266528c42f3364c4aa2a","modified":1689073233805},{"_id":"themes/hexo-theme-matery/.gitignore","hash":"5340c994462c7345373e075529f40e60c1952f00","modified":1699366258265},{"_id":"themes/hexo-theme-matery/LICENSE","hash":"b314c7ebb7d599944981908b7f3ed33a30e78f3a","modified":1699366258265},{"_id":"themes/hexo-theme-matery/CHANGELOG.md","hash":"484a703733b839bd98e016ddb015f028c2593fef","modified":1699366258265},{"_id":"themes/hexo-theme-matery/README.md","hash":"3cf955698147323913705be823ae834ae2f1ad00","modified":1699366258265},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"22a0749ede13f28e7c0298bf7e8a22e57087a102","modified":1699366258265},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"42a7a46bf3325c6a3dc95812e495c6b202280cfb","modified":1699366258265},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"88e23163aae5dff7a2e7050f55c3754f0e76ae68","modified":1699366258281},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"4ac716d15d84e7c37f07308a5ec008a2ac090c9b","modified":1699366258281},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"57733d52d17361e735fcc95f875e0b1b9ebdcbd8","modified":1699366258281},{"_id":"themes/hexo-theme-matery/layout/404.ejs","hash":"162136ceca6c95928c90a1adef8fabc2161d5c0e","modified":1699366258265},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"c431e772d0f7700592228bbd9502793bdc28a893","modified":1699366258281},{"_id":"themes/hexo-theme-matery/layout/bb.ejs","hash":"6deb819e47fe11edd2fc87a6296cae725a0275f9","modified":1699366258281},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"a709898778c161dcb6d5bea047b8cb921628040c","modified":1699366258281},{"_id":"themes/hexo-theme-matery/layout/contact.ejs","hash":"19d62e521c4253496db559478db5164ddfd2480e","modified":1606456708000},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"52c682df831fbbcf8eb76d58e1009d404d8708d5","modified":1677162138000},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"e6e6ab8624081e0f5e2d459427ca5069d7435c19","modified":1699366258281},{"_id":"themes/hexo-theme-matery/scripts/block.js","hash":"a07633ae926a9310f8a1792e519c17229cc82ea6","modified":1693989981754},{"_id":"themes/hexo-theme-matery/source/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1606456708000},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"fce9fa0d4f113659278847812841f026d3e9b71b","modified":1699366258281},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"851c0ee599e91e7b1d657673859e8b6ff79cf50b","modified":1699366258281},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"058eb27ff10f5314d8b9e334c54419b9a6572315","modified":1699366258281},{"_id":"themes/hexo-theme-matery/layout/_partial/background.ejs","hash":"6b4341fbba291c53de91babb2a0d69940a8d6547","modified":1699366258265},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"be527741c39c9dc4a13ad712b49fe8db0147fe1e","modified":1699366258265},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"9baf9370d0d7494e8575934e4bd0fa6d24484052","modified":1699366258265},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-push.ejs","hash":"2841870e0c625787de348221e5ddb7bbe99ec5a2","modified":1699366258265},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-analytics.ejs","hash":"4b01030b7136192bdbd704e29a0fe12f92767551","modified":1699366258265},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"13ce732a54ce08b0ca01f14fd09cbe8fc418de21","modified":1699366258265},{"_id":"themes/hexo-theme-matery/languages/zh-HK.yml","hash":"ae34ac0e175c3037675722e436637efbceea32f0","modified":1606456708000},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"d5a7b9bb96e04c0a3485dd873748f19c50a6a04f","modified":1699366258265},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs","hash":"58a7a07f8ab81ecc19a78d897955ca1ad73defb3","modified":1699366258265},{"_id":"themes/hexo-theme-matery/layout/_partial/changyan.ejs","hash":"cd919d31564e118c2ee8d5cbfb7d51ee6da15d82","modified":1606456708000},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"27764936791ce36b527bea63689435346bbfb425","modified":1699366258265},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"1b392f2160f962f62f3ddf5e1155c7f2f4888e1d","modified":1699366258265},{"_id":"themes/hexo-theme-matery/layout/_partial/github-link.ejs","hash":"fd4034bca2eb3987dcf113e6477260bee97eb1e7","modified":1699366258265},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"2b33ec86be58152e0af06adcf66b1bf867940e20","modified":1699366258265},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"90888c945384aa1ee4650bd43bd7ea670f25828c","modified":1699366258265},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"890c8f04c1f4905dfceb3ea9fd6efdd040d79c01","modified":1699366258265},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"4d1655b1a53f5af56dbcc45e2fe17899abfffd13","modified":1699366258265},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"4bcdbd27273dd1b7098d4cfa6479b5d6b138cd12","modified":1699366258265},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"42728561c09589f79b698eb059ab4def53ed3642","modified":1699366258265},{"_id":"themes/hexo-theme-matery/layout/_partial/index-cover.ejs","hash":"624d9cb78a5507895ab50d20f3f0c497a5025d08","modified":1699366258265},{"_id":"themes/hexo-theme-matery/layout/_partial/minivaline.ejs","hash":"e1264587db510ae1885405aed433592291ae74c4","modified":1699366258280},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"8ce2974b19765e1f05d935a4f18abf7c84a980da","modified":1699366258280},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"4c552a47ed5abda4f3f28fc55899e6008007a996","modified":1699366258280},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"5a2179a9a3de6f56b0aaa154a11919b8f34fcbf9","modified":1699366258280},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"de0d5763ddd64463f43135678b64c044884b8406","modified":1699366258281},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"7f583c935253e2bf6421791715ee9de4989add6e","modified":1699366258280},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"1fb43f421de58aa24458f7d4a4cda44b8a3d62cc","modified":1699366258281},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"d8773abab5d0b672b70a9df20a8f9f7f6b0a2dae","modified":1699366258280},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"89045a73ce4c486084c8a3ade686676e5d12e5e7","modified":1699366258281},{"_id":"themes/hexo-theme-matery/layout/_partial/reprint-statement.ejs","hash":"f67bc52bc5a2464ebe30f42c65c0ee38eeec2fda","modified":1699366258281},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"90c2ab31492f8226454537d6b987e9399119047d","modified":1699366258281},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"3ef458166041a8a12e493cc5963a5af5d98c1dfc","modified":1699366258281},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"4218ed406c43ed781fe78ad8bf1834fa4b76b049","modified":1699366258281},{"_id":"themes/hexo-theme-matery/layout/_widget/artitalk.ejs","hash":"b14e486f12b9ac42a273b80e4d785fcb94cf04b2","modified":1606456708000},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"131e2eabf6b216210efd0746300889adfee357be","modified":1699366258281},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"d6692f8c81013191fce59f47df1b6171649181ca","modified":1699366258281},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"8fc0e6172abbed7084b06e3ed637ad37e2752c48","modified":1699366258281},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"141f19a8aa41b7a21436f23ce114bd5fda932512","modified":1699366258281},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"f5259f18a906f2862fe72b90c28125b5f6b7d0b1","modified":1699366258281},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"e50fae64b6cfdbed18861eb49eca5018a920c7a4","modified":1699366258281},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"fb5ee7674070956d134ddca6890a9bd3f398cc0f","modified":1699366258281},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"9edbeb1ec6212762d597ae7a05b5a219f72c8f98","modified":1699366258281},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"d32898104477acef56c33d00a68b48db15dcf2e6","modified":1699366258281},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"5f64edd00d0a7c3b5e90d5ff99c9ebba61482d75","modified":1699366258281},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"6eaab5fccff9ad69d1d877a0f0585e2fcb89ba52","modified":1699366258281},{"_id":"themes/hexo-theme-matery/source/css/bb.css","hash":"328a49b26ce663d9824c53aced118db4d55f2ac7","modified":1699366258281},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"03dcd0a7a9fdbcc2bc38a99a8fad96ae17a340fa","modified":1699366258281},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"f640583d45179abc1ef57951e7f61fb9e10f44c9","modified":1699366258281},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"ef335be75e3f26580583af8699b8497f350ae200","modified":1699366258281},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"d5ef623065d1fbc897119f7b70ccf7563e329917","modified":1699366258281},{"_id":"themes/hexo-theme-matery/source/js/cursor.js","hash":"1ddc9448fbba8915f9452b4f0a970f33635e46a7","modified":1677162060000},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"20f0b6155eee348276dd91790f6a52b1005a0518","modified":1699366258281},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"12e430b77b627f21f7a568eacf790816302c9b17","modified":1699366258281},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"02e6072d766c6f631b5b75e1d774409103605491","modified":1699366258281},{"_id":"themes/hexo-theme-matery/source/css/my.css","hash":"37683a9f11c68903a53e2b8593ca8c095a721896","modified":1699366258281},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"caab625a2f3312ff4c3fd6642c9c6c71507652ac","modified":1699366258281},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"52b3b36a0ed3db3bdf8bf1f999e37731078c485b","modified":1699366258281},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1606456708000},{"_id":"themes/hexo-theme-matery/source/medias/contact.png","hash":"443ea472dd49b74d9d70295837eb381c8c64f02c","modified":1606456708000},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1606456708000},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1606456708000},{"_id":"themes/hexo-theme-matery/source/medias/my_logo.png","hash":"26216a1b4ace8a3d2cef1aaf9a368a20cea6bd68","modified":1677231496000},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"5a8e6d07ffa55642418ab3fd4b263aa08284b77a","modified":1699366258281},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"5dfcbcee866e9dc564916416281885f3e320871e","modified":1699366258281},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"7f4f8913f2d46ade2def5134e2cc8684a4b87939","modified":1699366258281},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"ded9739f803d114c9168d3351fded72b3b478b4c","modified":1699366258281},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","hash":"a8133367d48199e7505c2d831ca848b4202b9ba6","modified":1699366258298},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"70c0c4a9bf698747b7c058c21287ad617355e5dd","modified":1699366258281},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","hash":"3edbe498f7bb9e7daa77f9db30e1b5eeab40e067","modified":1699366258298},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","hash":"6ab7871d36cab438bbd4d781bc1fe7618b46b6e7","modified":1699366258298},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/clipboard.min.js","hash":"1852438a0ee76e07675de456adc63312dfa7ca0d","modified":1677587788000},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","hash":"b91529bfffe3b02a43e429794cf1382807ce6c7e","modified":1699366258298},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","hash":"d2569ef80127ed2f4af7ef4d9f82b037794eec69","modified":1699366258298},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"5d52d3b34fceb9d7e11f1beaf7ed380b4249dec4","modified":1699366258312},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"33810b2b757fc4327bc1d3b83bb5e0d3dc1fec5b","modified":1699366258298},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","hash":"8f53dbd5f9a40c377664bf8ca0d5d5ed75b91757","modified":1699366258298},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1606456708000},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"a0625d8b432af8bdc820f8768d36cde439e7257c","modified":1699366258314},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1606456708000},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","hash":"043eba3c85c2e2009a9fabf3c4fc55537852fd86","modified":1699366258314},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"9c0bacfbd4519d3859e3bbb06128ba241804d8b1","modified":1699366258314},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"4e6538c8312aeeab845d361c37a8c1a0931241f0","modified":1699366258314},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"f81cd7bfcf7aa2d043bd3e6077df42656fc44b82","modified":1699366258314},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"26849509f196a2d21bbfd15696e5d5153163b8f1","modified":1699366258314},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","hash":"005185ce5c8250503a75c370a9eb8f044f016c78","modified":1699366258314},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1606456708000},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1606456708000},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.css","hash":"f48db880f583ad8d078ebaaa7afe60c2991e2997","modified":1699366258328},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"9783581bec83e6bd6cd279f0af23a2862f46a587","modified":1699366258328},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1606456708000},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1606456708000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.webp","hash":"be6d831a6d5195220b1bb5094b35bda6908f67de","modified":1694782236852},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/35.webp","hash":"46e00d21411da2170a5f9d58ebc1cd0db6ccbdb8","modified":1694782243044},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1606456708000},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1606456708000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1606456708000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1606456708000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1606456708000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1606456708000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1606456708000},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"7126de5cec8371e580b7b1f22512da0985cc39e5","modified":1699366258328},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1606456708000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"67d261ac428761389c895e1da73664e633e14a72","modified":1699366258314},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1606456708000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1606456708000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1606456708000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1606456708000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"f8cd48e1fff82ecd54a7ce3e69de8dba7c92d113","modified":1699366258314},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1606456708000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1606456708000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1606456708000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1606456708000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1606456708000},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"de34668d902ec082d17ddb6dd7ad24255fb547c5","modified":1699366258328},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"ba635a17a9d9d132369f9fe4b1fbcaf001ea6ac9","modified":1699366258328},{"_id":"themes/hexo-theme-matery/source/images/loading.gif","hash":"62f3ff4530a4a8a55611fc43261c9a37c5b5a84e","modified":1694788854749},{"_id":"themes/hexo-theme-matery/source/medias/loading.gif","hash":"106240604769a11f733d2fab631ee15d57fdacd9","modified":1694788738265},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"82276be41d2001e820020a219b90ad5b026302d1","modified":1699366258312},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"5a13983930b019450e4fe01a407c64b3dd316be4","modified":1699366258314},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","hash":"a8927ac2830b2fdd4a729eb0eb7f80923539ceb9","modified":1699366258314},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"d6c03e8c3e547b5f48878081d10559b80f626948","modified":1699366258328},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.webp","hash":"35730145d52257191d7471a9b1dd74d41ad76954","modified":1694782236790},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.webp","hash":"43a1b8fc65a8fdf6fcb5bf51daf9b995068aeb15","modified":1694782242744},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.webp","hash":"3964512c9e1384a7567de98c9d0b7aaa6c9133e5","modified":1694782242801},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/33.webp","hash":"bd5e491b3168ab59736f7fb0fdc8eec03626b84d","modified":1694782243014},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/40.webp","hash":"4ceab0b74e4afbce9873bacc1097c436d8a8364e","modified":1698732611548},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","hash":"6390d0a6e6211ebbd68b49759b4dec8b2a9f04c9","modified":1699366258281},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1606456708000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1606456708000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1606456708000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1606456708000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1606456708000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1606456708000},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1606456708000},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1606456708000},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"7a3534269fd922d722a76c3affefc68e21246898","modified":1699366258314},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","hash":"c843f0dc497314574c608ca28cc742bb041786d5","modified":1699366258314},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"9cb4babc20eb8fb5a86c4b0cc894fdb0f3cd9534","modified":1699366258328},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/28.webp","hash":"6f5e35f9b5a392be49116aa6becd9a7398350a3b","modified":1694782242948},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/31.webp","hash":"a54161186a247610c0867b7d3eb4c52ce3e20db7","modified":1698732665016},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/32.webp","hash":"ef2c9939b3c6a21a66380dc1ca81146fb230b4b1","modified":1694782242998},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/34.webp","hash":"fb18c1a00f5da14f537bc96cf453113f5ef96ad4","modified":1694782243029},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/37.webp","hash":"2e9f0df400c49adf2b91b2f090247b1fc8af2d1d","modified":1694782243076},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1606456708000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1606456708000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1606456708000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.webp","hash":"64b3dab238213fc2488d961917e5a0b5f20a2220","modified":1694782236763},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.webp","hash":"b67ccaa5458a316375d5bb754e84f1b4a0362825","modified":1694782236833},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.webp","hash":"e975d5939cec72f3c2f02c0e30e8c9a444b1b84d","modified":1694782242855},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.webp","hash":"561e2430c9b9eed5357c15570ce713ff5869fcd6","modified":1694782242872},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","hash":"af8c9b255d2fd9818d8deac8ee5642caff9b5416","modified":1694593603225},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.webp","hash":"076685ec4a7defe1dd309890a761bf63933e601a","modified":1694782242838},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/36.webp","hash":"60468f07a4cd4a371c8a1091a5dac034f59976ab","modified":1694782243059},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/39.webp","hash":"9d6077e32cfc2d301eb0fbcbdff346181a3239d2","modified":1694782243092},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.webp","hash":"e5d090e8e4dc8772d1a52762d71a2491456616e8","modified":1694782236895},{"_id":"themes/hexo-theme-matery/source/medias/author.png","hash":"7deffc478a63d5d420def06d99d6a61dfed9c8e2","modified":1677130110000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.webp","hash":"eb401fb9effb590d5c2affd1945e25c210a37071","modified":1694782242821},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/29.webp","hash":"c4039f29c868a9846260aafbbac25d021fbedfbc","modified":1694782242966},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.webp","hash":"d73440230b3aaa51976c748a233d25d5e188d838","modified":1694782242785},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/27.webp","hash":"228293f33b2b86a3383f2328099213f2e69f923e","modified":1694782242932},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.webp","hash":"5eb725d041bf8f8f6c6afac76ded8ee7b7f27699","modified":1694782236874},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.webp","hash":"c965219b85e8ab1e087e208d385ed41f4b0fb0ed","modified":1694782236813},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.webp","hash":"9e85dd75cf3f0fcbe09dff653ab400040d3d579f","modified":1694782242765},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/25.webp","hash":"586268f3db976e8e25c8ce4ad7cfaae7c91a821a","modified":1694782242914},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/24.webp","hash":"76cf4b5077c86e88b46aa030c7a7de029cf915dc","modified":1694782243196},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/38.webp","hash":"5c92abea74d9d69cc94db30b27e7dddb7a77353b","modified":1694782243249},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.webp","hash":"ab808a99d5795279c47b831575f5b1f8932cf7a6","modified":1694782243161},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1606456708000},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"8789b5e4daf0029a6c88f238f10e54d01c4fce82","modified":1699366258314},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/26.webp","hash":"aa30d45748b10dd3740af37fc190311960f46994","modified":1694782243214},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.webp","hash":"f3e5d111f9bf7245f512c3e3bcf68c3356ac5b98","modified":1694782236920},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.webp","hash":"f8179827d846d6c4c5ecc0db99e535acbdaf79a7","modified":1694782236943},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"4e8ef61c9cce3381888636b8a4d61cfac5bc631a","modified":1694788091411},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1606456708000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.webp","hash":"adc490823b6ad7cee367e4b29b01953bac07fa57","modified":1694782243125},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/30.webp","hash":"2a3624266d04a87e80cb743d5a12f940d1ae1e62","modified":1694782243232},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.webp","hash":"a951f2c2699b742e33345ccd704165a85dc8c051","modified":1694782243180},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.webp","hash":"202985a41911bf9ed2085f27032c23a2e96f8b5b","modified":1694782243144},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.webp","hash":"f5f7a883185f4596db92c28847bb9ff694794e22","modified":1694782236992},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.webp","hash":"34f7ed1886270e2f32ecb0e2e51b2961ee430d84","modified":1694782236968},{"_id":"public/search.xml","hash":"6586890630b2fb3d9e18a1053d996e30fb8fce4e","modified":1694788778414},{"_id":"public/404/index.html","hash":"e667718c97658a70b9fd4a9ff4841b6f5677a220","modified":1694788778414},{"_id":"public/about/index.html","hash":"88cc8fe28c30a2da158e935d2450a25024ac773b","modified":1694788778414},{"_id":"public/categories/index.html","hash":"b08287e7bdad9be049f34b0d30543e21d383c87e","modified":1694788778414},{"_id":"public/contact/index.html","hash":"db30bec442dd991e8e4a220993c0c0446cdccea1","modified":1694788778414},{"_id":"public/friends/index.html","hash":"09dda99d60614f9f4f67599bea2078e184dd38a4","modified":1694788778414},{"_id":"public/tags/index.html","hash":"b563a93597929272dd5a59373644b93545a692a7","modified":1694788778414},{"_id":"public/2023/09/13/hui-bian-yu-yan-yi/index.html","hash":"a254014953a55322c5123c72500993a8bc588365","modified":1694788778414},{"_id":"public/2023/09/08/c4d-xue-xi-bi-ji-yi/index.html","hash":"c996adb13ec761ffb1b11e603a98bc99d5e34990","modified":1694788778414},{"_id":"public/2023/07/22/cpp-xue-xi-bi-ji-er/index.html","hash":"6c96ab57dd35e850f11b54bde8ef97a1e8cc79f9","modified":1694788778414},{"_id":"public/2023/07/21/leecode-shua-ti-bi-ji-yi/index.html","hash":"7cc8d36860a89fadf1491ced97596c695277a79c","modified":1694788778414},{"_id":"public/2023/07/14/bian-cheng-feng-ge/index.html","hash":"3db247320ae54a0e1218f9aae24d42f2035a2e03","modified":1694788778414},{"_id":"public/2023/07/11/shu-ju-jie-gou-yu-suan-fa-liu/index.html","hash":"2f3ac5dff70b64789bc7f507013f3f9a14b1ac4e","modified":1694788778414},{"_id":"public/2023/07/05/mits6-081-huan-jing-pei-zhi/index.html","hash":"a566e0ff6bea4bf80b105b8ab4dd43355b5be359","modified":1694788778414},{"_id":"public/2023/07/09/shu-ju-jie-gou-yu-suan-fa-wu/index.html","hash":"58a63b3eb17ba5adda229828d4b62c6e4293475d","modified":1694788778414},{"_id":"public/2023/07/05/cpp-xue-xi-bi-ji-yi/index.html","hash":"35aaa88ddb8f2970c6f12067dbf0f418d01f1019","modified":1694788778414},{"_id":"public/2023/07/03/shu-ju-jie-gou-yu-suan-fa-si/index.html","hash":"2ba40fbddfd8bbaba50eb40af7ba33b71496d9c8","modified":1694788778414},{"_id":"public/2023/06/28/shu-ju-jie-gou-yu-suan-fa-san/index.html","hash":"54a7dad332a075abbf0a45d2e23e52f21cb65f25","modified":1694788778414},{"_id":"public/2023/06/27/cao-zuo-xi-tong-yi/index.html","hash":"1866286777fdca42746bc4776e34eda31415bc96","modified":1694788778414},{"_id":"public/2023/06/23/python-shen-du-xue-xi-pian/index.html","hash":"aea9eb42c63d94e51789c8491d3b8d4297168e48","modified":1694788778414},{"_id":"public/2023/06/23/mian-xiang-dui-xiang-bian-cheng-si-xiang/index.html","hash":"cfd7aa0deb0400beda0e59b4cd0b390655de0584","modified":1694788778414},{"_id":"public/2023/06/23/python-xue-xi-bi-ji-san/index.html","hash":"864245ccb75fa6528d17ef2e5075ed7390165726","modified":1694788778414},{"_id":"public/2023/06/23/python-xue-xi-bi-ji-er/index.html","hash":"d2e251aa1f2c29e60117008e175c9ade3492b1b8","modified":1694788778414},{"_id":"public/2023/06/23/linux-xia-ji-yu-vscode-he-cmake-de-c-yu-yan-kai-fa/index.html","hash":"1da86e8e3aab989d3dac6769a0934fddcf60af96","modified":1694788778414},{"_id":"public/2023/06/23/linux-xi-tong-pei-zhi/index.html","hash":"26a097a267c952072ea5eb8231360d6462a96768","modified":1694788778414},{"_id":"public/2023/06/23/c-yu-yan-xue-xi-bi-ji-san/index.html","hash":"5287268221a1ea7bb062fdeea1a702506f706d3d","modified":1694788778414},{"_id":"public/2023/06/23/hexo-bo-ke-kuang-jia-da-jian-yi-ji-ge-xing-hua/index.html","hash":"dbde31479a6f92dec19218c8c31b044aaccfd904","modified":1694788778414},{"_id":"public/2023/06/23/shen-ru-li-jie-ji-suan-ji-xi-tong-yi/index.html","hash":"bd53bdde460ca56ae13581fc7b40a4eee93a0d19","modified":1694788778414},{"_id":"public/2023/06/23/shu-ju-jie-gou-yu-suan-fa-er/index.html","hash":"91ccbddb02fad1e54bd2276d74f7b6dcb0790ccc","modified":1694788778414},{"_id":"public/2023/06/23/python-xue-xi-bi-ji-yi/index.html","hash":"d6a456262005d1d17e64c7fdcb29f3d44ac08dd5","modified":1694788778414},{"_id":"public/2023/06/23/shu-ju-jie-gou-yu-suan-fa-yi/index.html","hash":"6cbb3036d8b7c9ac43f493177d1fdd63df7fd398","modified":1694788778414},{"_id":"public/2023/06/23/linux-nei-he-she-ji-yu-shi-xian-er/index.html","hash":"df3799df375e6e77d24a7dce1c23c987217222c0","modified":1694788778414},{"_id":"public/2023/06/23/ppt-zhi-zuo-ji-chu-pian/index.html","hash":"a0135f35cc09e28705601f4d85a3d8fcf7729dc2","modified":1694788778414},{"_id":"public/2023/06/23/ppt-zhi-zuo-jin-jie-pian/index.html","hash":"b99d99456d2bcfa979261987785e32fa44c26a00","modified":1694788778414},{"_id":"public/2023/06/23/c-yu-yan-xue-xi-bi-ji-er/index.html","hash":"51d4556726faf997d9bb985bade5c33bf203b4ad","modified":1694788778414},{"_id":"public/2023/06/23/linux-nei-he-she-ji-yu-shi-xian-yi/index.html","hash":"f8994efb81a1b96933ecf775dc3dab93d2b931b7","modified":1694788778414},{"_id":"public/archives/index.html","hash":"ed8d8b98fd452e529b88879418ab08057bda3d64","modified":1694788778414},{"_id":"public/2023/06/23/c-yu-yan-xue-xi-bi-ji-yi/index.html","hash":"6453ca792beb53bd4fd8087e1595b606ca841213","modified":1694788778414},{"_id":"public/archives/page/2/index.html","hash":"7a6623562e5e9f7ab85d7ddf0fe892296cb8bb65","modified":1694788778414},{"_id":"public/archives/page/3/index.html","hash":"6699e665b618cf7548620f0d173230784e8b2505","modified":1694788778414},{"_id":"public/archives/2023/page/2/index.html","hash":"b03857076fb34a09473eba85b6c596c29cd347ba","modified":1694788778414},{"_id":"public/archives/2023/index.html","hash":"1d98ed5c950dc90ac968da6f6bf462d1adad365c","modified":1694788778414},{"_id":"public/archives/2023/page/3/index.html","hash":"2f5e36b24b3a764a7be573ea6f0b4398c3b72fa8","modified":1694788778414},{"_id":"public/archives/2023/06/index.html","hash":"77aeee9256632384c4f5ef32fa735d10cf6108e0","modified":1694788778414},{"_id":"public/archives/2023/06/page/2/index.html","hash":"cca3f6c373d048c29ed735f9ff8a9fd9af059c17","modified":1694788778414},{"_id":"public/archives/2023/07/index.html","hash":"0b6d54a16d8bf8863415de342a548633081cc105","modified":1694788778414},{"_id":"public/archives/2023/09/index.html","hash":"36b218020052c25bd6459bba0ef906f6c85ca11e","modified":1694788778414},{"_id":"public/categories/编程语言/index.html","hash":"147d08769c4e9560129a7739d7233f9912c1b0d4","modified":1694788778414},{"_id":"public/categories/软技能/index.html","hash":"fa2fcc9f6a94cc927c6689ef0ead2a1b768c48f7","modified":1694788778414},{"_id":"public/categories/项目实战/index.html","hash":"efbcccbd94e4b2cda4440a561f5e8f3e972a9ffd","modified":1694788778414},{"_id":"public/categories/Linux内核/index.html","hash":"8d7be8382a1a8df6f3be3dda46270d43f5afbcb1","modified":1694788778414},{"_id":"public/categories/代码实战/index.html","hash":"af513f41a69b835ebf3c064f284d3c3abc9bba25","modified":1694788778414},{"_id":"public/categories/计算机基础/index.html","hash":"fe75c62edf23a5a57092db1ba1c2e2b882dc2c7e","modified":1694788778414},{"_id":"public/categories/机器学习/index.html","hash":"5da2e973df90f06f6502a4f52bc594560e9d7e8b","modified":1694788778414},{"_id":"public/page/2/index.html","hash":"b73a12e335621c3343ccf89a9b71b95652887dff","modified":1694788778414},{"_id":"public/page/3/index.html","hash":"c9f1bb418b43e5b81c13acebee8e0a84d0297804","modified":1694788778414},{"_id":"public/tags/Cpp/index.html","hash":"5a2cc8e2ee22ed8edcd7ebfdbd3e2649e5819c64","modified":1694788778414},{"_id":"public/index.html","hash":"535946f2ba3a8e2880a2ec434cf31986d0beb491","modified":1694788778414},{"_id":"public/tags/《Essential-C-》/index.html","hash":"10c2a913ef5885456440ab6016374dc9465a5782","modified":1694788778414},{"_id":"public/tags/C语言/index.html","hash":"21305ae1bb3be5cd3143f784235d67fd705cd5b7","modified":1694788778414},{"_id":"public/tags/《C和指针》/index.html","hash":"a747a27a8ffcec59739fb9f612dfd6f3188b641d","modified":1694788778414},{"_id":"public/tags/C4D/index.html","hash":"ea966bab2f89ec41401013f7367fc23a986e6454","modified":1694788778414},{"_id":"public/tags/建模渲染/index.html","hash":"3bcca91498a5417127d4e8f2c72654cefc7cf6bd","modified":1694788778414},{"_id":"public/tags/LeeCode/index.html","hash":"a3f4605006203857c2c0abf785a686eb9de64ed9","modified":1694788778414},{"_id":"public/tags/Linux内核/index.html","hash":"530f7eb3e66c306dcc592f1f1bf26d99b914cda7","modified":1694788778414},{"_id":"public/tags/软技能/index.html","hash":"c646662c439d07258cff64fac64ff7e72030aaae","modified":1694788778414},{"_id":"public/tags/代码开发实战/index.html","hash":"e2fb63f3a8ddf71fc140f93ccde0c5530496f3f6","modified":1694788778414},{"_id":"public/tags/Linux/index.html","hash":"943114365b640871705ad36fc8983b1cfe48752d","modified":1694788778414},{"_id":"public/tags/操作系统/index.html","hash":"e6ffa9c8f51df98cb9ddb4704c837146a0745998","modified":1694788778414},{"_id":"public/tags/PPT/index.html","hash":"4c64403a488a536d5370803f4e28521a69292a61","modified":1694788778414},{"_id":"public/tags/编程语言/index.html","hash":"96f9e96bcd97cb5ae3208b64b775de1692f28f60","modified":1694788778414},{"_id":"public/tags/MITS6-081/index.html","hash":"0604ab6e87232b387bf3aab1369ae2cfcedfc9d8","modified":1694788778414},{"_id":"public/tags/python/index.html","hash":"f69bfdedbae26749782f9db16e441a8e34b84760","modified":1694788778414},{"_id":"public/tags/Hexo/index.html","hash":"01617b6fc5f97d5f14ba4f83b88bccba632471ef","modified":1694788778414},{"_id":"public/tags/数据结构与算法/index.html","hash":"0eeabd89542265dd40121433ffa1db614138968c","modified":1694788778414},{"_id":"public/tags/计算机基础/index.html","hash":"20b4f5120dfe773ed648716dbb9e849169354902","modified":1694788778414},{"_id":"public/tags/汇编语言/index.html","hash":"4c7589bf09039beff03ccf33bfb0cdb5983de04d","modified":1694788778414},{"_id":"public/tags/CSAPP/index.html","hash":"b972d1929746d8e6e21d6d0921a2a48a87f81757","modified":1694788778414},{"_id":"public/tags/《汇编语言》/index.html","hash":"5fe0ad271c4b4088724ec7e4b1c7d3cb63133e56","modified":1694788778414},{"_id":"public/tags/《GoogleC-编程规范》/index.html","hash":"7b38e2c60759967367e2794485c7cffce60e0684","modified":1694788778414},{"_id":"public/tags/编程风格/index.html","hash":"354908140ec947d728cf8621baf9e6e1cb509e9a","modified":1694788778414},{"_id":"public/tags/面向对象/index.html","hash":"204825be4762f87b3c4d5f733cca4fe81ec1da6c","modified":1694788778414},{"_id":"public/tags/《面向对象分析与设计》/index.html","hash":"fe587abcd7fd6304828359a5bbe3e9093ddf1f66","modified":1694788778414},{"_id":"public/tags/《操作系统导论》/index.html","hash":"b935b3f14017d7c03a228d222770f68996e641f0","modified":1694788778414},{"_id":"public/tags/深度学习/index.html","hash":"3d0a1a1f8481e87ad21ef83c926dc60f3663fb3d","modified":1694788778414},{"_id":"public/image/C_2.png","hash":"b0cd0c65018d311af9063572e15cf2b6ed5e3303","modified":1694788778414},{"_id":"public/image/CSAPP_2.png","hash":"cc64e2c2ed8149d06739cc6e2eb1f1b2b0061342","modified":1694788778414},{"_id":"public/image/C_1.png","hash":"93b46571ea2fd51e83a5ef6719b0c45f2596f742","modified":1694788778414},{"_id":"public/image/C_3.png","hash":"699d3e5a2168fff43f9e46b52546581d031e269e","modified":1694788778414},{"_id":"public/image/C_4.png","hash":"5b11e7eb1e85b15e26868a9cede1807069e330a6","modified":1694788778414},{"_id":"public/image/C_5.png","hash":"ed33659c37ab76641084cc90331d70763960fd47","modified":1694788778414},{"_id":"public/image/ppt_13.png","hash":"ed5db1c6843ec82a4ccd0fcb700a16caffb483d1","modified":1694788778414},{"_id":"public/image/ppt_18.png","hash":"f6499ee21f10d52e0885cb81fb5ad0a88c36cade","modified":1694788778414},{"_id":"public/image/ppt_24.png","hash":"94498e928a05889787d6032b265b1cef83a04667","modified":1694788778414},{"_id":"public/image/ppt_30.png","hash":"42ce88fbc1f17b975fd50f6b70d221c5e7b46b22","modified":1694788778414},{"_id":"public/image/ppt_40.png","hash":"becaed0a9e5cbf47b8f3b00a75eb9efdcdc9f048","modified":1694788778414},{"_id":"public/image/ppt_33.png","hash":"827d1db2beffa61c649b7c9bf2abc8d663e40d9c","modified":1694788778414},{"_id":"public/image/python_4.png","hash":"35ff09b948807cdce5e6403ee239640dcb92deab","modified":1694788778414},{"_id":"public/image/python_2.png","hash":"879d303f5153af2174442b47ff1368441a619652","modified":1694788778414},{"_id":"public/image/python_1.png","hash":"0e0e204d51926bd57985d506b48197bb514ce585","modified":1694788778414},{"_id":"public/image/python_3.png","hash":"e50158458a825b97872e2720c97bef0f55f9bbb5","modified":1694788778414},{"_id":"public/image/python_6.png","hash":"81d61c2f467550e8c60650e545611ce9a18b5473","modified":1694788778414},{"_id":"public/image/python_5.png","hash":"2a151a05c3181513db9f3ab8d5ea5ef803f8a762","modified":1694788778414},{"_id":"public/image/python_7.png","hash":"544bdad9142d9bc31c2691ad5936279e2341535a","modified":1694788778414},{"_id":"public/image/python_8.png","hash":"371facffe7e391c0541b56f35ef004cd2f34c366","modified":1694788778414},{"_id":"public/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1694788778414},{"_id":"public/medias/contact.png","hash":"443ea472dd49b74d9d70295837eb381c8c64f02c","modified":1694788778414},{"_id":"public/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1694788778414},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1694788778414},{"_id":"public/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1694788778414},{"_id":"public/medias/my_logo.png","hash":"26216a1b4ace8a3d2cef1aaf9a368a20cea6bd68","modified":1694788778414},{"_id":"public/medias/featureimages/3.webp","hash":"be6d831a6d5195220b1bb5094b35bda6908f67de","modified":1694788778414},{"_id":"public/medias/featureimages/35.webp","hash":"46e00d21411da2170a5f9d58ebc1cd0db6ccbdb8","modified":1694788778414},{"_id":"public/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1694788778414},{"_id":"public/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1694788778414},{"_id":"public/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1694788778414},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1694788778414},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1694788778414},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1694788778414},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1694788778414},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"9c6632aeec67d3e84a1434884aa801514ff8103b","modified":1694788778414},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1694788778414},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1694788778414},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1694788778414},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1694788778414},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1694788778414},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1694788778414},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1694788778414},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1694788778414},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1694788778414},{"_id":"public/live2dw/assets/exp/f01.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1694788778414},{"_id":"public/live2dw/assets/exp/f02.exp.json","hash":"241b6afafa2e25c6d7a54692a8b5aa060a137ab1","modified":1694788778414},{"_id":"public/live2dw/assets/exp/f03.exp.json","hash":"fbf7729e504f14f83f976827fcf62301a6579a34","modified":1694788778414},{"_id":"public/live2dw/assets/exp/f04.exp.json","hash":"35e746ede62e7090e7dfb08561d77772f58b4153","modified":1694788778414},{"_id":"public/live2dw/assets/mtn/flickHead_00.mtn","hash":"f64c79c9171660db5c440bef229ac2e35a1597d5","modified":1694788778414},{"_id":"public/live2dw/assets/mtn/flickHead_01.mtn","hash":"a1011d6bf397bcd3c3c968d9616f88fe1ffbc83c","modified":1694788778414},{"_id":"public/live2dw/assets/mtn/flickHead_02.mtn","hash":"d3c9c0acb4dc25a2274f3b9faa71e5ce60ad92e4","modified":1694788778414},{"_id":"public/live2dw/assets/mtn/idle_00.mtn","hash":"378b4577217c604c9d28ab4edf8b707c8d8c2fbb","modified":1694788778414},{"_id":"public/live2dw/assets/mtn/idle_01.mtn","hash":"88c2494655dbb712b842f03232b619f381753d52","modified":1694788778414},{"_id":"public/live2dw/assets/mtn/pinchIn_01.mtn","hash":"a5fefb45115695db72b9499e627a51b2b9394f2c","modified":1694788778414},{"_id":"public/live2dw/assets/mtn/pinchIn_02.mtn","hash":"aa0d66ca9b06c374577fd7e64e89756de1e1f2ae","modified":1694788778414},{"_id":"public/live2dw/assets/mtn/pinchIn_00.mtn","hash":"70978b4c983f6a9fd6d3d9c24571586f7d6eac30","modified":1694788778414},{"_id":"public/live2dw/assets/mtn/idle_02.mtn","hash":"7f5d2cf8706007c8659938eba132a68c470a4c26","modified":1694788778414},{"_id":"public/live2dw/assets/mtn/pinchOut_00.mtn","hash":"e07fe8fd8c2810e3c1d28b730bd49c8c25849bad","modified":1694788778414},{"_id":"public/live2dw/assets/mtn/pinchOut_01.mtn","hash":"e05df948d08b17f34c993a9c1f901190509d5db0","modified":1694788778414},{"_id":"public/live2dw/assets/mtn/shake_00.mtn","hash":"5185d02c7ab9f0bec3d4a890b54b2378e553373d","modified":1694788778414},{"_id":"public/live2dw/assets/mtn/shake_01.mtn","hash":"e812985a56796e122018f9d57d1606a4866ff7d1","modified":1694788778414},{"_id":"public/live2dw/assets/mtn/pinchOut_02.mtn","hash":"b323fd350d334b33bbdfb31194ae664089986c27","modified":1694788778414},{"_id":"public/live2dw/assets/mtn/shake_02.mtn","hash":"2702970805e07777974c383613e631730982bcff","modified":1694788778414},{"_id":"public/live2dw/assets/shizuku.model.json","hash":"19a05bd41b806a935cea42c2000626fc82da2536","modified":1694788778414},{"_id":"public/live2dw/assets/shizuku.pose.json","hash":"ac5505efbf80ba0a2e5783d67fe232bc5c6f1f80","modified":1694788778414},{"_id":"public/live2dw/assets/snd/flickHead_00.mp3","hash":"356388d939006b03cf9e6158c603b58d4800bec1","modified":1694788778414},{"_id":"public/live2dw/assets/shizuku.physics.json","hash":"6484d646e79a44c83784c6ae434cf7349746c5c8","modified":1694788778414},{"_id":"public/live2dw/assets/snd/flickHead_01.mp3","hash":"436d0bbccf6e7a2744447554947eee4563608970","modified":1694788778414},{"_id":"public/live2dw/assets/snd/flickHead_02.mp3","hash":"5f63477ce63f2073e24d68fea906fe136fe6349e","modified":1694788778414},{"_id":"public/live2dw/assets/snd/pinchIn_00.mp3","hash":"f9baa3b7cadec20b714135fc49cfab3ff6adeeb4","modified":1694788778414},{"_id":"public/live2dw/assets/snd/pinchIn_01.mp3","hash":"d5c8cc6f61b56222a83a5174f75006f83c3b88da","modified":1694788778414},{"_id":"public/live2dw/assets/mtn/tapBody_02.mtn","hash":"a75acb51c1191ce5050d3ee1af6f2dcc787c7c5e","modified":1694788778414},{"_id":"public/live2dw/assets/mtn/tapBody_00.mtn","hash":"835aa3d4a8fbd26c0bb66b164a19464fa3f17a99","modified":1694788778414},{"_id":"public/live2dw/assets/mtn/tapBody_01.mtn","hash":"78fca17436ab5e065e27f419f135aa6c0a0b52ef","modified":1694788778414},{"_id":"public/live2dw/assets/snd/tapBody_00.mp3","hash":"003e68a59a9c8392e230f34c91860efbd946277a","modified":1694788778414},{"_id":"public/live2dw/assets/snd/shake_00.mp3","hash":"f65dd58e7b44ec5c865d13c190316070b625b5fe","modified":1694788778414},{"_id":"public/live2dw/assets/snd/shake_01.mp3","hash":"c1e0e8a07ff268ee06c2b7825d1b645e193f21b9","modified":1694788778414},{"_id":"public/live2dw/assets/snd/shake_02.mp3","hash":"8882b94bce00f09232588b7301badb105fa8acab","modified":1694788778414},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"5f1a807437cc723bcadc3791d37add5ceed566a2","modified":1694788778414},{"_id":"public/image/ppt_1.png","hash":"227ded74f6470ff533181ad4a60caf75b988b1a3","modified":1694788778414},{"_id":"public/image/ppt_14.png","hash":"44ad3bb373e68d9254ad7b66cf41f0608f3de23e","modified":1694788778414},{"_id":"public/image/ppt_15.png","hash":"3db84848cf3f94682b6fbdd11d036deee987561d","modified":1694788778414},{"_id":"public/live2dw/assets/snd/tapBody_01.mp3","hash":"5314b50f153df71559e51e2586581c006df00722","modified":1694788778414},{"_id":"public/image/ppt_2.png","hash":"865a06cfad8c9bb0d10c8a7bce11fd9797f95117","modified":1694788778414},{"_id":"public/image/ppt_19.png","hash":"44c0667781f2014da41e78837616eb97999837bb","modified":1694788778414},{"_id":"public/image/ppt_25.png","hash":"ae595cbc62dd59c564a1fdb0b0512220440c9e02","modified":1694788778414},{"_id":"public/image/ppt_36.png","hash":"c3f4d48efd93dfe84341270b1b3961f984f53119","modified":1694788778414},{"_id":"public/image/ppt_34.png","hash":"b4cc071b98f0219a2fb43d756a8229a3d49cfa4e","modified":1694788778414},{"_id":"public/image/ppt_38.png","hash":"57307ff85c2c9c57601f83830c986d13ab8e4d8c","modified":1694788778414},{"_id":"public/image/ppt_5.png","hash":"4802ca112f20166af420b519a1412fbfc9d17794","modified":1694788778414},{"_id":"public/live2dw/assets/snd/tapBody_02.mp3","hash":"15e7815ed0a0e5164e18e0c53b97aedc742a134d","modified":1694788778414},{"_id":"public/image/sjjg_57.png","hash":"9a9b27c2dc48dcb7170bfe2c9e86f899f33712cb","modified":1694788778414},{"_id":"public/images/loading.gif","hash":"f1d544f90792745f7a985fd6213018e879204d5a","modified":1694788778414},{"_id":"public/medias/loading.gif","hash":"106240604769a11f733d2fab631ee15d57fdacd9","modified":1694788778414},{"_id":"public/medias/featureimages/1.webp","hash":"35730145d52257191d7471a9b1dd74d41ad76954","modified":1694788778414},{"_id":"public/medias/featureimages/12.webp","hash":"43a1b8fc65a8fdf6fcb5bf51daf9b995068aeb15","modified":1694788778414},{"_id":"public/medias/featureimages/17.webp","hash":"3964512c9e1384a7567de98c9d0b7aaa6c9133e5","modified":1694788778414},{"_id":"public/js/cursor.js","hash":"cf32f8ce2a1a51ba65d3b6063fe2ee1482550190","modified":1694788778414},{"_id":"public/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1694788778414},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1694788778414},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1694788778414},{"_id":"public/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1694788778414},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1694788778414},{"_id":"public/js/matery.js","hash":"4c5b032d7e15575fbc339956d22d0f9ecfa3a372","modified":1694788778414},{"_id":"public/js/search.js","hash":"e1482406c58ea2a0eb178d7e4efb2c879cdddc80","modified":1694788778414},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1694788778414},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1694788778414},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1694788778414},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1694788778414},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1694788778414},{"_id":"public/libs/codeBlock/codeLang.js","hash":"65b1f9aba89f7f5e3471357a23cbb389de1b436e","modified":1694788778414},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1694788778414},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1694788778414},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1694788778414},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1694788778414},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1694788778414},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1694788778414},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1694788778414},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1694788778414},{"_id":"public/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1694788778414},{"_id":"public/libs/prism/prism.css","hash":"62e5474893dece076534352f564ceabd6e088a5a","modified":1694788778414},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1694788778414},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1694788778414},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1694788778414},{"_id":"public/css/matery.css","hash":"1955a33e2b8ee7677a77fd08721fded1618c74de","modified":1694788778414},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1694788778414},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1694788778414},{"_id":"public/libs/codeBlock/clipboard.min.js","hash":"77b132fcd2b32dab816f71ff1fadcd28da39e5f5","modified":1694788778414},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1694788778414},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1694788778414},{"_id":"public/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1694788778414},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1694788778414},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1694788778414},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1694788778414},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1694788778414},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1694788778414},{"_id":"public/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1694788778414},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1694788778414},{"_id":"public/libs/minivaline/MiniValine.js","hash":"fbb58c37e2c74f127ae0c566afa9b48889aab79f","modified":1694788778414},{"_id":"public/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1694788778414},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1694788778414},{"_id":"public/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1694788778414},{"_id":"public/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1694788778414},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1694788778414},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1694788778414},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1694788778414},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1694788778414},{"_id":"public/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1694788778414},{"_id":"public/medias/featureimages/33.webp","hash":"bd5e491b3168ab59736f7fb0fdc8eec03626b84d","modified":1694788778414},{"_id":"public/medias/featureimages/40.webp","hash":"89dac6c196067f779e22721aacea724afa1fa46f","modified":1694788778414},{"_id":"public/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1694788778414},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1694788778414},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1694788778414},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1694788778414},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1694788778414},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1694788778414},{"_id":"public/live2dw/assets/moc/shizuku.1024/texture_00.png","hash":"21bdb28b31783e23b26b3aa061e90be4088665aa","modified":1694788778414},{"_id":"public/live2dw/assets/moc/shizuku.1024/texture_03.png","hash":"07f568a2bb8045b6bdff7783fb4daf62c821f9ab","modified":1694788778414},{"_id":"public/live2dw/assets/moc/shizuku.1024/texture_05.png","hash":"0cd00007fb8bff62a2eb08e1d7c43abab8722224","modified":1694788778414},{"_id":"public/live2dw/assets/snd/pinchIn_02.mp3","hash":"5b63e02607571ac601c500995e836e6c861b1c62","modified":1694788778414},{"_id":"public/live2dw/assets/snd/pinchOut_00.mp3","hash":"0654f38f6e9fd623eaf8be11b5d58c9d12991949","modified":1694788778414},{"_id":"public/live2dw/assets/snd/pinchOut_02.mp3","hash":"554edb2f3838cbdc27d1a9c6b8a9cb6eb465cbdd","modified":1694788778414},{"_id":"public/live2dw/assets/snd/pinchOut_01.mp3","hash":"8a081030fd53c07bffe3edd48f87a371ca77296b","modified":1694788778414},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"3290fe2df45f065b51a1cd7b24ec325cbf9bb5ce","modified":1694788778414},{"_id":"public/image/ppt_17.png","hash":"72a59faed92dd7ba3d7eb0d17870335bece6cd48","modified":1694788778414},{"_id":"public/image/ppt_16.png","hash":"0fdcbe7dab4a36a508ba236af7611002ec5ec8d8","modified":1694788778414},{"_id":"public/image/ppt_21.png","hash":"7ee377ffec5e12b56bb09667e65c7c8db4be9967","modified":1694788778414},{"_id":"public/image/ppt_27.png","hash":"13675114d8352dab29178426ea45756c98f5603a","modified":1694788778414},{"_id":"public/image/ppt_28.png","hash":"8b8f873f8d6426a77b7bf846310a5d6126aa6f97","modified":1694788778414},{"_id":"public/image/ppt_29.png","hash":"2bb09e6e00f37eb77f604885a416f3c70ac0b0fe","modified":1694788778414},{"_id":"public/image/ppt_31.png","hash":"c86eb2c31c27f2426958ab29175a1116f33f8ae2","modified":1694788778414},{"_id":"public/image/ppt_43.png","hash":"d98f6d4abc69d5251d3ea28f1078d9ce1b9954b0","modified":1694788778414},{"_id":"public/image/sjjg_1.png","hash":"5d7a8fd4596c7cc0821d680adf0e95c7690d47a8","modified":1694788778414},{"_id":"public/image/sjjg_74.png","hash":"7f948c9dd840d9f2750756d3c465e879b11f2feb","modified":1694788778414},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1694788778414},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1694788778414},{"_id":"public/medias/featureimages/28.webp","hash":"6f5e35f9b5a392be49116aa6becd9a7398350a3b","modified":1694788778414},{"_id":"public/medias/featureimages/31.webp","hash":"8523575184616a3acf97da557ff66c74d57c2cbe","modified":1694788778414},{"_id":"public/medias/featureimages/34.webp","hash":"fb18c1a00f5da14f537bc96cf453113f5ef96ad4","modified":1694788778414},{"_id":"public/medias/featureimages/32.webp","hash":"ef2c9939b3c6a21a66380dc1ca81146fb230b4b1","modified":1694788778414},{"_id":"public/medias/featureimages/37.webp","hash":"2e9f0df400c49adf2b91b2f090247b1fc8af2d1d","modified":1694788778414},{"_id":"public/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1694788778414},{"_id":"public/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1694788778414},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1694788778414},{"_id":"public/live2dw/assets/moc/shizuku.1024/texture_01.png","hash":"3d0e745f3e560071ee08beeecde186e5ea35d99e","modified":1694788778414},{"_id":"public/live2dw/assets/moc/shizuku.1024/texture_04.png","hash":"f764d594841905db8b2998dd61c329866125ad97","modified":1694788778414},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"35bb5b588b6de25c9be2dd51d3fd331feafac02d","modified":1694788778414},{"_id":"public/image/HB_1.png","hash":"62a2c0e8fb7f9327d103b5b4ad91216696769ec3","modified":1694788778414},{"_id":"public/image/ppt_10.png","hash":"2bc777bfb94b30d484b22b8c98777c311a7d525e","modified":1694788778414},{"_id":"public/image/ppt_12.png","hash":"0969cfbdce59df0ee42b4602d97322b9166d72c6","modified":1694788778414},{"_id":"public/image/ppt_26.png","hash":"d8077d7714d200a9e740ae56dc82e4b7968d643e","modified":1694788778414},{"_id":"public/image/ppt_4.png","hash":"0a7224ff447c52a0a3f542a6a60ab4936119d7a5","modified":1694788778414},{"_id":"public/image/ppt_8.png","hash":"84e03bb71037c7fea9cc2c968673024d81563ae9","modified":1694788778414},{"_id":"public/image/sjjg_2.png","hash":"9b522a971b18656fb168af7a3d97d5556fca4ac6","modified":1694788778414},{"_id":"public/image/sjjg_28.png","hash":"6ba5f583e891cbea7ec6d9d5979b10be7b8ed3f8","modified":1694788778414},{"_id":"public/image/sjjg_30.png","hash":"4e96a5d89325998ea5f4799b096f88ebde7f1da9","modified":1694788778414},{"_id":"public/image/sjjg_35.png","hash":"7f9197e8758627f51cb0f33c578bfd85f27c473f","modified":1694788778414},{"_id":"public/image/sjjg_45.png","hash":"5e360e992164145964db34d067cc9f6c5957ec06","modified":1694788778414},{"_id":"public/image/sjjg_47.png","hash":"5531944335e72b83b5764946cc04dd42f423b6a5","modified":1694788778414},{"_id":"public/image/sjjg_49.png","hash":"079b9c78813b2b829bae571633e2826446befd8d","modified":1694788778414},{"_id":"public/image/sjjg_52.png","hash":"cf6b32c9e02f834251f7d496fe524adc19947d32","modified":1694788778414},{"_id":"public/image/sjjg_53.png","hash":"7c813aa247e77a683b0526801485e33106ce5f69","modified":1694788778414},{"_id":"public/medias/featureimages/0.webp","hash":"64b3dab238213fc2488d961917e5a0b5f20a2220","modified":1694788778414},{"_id":"public/medias/featureimages/2.webp","hash":"b67ccaa5458a316375d5bb754e84f1b4a0362825","modified":1694788778414},{"_id":"public/medias/featureimages/21.webp","hash":"e975d5939cec72f3c2f02c0e30e8c9a444b1b84d","modified":1694788778414},{"_id":"public/medias/featureimages/22.webp","hash":"561e2430c9b9eed5357c15570ce713ff5869fcd6","modified":1694788778414},{"_id":"public/live2dw/assets/moc/shizuku.1024/texture_02.png","hash":"055eb2da9c13e9116be93a1e60c0ea2b660af864","modified":1694788778414},{"_id":"public/image/ppt_20.png","hash":"60999f2762a81607cdb42b7b49054f054b6ca371","modified":1694788778414},{"_id":"public/image/ppt_39.png","hash":"8ef6cef19688b87ec85b3adad2aa754b51b24d2e","modified":1694788778414},{"_id":"public/image/ppt_32.png","hash":"be1412c2b8bf2e001c9d8834db57b5594fd58e28","modified":1694788778414},{"_id":"public/image/ppt_6.png","hash":"b9e5c67028a1cedf07d65df188f0eed03a127cb8","modified":1694788778414},{"_id":"public/image/ppt_9.png","hash":"18ac973a4ba38880fbd9f18822e0ca8bb21b969a","modified":1694788778414},{"_id":"public/image/sjjg_13.png","hash":"4c76a0e6dea1bba9dc21549295c826db9075fa56","modified":1694788778414},{"_id":"public/image/sjjg_21.png","hash":"3e36fa2b0578e597d88da36840fa116ee6862786","modified":1694788778414},{"_id":"public/image/sjjg_22.png","hash":"8b0a965ab562926149ddc0303fa62d558b28bbe9","modified":1694788778414},{"_id":"public/image/sjjg_25.png","hash":"8c5448ae051c5fa11ca22b0067634bb6df23564e","modified":1694788778414},{"_id":"public/image/sjjg_26.png","hash":"5f3ff0c6fdbe992a8fd0d92e55c0041d81a71a99","modified":1694788778414},{"_id":"public/image/sjjg_32.png","hash":"a97278a148a392263144db6960c87d50c4ad1cad","modified":1694788778414},{"_id":"public/image/sjjg_36.png","hash":"fc1e24441decbf6680c6f61f6b8039fd77383fcb","modified":1694788778414},{"_id":"public/image/sjjg_37.png","hash":"77c386bb6b0790cacebe4fd1cd9997c4f98ca115","modified":1694788778414},{"_id":"public/image/sjjg_39.png","hash":"fc5f04972ff604545f86bb686177dbdda8083e51","modified":1694788778414},{"_id":"public/image/sjjg_46.png","hash":"76b53d6606dbc1ab6c6e4e6616fe6ced3cd0ab4e","modified":1694788778414},{"_id":"public/image/sjjg_5.png","hash":"bd826bbc1e2f8278f3a588b308e490fc2a5a619e","modified":1694788778414},{"_id":"public/image/sjjg_51.png","hash":"26b459e6338a4620481bc41cf85a86dca4e9fac4","modified":1694788778414},{"_id":"public/image/sjjg_55.png","hash":"20bdeb22ccedcac771c3ba11448d0827380bae14","modified":1694788778414},{"_id":"public/image/sjjg_54.png","hash":"bca18711abf3071e650be2c53f9e070545218370","modified":1694788778414},{"_id":"public/image/sjjg_6.png","hash":"b4f11e20eaf65a6ca6205a381edb3a0965adae1e","modified":1694788778414},{"_id":"public/image/sjjg_59.png","hash":"f201bb1b2139af6232c9b53f1b8182941ce022f5","modified":1694788778414},{"_id":"public/image/sjjg_60.png","hash":"478f63bd35334d796979df4f1d8f6c22f87da77b","modified":1694788778414},{"_id":"public/image/sjjg_61.png","hash":"8f8fe57c3b3e9b95131f6bb57a464e2b681a06f0","modified":1694788778414},{"_id":"public/image/sjjg_65.png","hash":"b5723d367e0ed2d936b391c5948e38b65764bc97","modified":1694788778414},{"_id":"public/image/sjjg_69.png","hash":"20eb234d945bef5d0c0ec504de32a50664df43ca","modified":1694788778414},{"_id":"public/image/sjjg_68.png","hash":"8f608f50c7edca9e942fad37a18865f5e92653c5","modified":1694788778414},{"_id":"public/image/sjjg_7.png","hash":"6bd2daad6d0fcb05971c374a6dbeb81d42ecd2b9","modified":1694788778414},{"_id":"public/image/sjjg_73.png","hash":"bfdc1b013651a4741ada0ce0cb4401d209a92676","modified":1694788778414},{"_id":"public/medias/banner/0.jpg","hash":"af8c9b255d2fd9818d8deac8ee5642caff9b5416","modified":1694788778414},{"_id":"public/medias/featureimages/20.webp","hash":"076685ec4a7defe1dd309890a761bf63933e601a","modified":1694788778414},{"_id":"public/medias/featureimages/36.webp","hash":"60468f07a4cd4a371c8a1091a5dac034f59976ab","modified":1694788778414},{"_id":"public/medias/featureimages/39.webp","hash":"9d6077e32cfc2d301eb0fbcbdff346181a3239d2","modified":1694788778414},{"_id":"public/medias/featureimages/8.webp","hash":"e5d090e8e4dc8772d1a52762d71a2491456616e8","modified":1694788778414},{"_id":"public/image/CSAPP_1.png","hash":"be4ed002850341af7c5e7bf482bce15860fbb6e8","modified":1694788778414},{"_id":"public/image/ppt_11.png","hash":"9b5db8e4800d4894219ab64e8e6a0d1b82296bb8","modified":1694788778414},{"_id":"public/image/ppt_22.png","hash":"33d83a4bb8e3704f436776a1f02b2805eaca4392","modified":1694788778414},{"_id":"public/image/ppt_35.png","hash":"4707fc60dd6d5a4d59a2102177ad023e503fad78","modified":1694788778414},{"_id":"public/image/ppt_37.png","hash":"15e86b9c12249ad793dace24ad1b6036161b1d06","modified":1694788778414},{"_id":"public/image/ppt_41.png","hash":"c938207893c83401c869c81c4fa86f1769469684","modified":1694788778414},{"_id":"public/image/sjjg_18.png","hash":"4f26471e9ee5825b3561e1e3c81da4d22570113a","modified":1694788778414},{"_id":"public/image/sjjg_23.png","hash":"cbf1422baceb7fd6c1044beb22d8437403b3065c","modified":1694788778414},{"_id":"public/image/sjjg_20.png","hash":"abf1bfe105b0b810cd7d9201b11090719154136e","modified":1694788778414},{"_id":"public/image/sjjg_16.png","hash":"d8820a39fbaa862a443eee233dcbfc90304a9953","modified":1694788778414},{"_id":"public/image/sjjg_27.png","hash":"3633cc7fc0706b2f4c5a6887761c1144ce2da6cf","modified":1694788778414},{"_id":"public/image/sjjg_29.png","hash":"f775e664dc80d38935722b02bb968c137fc53f2d","modified":1694788778414},{"_id":"public/image/sjjg_3.png","hash":"f075e2efffda18ad0a5775b7912c2352368912be","modified":1694788778414},{"_id":"public/image/sjjg_34.png","hash":"d26ed9001967a16614f54e9129cff5be22f02eec","modified":1694788778414},{"_id":"public/image/sjjg_33.png","hash":"3f1b770176c99e9794a910a056eeef6edef1d7b1","modified":1694788778414},{"_id":"public/image/sjjg_4.png","hash":"6cfa90cba885d9da56e5408e49596af3ba6620f6","modified":1694788778414},{"_id":"public/image/sjjg_40.png","hash":"b51319523769ea9228ecb925b8c73c70c70ef733","modified":1694788778414},{"_id":"public/image/sjjg_41.png","hash":"1357cbd6a59f75219391e32847fe3bb65988ae0b","modified":1694788778414},{"_id":"public/image/sjjg_42.png","hash":"f94928d904c88f61874ccbd6759da2b8d5b4dc9d","modified":1694788778414},{"_id":"public/image/sjjg_44.png","hash":"fc26715c3a02d54119b1b1cb0824a69e8bd2c864","modified":1694788778414},{"_id":"public/image/sjjg_56.png","hash":"2e86c7be7c15f30199ed2bf38266570da5cac31d","modified":1694788778414},{"_id":"public/image/sjjg_48.png","hash":"82edf7b36a142becb2046515a8d1f647d4e904e0","modified":1694788778414},{"_id":"public/image/sjjg_58.png","hash":"673838e8624da021e538f8b33f71274d593427a7","modified":1694788778414},{"_id":"public/image/sjjg_63.png","hash":"e45c20a8170358918769da6842541197c5a66ff1","modified":1694788778414},{"_id":"public/image/sjjg_62.png","hash":"1af9d23e186419b7049f0c336d0ac07c3d52c33b","modified":1694788778414},{"_id":"public/image/sjjg_64.png","hash":"b3c72383913e02225204a288c67f28367234b8ac","modified":1694788778414},{"_id":"public/image/sjjg_66.png","hash":"38b0af48e74065a6daa1791c910f3a7ca74c7269","modified":1694788778414},{"_id":"public/image/sjjg_71.png","hash":"7b9e7977f295bcb059ad16648debd92271efc6b7","modified":1694788778414},{"_id":"public/image/sjjg_77.png","hash":"467ab0d1ed64b97899d15850244eca4d20349f07","modified":1694788778414},{"_id":"public/medias/author.png","hash":"7deffc478a63d5d420def06d99d6a61dfed9c8e2","modified":1694788778414},{"_id":"public/image/sjjg_8.png","hash":"e16dd5338eddbbeacba5c2c24906afb05f9c6021","modified":1694788778414},{"_id":"public/medias/featureimages/18.webp","hash":"eb401fb9effb590d5c2affd1945e25c210a37071","modified":1694788778414},{"_id":"public/medias/featureimages/29.webp","hash":"c4039f29c868a9846260aafbbac25d021fbedfbc","modified":1694788778414},{"_id":"public/image/ppt_3.png","hash":"7e1eaf9353e028871eaca8985fa53cd3223bdccb","modified":1694788778414},{"_id":"public/image/ppt_7.png","hash":"dcf7785822819d0a46029a449bdbdd03d8c6547d","modified":1694788778414},{"_id":"public/image/sjjg_11.png","hash":"974c6016dd0ddd1aaa7ab80e142785908737d74b","modified":1694788778414},{"_id":"public/image/sjjg_17.png","hash":"20cf689a9301f2e9e4ae306068645c735d4d0920","modified":1694788778414},{"_id":"public/image/sjjg_15.png","hash":"bf857dd6f78c75453191aaaf5a07e7e6b050e6df","modified":1694788778414},{"_id":"public/image/sjjg_19.png","hash":"256c6fe6a138ac59aa7da85bf5d77f9f2b01079c","modified":1694788778414},{"_id":"public/image/sjjg_31.png","hash":"9eeb0002ff44d9a618e91fc6fb10c82cff2da927","modified":1694788778414},{"_id":"public/image/sjjg_38.png","hash":"347d1fb837541d81f7d2f2ee5fd4b33b63ed5a29","modified":1694788778414},{"_id":"public/image/sjjg_43.png","hash":"8cfb30401e2c1e7e37c183886c25ef9160a920d0","modified":1694788778414},{"_id":"public/image/sjjg_50.png","hash":"90f982fd3425b90d313b39a12dec480ff0b62b64","modified":1694788778414},{"_id":"public/image/sjjg_70.png","hash":"46d9036f877b0f877479df7f77c870293362dc3d","modified":1694788778414},{"_id":"public/image/sjjg_76.png","hash":"5b79b0aebfd43df8bdb242f42ae15ae009112081","modified":1694788778414},{"_id":"public/image/sjjg_72.png","hash":"f981c05470cb0361a0048125615d1a4f51067fa2","modified":1694788778414},{"_id":"public/image/sjjg_75.png","hash":"6c2bd39c6a853bf9d10a7e5969d722a7075b3c3f","modified":1694788778414},{"_id":"public/image/sjjg_9.png","hash":"70b64eafa4b279316e6dd77108d7488373fe06fc","modified":1694788778414},{"_id":"public/medias/featureimages/15.webp","hash":"d73440230b3aaa51976c748a233d25d5e188d838","modified":1694788778414},{"_id":"public/medias/featureimages/27.webp","hash":"228293f33b2b86a3383f2328099213f2e69f923e","modified":1694788778414},{"_id":"public/medias/featureimages/7.webp","hash":"5eb725d041bf8f8f6c6afac76ded8ee7b7f27699","modified":1694788778414},{"_id":"public/image/os_1.png","hash":"9f71dc8f1fc1865848296eecd7125be78f888e78","modified":1694788778414},{"_id":"public/image/sjjg_10.png","hash":"1b4285ea5f16360dc9f15d591a147dc53b12f72e","modified":1694788778414},{"_id":"public/image/ppt_42.png","hash":"6a9c2d3a931d153a2733a7ff6662ece147fe2d02","modified":1694788778414},{"_id":"public/image/sjjg_12.png","hash":"c898856879a1c1deab43e36ed23ccd94242344ed","modified":1694788778414},{"_id":"public/image/sjjg_14.png","hash":"a50bef888916efdc6f4697932c268550ca8e2710","modified":1694788778414},{"_id":"public/image/sjjg_24.png","hash":"f7d614255c6fbd8579abb7368e9eafbb7ba53faa","modified":1694788778414},{"_id":"public/medias/featureimages/10.webp","hash":"c965219b85e8ab1e087e208d385ed41f4b0fb0ed","modified":1694788778414},{"_id":"public/medias/featureimages/14.webp","hash":"9e85dd75cf3f0fcbe09dff653ab400040d3d579f","modified":1694788778414},{"_id":"public/medias/featureimages/25.webp","hash":"586268f3db976e8e25c8ce4ad7cfaae7c91a821a","modified":1694788778414},{"_id":"public/image/cpp_1.png","hash":"cfec28bc784599b84713b418ac3a0d578b801918","modified":1694788778414},{"_id":"public/image/cpp_2.png","hash":"90f57b955af24e70fb751e4cc81d5d174f35dec6","modified":1694788778414},{"_id":"public/image/ppt_23.png","hash":"319904c321e5975ce7d216047edeb9f17f401858","modified":1694788778414},{"_id":"public/image/ppt_44.png","hash":"1826c917edc758f3da62bd3df123307f23e6c982","modified":1694788778414},{"_id":"public/medias/featureimages/24.webp","hash":"76cf4b5077c86e88b46aa030c7a7de029cf915dc","modified":1694788778414},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"35e71cc2a130199efb167b9a06939576602f0d75","modified":1694788778414},{"_id":"public/image/ppt_45.png","hash":"0e858728f13b7a7ddeefd2276569dee2215fe65e","modified":1694788778414},{"_id":"public/image/sjjg_67.png","hash":"96d58527d4b9187bc6e3266528c42f3364c4aa2a","modified":1694788778414},{"_id":"public/medias/featureimages/38.webp","hash":"5c92abea74d9d69cc94db30b27e7dddb7a77353b","modified":1694788778414},{"_id":"public/medias/featureimages/19.webp","hash":"ab808a99d5795279c47b831575f5b1f8932cf7a6","modified":1694788778414},{"_id":"public/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1694788778414},{"_id":"public/live2dw/assets/moc/shizuku.moc","hash":"c2670a0f75830edc89d7fe6d074de4ee67e8dc5d","modified":1694788778414},{"_id":"public/medias/featureimages/26.webp","hash":"aa30d45748b10dd3740af37fc190311960f46994","modified":1694788778414},{"_id":"public/medias/featureimages/6.webp","hash":"f3e5d111f9bf7245f512c3e3bcf68c3356ac5b98","modified":1694788778414},{"_id":"public/medias/featureimages/9.webp","hash":"f8179827d846d6c4c5ecc0db99e535acbdaf79a7","modified":1694788778414},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"4e8ef61c9cce3381888636b8a4d61cfac5bc631a","modified":1694788778414},{"_id":"public/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1694788778414},{"_id":"public/medias/featureimages/13.webp","hash":"adc490823b6ad7cee367e4b29b01953bac07fa57","modified":1694788778414},{"_id":"public/medias/featureimages/30.webp","hash":"2a3624266d04a87e80cb743d5a12f940d1ae1e62","modified":1694788778414},{"_id":"public/medias/featureimages/23.webp","hash":"a951f2c2699b742e33345ccd704165a85dc8c051","modified":1694788778414},{"_id":"public/medias/featureimages/16.webp","hash":"202985a41911bf9ed2085f27032c23a2e96f8b5b","modified":1694788778414},{"_id":"public/medias/featureimages/5.webp","hash":"f5f7a883185f4596db92c28847bb9ff694794e22","modified":1694788778414},{"_id":"public/medias/featureimages/4.webp","hash":"34f7ed1886270e2f32ecb0e2e51b2961ee430d84","modified":1694788778414},{"_id":"source/image/HB_2.png","hash":"1e2524b0eab0cb262ed7e035c416b1b563031c65","modified":1694842407777},{"_id":"source/image/HB_4.png","hash":"3c5e0bcc2ef04ae5c0ce76352bc1f77d7db89637","modified":1694842914831},{"_id":"source/image/HB_3.png","hash":"d80ce8da8e323608173ee70e114b90298a578d10","modified":1694842892422},{"_id":"source/image/Cpp_1.png","hash":"89e28ab352deacff0535e961160f645e18123487","modified":1695024331874},{"_id":"source/image/HB_10.png","hash":"292c6abccff7080739099fd731ca733c0896bfc8","modified":1695017641305},{"_id":"source/image/HB_11.png","hash":"4bc121d80cd9119d0435825d612930f49528ebc1","modified":1695017887603},{"_id":"source/image/HB_12.png","hash":"1f9b44318b5b0b9698e53e50165e6b8c9f791e50","modified":1695017901241},{"_id":"source/image/HB_6.png","hash":"c101875747999f47842563ae67c7fb307b3e73a3","modified":1695015980119},{"_id":"source/image/HB_7.png","hash":"e2bb48f266b297e2a4c66121f3cfeec565b33e46","modified":1695016027522},{"_id":"source/image/HB_8.png","hash":"28bada06ca3096bd8394890ab4edd29078e586c9","modified":1695017040473},{"_id":"source/image/HB_9.png","hash":"3c2a1f0dace5e6bf8bf7981ea08ecc837674be18","modified":1695017234788},{"_id":"source/image/HB_5.png","hash":"72b223968918b025f4bf71ceeff9fa5fa57f69d5","modified":1695013864707},{"_id":"source/image/HB_13.png","hash":"2066edcd54bb9ea2e2208218d1c324cbbbb2348b","modified":1695093414798},{"_id":"source/image/HB_14.png","hash":"66b4077018efd1892667f097fbf53482015c4c6e","modified":1695096737110},{"_id":"source/image/HB_17.png","hash":"39e8e41c8d8b66d0faee33e2c17e82e8c2e36dae","modified":1695099257853},{"_id":"source/image/HB_16.png","hash":"803a51db65c602cde2944adbbff0d3d2a7756f42","modified":1695099040208},{"_id":"source/image/HB_15.png","hash":"f818030e86ff92e7ae679158df7b538fbdc92558","modified":1695098332263},{"_id":"source/image/HB_18.png","hash":"02f60c3fabf208de9a15957a4d54d603aa3650da","modified":1695187433154},{"_id":"source/_posts/汇编语言（二）.md","hash":"059d9476fef653bbef2a4882a2ce70376261db5e","modified":1699366258029},{"_id":"source/image/HB_19.png","hash":"d0f7b9359f2d240011d51c3aa8048fae64d0dea8","modified":1695187449672},{"_id":"source/image/Cpp_2.png","hash":"2ec9b41f95961da8c54bc9d616eaa856e1c1da43","modified":1695285402317},{"_id":"source/image/Cpp_3.png","hash":"3d5868943d39d076ba64196ece44e7eda127bc88","modified":1695295172838},{"_id":"source/image/Cpp_4.png","hash":"c6789e656cfff36bff238cfcaa6a75cfaadbf684","modified":1695296664542},{"_id":"source/image/HB_20.png","hash":"9fb942db8f01ee54d82db4da24612882be586089","modified":1695276816363},{"_id":"source/image/HB_21.png","hash":"4cbd5fa4016e248f0cc24bd6fa3f192378ab501c","modified":1695713935515},{"_id":"source/image/HB_23.png","hash":"e1514f4daad9faa7fd55a64dc534ab3e8222ceba","modified":1695715753061},{"_id":"source/image/HB_22.png","hash":"09434dda9140f331bc655165c8626ca5b20aded7","modified":1695714909553},{"_id":"source/_posts/汇编语言（三）.md","hash":"4139007e2276c7bfd103f2e36e6644e89fabedc2","modified":1699366258029},{"_id":"source/image/HB_24.png","hash":"a1e9769cc41987de0d21d52c9e22247e525a8c4f","modified":1696659121987},{"_id":"source/image/HB_25.png","hash":"effd06e1b35c24945cfb0a9cb61ac1330240ead4","modified":1696664898476},{"_id":"source/image/HB_26.png","hash":"0e42ef39c40d8894f6038cbbf743449154be5daf","modified":1696683642498},{"_id":"source/_posts/计算机组成原理（一）.md","hash":"fd1200cf122d235484d1aa8174bde880eff2b6fc","modified":1699366258029},{"_id":"source/image/JZ_1.png","hash":"4623a154426042f70fd0f79d50fd03341ef57364","modified":1696751234393},{"_id":"source/image/HB_27.png","hash":"57096464bf3af19cb99ece4c881bf39e3547ce0a","modified":1696769715719},{"_id":"source/image/C~ULCZLRV4]7R{9JTCBOC{N.png","hash":"b755064050e55d18ca3699b05622259cba84409d","modified":1696915107429},{"_id":"source/image/JZ_2.png","hash":"0d92f7399e55e6f1cd22ad8f0d07b3fd35c94d95","modified":1696914258245},{"_id":"source/image/JZ_3.png","hash":"f18c7574d5450525b0a664543cf46ed09cc9e264","modified":1698152276769},{"_id":"source/image/JZ_6.png","hash":"fa93748ec192b6e670076a60f39526b4e481d4af","modified":1697286487478},{"_id":"source/image/JZ_5.png","hash":"1e7a39e6c2e7f301c5385fc5d1771972ff837821","modified":1697285818538},{"_id":"source/image/JZ_7.png","hash":"1a0b3f1311df901c465c6f087cead14b33c2bac6","modified":1697346388605},{"_id":"source/image/JZ_4.png","hash":"85fd1cf09ac791ba4e22e6fddbcee289424d120a","modified":1696999280299},{"_id":"source/image/JZ_10.png","hash":"f0f1f88ecf7a06f9364ea2cacc372a217a796c1a","modified":1698217865962},{"_id":"source/image/JZ_8.png","hash":"55ef3d4e9e26c9ac880dece00e428ee3eb09e2a4","modified":1697346528976},{"_id":"source/image/JZ_9.png","hash":"6948a0343ebca439e511ae5c52eeaf6bc14d80ce","modified":1698153163649},{"_id":"source/image/JZ_12.png","hash":"4b147efa2e56810aa86bf5f0fd2dc3ae9e8091be","modified":1698219467268},{"_id":"source/image/JZ_13.png","hash":"24e1fd8ea24632d4e3a35f060c927a0859564930","modified":1697003971829},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.webp","hash":"d5d726838fd76fbf73c80109c415c48a640c8aa4","modified":1697026288164},{"_id":"source/image/JZ_14.png","hash":"97160783bf0ae3cbc506a89b646cbfedf75f19a8","modified":1697086044773},{"_id":"source/image/JZ_15.png","hash":"67edc890a58c9baff711949b221686e001ab1e35","modified":1697086422480},{"_id":"source/image/JZ_16.png","hash":"25fdecc2ae97fa6f9f371e2331ec3be1fa7c4f11","modified":1697086675406},{"_id":"source/image/OS_1.png","hash":"002f326036c0841922dd8d6f46908925bb7b050f","modified":1698238619875},{"_id":"source/_posts/Git及其应用.md","hash":"1b35900c60e652c89016ee2e2a344c858a6c034e","modified":1699366258014},{"_id":"source/image/JZ_30.png","hash":"c8079fc0129ddbae23ac55c4796207f22c9258a0","modified":1697268712664},{"_id":"source/image/JZ_17.png","hash":"aee46d7d794a3aac596e12a980772a77aa3b1735","modified":1697174037535},{"_id":"source/image/JZ_19.png","hash":"c54dbb570be44fdadd6fa3f0583a0a182f489f86","modified":1697174680496},{"_id":"source/image/JZ_22.png","hash":"91ca49c7bf577566e76dfab324c6d4df00095577","modified":1697175853409},{"_id":"source/image/JZ_29.png","hash":"89de5ce05401805d7a5a248dd4c2bd1d2e35d2d7","modified":1697268496822},{"_id":"source/image/JZ_24.png","hash":"36136549f2c62a086dc1c2481caf2e1e37ed5dcd","modified":1697262953586},{"_id":"source/image/JZ_26.png","hash":"2c804447c4c82ea40e8efbc5ac0ebd5b3db7695d","modified":1697265945237},{"_id":"source/image/JZ_18.png","hash":"8bbc6bac7ec1711c774a5cbe3d2e98117f02e2fd","modified":1697174618589},{"_id":"source/image/JZ_21.png","hash":"ae6d5ea856ae5827f374e968723a020ac070c7be","modified":1697175397968},{"_id":"source/image/JZ_23.png","hash":"9af6da64aa352ca881cf80a402ab510988530379","modified":1697176167979},{"_id":"source/image/JZ_28.png","hash":"f6e8ad816dc0de375a3039368208384945927165","modified":1697268443706},{"_id":"source/image/JZ_27.png","hash":"af005aceea99d0273e71ce26d483aeb30ab059ed","modified":1697266087900},{"_id":"source/image/OS_2.png","hash":"dcd85354f067e38cc6bc9fb1b10ee5230076c699","modified":1698585595265},{"_id":"source/image/JZ_20.png","hash":"0303470455c089d14d1d299842c20d166dedeb89","modified":1697174954064},{"_id":"source/image/JZ_25.png","hash":"f774e9340421cb2e89b6ea12a35f27ab2492e429","modified":1697263668504},{"_id":"source/image/OS_3.png","hash":"459a782627b6d84374b9d3514e4c56d38fed9912","modified":1698589254468},{"_id":"source/image/OS_5.png","hash":"8809ed3fda7f3d6f74bb6302358f44cbe8e7a045","modified":1698667993560},{"_id":"source/image/OS_6.png","hash":"ed27ac969dd076f5223f5f5c93964f072556b91d","modified":1698671205350},{"_id":"source/image/OS_7.png","hash":"dc6db7793d6b884db5a19cc2290db0c11675d36c","modified":1698680098832},{"_id":"source/image/OS_8.png","hash":"0a75ea3463ccbd7a3392937df769464eb7ec2961","modified":1697271103605},{"_id":"source/image/OS_4.png","hash":"fd0bbab3d9f4f99e29bc35ecbbd9bbd1b7a9e384","modified":1698589395387},{"_id":"source/image/JZ_35.png","hash":"eaa23ad208c8d28d3c41df8818a75289c0e1517f","modified":1697348991983},{"_id":"source/image/JZ_31.png","hash":"938d5c4e7e0e5896e5a1186024788ab97ec77376","modified":1697347394386},{"_id":"source/image/JZ_32.png","hash":"b72f28a0a8a93846dba4ce638c11fe7bc27cf2c0","modified":1697347642008},{"_id":"source/image/JZ_34.png","hash":"828cb222084cdb40068e5eb95401b4d587f9eeb4","modified":1697348600321},{"_id":"source/image/JZ_33.png","hash":"686a74bbd1d7302240b0f8d838cc10c02e9d77b1","modified":1697347791849},{"_id":"source/image/JZ_36.png","hash":"992a5b2186ed911930d78718868bde501d3a9914","modified":1697349420283},{"_id":"source/image/OS_9.png","hash":"408622bca177f804c595eadcb04048cdc421a53d","modified":1697352190708},{"_id":"source/image/OS_17.png","hash":"b79e13bd879a53a947e20fc996981575fe3e634e","modified":1697378707195},{"_id":"source/image/OS_14.png","hash":"e898cd7c1bc7d8ef004067abf669839c1dad81cf","modified":1697358577751},{"_id":"source/image/OS_15.png","hash":"e91221891bd58852e37c1a6e84b671a931616eca","modified":1697378691838},{"_id":"source/image/OS_16.png","hash":"5b80f90be0fe4ad33bea29a8f16cd821815388cf","modified":1697378723028},{"_id":"source/image/OS_13.png","hash":"07e907e1bb50830a38cf1599dba4ad3610e16ac5","modified":1697358178557},{"_id":"source/image/OS_11.png","hash":"5db370b5b8218dea25bb9dc82ddddcbff7db9eac","modified":1697355759666},{"_id":"source/image/OS_10.png","hash":"efc3c6abe7a8f45469e9c36caa877194b24121c8","modified":1697355488092},{"_id":"source/image/OS_12.png","hash":"cc148e1cae7d4e2d60a43138c9ca52e2f2023d79","modified":1697357682663},{"_id":"source/_posts/Cmake应用.md","hash":"9849131be98d205cce35bc30f8ced23281bc01b0","modified":1697463583096},{"_id":"source/_posts/Cmake应用（一）.md","hash":"3e25591c86bd246481a5af962f7d4d8c49df9dd6","modified":1699366258014},{"_id":"source/_posts/Cmake应用（二）.md","hash":"9c0f87f5bbb1dfb90ac18b672d880211743c64b9","modified":1699366258014},{"_id":"source/image/git_1.png","hash":"446d87767fe250449e590e70ef20712157fdae64","modified":1698057193637},{"_id":"source/image/git_2.png","hash":"fa2e5b8abfccc76934aa1c4c008d324627a5cae8","modified":1698146395303},{"_id":"source/image/git_3.png","hash":"60df9de9576511044ad717ff8f865830c9c23c0c","modified":1698151102428},{"_id":"source/image/JZ_11.png","hash":"c93452e5a5dec4f14ffd0d684a2bc7bea5df88eb","modified":1698217784493},{"_id":"source/_posts/操作系统（二）.md","hash":"9adc61fb8f99abc09787edf8923fe267fae41eee","modified":1699366258014},{"_id":"source/_posts/计算机网络（一）.md","hash":"1fe256565690b6eab15296ef7f6e36941d4c7726","modified":1699366258029},{"_id":"source/image/SJJG_0.png","hash":"526b3fe3281a9595459cdeb84e7da7c850e0ee4c","modified":1698825093568},{"_id":"source/image/JW_1.png","hash":"d6b94201a3d1c62dcd15b0785613bf6b063b3ef6","modified":1698753880780},{"_id":"source/image/JW_2.png","hash":"41744dd855de0d5dd00784e1e80e9d30213d6375","modified":1698910741607},{"_id":"source/image/SF_1.png","hash":"140ac100b2c124009136c8b275846ff5b2a390fb","modified":1698905620290},{"_id":"source/image/SF_2.png","hash":"c1b3d71924bf6f0779d447f83bbea54eeed243c5","modified":1699185772538},{"_id":"source/image/SF_0.png","hash":"526b3fe3281a9595459cdeb84e7da7c850e0ee4c","modified":1698825093568},{"_id":"source/_posts/数据结构与算法（七）.md","hash":"b79c0c92a3c872d2c6ef3d3d5c6148df56f19733","modified":1699366258014},{"_id":"source/image/SF_3.png","hash":"472e3145daa644cf29b3bdcb28d0ad563627d668","modified":1699340422000},{"_id":"source/image/SF_4.png","hash":"27b57f11d55faa632f2f96c5eb8bfafb5c1fc1c4","modified":1699343034000},{"_id":"source/_posts/Linux工作流（一）.md","hash":"fe73de8b8e05870eddd9f84b9a36f088e4ca177b","modified":1699366258014},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/41.webp","hash":"bdd83287d45f9ca3f896791329098af441dd7fad","modified":1699364094609},{"_id":"source/_posts/Vim工作流（一）.md","hash":"14d27277d2a9157bee1a16cbbad0e233045502ed","modified":1699364822123},{"_id":"source/image/SF_5.png","hash":"6bd5564c5896a321d21f4aef8be9df731558a2a4","modified":1699434197482},{"_id":"source/image/SF_6.png","hash":"bc04e6a3a147dc40c8b604fe4bdfdb6daa23f719","modified":1699434197486},{"_id":"source/_posts/NeoVim工作流（一）.md","hash":"8f229eedc9634e4210c7b617b71a159c1acb354e","modified":1699503782447},{"_id":"source/_posts/信息检索.md","hash":"8f8e7858a8531174e8e0b66dc598e4c88ecc0dc7","modified":1699503782447}],"Category":[{"name":"编程语言","_id":"clmkphbf000049gvdeaoj1vx0"},{"name":"软技能","_id":"clmkphbf6000o9gvd1zz203r9"},{"name":"项目实战","_id":"clmkphbf7000v9gvd699dgl31"},{"name":"Linux内核","_id":"clmkphbf800119gvd0d2q2cwr"},{"name":"代码实战","_id":"clmkphbf900199gvd2v2ccv1y"},{"name":"计算机基础","_id":"clmkphbfd00249gvd2fi18t8y"},{"name":"机器学习","_id":"clmkphbfe002a9gvd2g7lg2ar"},{"name":"分组","_id":"clmra3hn90001p0vd3jys8xez"},{"name":"工作流","_id":"clooet64e00006ovd1koz9934"}],"Data":[{"_id":"friends","data":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}],"Page":[{"title":"404","date":"2023-02-22T12:56:22.000Z","type":"404","layout":"404","description":"Oops～，我崩溃了！找不到你想要的页面 :(","_content":"","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2023-02-22 20:56:22\ntype: \"404\"\nlayout: \"404\"\ndescription: \"Oops～，我崩溃了！找不到你想要的页面 :(\"\n---\n","updated":"2023-11-07T14:10:58.014Z","path":"404/index.html","_id":"clmkphbev00009gvd7b6l610t","comments":1,"content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":""},{"title":"about","date":"2023-02-22T12:47:45.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2023-02-22 20:47:45\ntype: \"about\"\nlayout: \"about\"\n---\n","updated":"2023-11-07T14:10:58.029Z","path":"about/index.html","_id":"clmkphbez00029gvdabgiaj6s","comments":1,"content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":""},{"title":"contact","date":"2023-02-22T12:48:24.000Z","type":"contact","layout":"contact","_content":"","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2023-02-22 20:48:24\ntype: \"contact\"\nlayout: \"contact\"\n---\n","updated":"2023-11-07T14:10:58.029Z","path":"contact/index.html","_id":"clmkphbf100069gvdextj55sd","comments":1,"content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":""},{"title":"categories","date":"2023-02-22T12:28:49.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2023-02-22 20:28:49\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2023-11-07T14:10:58.029Z","path":"categories/index.html","_id":"clmkphbf100089gvd4pn07xrn","comments":1,"content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":""},{"title":"friends","date":"2023-02-22T12:52:03.000Z","type":"friends","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2023-02-22 20:52:03\ntype: \"friends\"\nlayout: \"friends\"\n---\n","updated":"2023-11-07T14:10:58.029Z","path":"friends/index.html","_id":"clmkphbf2000a9gvd3mdk2zsy","comments":1,"content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":""},{"title":"tags","date":"2023-02-22T12:46:54.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2023-02-22 20:46:54\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2023-11-07T14:10:58.265Z","path":"tags/index.html","_id":"clmkphbf4000e9gvd0yc6fq4i","comments":1,"content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":""}],"Post":[{"title":"C语言学习笔记（三）","seo_title":"seo名称","toc":true,"indent":true,"top":false,"comments":1,"archive":true,"cover":false,"mathjax":false,"pin":false,"top_meta":false,"bottom_meta":false,"sidebar":["toc"],"keywords":"文章关键词","updated":"2023-11-07T14:10:58.014Z","img":"/medias/featureimages/0.webp","date":"2023-11-07T14:10:58.014Z","summary":"预处理器","_content":"# C语言学习笔记（三）\n## C语言进阶\n### 1.预处理器\n#### 1.1预处理\n>在源代码**编译前**对其进行一些**文本性质**操作\n\n**①**删除注释\n**②**插入`#include`指令包含的文件的内容\n**③**定义和替换由`#define`指令定义的符号\n**④**确定代码部分内容是否根据一些**条件编译**指令进行编译\n\n#### 1.2预定义符号\n>预处理器定义的符号，都有各自对应的含义\n\n**①**`__FILE__`：进行编译的源文件名\n**②**`__LINE__`：文件当前行的行号\n**③**`__DATE__`：文件被编译的日期\n**④**`__TIME__`：文件被编译的时间\n**⑤**`__STDC__`：若编译器遵循ANSI C，返回1\n\n#### 1.3#define\n**①普通替换**：`#define name stuff`\n>每当`name`出现在这条命令之后，都会被替换为`stuff`\n\n{%list%}\n若stuff非常长，可以将其分为好几行，每行除了最后一行都要加上反斜杠\\\n{%endlist%}\n{%warning%}\n在使用该命令时，最好不要在末尾添加分号，而是在程序正文中添加，否则可能会多出一条空语句，在一些只能使用一条语句的地方会出错，如不使用代码块的if语句\n{%endwarning%}\n{%right%}\n宏的name全部大写，用于区分宏\n{%endright%}\n{%right%}\n使用宏定义类型，只需要修改宏的值就可改变类型\n{%endright%}\n**②带参数的宏**：`#define name(parameter-list) stuff`\n>`parameter-list`为参数列表，参数之间用逗号`,`相隔，类似于函数的形参，`stuff`为包含**参数列表中参数**的表达式\n**运用实例**：如果定义了一个宏`#define SQUARE(x) ((x) * (x))`，在代码块中输入`SQUARE(a)`，在预处理阶段会被替换为`((5) * (5))`\n\n{%list%}\n#name会被预处理器处理为\"name\"，a##b会被预处理器处理为ab\n{%endlist%}\n{%right%}\n宏本质上还是简单的替换操作，所以要避免其与正文中的其他操作符发生预料之外的作用，可以像上述一样采用()对每个参数和整体进行隔离\n{%endright%}\n{%warning%}\n宏中可以出现其他宏定义的符号，但是不能出现递归\n{%endwarning%}\n{%wrong%}\n其中name和(parameter-list)之间不能有空格\n{%endwrong%}\n**③带副作用的宏参数**\n>当宏参数在宏定义中出现不止一次时，若宏参数具有副作用，可能会带来无法预料的后果，副作用指**永久性的效果**，如`x+1`和`x++`，后者会永久改变x的值\n以下程序运行后结果`x = 6,y = 10,z = 9`，这是因为`z = MAX(x++,y++)`被替换为`z = ((x++)>(y++)?(x++):(y++))`，其中`y++`**执行了两次**\n```\n#define MAX(a,b) ((a)>(b)?(a):(b))\nx=5;\ny=8;\nz = MAX(x++,y++);\n```\n{%right%}\n为了避免这种情况，可以将宏需要使用的数据存储到临时变量中\n{%endright%}\n**④宏定义的移除**：`#undef name`\n**⑤命令行控制宏**：在命令行编译时**添加编译选项**对宏进行定义和修改\n>如`cc -DARRAY_SIZE=100 prog.c`，则就是将`ARRAY_SIZE`修改为100\n其他的选项还有`-Uname`（忽略宏`name`）以及`-Dname`（定义宏`name`）\n\n**⑥宏的利与弊**\n{%right%}\n宏比较适用于频繁使用的小型简单代码，因为函数的调用和返回也需要开支\n{%endright%}\n{%right%}\n宏是与类型无关的，有些参数无法传递给函数，比如说传递参数的类型\n{%endright%}\n>如`#define MALLOC(n,type) ((type*)malloc((n)*sizeof(type)))`\n{%warning%}\n宏会使得代码变得更长，因为宏的本质就是插入代码副本\n{%endwarning%}\n\n#### 1.4条件编译\n**①定义**：选择一部分代码在编译时是被**正常编译**还是被**忽略**\n**②格式**\n```\n#if constant-expression\n  statement0\n#elif constant-expression\n  statement1\n#else\n  statement2\n#endif\n```\n>`constant-expression`为常量表达式，常常为**宏**（和命令行控制宏一同使用），当其为**非零值**时，`statement`被**正常编译**，反之则被忽略\n`elif`、`else`子句出现的次数可以不限，只有当其前面**所有常量表达式均为假**时，且自身的常量表达式为真时，才被正常编译\n{%warning%}\n记住要以#endif结束条件编译\n{%endwarning%}\n\n**③定义判断**：判断某个宏是否被定义\n>若`symbol`被定义则为真\n`#if defined(symbol)`\n`#ifdef symbol`\n若`symbol`没有被定义则为真\n`#if !defined(symbol)`\n`#ifndef symbol`\n\n#### 1.5文件包含\n**①格式**：`#include <filename>`/`#include \"filename\"`\n>前者表示在**编译器定义的标准位置**寻找相关文件，后者表示在**源文件所在目录**寻找相关文件（如果没找到还是再去标准位置）\n{%right%}\ninclude的实质就是将对应文件内容复制到对应位置\n{%endright%}\n\n\n**②嵌套包含**：有些头文件中还会包含其他的头文件，可能会导致**某些头文件被包含多次**\n{%right%}\n可以使用条件编译避免这种情况\n{%endright%}\n>如下，`_TOUWENJIAN_H`为这个头文件的代号，当头文件被第一次包含时，其被定义为1，第二次被包含时，通过条件编译，他的所有内容**被忽略**\n\n```\n#ifndef _TOUWENJIAN_H\n#define _TOUWENJIAN_H 1\n    All the stuff that you want in the header file\n#endif \n```\n{%wrong%}\n应该避免多重包含，因为上述做法只能忽略重复读入内容，该文件还是会被多次读取\n{%endwrong%}\n#### 1.6命令行参数\n>C语言`main`函数有两个形参用于接收命令行参数，`int main (int argc,char **argv)`\n\n**①**`argc`：命令行参数的**数目**\n**②**`argv`：本质上是一个**指向字符指针的指针**，将命令行参数看作为一个**字符指针数组(以空指针结尾)**，该参数指向该数组的**第一个参数**\n\n{%list%}\n命令行第一个参数固定是程序的名称，不需要用户输入\n{%endlist%}\n{%warning%}\n注意命令行参数是字符数组，在C中，没有字符串\n{%endwarning%}\n![命令行参数](/image/C_5.png)\n\n#### 1.7其他预处理指令\n**①**`#error`：允许生成**错误信息**\n>`#error message`，其中`message`为错误提示信息\n\n**②**`#line`：定义下一行的**行号**，且可以修改**文件名**\n>`#line number \"strings\"`，其中`number`为下一行行号，`\"strings\"`为文件名\n{%list%}\n\"strings\"为可选选项\n{%endlist%}\n{%warning%}\n该命令会修改__LINE__和__FILE__\n{%endwarning%}\n**③**`#progma`：用于支持**因编译器而异**的特性，如向一个函数插入**内联的汇编代码**\n{%warning%}\n预处理器会忽略它不认识的#progma指令\n{%endwarning%}\n***\n### 2.I/O函数\n{%list%}\n包含stdio.h头文件\n{%endlist%}\n#### 2.1基本概念\n**①流**：C语言的I/O操作就是从程序移进或移出字节，这个**字节流**称为流\n>**标准流**：标准输入`stdin`，标准输出`stdout`和标准错误`stderr`\n{%list%}\n通常标准输入设备为键盘，标准输出/错误设备为终端或者屏幕\n{%endlist%}\n>**流的分类**\n**文本流**：零个或者多个字符，以**换行符**结束（UNIX系统）\n**二进制流**：完全根据**程序编写它们的形式**输入/出\n{%list%}\n流本质上是一个指向FILE数据结构的指针，每个流都有一个相应的FILE文件与它关联\n{%endlist%}\n{%right%}\n文本流的结束形式在不同的系统上可能不同，但是库函数会将标准形式（换行符）转化为对应的形式\n{%endright%}\n**②缓冲区**：字节流并不是直接从输入端到输出端，而是要经过一块称为缓冲区的**内存区域**\n{%list%}\n缺省情况下，I/O函数库为流动态分配一个缓冲区\n{%endlist%}\n>**输出缓冲区**：在**被写满**的时候才会被**写入（刷新）**到设备或者文件中\n**输入缓冲区**：同理，输入缓冲区**为空时**才会从设备或文件中**读取**数据\n{%list%}\n上述的缓冲为完全缓冲，但是通常情况下，流的缓冲状态由编译器决定，通常是请求输入的同时刷新输出缓冲区\n{%endlist%}\n{%right%}\n可以使用int fflush(FILE *stream)使输出缓冲区立即刷新\n{%endright%}\n**③标准I/O常量**\n>`EOF`：提示到达了文件末尾，所选择的实际值比一个字符要多几位\n`FOPEN_MAX`：一个程序最多能打开文件的数量，至少是8（包括三个标准流）\n`FILENAME_MAX`：合法文件名的最大长度\n\n**④临时文件**：使用一个文件**临时保存数据**，当程序结束时，该文件就被**删除**\n>`FILE *tmpfile(void)`：创建了一个**临时文件**，以`\"wb+\"`模式打开，当**文件被关闭或程序终止**时，文件便被删除\n{%list%}\n若该文件需要需以其他模式打开，或者需要由一个程序打开，由另一个程序读取，都不适用临时文件\n{%endlist%}\n>`char *tmpnam(char *name)`：给临时文件命名，参数需是一个指向长度**至少为`L_tmpnam`**的字符数组的指针。若参数为NULL，函数返回一个**静态数组**的指针，该数组包含了文件名。\n\n**⑤错误报告**\n>`void perror(char const *message)`：若`message`不为`NULL`，则该函数**打印出这个字符串**，后面跟一个分号和一个空格，并打印出一条用于解释当前`errno`当前**错误代码的信息**\n{%list%}\nerrno定义在errno.h头文件中\n{%endlist%}\n{%warning%}\n只有当库函数失败时才会刷新errno，故需要在一些可能出错的地方判断错误是否发生，再调用该函数提示错误信息\n{%endwarning%}\n#### 2.2流的操控\n**①创建流**：调用`fopen`创建一个流，指定访问的文件/设备以及他们的**访问方式**，并**初始化**`FILE`结构\n>**函数原型**：`FILE *fopen(char const *name,char const *mode);`\n其中`name`是希望打开的**设备和文件的名字**，`mode`提示流的**操作模式**以及**分类**\n{%warning%}\n时刻检查fopen的返回值\n{%endwarning%}\n>**`mode`参数**\n**文本流**：`\"r\"`只读 、`\"w\"`只写、`\"a\"`添加\n**二进制流**：`\"rb\"`只读、`\"wb\"`只写、`\"ab\"`添加\n\n**②操作模式**\n>**读**：访问文件**必须已经存在**\n**写**：访问文件存在，**原来的内容就会被删除**，若不存在，则会**新创建一个**\n**添加**：类似于写，但是不会覆盖内容，而是在**尾部**写入新内容\n\n**③重新打开一个流**\n>`FILE *freopen(char const *filename,char const *mode,FILE *stream)`\n该函数试图关闭`stream`对应的流，并**重新打开**它\n\n**④流的位置控制**\n>`long ftell(FILE *stream)`：返回**下一个读写将要开始位置**距离**文件起始位置**的偏移量\n{%list%}\n对于二进制流，这个偏移量为字节数，对于文本流，这个值取决于系统（由于行末字符映射）\n{%endlist%}\n\n>`int fseek(FILE *stream,long offset,int from)`：改变下一次读写的起始位置，由`from`和`offset`决定\n\n>`from`参数有三种值\n`SEEK_SET`：从流的**起始位置**起`offset`个字节，`offset`必须是一个**非负值**\n`SEEK_CUR`：从流的**当前位置**起`offset`个字节，`offset`**可正可负**\n`SEEK_END`：从流的**尾部位置**起`offset`个字节，`offset`**可正可负**，当其为正数时，写入将扩展这个文件，读取将获得一条“到达文件尾的信息”\n{%list%}\n文本流为了其可移植性，当from为SEEK_END或者SEEK_CUR时，offset需为0，from为SEEK_SET，offset需为同一个流中之前调用ftell获得的返回值\n{%endlist%}\n{%warning%}\n二进制流中，SEEK_END定位可能不被支持\n{%endwarning%}\n{%wrong%}\n调用fseek之后，行末指示字符将会被清除\n{%endwrong%}\n\n**⑤改变缓冲方式**\n{%list%}\n只有当指定流被打开但是还没有对其进行操作时，才能调用这些函数\n{%endlist%}\n>`void setbuf(FILE *stream,char *buf)`：为流设置了**一个数组**作为其缓冲区，该数组长度必须为`BUFSIZ`（定义在stdio.h中）\n{%list%}\n若数组指针为空，则关闭流的所有缓冲方式，按照程序规定的方式读取写入（操作系统有自己的缓冲方式）\n{%endlist%}\n\n>`int setvbuf(FILE *stream,char *buf,int mode,size_t size)`：其中，`mode`用于指定**缓冲的类型**，`buf`用于指向缓冲区，`size`用于指定缓冲区大小\n\n>`mode`的参数类型\n`_IOFBF`：完全缓冲\n`_IONBF`：不缓冲\n`_IOLBF`：行缓冲，即每当换行符被写入缓冲区时，缓冲区便刷新\n{%right%}\n缓冲区的大小最好是BUFSIZ的整数倍（与磁盘簇大小相匹配），否则可能会需要一些额外的磁盘操作\n{%endright%}\n\n**⑥状态判断**\n>`int feof(FILE *stream)`：若流处于**文件尾**，则返回真\n`int ferror(FILE *stream)`：若流出现**读写错误**，函数返回真\n`int clearerr(FILE *stream)`：**重置**流的错误状态\n\n**⑦关闭流**：调用`fclose`关闭对应流（防止与其关联的设备文件被访问），并释放`FILE`文件\n>`int fclose(FILE *f);`\n如果执行成功，则返回零值，否则返回`EOF`\n{%list%}\n如果关闭的是输出流，那么这个函数还会刷新缓冲区\n{%endlist%}\n\n#### 2.3I/O函数\n{%list%}\n依据处理数据的类型将其分为单个字符、文本行和二进制数据三种\n{%endlist%}\n**①字符I/O**\n>**字符输入（读取）**\n`int getchar(void)`\n`int getc(FILE *stream)`\n`int fgetc(FILE *stream)`\n每次从流中读取**下一个字符**，如果不存在更多的字符，则返回`EOF`（整型）\n{%list%}\n其中getchar从标准输入读取字符\n{%endlist%}\n>**字符输出（写入）**\n`int putchar(int character)`\n`int putc(int character,FILE *stream)`\n`int fputc(int character,FILE *stream)`\n{%list%}\n同上，putchar写入到标准输出中\n{%endlist%}\n{%warning%}\n在打印前，这些函数会整型参数裁剪为一个无符号字符型\n{%endwarning%}\n{%right%}\n其中fgetc和fputc是函数，其余是宏\n{%endright%}\n>**字符回退**\n`int ungetc(int character,FILE *stream)`\n将一个字符返回到流中，这样它可以**被重新读入**\n{%list%}\n注意退回到流和写入到流是不同的，前者类似于压栈，后者类似于队列的增长\n{%endlist%}\n{%warning%}\n如果流的位置之后被改变，则退回的字符会被丢弃\n{%endwarning%}\n\n**②未格式化行I/O（字符串）**\n>**字符串读取**\n`char *fgets(char *buffer,int buff_size,FILE *stream)`\n`char *gets(char *buffer)`\n\n>从`stream`流中读取字符并将他们**复制到**`buffer`中，当读取到**一个换行符**或者字符数达到`buffer_size-1`个时就**停止读取**，并在**缓冲区结尾**添加一个`nul`字节，使其成为一个字符串\n\n>若没有读取到字符（**到了文章尾**），就返回`NULL`，否则返回`buffer`对应的指针\n{%list%}\ngets与fgets类似，是从标准输入中读取，但是gets不会存储换行符\n{%endlist%}\n{%warning%}\ngets函数没有缓冲区长度，所以很可能导致缓冲区溢出，只适用于玩具程序\n{%endwarning%}\n>**字符串写入**\n`int fputs(char const *buffer,FILE *stream)`\n`int puts(char const *buffer)`\n\n>传递给`fputs`的缓冲区**必须包含一个字符串**，并将该字符串**逐字符**写入流中，如果写入时发生了错误，则返回`EOF`\n{%list%}\nputs与fputs类似，写入到标注输入中，且puts在写入一个字符串后，会再输出一个换行符\n{%endlist%}\n\n**③二进制I/O**\n>`size_t fread(void *buffer,size_t size,size_t count,FILE *stream)`\n`size_t fwrite(void *buffer,size_t size,size_t count,FILE *stream)`\n\n>其中`buffer`指向用于**保存数据的内存位置**，`size`为缓冲区**每个元素的字节数**（使用sizeof计算即可），`count`为**读取或者写入的元素数**，`stream`为指定的流\n{%right%}\n二进制I/O的效率非常高，省区了转换的开销\n{%endright%}\n#### 2.4格式化读取\n{%right%}\n内容较多且重要，故单列出来\n{%endright%}\n**①scanf家族**\n>`int fscanf(FILE *stream,char const *format,...)`\n`int scanf(char const *format,...)`\n`int sscanf(char const *string,char const *format,...)`\n\n>当格式化字符串到达**末尾**或者读取的输入**不再与格式匹配**时，输入停止，返回**转化的输入值的数目**，若没有读取输入值，则返回`EOF`\n{%list%}\n这些函数都从一定的输入源读入数据，其中fscanf为stream指定的流，scanf为标准输入，sscanf为string指向的字符串\n{%endlist%}\n{%list%}\n其中format为一个字符串，表示转换的格式代码\n{%endlist%}\n{%list%}\n其中...表示一个可变长度的指针列表，从输入源读取的数据转化后就存储在这些指针指向的位置\n{%endlist%}\n\n\n**②format字符串**：`format`字符串可能包含三种内容，即**空白字符**、**格式代码**和**其他字符**\n>**空白字符**：**丢弃**输入中的**所有**空白字符\n\n>**格式代码**：指定函数将**如何解释**接下来的**输入字符**\n\n>**其他字符**：当出现其他字符时，**下一个输入字符**必须与他匹配，若匹配，输入字符将被**丢弃**，若不匹配，则直接结束\n\n**③scanf格式代码**：以`%`开头，后面接一个**可选的星号（`*`）**、**可选的宽度**、**可选的限定符**和**格式代码**\n>**星号（`*`）**：使转换后的值被**丢弃**而不是被存储\n{%right%}\n可以用于跳过不需要的字符\n{%endright%}\n>**宽度**：用于**限制**读取的输入字符的**个数**\n{%list%}\n若没有限定宽度，则遇到空白字符停止\n{%endlist%}\n>**限定符**：修改一些**格式代码的含义**，主要是指定**参数的长度**，有`h`、`l`、`L`\n{%list%}\nh修饰整型和无符号数，表示short和unsigned short，l修饰整型、无符号数和浮点型表示long、unsigned long和double，L修饰浮点型表示long double\n{%endlist%}\n{%right%}\n在转换short、long和long double时，采用适当的限定符，提高程序可移植性\n{%endright%}\n>**格式代码**：一个**单字符**，表明如何解释输入字符\n{%list%}\nc表示char，d表示十进制int，u表示十进制无符号数，f表示浮点数等等\n{%endlist%}\n\n#### 2.5格式化写入\n**①printf家族**\n>`int fprintf(FILE *stream,char const *format,...)`\n`int printf(char const *format,...)`\n`int sprintf(char const *buffer,char const *format,...)`\n\n>根据`format`字符串将参数列表的值**格式化**，并输出到一定的**输出源**中，返回值为实际输出的字符数\n\n{%list%}\n其中fprintf为stream指定的流，printf为标准输入，sprintf为buffer指向的缓冲区\n{%endlist%}\n{%warning%}\n使用sprintf要注意缓冲区的溢出问题\n{%endwarning%}\n\n**②format格式代码**：由`%`开头，后跟零个或多个**标志字符**、可选的**最小字段宽度**、可选的**精度**、可选的**修改符**以及**转换类型**\n\n>**标志字符**：决定其表现形式，如**对齐**、**填充格式**等\n\n>**字段宽度**：指定出现在结果中的**最小字符数**，如果值的字符数小于该值，则对其进行**填充**\n\n>**精度**：以**一个句号开头**，后跟一个可选的**十进制整数**，不同**转换类型**的格式也不尽相同，对于`f`是规定**小数点后的位数**，对于`s`则是指定被转换的**最多字符**\n\n>**修改符**：类似于`scanf`格式代码中的限定符，指定**长短类型**\n\n>**转换类型**：转化为那种**数据类型**、**格式**和**进制**等，常用的有整数`d`、字符串`s`和浮点数`f`\n{%right%}\n其中字段宽度和精度可以用星号替代，由print的下一个参数指定\n{%endright%}\n{%warning%}\n当字符或短整数作为printf的参数时，会被先转化为整数，需要使用修改符，修改符在转换发生之前将其转换为对应类型，同样在长整型和int长度不同的环境中也需要对应的修改符指明其长度\n{%endwarning%}\n\n***\n### 3.标准函数库\n**3.1整型函数**\n**①算数**\n>`int abs(int value)`：返回**绝对值**\n`div_t div(int x,int y)`：将第二个参数除以第一个参数，产生**商**和**余数**，其中商是**最靠近精确解**的整数，其中`div_t`是一个结构，其中`quot`是商。`rem`是余数\n{%list%}\n都有对应的处理长整型的版本\n{%endlist%}\n{%warning%}\n/操作符的除法运算结果并未精确定义，当其操作数任一为负数且不能整除时，商和精确解的舍入关系取决于编译器\n{%endwarning%}\n**②随机数**\n>`int rand (void)`：返回一个0至RAND_MAX区间内的**伪随机数**\n{%right%}\n为了得到特定范围的伪随机数，可以对其进行取模并添加偏移量\n{%endright%}\n>`void srand(unsigned int seed)`：利用`seed`对`rand`进行初始化\n{%right%}\nseed常常采用每天的时间，即srand((unsigned int)time(0))\n{%endright%}\n**③字符串转化**\n\n**3.2浮点型函数**\n**①算数**\n>`double sqrt(double x)`：取平方根\n`double exp(double x)`：返回以e的x次幂\n`double floor(double x)`：返回不大于参数的最大整数\n`double ceil(double x)`：返回不小于参数的最小整数\n`double fabs(double x)`：返回参数的绝对值\n`double fmod(double x,double y)`：返回x除以y的余数\n{%wrong%}\n参数需要在定义域内，结果需要在double所能表示的范围内\n{%endwrong%}\n**②三角函数**：`sin`、`cos`、`tan`、`asin`、`acos`、`atan`\n>`double sin(double angle)`\n{%list%}\nsin、cos、tan的参数是弧度，asin、acos、atan的参数范围从-1至1\n{%endlist%}\n**③对数和指数函数**\n>`double exp(double x)`：e的x次幂\n`double pow(double x,double y)`：x的y次幂，其中x不能是负数，y必须是整数\n`double log(double x)`：以e为底的对数\n`double log10(double x)`：以10为底的对数\n{%right%}\n可以采用换底公式计算任意底数的对数\n{%endright%}\n**④浮点数表示**\n>`double frexp(double value,int *exponent)`：该函数返回`fraction`，并将`exponent`存储到第二个参数指定位置，其中`fraction*2^exponent = value`\n`double ldexp(double fraction,int exponent)`：配合以上函数，还原该浮点数\n{%right%}\n用于浮点格式不兼容的机器之间传递浮点数\n{%endright%}\n{%warning%}\n要记得包含math.h头文件，绝大部分参数和返回值都是double类型\n{%endwarning%}\n**3.3时间与日期函数**\n{%list%}\n要记得包含time.h头文件\n{%endlist%}\n**①处理器时间**\n>`clock_t clock(void)`：返回从**程序开始**起处理器消耗的时间\n`clock_t`由编译器定义，通常是处理器时钟滴答的次数，可以将其除以`CLOCKS_PER_SEC`转化为秒\n{%right%}\n如果想要精确的执行时间，可以在程序（某段语句）开始处与结尾处，各放置一个clock()，将结果相减\n{%endright%}\n{%warning%}\n若操作系统不能追踪处理器时间，则返回已经流逝的实际时间数量\n{%endwarning%}\n**②当天时间**\n>`time_t time(time_t *returned_value)`：返回当前的时期和时间，并存储到参数指向位置，当机器无法提供时间或者时间值太大，就返回-1\n{%list%}\n不同的编译器有不同的格式，常见的形式是从某一特定时间开始流逝的秒数，在UNIX中，这个时间为1970年1月1日零点\n{%endlist%}\n**③日期和时间的转换**\n\n>`double difftime(time_t time1,time_t time2)`：计算`time1-time2`，并将其转化为秒\n{%warning%}\n不要直接调用两次time函数并相减\n{%endwarning%}\n`struct tm *gmtime(time_t const *time_value)`：将时间转换为**世界协调时间**\n`struct tm *localtime(time_t const *time_value)`：将时间转换为**当地时间**\n{%list%}\ntm结构包含了很多与时间有关的成员\n{%endlist%}\n>`char *ctime(time_t const *time_value)`：接收一个`time_t`的指针，返回一个对应时间的字符串\n`char *asctime(struct tm const *tm_ptr)`：将`tm`结构转化为与`ctime`结果一样的字符串\n{%list%}\n字符串格式是固定的，编译器通常将其保存在一个静态数组中，如果想要特定格式的字符串，可以调用strftime()\n{%endlist%}\n**3.4非本地跳转**\n{%list%}\n要记得包含setjmp.h头文件\n{%endlist%}\n**①含义**：类似于`goto`语句，但是**不局限于一个函数的作用域**之内\n**②相关函数**\n>`int setjmp(jmp_buf state)`：初始化一个`jmp_buf`变量，并将程序的状态信息保存到**跳转缓冲区**，调用`setjmp`的函数便称为**顶层函数**\n`void longjmp(jump_buf state,int value)`：使得跳转缓冲区的状态被恢复，从而立即跳转到**顶层函数**\n\n**3.5信号**\n{%list%}\n要记得包含signal.h头文件\n{%endlist%}\n**①含义**：信号表示一种**非程序本身**引发的事件\n**②标准定义的信号**\n>`SIGABRT`：程序请求异常终止，由`abort`函数引发，常见的错误是**算数溢出**以及**除零错误**\n`SIGFPE`：发生一个算数错误\n`SIGILL`：检测到非法指令，比如**指令版本不同**\n`SIGSEGV`：检测到对内存的非法访问，比如访问**未分配给该程序的内存**，或者出现**边界对齐错误**\n`SIGINT`：受到一个交互性注意信号\n`SIGTERM`：受到一个终止程序的请求\n\n**③信号处理**\n>`int raise(int sig)`：显示地引发一个信号\n`void (*signal(int sig,void(*handler)(int))) (int)`：指定程序对信号的反应，简化后的原型为`void(*signal()) (int)`，则`signal`是一个返回类型为函数指针（对应信号以前的处理函数）的函数，其所接受参数`sig`为标准定义的信号，`handler`为希望信号发生时调用的函数，当函数调用失败时，返回`SIG_ERR`\n{%list%}\n还可以将signal函数第二个参数替换为SIG_DFL，恢复对该信号的缺省反应；或者替换为SIG_IGN，使该信号被忽略\n{%endlist%}\n\n**3.6执行环境**\n**①终止程序**\n>`void abort(void)`：引发`SIGABRT`信号，若没有在程序中为其设置信号处理函数，则程序终止\n`void atexit(void(func)(void))`：把一些函数注册为**退出函数**，当程序**正常终止（调用`exit()`函数）**，退出函数将被调用\n{%warning%}\n注意该退出函数的格式\n{%endwarning%}\n>`void exit(int status)`：当该函数被调用时，所有被`atexit()`注册的函数将按照他们注册的顺序被**反序**调用，随后刷新所有缓冲区，关闭所有文件，并删除所有临时文件\n{%list%}\nmain函数return语句相当将返回值传递给exit()并调用它\n{%endlist%}\n{%wrong%}\n由atexit()注册的函数中不能包含exit()，其结果是未定义的\n{%endwrong%}\n**②断言**\n>`void assert(int expression)`：当`expression`为假时，向**标准错误**打印一条诊断信息并**终止程序**\n{%list%}\n本质上是一个宏，其诊断信息的格式由编译器定义\n{%endlist%}\n{%right%}\n可以通过定义NDEBUG宏消除所有断言，可以将其定义为任意值\n{%endright%}\n**③环境与系统**\n>`char *getenv(char const *name)`：在**环境**中查找一个特定的名字，如果找到则返回一个**不能修改**的字符指针，否则返回`NULL`\n{%list%}\n环境：一个由编译器定义的名字/值对的列表\n{%endlist%}\n>`void system(char const *command)`：将字符串传递给**操作系统**，将其作为一条命令，由**系统的命令处理器**运行\n\n**④排序与查找**\n>`qsort()`：以**升序**的方式对数组进行排序，与**类型无关**，其函数原型如下\n`void qsort(void *base,size_t n_elements,size_t el_size,int(*compare)(void const *,void const *))`\n{%list%}\n其中第一个参数指向需要排序的数组，第二个参数指定数组中元素的数目，第三个参数指定每个元素的长度，第四个参数时一个用于比较的函数指针\n{%endlist%}\n>`bsearch()`：在一个已经**排好序**的数组中用**二分法**查找一个特定的元素，其函数原型如下\n`void *bsearch(void const *key,void const *base,size_t n_elements,size_t el_size,int(*compare)(void const *,void const *))`\n{%list%}\n其中第一个参数时需要查找的值，第二个参数指向查找的数组，第三个参数指定数组的数目，第四个参数是每个元素的长度，最后一个参数是用于比较的函数指针\n{%endlist%}\n\n**3.7本地化**\n{%list%}\n详细见《C与指针》p347-349\n{%endlist%}\n**①**`locale`：一组**特定的参数**，每个国家和地区都不同\n**②设置**`locale`\n>`char *setlocale(int category,char const *locale)`\n其中，`category`用于指定`locale`的哪个部分需要被修改，`locale`指定新的`locale`，若该参数为`NULL`，则返回当前的`locale`\n\n>`setlocale`**参数列表**\n`LC_ALL`：整个`locale`\n`LC_COLLATE`：**字符集对照序列**，将影响`strcoll`和`strxfrm`函数的行为\n`LC_CTYPE`：定义于`ctype.h`中的函数所使用的**字符类型分类**信息\n`LC_MONETARY`：**格式化货币值**使用的相关字符\n`LC_NUMERIC`：**格式化非货币值**使用的相关字符\n`LC_TIME`：`strftime`函数的行为\n","source":"_posts/C语言学习笔记（三）.md","raw":"---\ntitle: C语言学习笔记（三）\nseo_title: seo名称\ntoc: true\nindent: true\ntop: false\ncomments: true\narchive: true\ncover: false\nmathjax: false\npin: false\ntop_meta: false\nbottom_meta: false\nsidebar:\n  - toc\ntag:\n  - C语言\n  - 《C和指针》\ncategories: 编程语言\nkeywords: 文章关键词\nupdated: ''\nimg: /medias/featureimages/0.webp\ndate:\nsummary: 预处理器\n---\n# C语言学习笔记（三）\n## C语言进阶\n### 1.预处理器\n#### 1.1预处理\n>在源代码**编译前**对其进行一些**文本性质**操作\n\n**①**删除注释\n**②**插入`#include`指令包含的文件的内容\n**③**定义和替换由`#define`指令定义的符号\n**④**确定代码部分内容是否根据一些**条件编译**指令进行编译\n\n#### 1.2预定义符号\n>预处理器定义的符号，都有各自对应的含义\n\n**①**`__FILE__`：进行编译的源文件名\n**②**`__LINE__`：文件当前行的行号\n**③**`__DATE__`：文件被编译的日期\n**④**`__TIME__`：文件被编译的时间\n**⑤**`__STDC__`：若编译器遵循ANSI C，返回1\n\n#### 1.3#define\n**①普通替换**：`#define name stuff`\n>每当`name`出现在这条命令之后，都会被替换为`stuff`\n\n{%list%}\n若stuff非常长，可以将其分为好几行，每行除了最后一行都要加上反斜杠\\\n{%endlist%}\n{%warning%}\n在使用该命令时，最好不要在末尾添加分号，而是在程序正文中添加，否则可能会多出一条空语句，在一些只能使用一条语句的地方会出错，如不使用代码块的if语句\n{%endwarning%}\n{%right%}\n宏的name全部大写，用于区分宏\n{%endright%}\n{%right%}\n使用宏定义类型，只需要修改宏的值就可改变类型\n{%endright%}\n**②带参数的宏**：`#define name(parameter-list) stuff`\n>`parameter-list`为参数列表，参数之间用逗号`,`相隔，类似于函数的形参，`stuff`为包含**参数列表中参数**的表达式\n**运用实例**：如果定义了一个宏`#define SQUARE(x) ((x) * (x))`，在代码块中输入`SQUARE(a)`，在预处理阶段会被替换为`((5) * (5))`\n\n{%list%}\n#name会被预处理器处理为\"name\"，a##b会被预处理器处理为ab\n{%endlist%}\n{%right%}\n宏本质上还是简单的替换操作，所以要避免其与正文中的其他操作符发生预料之外的作用，可以像上述一样采用()对每个参数和整体进行隔离\n{%endright%}\n{%warning%}\n宏中可以出现其他宏定义的符号，但是不能出现递归\n{%endwarning%}\n{%wrong%}\n其中name和(parameter-list)之间不能有空格\n{%endwrong%}\n**③带副作用的宏参数**\n>当宏参数在宏定义中出现不止一次时，若宏参数具有副作用，可能会带来无法预料的后果，副作用指**永久性的效果**，如`x+1`和`x++`，后者会永久改变x的值\n以下程序运行后结果`x = 6,y = 10,z = 9`，这是因为`z = MAX(x++,y++)`被替换为`z = ((x++)>(y++)?(x++):(y++))`，其中`y++`**执行了两次**\n```\n#define MAX(a,b) ((a)>(b)?(a):(b))\nx=5;\ny=8;\nz = MAX(x++,y++);\n```\n{%right%}\n为了避免这种情况，可以将宏需要使用的数据存储到临时变量中\n{%endright%}\n**④宏定义的移除**：`#undef name`\n**⑤命令行控制宏**：在命令行编译时**添加编译选项**对宏进行定义和修改\n>如`cc -DARRAY_SIZE=100 prog.c`，则就是将`ARRAY_SIZE`修改为100\n其他的选项还有`-Uname`（忽略宏`name`）以及`-Dname`（定义宏`name`）\n\n**⑥宏的利与弊**\n{%right%}\n宏比较适用于频繁使用的小型简单代码，因为函数的调用和返回也需要开支\n{%endright%}\n{%right%}\n宏是与类型无关的，有些参数无法传递给函数，比如说传递参数的类型\n{%endright%}\n>如`#define MALLOC(n,type) ((type*)malloc((n)*sizeof(type)))`\n{%warning%}\n宏会使得代码变得更长，因为宏的本质就是插入代码副本\n{%endwarning%}\n\n#### 1.4条件编译\n**①定义**：选择一部分代码在编译时是被**正常编译**还是被**忽略**\n**②格式**\n```\n#if constant-expression\n  statement0\n#elif constant-expression\n  statement1\n#else\n  statement2\n#endif\n```\n>`constant-expression`为常量表达式，常常为**宏**（和命令行控制宏一同使用），当其为**非零值**时，`statement`被**正常编译**，反之则被忽略\n`elif`、`else`子句出现的次数可以不限，只有当其前面**所有常量表达式均为假**时，且自身的常量表达式为真时，才被正常编译\n{%warning%}\n记住要以#endif结束条件编译\n{%endwarning%}\n\n**③定义判断**：判断某个宏是否被定义\n>若`symbol`被定义则为真\n`#if defined(symbol)`\n`#ifdef symbol`\n若`symbol`没有被定义则为真\n`#if !defined(symbol)`\n`#ifndef symbol`\n\n#### 1.5文件包含\n**①格式**：`#include <filename>`/`#include \"filename\"`\n>前者表示在**编译器定义的标准位置**寻找相关文件，后者表示在**源文件所在目录**寻找相关文件（如果没找到还是再去标准位置）\n{%right%}\ninclude的实质就是将对应文件内容复制到对应位置\n{%endright%}\n\n\n**②嵌套包含**：有些头文件中还会包含其他的头文件，可能会导致**某些头文件被包含多次**\n{%right%}\n可以使用条件编译避免这种情况\n{%endright%}\n>如下，`_TOUWENJIAN_H`为这个头文件的代号，当头文件被第一次包含时，其被定义为1，第二次被包含时，通过条件编译，他的所有内容**被忽略**\n\n```\n#ifndef _TOUWENJIAN_H\n#define _TOUWENJIAN_H 1\n    All the stuff that you want in the header file\n#endif \n```\n{%wrong%}\n应该避免多重包含，因为上述做法只能忽略重复读入内容，该文件还是会被多次读取\n{%endwrong%}\n#### 1.6命令行参数\n>C语言`main`函数有两个形参用于接收命令行参数，`int main (int argc,char **argv)`\n\n**①**`argc`：命令行参数的**数目**\n**②**`argv`：本质上是一个**指向字符指针的指针**，将命令行参数看作为一个**字符指针数组(以空指针结尾)**，该参数指向该数组的**第一个参数**\n\n{%list%}\n命令行第一个参数固定是程序的名称，不需要用户输入\n{%endlist%}\n{%warning%}\n注意命令行参数是字符数组，在C中，没有字符串\n{%endwarning%}\n![命令行参数](/image/C_5.png)\n\n#### 1.7其他预处理指令\n**①**`#error`：允许生成**错误信息**\n>`#error message`，其中`message`为错误提示信息\n\n**②**`#line`：定义下一行的**行号**，且可以修改**文件名**\n>`#line number \"strings\"`，其中`number`为下一行行号，`\"strings\"`为文件名\n{%list%}\n\"strings\"为可选选项\n{%endlist%}\n{%warning%}\n该命令会修改__LINE__和__FILE__\n{%endwarning%}\n**③**`#progma`：用于支持**因编译器而异**的特性，如向一个函数插入**内联的汇编代码**\n{%warning%}\n预处理器会忽略它不认识的#progma指令\n{%endwarning%}\n***\n### 2.I/O函数\n{%list%}\n包含stdio.h头文件\n{%endlist%}\n#### 2.1基本概念\n**①流**：C语言的I/O操作就是从程序移进或移出字节，这个**字节流**称为流\n>**标准流**：标准输入`stdin`，标准输出`stdout`和标准错误`stderr`\n{%list%}\n通常标准输入设备为键盘，标准输出/错误设备为终端或者屏幕\n{%endlist%}\n>**流的分类**\n**文本流**：零个或者多个字符，以**换行符**结束（UNIX系统）\n**二进制流**：完全根据**程序编写它们的形式**输入/出\n{%list%}\n流本质上是一个指向FILE数据结构的指针，每个流都有一个相应的FILE文件与它关联\n{%endlist%}\n{%right%}\n文本流的结束形式在不同的系统上可能不同，但是库函数会将标准形式（换行符）转化为对应的形式\n{%endright%}\n**②缓冲区**：字节流并不是直接从输入端到输出端，而是要经过一块称为缓冲区的**内存区域**\n{%list%}\n缺省情况下，I/O函数库为流动态分配一个缓冲区\n{%endlist%}\n>**输出缓冲区**：在**被写满**的时候才会被**写入（刷新）**到设备或者文件中\n**输入缓冲区**：同理，输入缓冲区**为空时**才会从设备或文件中**读取**数据\n{%list%}\n上述的缓冲为完全缓冲，但是通常情况下，流的缓冲状态由编译器决定，通常是请求输入的同时刷新输出缓冲区\n{%endlist%}\n{%right%}\n可以使用int fflush(FILE *stream)使输出缓冲区立即刷新\n{%endright%}\n**③标准I/O常量**\n>`EOF`：提示到达了文件末尾，所选择的实际值比一个字符要多几位\n`FOPEN_MAX`：一个程序最多能打开文件的数量，至少是8（包括三个标准流）\n`FILENAME_MAX`：合法文件名的最大长度\n\n**④临时文件**：使用一个文件**临时保存数据**，当程序结束时，该文件就被**删除**\n>`FILE *tmpfile(void)`：创建了一个**临时文件**，以`\"wb+\"`模式打开，当**文件被关闭或程序终止**时，文件便被删除\n{%list%}\n若该文件需要需以其他模式打开，或者需要由一个程序打开，由另一个程序读取，都不适用临时文件\n{%endlist%}\n>`char *tmpnam(char *name)`：给临时文件命名，参数需是一个指向长度**至少为`L_tmpnam`**的字符数组的指针。若参数为NULL，函数返回一个**静态数组**的指针，该数组包含了文件名。\n\n**⑤错误报告**\n>`void perror(char const *message)`：若`message`不为`NULL`，则该函数**打印出这个字符串**，后面跟一个分号和一个空格，并打印出一条用于解释当前`errno`当前**错误代码的信息**\n{%list%}\nerrno定义在errno.h头文件中\n{%endlist%}\n{%warning%}\n只有当库函数失败时才会刷新errno，故需要在一些可能出错的地方判断错误是否发生，再调用该函数提示错误信息\n{%endwarning%}\n#### 2.2流的操控\n**①创建流**：调用`fopen`创建一个流，指定访问的文件/设备以及他们的**访问方式**，并**初始化**`FILE`结构\n>**函数原型**：`FILE *fopen(char const *name,char const *mode);`\n其中`name`是希望打开的**设备和文件的名字**，`mode`提示流的**操作模式**以及**分类**\n{%warning%}\n时刻检查fopen的返回值\n{%endwarning%}\n>**`mode`参数**\n**文本流**：`\"r\"`只读 、`\"w\"`只写、`\"a\"`添加\n**二进制流**：`\"rb\"`只读、`\"wb\"`只写、`\"ab\"`添加\n\n**②操作模式**\n>**读**：访问文件**必须已经存在**\n**写**：访问文件存在，**原来的内容就会被删除**，若不存在，则会**新创建一个**\n**添加**：类似于写，但是不会覆盖内容，而是在**尾部**写入新内容\n\n**③重新打开一个流**\n>`FILE *freopen(char const *filename,char const *mode,FILE *stream)`\n该函数试图关闭`stream`对应的流，并**重新打开**它\n\n**④流的位置控制**\n>`long ftell(FILE *stream)`：返回**下一个读写将要开始位置**距离**文件起始位置**的偏移量\n{%list%}\n对于二进制流，这个偏移量为字节数，对于文本流，这个值取决于系统（由于行末字符映射）\n{%endlist%}\n\n>`int fseek(FILE *stream,long offset,int from)`：改变下一次读写的起始位置，由`from`和`offset`决定\n\n>`from`参数有三种值\n`SEEK_SET`：从流的**起始位置**起`offset`个字节，`offset`必须是一个**非负值**\n`SEEK_CUR`：从流的**当前位置**起`offset`个字节，`offset`**可正可负**\n`SEEK_END`：从流的**尾部位置**起`offset`个字节，`offset`**可正可负**，当其为正数时，写入将扩展这个文件，读取将获得一条“到达文件尾的信息”\n{%list%}\n文本流为了其可移植性，当from为SEEK_END或者SEEK_CUR时，offset需为0，from为SEEK_SET，offset需为同一个流中之前调用ftell获得的返回值\n{%endlist%}\n{%warning%}\n二进制流中，SEEK_END定位可能不被支持\n{%endwarning%}\n{%wrong%}\n调用fseek之后，行末指示字符将会被清除\n{%endwrong%}\n\n**⑤改变缓冲方式**\n{%list%}\n只有当指定流被打开但是还没有对其进行操作时，才能调用这些函数\n{%endlist%}\n>`void setbuf(FILE *stream,char *buf)`：为流设置了**一个数组**作为其缓冲区，该数组长度必须为`BUFSIZ`（定义在stdio.h中）\n{%list%}\n若数组指针为空，则关闭流的所有缓冲方式，按照程序规定的方式读取写入（操作系统有自己的缓冲方式）\n{%endlist%}\n\n>`int setvbuf(FILE *stream,char *buf,int mode,size_t size)`：其中，`mode`用于指定**缓冲的类型**，`buf`用于指向缓冲区，`size`用于指定缓冲区大小\n\n>`mode`的参数类型\n`_IOFBF`：完全缓冲\n`_IONBF`：不缓冲\n`_IOLBF`：行缓冲，即每当换行符被写入缓冲区时，缓冲区便刷新\n{%right%}\n缓冲区的大小最好是BUFSIZ的整数倍（与磁盘簇大小相匹配），否则可能会需要一些额外的磁盘操作\n{%endright%}\n\n**⑥状态判断**\n>`int feof(FILE *stream)`：若流处于**文件尾**，则返回真\n`int ferror(FILE *stream)`：若流出现**读写错误**，函数返回真\n`int clearerr(FILE *stream)`：**重置**流的错误状态\n\n**⑦关闭流**：调用`fclose`关闭对应流（防止与其关联的设备文件被访问），并释放`FILE`文件\n>`int fclose(FILE *f);`\n如果执行成功，则返回零值，否则返回`EOF`\n{%list%}\n如果关闭的是输出流，那么这个函数还会刷新缓冲区\n{%endlist%}\n\n#### 2.3I/O函数\n{%list%}\n依据处理数据的类型将其分为单个字符、文本行和二进制数据三种\n{%endlist%}\n**①字符I/O**\n>**字符输入（读取）**\n`int getchar(void)`\n`int getc(FILE *stream)`\n`int fgetc(FILE *stream)`\n每次从流中读取**下一个字符**，如果不存在更多的字符，则返回`EOF`（整型）\n{%list%}\n其中getchar从标准输入读取字符\n{%endlist%}\n>**字符输出（写入）**\n`int putchar(int character)`\n`int putc(int character,FILE *stream)`\n`int fputc(int character,FILE *stream)`\n{%list%}\n同上，putchar写入到标准输出中\n{%endlist%}\n{%warning%}\n在打印前，这些函数会整型参数裁剪为一个无符号字符型\n{%endwarning%}\n{%right%}\n其中fgetc和fputc是函数，其余是宏\n{%endright%}\n>**字符回退**\n`int ungetc(int character,FILE *stream)`\n将一个字符返回到流中，这样它可以**被重新读入**\n{%list%}\n注意退回到流和写入到流是不同的，前者类似于压栈，后者类似于队列的增长\n{%endlist%}\n{%warning%}\n如果流的位置之后被改变，则退回的字符会被丢弃\n{%endwarning%}\n\n**②未格式化行I/O（字符串）**\n>**字符串读取**\n`char *fgets(char *buffer,int buff_size,FILE *stream)`\n`char *gets(char *buffer)`\n\n>从`stream`流中读取字符并将他们**复制到**`buffer`中，当读取到**一个换行符**或者字符数达到`buffer_size-1`个时就**停止读取**，并在**缓冲区结尾**添加一个`nul`字节，使其成为一个字符串\n\n>若没有读取到字符（**到了文章尾**），就返回`NULL`，否则返回`buffer`对应的指针\n{%list%}\ngets与fgets类似，是从标准输入中读取，但是gets不会存储换行符\n{%endlist%}\n{%warning%}\ngets函数没有缓冲区长度，所以很可能导致缓冲区溢出，只适用于玩具程序\n{%endwarning%}\n>**字符串写入**\n`int fputs(char const *buffer,FILE *stream)`\n`int puts(char const *buffer)`\n\n>传递给`fputs`的缓冲区**必须包含一个字符串**，并将该字符串**逐字符**写入流中，如果写入时发生了错误，则返回`EOF`\n{%list%}\nputs与fputs类似，写入到标注输入中，且puts在写入一个字符串后，会再输出一个换行符\n{%endlist%}\n\n**③二进制I/O**\n>`size_t fread(void *buffer,size_t size,size_t count,FILE *stream)`\n`size_t fwrite(void *buffer,size_t size,size_t count,FILE *stream)`\n\n>其中`buffer`指向用于**保存数据的内存位置**，`size`为缓冲区**每个元素的字节数**（使用sizeof计算即可），`count`为**读取或者写入的元素数**，`stream`为指定的流\n{%right%}\n二进制I/O的效率非常高，省区了转换的开销\n{%endright%}\n#### 2.4格式化读取\n{%right%}\n内容较多且重要，故单列出来\n{%endright%}\n**①scanf家族**\n>`int fscanf(FILE *stream,char const *format,...)`\n`int scanf(char const *format,...)`\n`int sscanf(char const *string,char const *format,...)`\n\n>当格式化字符串到达**末尾**或者读取的输入**不再与格式匹配**时，输入停止，返回**转化的输入值的数目**，若没有读取输入值，则返回`EOF`\n{%list%}\n这些函数都从一定的输入源读入数据，其中fscanf为stream指定的流，scanf为标准输入，sscanf为string指向的字符串\n{%endlist%}\n{%list%}\n其中format为一个字符串，表示转换的格式代码\n{%endlist%}\n{%list%}\n其中...表示一个可变长度的指针列表，从输入源读取的数据转化后就存储在这些指针指向的位置\n{%endlist%}\n\n\n**②format字符串**：`format`字符串可能包含三种内容，即**空白字符**、**格式代码**和**其他字符**\n>**空白字符**：**丢弃**输入中的**所有**空白字符\n\n>**格式代码**：指定函数将**如何解释**接下来的**输入字符**\n\n>**其他字符**：当出现其他字符时，**下一个输入字符**必须与他匹配，若匹配，输入字符将被**丢弃**，若不匹配，则直接结束\n\n**③scanf格式代码**：以`%`开头，后面接一个**可选的星号（`*`）**、**可选的宽度**、**可选的限定符**和**格式代码**\n>**星号（`*`）**：使转换后的值被**丢弃**而不是被存储\n{%right%}\n可以用于跳过不需要的字符\n{%endright%}\n>**宽度**：用于**限制**读取的输入字符的**个数**\n{%list%}\n若没有限定宽度，则遇到空白字符停止\n{%endlist%}\n>**限定符**：修改一些**格式代码的含义**，主要是指定**参数的长度**，有`h`、`l`、`L`\n{%list%}\nh修饰整型和无符号数，表示short和unsigned short，l修饰整型、无符号数和浮点型表示long、unsigned long和double，L修饰浮点型表示long double\n{%endlist%}\n{%right%}\n在转换short、long和long double时，采用适当的限定符，提高程序可移植性\n{%endright%}\n>**格式代码**：一个**单字符**，表明如何解释输入字符\n{%list%}\nc表示char，d表示十进制int，u表示十进制无符号数，f表示浮点数等等\n{%endlist%}\n\n#### 2.5格式化写入\n**①printf家族**\n>`int fprintf(FILE *stream,char const *format,...)`\n`int printf(char const *format,...)`\n`int sprintf(char const *buffer,char const *format,...)`\n\n>根据`format`字符串将参数列表的值**格式化**，并输出到一定的**输出源**中，返回值为实际输出的字符数\n\n{%list%}\n其中fprintf为stream指定的流，printf为标准输入，sprintf为buffer指向的缓冲区\n{%endlist%}\n{%warning%}\n使用sprintf要注意缓冲区的溢出问题\n{%endwarning%}\n\n**②format格式代码**：由`%`开头，后跟零个或多个**标志字符**、可选的**最小字段宽度**、可选的**精度**、可选的**修改符**以及**转换类型**\n\n>**标志字符**：决定其表现形式，如**对齐**、**填充格式**等\n\n>**字段宽度**：指定出现在结果中的**最小字符数**，如果值的字符数小于该值，则对其进行**填充**\n\n>**精度**：以**一个句号开头**，后跟一个可选的**十进制整数**，不同**转换类型**的格式也不尽相同，对于`f`是规定**小数点后的位数**，对于`s`则是指定被转换的**最多字符**\n\n>**修改符**：类似于`scanf`格式代码中的限定符，指定**长短类型**\n\n>**转换类型**：转化为那种**数据类型**、**格式**和**进制**等，常用的有整数`d`、字符串`s`和浮点数`f`\n{%right%}\n其中字段宽度和精度可以用星号替代，由print的下一个参数指定\n{%endright%}\n{%warning%}\n当字符或短整数作为printf的参数时，会被先转化为整数，需要使用修改符，修改符在转换发生之前将其转换为对应类型，同样在长整型和int长度不同的环境中也需要对应的修改符指明其长度\n{%endwarning%}\n\n***\n### 3.标准函数库\n**3.1整型函数**\n**①算数**\n>`int abs(int value)`：返回**绝对值**\n`div_t div(int x,int y)`：将第二个参数除以第一个参数，产生**商**和**余数**，其中商是**最靠近精确解**的整数，其中`div_t`是一个结构，其中`quot`是商。`rem`是余数\n{%list%}\n都有对应的处理长整型的版本\n{%endlist%}\n{%warning%}\n/操作符的除法运算结果并未精确定义，当其操作数任一为负数且不能整除时，商和精确解的舍入关系取决于编译器\n{%endwarning%}\n**②随机数**\n>`int rand (void)`：返回一个0至RAND_MAX区间内的**伪随机数**\n{%right%}\n为了得到特定范围的伪随机数，可以对其进行取模并添加偏移量\n{%endright%}\n>`void srand(unsigned int seed)`：利用`seed`对`rand`进行初始化\n{%right%}\nseed常常采用每天的时间，即srand((unsigned int)time(0))\n{%endright%}\n**③字符串转化**\n\n**3.2浮点型函数**\n**①算数**\n>`double sqrt(double x)`：取平方根\n`double exp(double x)`：返回以e的x次幂\n`double floor(double x)`：返回不大于参数的最大整数\n`double ceil(double x)`：返回不小于参数的最小整数\n`double fabs(double x)`：返回参数的绝对值\n`double fmod(double x,double y)`：返回x除以y的余数\n{%wrong%}\n参数需要在定义域内，结果需要在double所能表示的范围内\n{%endwrong%}\n**②三角函数**：`sin`、`cos`、`tan`、`asin`、`acos`、`atan`\n>`double sin(double angle)`\n{%list%}\nsin、cos、tan的参数是弧度，asin、acos、atan的参数范围从-1至1\n{%endlist%}\n**③对数和指数函数**\n>`double exp(double x)`：e的x次幂\n`double pow(double x,double y)`：x的y次幂，其中x不能是负数，y必须是整数\n`double log(double x)`：以e为底的对数\n`double log10(double x)`：以10为底的对数\n{%right%}\n可以采用换底公式计算任意底数的对数\n{%endright%}\n**④浮点数表示**\n>`double frexp(double value,int *exponent)`：该函数返回`fraction`，并将`exponent`存储到第二个参数指定位置，其中`fraction*2^exponent = value`\n`double ldexp(double fraction,int exponent)`：配合以上函数，还原该浮点数\n{%right%}\n用于浮点格式不兼容的机器之间传递浮点数\n{%endright%}\n{%warning%}\n要记得包含math.h头文件，绝大部分参数和返回值都是double类型\n{%endwarning%}\n**3.3时间与日期函数**\n{%list%}\n要记得包含time.h头文件\n{%endlist%}\n**①处理器时间**\n>`clock_t clock(void)`：返回从**程序开始**起处理器消耗的时间\n`clock_t`由编译器定义，通常是处理器时钟滴答的次数，可以将其除以`CLOCKS_PER_SEC`转化为秒\n{%right%}\n如果想要精确的执行时间，可以在程序（某段语句）开始处与结尾处，各放置一个clock()，将结果相减\n{%endright%}\n{%warning%}\n若操作系统不能追踪处理器时间，则返回已经流逝的实际时间数量\n{%endwarning%}\n**②当天时间**\n>`time_t time(time_t *returned_value)`：返回当前的时期和时间，并存储到参数指向位置，当机器无法提供时间或者时间值太大，就返回-1\n{%list%}\n不同的编译器有不同的格式，常见的形式是从某一特定时间开始流逝的秒数，在UNIX中，这个时间为1970年1月1日零点\n{%endlist%}\n**③日期和时间的转换**\n\n>`double difftime(time_t time1,time_t time2)`：计算`time1-time2`，并将其转化为秒\n{%warning%}\n不要直接调用两次time函数并相减\n{%endwarning%}\n`struct tm *gmtime(time_t const *time_value)`：将时间转换为**世界协调时间**\n`struct tm *localtime(time_t const *time_value)`：将时间转换为**当地时间**\n{%list%}\ntm结构包含了很多与时间有关的成员\n{%endlist%}\n>`char *ctime(time_t const *time_value)`：接收一个`time_t`的指针，返回一个对应时间的字符串\n`char *asctime(struct tm const *tm_ptr)`：将`tm`结构转化为与`ctime`结果一样的字符串\n{%list%}\n字符串格式是固定的，编译器通常将其保存在一个静态数组中，如果想要特定格式的字符串，可以调用strftime()\n{%endlist%}\n**3.4非本地跳转**\n{%list%}\n要记得包含setjmp.h头文件\n{%endlist%}\n**①含义**：类似于`goto`语句，但是**不局限于一个函数的作用域**之内\n**②相关函数**\n>`int setjmp(jmp_buf state)`：初始化一个`jmp_buf`变量，并将程序的状态信息保存到**跳转缓冲区**，调用`setjmp`的函数便称为**顶层函数**\n`void longjmp(jump_buf state,int value)`：使得跳转缓冲区的状态被恢复，从而立即跳转到**顶层函数**\n\n**3.5信号**\n{%list%}\n要记得包含signal.h头文件\n{%endlist%}\n**①含义**：信号表示一种**非程序本身**引发的事件\n**②标准定义的信号**\n>`SIGABRT`：程序请求异常终止，由`abort`函数引发，常见的错误是**算数溢出**以及**除零错误**\n`SIGFPE`：发生一个算数错误\n`SIGILL`：检测到非法指令，比如**指令版本不同**\n`SIGSEGV`：检测到对内存的非法访问，比如访问**未分配给该程序的内存**，或者出现**边界对齐错误**\n`SIGINT`：受到一个交互性注意信号\n`SIGTERM`：受到一个终止程序的请求\n\n**③信号处理**\n>`int raise(int sig)`：显示地引发一个信号\n`void (*signal(int sig,void(*handler)(int))) (int)`：指定程序对信号的反应，简化后的原型为`void(*signal()) (int)`，则`signal`是一个返回类型为函数指针（对应信号以前的处理函数）的函数，其所接受参数`sig`为标准定义的信号，`handler`为希望信号发生时调用的函数，当函数调用失败时，返回`SIG_ERR`\n{%list%}\n还可以将signal函数第二个参数替换为SIG_DFL，恢复对该信号的缺省反应；或者替换为SIG_IGN，使该信号被忽略\n{%endlist%}\n\n**3.6执行环境**\n**①终止程序**\n>`void abort(void)`：引发`SIGABRT`信号，若没有在程序中为其设置信号处理函数，则程序终止\n`void atexit(void(func)(void))`：把一些函数注册为**退出函数**，当程序**正常终止（调用`exit()`函数）**，退出函数将被调用\n{%warning%}\n注意该退出函数的格式\n{%endwarning%}\n>`void exit(int status)`：当该函数被调用时，所有被`atexit()`注册的函数将按照他们注册的顺序被**反序**调用，随后刷新所有缓冲区，关闭所有文件，并删除所有临时文件\n{%list%}\nmain函数return语句相当将返回值传递给exit()并调用它\n{%endlist%}\n{%wrong%}\n由atexit()注册的函数中不能包含exit()，其结果是未定义的\n{%endwrong%}\n**②断言**\n>`void assert(int expression)`：当`expression`为假时，向**标准错误**打印一条诊断信息并**终止程序**\n{%list%}\n本质上是一个宏，其诊断信息的格式由编译器定义\n{%endlist%}\n{%right%}\n可以通过定义NDEBUG宏消除所有断言，可以将其定义为任意值\n{%endright%}\n**③环境与系统**\n>`char *getenv(char const *name)`：在**环境**中查找一个特定的名字，如果找到则返回一个**不能修改**的字符指针，否则返回`NULL`\n{%list%}\n环境：一个由编译器定义的名字/值对的列表\n{%endlist%}\n>`void system(char const *command)`：将字符串传递给**操作系统**，将其作为一条命令，由**系统的命令处理器**运行\n\n**④排序与查找**\n>`qsort()`：以**升序**的方式对数组进行排序，与**类型无关**，其函数原型如下\n`void qsort(void *base,size_t n_elements,size_t el_size,int(*compare)(void const *,void const *))`\n{%list%}\n其中第一个参数指向需要排序的数组，第二个参数指定数组中元素的数目，第三个参数指定每个元素的长度，第四个参数时一个用于比较的函数指针\n{%endlist%}\n>`bsearch()`：在一个已经**排好序**的数组中用**二分法**查找一个特定的元素，其函数原型如下\n`void *bsearch(void const *key,void const *base,size_t n_elements,size_t el_size,int(*compare)(void const *,void const *))`\n{%list%}\n其中第一个参数时需要查找的值，第二个参数指向查找的数组，第三个参数指定数组的数目，第四个参数是每个元素的长度，最后一个参数是用于比较的函数指针\n{%endlist%}\n\n**3.7本地化**\n{%list%}\n详细见《C与指针》p347-349\n{%endlist%}\n**①**`locale`：一组**特定的参数**，每个国家和地区都不同\n**②设置**`locale`\n>`char *setlocale(int category,char const *locale)`\n其中，`category`用于指定`locale`的哪个部分需要被修改，`locale`指定新的`locale`，若该参数为`NULL`，则返回当前的`locale`\n\n>`setlocale`**参数列表**\n`LC_ALL`：整个`locale`\n`LC_COLLATE`：**字符集对照序列**，将影响`strcoll`和`strxfrm`函数的行为\n`LC_CTYPE`：定义于`ctype.h`中的函数所使用的**字符类型分类**信息\n`LC_MONETARY`：**格式化货币值**使用的相关字符\n`LC_NUMERIC`：**格式化非货币值**使用的相关字符\n`LC_TIME`：`strftime`函数的行为\n","slug":"C语言学习笔记（三）","published":1,"_id":"clmkphbez00039gvd1augd3p2","layout":"post","photos":[],"link":"","content":"<h1 id=\"C语言学习笔记（三）\"><a href=\"#C语言学习笔记（三）\" class=\"headerlink\" title=\"C语言学习笔记（三）\"></a>C语言学习笔记（三）</h1><h2 id=\"C语言进阶\"><a href=\"#C语言进阶\" class=\"headerlink\" title=\"C语言进阶\"></a>C语言进阶</h2><h3 id=\"1-预处理器\"><a href=\"#1-预处理器\" class=\"headerlink\" title=\"1.预处理器\"></a>1.预处理器</h3><h4 id=\"1-1预处理\"><a href=\"#1-1预处理\" class=\"headerlink\" title=\"1.1预处理\"></a>1.1预处理</h4><blockquote>\n<p>在源代码<strong>编译前</strong>对其进行一些<strong>文本性质</strong>操作</p>\n</blockquote>\n<p><strong>①</strong>删除注释<br><strong>②</strong>插入<code>#include</code>指令包含的文件的内容<br><strong>③</strong>定义和替换由<code>#define</code>指令定义的符号<br><strong>④</strong>确定代码部分内容是否根据一些<strong>条件编译</strong>指令进行编译</p>\n<h4 id=\"1-2预定义符号\"><a href=\"#1-2预定义符号\" class=\"headerlink\" title=\"1.2预定义符号\"></a>1.2预定义符号</h4><blockquote>\n<p>预处理器定义的符号，都有各自对应的含义</p>\n</blockquote>\n<p><strong>①</strong><code>__FILE__</code>：进行编译的源文件名<br><strong>②</strong><code>__LINE__</code>：文件当前行的行号<br><strong>③</strong><code>__DATE__</code>：文件被编译的日期<br><strong>④</strong><code>__TIME__</code>：文件被编译的时间<br><strong>⑤</strong><code>__STDC__</code>：若编译器遵循ANSI C，返回1</p>\n<h4 id=\"1-3-define\"><a href=\"#1-3-define\" class=\"headerlink\" title=\"1.3#define\"></a>1.3#define</h4><p><strong>①普通替换</strong>：<code>#define name stuff</code></p>\n<blockquote>\n<p>每当<code>name</code>出现在这条命令之后，都会被替换为<code>stuff</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 若stuff非常长，可以将其分为好几行，每行除了最后一行都要加上反斜杠\\</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 在使用该命令时，最好不要在末尾添加分号，而是在程序正文中添加，否则可能会多出一条空语句，在一些只能使用一条语句的地方会出错，如不使用代码块的if语句</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 宏的name全部大写，用于区分宏</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 使用宏定义类型，只需要修改宏的值就可改变类型</div>\n<p><strong>②带参数的宏</strong>：<code>#define name(parameter-list) stuff</code></p>\n<blockquote>\n<p><code>parameter-list</code>为参数列表，参数之间用逗号<code>,</code>相隔，类似于函数的形参，<code>stuff</code>为包含<strong>参数列表中参数</strong>的表达式<br><strong>运用实例</strong>：如果定义了一个宏<code>#define SQUARE(x) ((x) * (x))</code>，在代码块中输入<code>SQUARE(a)</code>，在预处理阶段会被替换为<code>((5) * (5))</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> #name会被预处理器处理为\"name\"，a##b会被预处理器处理为ab</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 宏本质上还是简单的替换操作，所以要避免其与正文中的其他操作符发生预料之外的作用，可以像上述一样采用()对每个参数和整体进行隔离</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 宏中可以出现其他宏定义的符号，但是不能出现递归</div>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 其中name和(parameter-list)之间不能有空格</div>\n<p><strong>③带副作用的宏参数</strong></p>\n<blockquote>\n<p>当宏参数在宏定义中出现不止一次时，若宏参数具有副作用，可能会带来无法预料的后果，副作用指<strong>永久性的效果</strong>，如<code>x+1</code>和<code>x++</code>，后者会永久改变x的值<br>以下程序运行后结果<code>x = 6,y = 10,z = 9</code>，这是因为<code>z = MAX(x++,y++)</code>被替换为<code>z = ((x++)&gt;(y++)?(x++):(y++))</code>，其中<code>y++</code><strong>执行了两次</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#define MAX(a,b) ((a)&gt;(b)?(a):(b))\nx=5;\ny=8;\nz = MAX(x++,y++);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 为了避免这种情况，可以将宏需要使用的数据存储到临时变量中</div>\n<p><strong>④宏定义的移除</strong>：<code>#undef name</code><br><strong>⑤命令行控制宏</strong>：在命令行编译时<strong>添加编译选项</strong>对宏进行定义和修改</p>\n<blockquote>\n<p>如<code>cc -DARRAY_SIZE=100 prog.c</code>，则就是将<code>ARRAY_SIZE</code>修改为100<br>其他的选项还有<code>-Uname</code>（忽略宏<code>name</code>）以及<code>-Dname</code>（定义宏<code>name</code>）</p>\n</blockquote>\n<p><strong>⑥宏的利与弊</strong></p>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 宏比较适用于频繁使用的小型简单代码，因为函数的调用和返回也需要开支</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 宏是与类型无关的，有些参数无法传递给函数，比如说传递参数的类型</div>\n<blockquote>\n<p>如<code>#define MALLOC(n,type) ((type*)malloc((n)*sizeof(type)))</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 宏会使得代码变得更长，因为宏的本质就是插入代码副本</div>\n\n<h4 id=\"1-4条件编译\"><a href=\"#1-4条件编译\" class=\"headerlink\" title=\"1.4条件编译\"></a>1.4条件编译</h4><p><strong>①定义</strong>：选择一部分代码在编译时是被<strong>正常编译</strong>还是被<strong>忽略</strong><br><strong>②格式</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#if constant-expression\n  statement0\n#elif constant-expression\n  statement1\n#else\n  statement2\n#endif<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><code>constant-expression</code>为常量表达式，常常为<strong>宏</strong>（和命令行控制宏一同使用），当其为<strong>非零值</strong>时，<code>statement</code>被<strong>正常编译</strong>，反之则被忽略<br><code>elif</code>、<code>else</code>子句出现的次数可以不限，只有当其前面<strong>所有常量表达式均为假</strong>时，且自身的常量表达式为真时，才被正常编译</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 记住要以#endif结束条件编译</div>\n\n<p><strong>③定义判断</strong>：判断某个宏是否被定义</p>\n<blockquote>\n<p>若<code>symbol</code>被定义则为真<br><code>#if defined(symbol)</code><br><code>#ifdef symbol</code><br>若<code>symbol</code>没有被定义则为真<br><code>#if !defined(symbol)</code><br><code>#ifndef symbol</code></p>\n</blockquote>\n<h4 id=\"1-5文件包含\"><a href=\"#1-5文件包含\" class=\"headerlink\" title=\"1.5文件包含\"></a>1.5文件包含</h4><p><strong>①格式</strong>：<code>#include &lt;filename&gt;</code>/<code>#include \"filename\"</code></p>\n<blockquote>\n<p>前者表示在<strong>编译器定义的标准位置</strong>寻找相关文件，后者表示在<strong>源文件所在目录</strong>寻找相关文件（如果没找到还是再去标准位置）</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> include的实质就是将对应文件内容复制到对应位置</div>\n\n\n<p><strong>②嵌套包含</strong>：有些头文件中还会包含其他的头文件，可能会导致<strong>某些头文件被包含多次</strong></p>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 可以使用条件编译避免这种情况</div>\n<blockquote>\n<p>如下，<code>_TOUWENJIAN_H</code>为这个头文件的代号，当头文件被第一次包含时，其被定义为1，第二次被包含时，通过条件编译，他的所有内容<strong>被忽略</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#ifndef _TOUWENJIAN_H\n#define _TOUWENJIAN_H 1\n    All the stuff that you want in the header file\n#endif <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 应该避免多重包含，因为上述做法只能忽略重复读入内容，该文件还是会被多次读取</div>\n<h4 id=\"1-6命令行参数\"><a href=\"#1-6命令行参数\" class=\"headerlink\" title=\"1.6命令行参数\"></a>1.6命令行参数</h4><blockquote>\n<p>C语言<code>main</code>函数有两个形参用于接收命令行参数，<code>int main (int argc,char **argv)</code></p>\n</blockquote>\n<p><strong>①</strong><code>argc</code>：命令行参数的<strong>数目</strong><br><strong>②</strong><code>argv</code>：本质上是一个<strong>指向字符指针的指针</strong>，将命令行参数看作为一个<strong>字符指针数组(以空指针结尾)<strong>，该参数指向该数组的</strong>第一个参数</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 命令行第一个参数固定是程序的名称，不需要用户输入</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 注意命令行参数是字符数组，在C中，没有字符串</div>\n<p><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/C_5.png\" alt=\"命令行参数\"></p>\n<h4 id=\"1-7其他预处理指令\"><a href=\"#1-7其他预处理指令\" class=\"headerlink\" title=\"1.7其他预处理指令\"></a>1.7其他预处理指令</h4><p><strong>①</strong><code>#error</code>：允许生成<strong>错误信息</strong></p>\n<blockquote>\n<p><code>#error message</code>，其中<code>message</code>为错误提示信息</p>\n</blockquote>\n<p><strong>②</strong><code>#line</code>：定义下一行的<strong>行号</strong>，且可以修改<strong>文件名</strong></p>\n<blockquote>\n<p><code>#line number \"strings\"</code>，其中<code>number</code>为下一行行号，<code>\"strings\"</code>为文件名</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> \"strings\"为可选选项</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 该命令会修改__LINE__和__FILE__</div>\n<p><strong>③</strong><code>#progma</code>：用于支持<strong>因编译器而异</strong>的特性，如向一个函数插入<strong>内联的汇编代码</strong></p>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 预处理器会忽略它不认识的#progma指令</div>\n<hr>\n<h3 id=\"2-I-x2F-O函数\"><a href=\"#2-I-x2F-O函数\" class=\"headerlink\" title=\"2.I/O函数\"></a>2.I/O函数</h3><div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 包含stdio.h头文件</div>\n<h4 id=\"2-1基本概念\"><a href=\"#2-1基本概念\" class=\"headerlink\" title=\"2.1基本概念\"></a>2.1基本概念</h4><p><strong>①流</strong>：C语言的I/O操作就是从程序移进或移出字节，这个<strong>字节流</strong>称为流</p>\n<blockquote>\n<p><strong>标准流</strong>：标准输入<code>stdin</code>，标准输出<code>stdout</code>和标准错误<code>stderr</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 通常标准输入设备为键盘，标准输出/错误设备为终端或者屏幕</div>\n<blockquote>\n<p><strong>流的分类</strong><br><strong>文本流</strong>：零个或者多个字符，以<strong>换行符</strong>结束（UNIX系统）<br><strong>二进制流</strong>：完全根据<strong>程序编写它们的形式</strong>输入/出</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 流本质上是一个指向FILE数据结构的指针，每个流都有一个相应的FILE文件与它关联</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 文本流的结束形式在不同的系统上可能不同，但是库函数会将标准形式（换行符）转化为对应的形式</div>\n<p><strong>②缓冲区</strong>：字节流并不是直接从输入端到输出端，而是要经过一块称为缓冲区的<strong>内存区域</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 缺省情况下，I/O函数库为流动态分配一个缓冲区</div>\n<blockquote>\n<p><strong>输出缓冲区</strong>：在<strong>被写满</strong>的时候才会被<strong>写入（刷新）</strong>到设备或者文件中<br><strong>输入缓冲区</strong>：同理，输入缓冲区<strong>为空时</strong>才会从设备或文件中<strong>读取</strong>数据</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 上述的缓冲为完全缓冲，但是通常情况下，流的缓冲状态由编译器决定，通常是请求输入的同时刷新输出缓冲区</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 可以使用int fflush(FILE *stream)使输出缓冲区立即刷新</div>\n<p><strong>③标准I/O常量</strong></p>\n<blockquote>\n<p><code>EOF</code>：提示到达了文件末尾，所选择的实际值比一个字符要多几位<br><code>FOPEN_MAX</code>：一个程序最多能打开文件的数量，至少是8（包括三个标准流）<br><code>FILENAME_MAX</code>：合法文件名的最大长度</p>\n</blockquote>\n<p><strong>④临时文件</strong>：使用一个文件<strong>临时保存数据</strong>，当程序结束时，该文件就被<strong>删除</strong></p>\n<blockquote>\n<p><code>FILE *tmpfile(void)</code>：创建了一个<strong>临时文件</strong>，以<code>\"wb+\"</code>模式打开，当<strong>文件被关闭或程序终止</strong>时，文件便被删除</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 若该文件需要需以其他模式打开，或者需要由一个程序打开，由另一个程序读取，都不适用临时文件</div>\n<blockquote>\n<p><code>char *tmpnam(char *name)</code>：给临时文件命名，参数需是一个指向长度<strong>至少为<code>L_tmpnam</code><strong>的字符数组的指针。若参数为NULL，函数返回一个</strong>静态数组</strong>的指针，该数组包含了文件名。</p>\n</blockquote>\n<p><strong>⑤错误报告</strong></p>\n<blockquote>\n<p><code>void perror(char const *message)</code>：若<code>message</code>不为<code>NULL</code>，则该函数<strong>打印出这个字符串</strong>，后面跟一个分号和一个空格，并打印出一条用于解释当前<code>errno</code>当前<strong>错误代码的信息</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> errno定义在errno.h头文件中</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 只有当库函数失败时才会刷新errno，故需要在一些可能出错的地方判断错误是否发生，再调用该函数提示错误信息</div>\n<h4 id=\"2-2流的操控\"><a href=\"#2-2流的操控\" class=\"headerlink\" title=\"2.2流的操控\"></a>2.2流的操控</h4><p><strong>①创建流</strong>：调用<code>fopen</code>创建一个流，指定访问的文件/设备以及他们的<strong>访问方式</strong>，并<strong>初始化</strong><code>FILE</code>结构</p>\n<blockquote>\n<p><strong>函数原型</strong>：<code>FILE *fopen(char const *name,char const *mode);</code><br>其中<code>name</code>是希望打开的<strong>设备和文件的名字</strong>，<code>mode</code>提示流的<strong>操作模式</strong>以及<strong>分类</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 时刻检查fopen的返回值</div>\n<blockquote>\n<p><strong><code>mode</code>参数</strong><br><strong>文本流</strong>：<code>\"r\"</code>只读 、<code>\"w\"</code>只写、<code>\"a\"</code>添加<br><strong>二进制流</strong>：<code>\"rb\"</code>只读、<code>\"wb\"</code>只写、<code>\"ab\"</code>添加</p>\n</blockquote>\n<p><strong>②操作模式</strong></p>\n<blockquote>\n<p><strong>读</strong>：访问文件<strong>必须已经存在</strong><br><strong>写</strong>：访问文件存在，<strong>原来的内容就会被删除</strong>，若不存在，则会<strong>新创建一个</strong><br><strong>添加</strong>：类似于写，但是不会覆盖内容，而是在<strong>尾部</strong>写入新内容</p>\n</blockquote>\n<p><strong>③重新打开一个流</strong></p>\n<blockquote>\n<p><code>FILE *freopen(char const *filename,char const *mode,FILE *stream)</code><br>该函数试图关闭<code>stream</code>对应的流，并<strong>重新打开</strong>它</p>\n</blockquote>\n<p><strong>④流的位置控制</strong></p>\n<blockquote>\n<p><code>long ftell(FILE *stream)</code>：返回<strong>下一个读写将要开始位置</strong>距离<strong>文件起始位置</strong>的偏移量</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 对于二进制流，这个偏移量为字节数，对于文本流，这个值取决于系统（由于行末字符映射）</div>\n\n<blockquote>\n<p><code>int fseek(FILE *stream,long offset,int from)</code>：改变下一次读写的起始位置，由<code>from</code>和<code>offset</code>决定</p>\n</blockquote>\n<blockquote>\n<p><code>from</code>参数有三种值<br><code>SEEK_SET</code>：从流的<strong>起始位置</strong>起<code>offset</code>个字节，<code>offset</code>必须是一个<strong>非负值</strong><br><code>SEEK_CUR</code>：从流的<strong>当前位置</strong>起<code>offset</code>个字节，<code>offset</code><strong>可正可负</strong><br><code>SEEK_END</code>：从流的<strong>尾部位置</strong>起<code>offset</code>个字节，<code>offset</code><strong>可正可负</strong>，当其为正数时，写入将扩展这个文件，读取将获得一条“到达文件尾的信息”</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 文本流为了其可移植性，当from为SEEK_END或者SEEK_CUR时，offset需为0，from为SEEK_SET，offset需为同一个流中之前调用ftell获得的返回值</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 二进制流中，SEEK_END定位可能不被支持</div>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 调用fseek之后，行末指示字符将会被清除</div>\n\n<p><strong>⑤改变缓冲方式</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 只有当指定流被打开但是还没有对其进行操作时，才能调用这些函数</div>\n<blockquote>\n<p><code>void setbuf(FILE *stream,char *buf)</code>：为流设置了<strong>一个数组</strong>作为其缓冲区，该数组长度必须为<code>BUFSIZ</code>（定义在stdio.h中）</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 若数组指针为空，则关闭流的所有缓冲方式，按照程序规定的方式读取写入（操作系统有自己的缓冲方式）</div>\n\n<blockquote>\n<p><code>int setvbuf(FILE *stream,char *buf,int mode,size_t size)</code>：其中，<code>mode</code>用于指定<strong>缓冲的类型</strong>，<code>buf</code>用于指向缓冲区，<code>size</code>用于指定缓冲区大小</p>\n</blockquote>\n<blockquote>\n<p><code>mode</code>的参数类型<br><code>_IOFBF</code>：完全缓冲<br><code>_IONBF</code>：不缓冲<br><code>_IOLBF</code>：行缓冲，即每当换行符被写入缓冲区时，缓冲区便刷新</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 缓冲区的大小最好是BUFSIZ的整数倍（与磁盘簇大小相匹配），否则可能会需要一些额外的磁盘操作</div>\n\n<p><strong>⑥状态判断</strong></p>\n<blockquote>\n<p><code>int feof(FILE *stream)</code>：若流处于<strong>文件尾</strong>，则返回真<br><code>int ferror(FILE *stream)</code>：若流出现<strong>读写错误</strong>，函数返回真<br><code>int clearerr(FILE *stream)</code>：<strong>重置</strong>流的错误状态</p>\n</blockquote>\n<p><strong>⑦关闭流</strong>：调用<code>fclose</code>关闭对应流（防止与其关联的设备文件被访问），并释放<code>FILE</code>文件</p>\n<blockquote>\n<p><code>int fclose(FILE *f);</code><br>如果执行成功，则返回零值，否则返回<code>EOF</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 如果关闭的是输出流，那么这个函数还会刷新缓冲区</div>\n\n<h4 id=\"2-3I-x2F-O函数\"><a href=\"#2-3I-x2F-O函数\" class=\"headerlink\" title=\"2.3I/O函数\"></a>2.3I/O函数</h4><div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 依据处理数据的类型将其分为单个字符、文本行和二进制数据三种</div>\n<p><strong>①字符I/O</strong></p>\n<blockquote>\n<p><strong>字符输入（读取）</strong><br><code>int getchar(void)</code><br><code>int getc(FILE *stream)</code><br><code>int fgetc(FILE *stream)</code><br>每次从流中读取<strong>下一个字符</strong>，如果不存在更多的字符，则返回<code>EOF</code>（整型）</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 其中getchar从标准输入读取字符</div>\n<blockquote>\n<p><strong>字符输出（写入）</strong><br><code>int putchar(int character)</code><br><code>int putc(int character,FILE *stream)</code><br><code>int fputc(int character,FILE *stream)</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 同上，putchar写入到标准输出中</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 在打印前，这些函数会整型参数裁剪为一个无符号字符型</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 其中fgetc和fputc是函数，其余是宏</div>\n<blockquote>\n<p><strong>字符回退</strong><br><code>int ungetc(int character,FILE *stream)</code><br>将一个字符返回到流中，这样它可以<strong>被重新读入</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 注意退回到流和写入到流是不同的，前者类似于压栈，后者类似于队列的增长</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 如果流的位置之后被改变，则退回的字符会被丢弃</div>\n\n<p><strong>②未格式化行I/O（字符串）</strong></p>\n<blockquote>\n<p><strong>字符串读取</strong><br><code>char *fgets(char *buffer,int buff_size,FILE *stream)</code><br><code>char *gets(char *buffer)</code></p>\n</blockquote>\n<blockquote>\n<p>从<code>stream</code>流中读取字符并将他们<strong>复制到</strong><code>buffer</code>中，当读取到<strong>一个换行符</strong>或者字符数达到<code>buffer_size-1</code>个时就<strong>停止读取</strong>，并在<strong>缓冲区结尾</strong>添加一个<code>nul</code>字节，使其成为一个字符串</p>\n</blockquote>\n<blockquote>\n<p>若没有读取到字符（<strong>到了文章尾</strong>），就返回<code>NULL</code>，否则返回<code>buffer</code>对应的指针</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> gets与fgets类似，是从标准输入中读取，但是gets不会存储换行符</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> gets函数没有缓冲区长度，所以很可能导致缓冲区溢出，只适用于玩具程序</div>\n<blockquote>\n<p><strong>字符串写入</strong><br><code>int fputs(char const *buffer,FILE *stream)</code><br><code>int puts(char const *buffer)</code></p>\n</blockquote>\n<blockquote>\n<p>传递给<code>fputs</code>的缓冲区<strong>必须包含一个字符串</strong>，并将该字符串<strong>逐字符</strong>写入流中，如果写入时发生了错误，则返回<code>EOF</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> puts与fputs类似，写入到标注输入中，且puts在写入一个字符串后，会再输出一个换行符</div>\n\n<p><strong>③二进制I/O</strong></p>\n<blockquote>\n<p><code>size_t fread(void *buffer,size_t size,size_t count,FILE *stream)</code><br><code>size_t fwrite(void *buffer,size_t size,size_t count,FILE *stream)</code></p>\n</blockquote>\n<blockquote>\n<p>其中<code>buffer</code>指向用于<strong>保存数据的内存位置</strong>，<code>size</code>为缓冲区<strong>每个元素的字节数</strong>（使用sizeof计算即可），<code>count</code>为<strong>读取或者写入的元素数</strong>，<code>stream</code>为指定的流</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 二进制I/O的效率非常高，省区了转换的开销</div>\n<h4 id=\"2-4格式化读取\"><a href=\"#2-4格式化读取\" class=\"headerlink\" title=\"2.4格式化读取\"></a>2.4格式化读取</h4><div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 内容较多且重要，故单列出来</div>\n<p><strong>①scanf家族</strong></p>\n<blockquote>\n<p><code>int fscanf(FILE *stream,char const *format,...)</code><br><code>int scanf(char const *format,...)</code><br><code>int sscanf(char const *string,char const *format,...)</code></p>\n</blockquote>\n<blockquote>\n<p>当格式化字符串到达<strong>末尾</strong>或者读取的输入<strong>不再与格式匹配</strong>时，输入停止，返回<strong>转化的输入值的数目</strong>，若没有读取输入值，则返回<code>EOF</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 这些函数都从一定的输入源读入数据，其中fscanf为stream指定的流，scanf为标准输入，sscanf为string指向的字符串</div>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 其中format为一个字符串，表示转换的格式代码</div>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 其中...表示一个可变长度的指针列表，从输入源读取的数据转化后就存储在这些指针指向的位置</div>\n\n\n<p><strong>②format字符串</strong>：<code>format</code>字符串可能包含三种内容，即<strong>空白字符</strong>、<strong>格式代码</strong>和<strong>其他字符</strong></p>\n<blockquote>\n<p><strong>空白字符</strong>：<strong>丢弃</strong>输入中的<strong>所有</strong>空白字符</p>\n</blockquote>\n<blockquote>\n<p><strong>格式代码</strong>：指定函数将<strong>如何解释</strong>接下来的<strong>输入字符</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>其他字符</strong>：当出现其他字符时，<strong>下一个输入字符</strong>必须与他匹配，若匹配，输入字符将被<strong>丢弃</strong>，若不匹配，则直接结束</p>\n</blockquote>\n<p><strong>③scanf格式代码</strong>：以<code>%</code>开头，后面接一个<strong>可选的星号（<code>*</code>）</strong>、<strong>可选的宽度</strong>、<strong>可选的限定符</strong>和<strong>格式代码</strong></p>\n<blockquote>\n<p><strong>星号（<code>*</code>）</strong>：使转换后的值被<strong>丢弃</strong>而不是被存储</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 可以用于跳过不需要的字符</div>\n<blockquote>\n<p><strong>宽度</strong>：用于<strong>限制</strong>读取的输入字符的<strong>个数</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 若没有限定宽度，则遇到空白字符停止</div>\n<blockquote>\n<p><strong>限定符</strong>：修改一些<strong>格式代码的含义</strong>，主要是指定<strong>参数的长度</strong>，有<code>h</code>、<code>l</code>、<code>L</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> h修饰整型和无符号数，表示short和unsigned short，l修饰整型、无符号数和浮点型表示long、unsigned long和double，L修饰浮点型表示long double</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 在转换short、long和long double时，采用适当的限定符，提高程序可移植性</div>\n<blockquote>\n<p><strong>格式代码</strong>：一个<strong>单字符</strong>，表明如何解释输入字符</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> c表示char，d表示十进制int，u表示十进制无符号数，f表示浮点数等等</div>\n\n<h4 id=\"2-5格式化写入\"><a href=\"#2-5格式化写入\" class=\"headerlink\" title=\"2.5格式化写入\"></a>2.5格式化写入</h4><p><strong>①printf家族</strong></p>\n<blockquote>\n<p><code>int fprintf(FILE *stream,char const *format,...)</code><br><code>int printf(char const *format,...)</code><br><code>int sprintf(char const *buffer,char const *format,...)</code></p>\n</blockquote>\n<blockquote>\n<p>根据<code>format</code>字符串将参数列表的值<strong>格式化</strong>，并输出到一定的<strong>输出源</strong>中，返回值为实际输出的字符数</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 其中fprintf为stream指定的流，printf为标准输入，sprintf为buffer指向的缓冲区</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 使用sprintf要注意缓冲区的溢出问题</div>\n\n<p><strong>②format格式代码</strong>：由<code>%</code>开头，后跟零个或多个<strong>标志字符</strong>、可选的<strong>最小字段宽度</strong>、可选的<strong>精度</strong>、可选的<strong>修改符</strong>以及<strong>转换类型</strong></p>\n<blockquote>\n<p><strong>标志字符</strong>：决定其表现形式，如<strong>对齐</strong>、<strong>填充格式</strong>等</p>\n</blockquote>\n<blockquote>\n<p><strong>字段宽度</strong>：指定出现在结果中的<strong>最小字符数</strong>，如果值的字符数小于该值，则对其进行<strong>填充</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>精度</strong>：以<strong>一个句号开头</strong>，后跟一个可选的<strong>十进制整数</strong>，不同<strong>转换类型</strong>的格式也不尽相同，对于<code>f</code>是规定<strong>小数点后的位数</strong>，对于<code>s</code>则是指定被转换的<strong>最多字符</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>修改符</strong>：类似于<code>scanf</code>格式代码中的限定符，指定<strong>长短类型</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>转换类型</strong>：转化为那种<strong>数据类型</strong>、<strong>格式</strong>和<strong>进制</strong>等，常用的有整数<code>d</code>、字符串<code>s</code>和浮点数<code>f</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 其中字段宽度和精度可以用星号替代，由print的下一个参数指定</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 当字符或短整数作为printf的参数时，会被先转化为整数，需要使用修改符，修改符在转换发生之前将其转换为对应类型，同样在长整型和int长度不同的环境中也需要对应的修改符指明其长度</div>\n\n<hr>\n<h3 id=\"3-标准函数库\"><a href=\"#3-标准函数库\" class=\"headerlink\" title=\"3.标准函数库\"></a>3.标准函数库</h3><p><strong>3.1整型函数</strong><br><strong>①算数</strong></p>\n<blockquote>\n<p><code>int abs(int value)</code>：返回<strong>绝对值</strong><br><code>div_t div(int x,int y)</code>：将第二个参数除以第一个参数，产生<strong>商</strong>和<strong>余数</strong>，其中商是<strong>最靠近精确解</strong>的整数，其中<code>div_t</code>是一个结构，其中<code>quot</code>是商。<code>rem</code>是余数</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 都有对应的处理长整型的版本</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> /操作符的除法运算结果并未精确定义，当其操作数任一为负数且不能整除时，商和精确解的舍入关系取决于编译器</div>\n<p><strong>②随机数</strong></p>\n<blockquote>\n<p><code>int rand (void)</code>：返回一个0至RAND_MAX区间内的<strong>伪随机数</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 为了得到特定范围的伪随机数，可以对其进行取模并添加偏移量</div>\n<blockquote>\n<p><code>void srand(unsigned int seed)</code>：利用<code>seed</code>对<code>rand</code>进行初始化</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> seed常常采用每天的时间，即srand((unsigned int)time(0))</div>\n<p><strong>③字符串转化</strong></p>\n<p><strong>3.2浮点型函数</strong><br><strong>①算数</strong></p>\n<blockquote>\n<p><code>double sqrt(double x)</code>：取平方根<br><code>double exp(double x)</code>：返回以e的x次幂<br><code>double floor(double x)</code>：返回不大于参数的最大整数<br><code>double ceil(double x)</code>：返回不小于参数的最小整数<br><code>double fabs(double x)</code>：返回参数的绝对值<br><code>double fmod(double x,double y)</code>：返回x除以y的余数</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 参数需要在定义域内，结果需要在double所能表示的范围内</div>\n<p><strong>②三角函数</strong>：<code>sin</code>、<code>cos</code>、<code>tan</code>、<code>asin</code>、<code>acos</code>、<code>atan</code></p>\n<blockquote>\n<p><code>double sin(double angle)</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> sin、cos、tan的参数是弧度，asin、acos、atan的参数范围从-1至1</div>\n<p><strong>③对数和指数函数</strong></p>\n<blockquote>\n<p><code>double exp(double x)</code>：e的x次幂<br><code>double pow(double x,double y)</code>：x的y次幂，其中x不能是负数，y必须是整数<br><code>double log(double x)</code>：以e为底的对数<br><code>double log10(double x)</code>：以10为底的对数</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 可以采用换底公式计算任意底数的对数</div>\n<p><strong>④浮点数表示</strong></p>\n<blockquote>\n<p><code>double frexp(double value,int *exponent)</code>：该函数返回<code>fraction</code>，并将<code>exponent</code>存储到第二个参数指定位置，其中<code>fraction*2^exponent = value</code><br><code>double ldexp(double fraction,int exponent)</code>：配合以上函数，还原该浮点数</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 用于浮点格式不兼容的机器之间传递浮点数</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 要记得包含math.h头文件，绝大部分参数和返回值都是double类型</div>\n<p><strong>3.3时间与日期函数</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 要记得包含time.h头文件</div>\n<p><strong>①处理器时间</strong></p>\n<blockquote>\n<p><code>clock_t clock(void)</code>：返回从<strong>程序开始</strong>起处理器消耗的时间<br><code>clock_t</code>由编译器定义，通常是处理器时钟滴答的次数，可以将其除以<code>CLOCKS_PER_SEC</code>转化为秒</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 如果想要精确的执行时间，可以在程序（某段语句）开始处与结尾处，各放置一个clock()，将结果相减</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 若操作系统不能追踪处理器时间，则返回已经流逝的实际时间数量</div>\n<p><strong>②当天时间</strong></p>\n<blockquote>\n<p><code>time_t time(time_t *returned_value)</code>：返回当前的时期和时间，并存储到参数指向位置，当机器无法提供时间或者时间值太大，就返回-1</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 不同的编译器有不同的格式，常见的形式是从某一特定时间开始流逝的秒数，在UNIX中，这个时间为1970年1月1日零点</div>\n<p><strong>③日期和时间的转换</strong></p>\n<blockquote>\n<p><code>double difftime(time_t time1,time_t time2)</code>：计算<code>time1-time2</code>，并将其转化为秒</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 不要直接调用两次time函数并相减</div>\n<p><code>struct tm *gmtime(time_t const *time_value)</code>：将时间转换为<strong>世界协调时间</strong><br><code>struct tm *localtime(time_t const *time_value)</code>：将时间转换为<strong>当地时间</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> tm结构包含了很多与时间有关的成员</div>\n<blockquote>\n<p><code>char *ctime(time_t const *time_value)</code>：接收一个<code>time_t</code>的指针，返回一个对应时间的字符串<br><code>char *asctime(struct tm const *tm_ptr)</code>：将<code>tm</code>结构转化为与<code>ctime</code>结果一样的字符串</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 字符串格式是固定的，编译器通常将其保存在一个静态数组中，如果想要特定格式的字符串，可以调用strftime()</div>\n<p><strong>3.4非本地跳转</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 要记得包含setjmp.h头文件</div>\n<p><strong>①含义</strong>：类似于<code>goto</code>语句，但是<strong>不局限于一个函数的作用域</strong>之内<br><strong>②相关函数</strong></p>\n<blockquote>\n<p><code>int setjmp(jmp_buf state)</code>：初始化一个<code>jmp_buf</code>变量，并将程序的状态信息保存到<strong>跳转缓冲区</strong>，调用<code>setjmp</code>的函数便称为<strong>顶层函数</strong><br><code>void longjmp(jump_buf state,int value)</code>：使得跳转缓冲区的状态被恢复，从而立即跳转到<strong>顶层函数</strong></p>\n</blockquote>\n<p><strong>3.5信号</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 要记得包含signal.h头文件</div>\n<p><strong>①含义</strong>：信号表示一种<strong>非程序本身</strong>引发的事件<br><strong>②标准定义的信号</strong></p>\n<blockquote>\n<p><code>SIGABRT</code>：程序请求异常终止，由<code>abort</code>函数引发，常见的错误是<strong>算数溢出</strong>以及<strong>除零错误</strong><br><code>SIGFPE</code>：发生一个算数错误<br><code>SIGILL</code>：检测到非法指令，比如<strong>指令版本不同</strong><br><code>SIGSEGV</code>：检测到对内存的非法访问，比如访问<strong>未分配给该程序的内存</strong>，或者出现<strong>边界对齐错误</strong><br><code>SIGINT</code>：受到一个交互性注意信号<br><code>SIGTERM</code>：受到一个终止程序的请求</p>\n</blockquote>\n<p><strong>③信号处理</strong></p>\n<blockquote>\n<p><code>int raise(int sig)</code>：显示地引发一个信号<br><code>void (*signal(int sig,void(*handler)(int))) (int)</code>：指定程序对信号的反应，简化后的原型为<code>void(*signal()) (int)</code>，则<code>signal</code>是一个返回类型为函数指针（对应信号以前的处理函数）的函数，其所接受参数<code>sig</code>为标准定义的信号，<code>handler</code>为希望信号发生时调用的函数，当函数调用失败时，返回<code>SIG_ERR</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 还可以将signal函数第二个参数替换为SIG_DFL，恢复对该信号的缺省反应；或者替换为SIG_IGN，使该信号被忽略</div>\n\n<p><strong>3.6执行环境</strong><br><strong>①终止程序</strong></p>\n<blockquote>\n<p><code>void abort(void)</code>：引发<code>SIGABRT</code>信号，若没有在程序中为其设置信号处理函数，则程序终止<br><code>void atexit(void(func)(void))</code>：把一些函数注册为<strong>退出函数</strong>，当程序<strong>正常终止（调用<code>exit()</code>函数）</strong>，退出函数将被调用</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 注意该退出函数的格式</div>\n<blockquote>\n<p><code>void exit(int status)</code>：当该函数被调用时，所有被<code>atexit()</code>注册的函数将按照他们注册的顺序被<strong>反序</strong>调用，随后刷新所有缓冲区，关闭所有文件，并删除所有临时文件</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> main函数return语句相当将返回值传递给exit()并调用它</div>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 由atexit()注册的函数中不能包含exit()，其结果是未定义的</div>\n<p><strong>②断言</strong></p>\n<blockquote>\n<p><code>void assert(int expression)</code>：当<code>expression</code>为假时，向<strong>标准错误</strong>打印一条诊断信息并<strong>终止程序</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 本质上是一个宏，其诊断信息的格式由编译器定义</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 可以通过定义NDEBUG宏消除所有断言，可以将其定义为任意值</div>\n<p><strong>③环境与系统</strong></p>\n<blockquote>\n<p><code>char *getenv(char const *name)</code>：在<strong>环境</strong>中查找一个特定的名字，如果找到则返回一个<strong>不能修改</strong>的字符指针，否则返回<code>NULL</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 环境：一个由编译器定义的名字/值对的列表</div>\n<blockquote>\n<p><code>void system(char const *command)</code>：将字符串传递给<strong>操作系统</strong>，将其作为一条命令，由<strong>系统的命令处理器</strong>运行</p>\n</blockquote>\n<p><strong>④排序与查找</strong></p>\n<blockquote>\n<p><code>qsort()</code>：以<strong>升序</strong>的方式对数组进行排序，与<strong>类型无关</strong>，其函数原型如下<br><code>void qsort(void *base,size_t n_elements,size_t el_size,int(*compare)(void const *,void const *))</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 其中第一个参数指向需要排序的数组，第二个参数指定数组中元素的数目，第三个参数指定每个元素的长度，第四个参数时一个用于比较的函数指针</div>\n<blockquote>\n<p><code>bsearch()</code>：在一个已经<strong>排好序</strong>的数组中用<strong>二分法</strong>查找一个特定的元素，其函数原型如下<br><code>void *bsearch(void const *key,void const *base,size_t n_elements,size_t el_size,int(*compare)(void const *,void const *))</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 其中第一个参数时需要查找的值，第二个参数指向查找的数组，第三个参数指定数组的数目，第四个参数是每个元素的长度，最后一个参数是用于比较的函数指针</div>\n\n<p><strong>3.7本地化</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 详细见《C与指针》p347-349</div>\n<p><strong>①</strong><code>locale</code>：一组<strong>特定的参数</strong>，每个国家和地区都不同<br><strong>②设置</strong><code>locale</code></p>\n<blockquote>\n<p><code>char *setlocale(int category,char const *locale)</code><br>其中，<code>category</code>用于指定<code>locale</code>的哪个部分需要被修改，<code>locale</code>指定新的<code>locale</code>，若该参数为<code>NULL</code>，则返回当前的<code>locale</code></p>\n</blockquote>\n<blockquote>\n<p><code>setlocale</code><strong>参数列表</strong><br><code>LC_ALL</code>：整个<code>locale</code><br><code>LC_COLLATE</code>：<strong>字符集对照序列</strong>，将影响<code>strcoll</code>和<code>strxfrm</code>函数的行为<br><code>LC_CTYPE</code>：定义于<code>ctype.h</code>中的函数所使用的<strong>字符类型分类</strong>信息<br><code>LC_MONETARY</code>：<strong>格式化货币值</strong>使用的相关字符<br><code>LC_NUMERIC</code>：<strong>格式化非货币值</strong>使用的相关字符<br><code>LC_TIME</code>：<code>strftime</code>函数的行为</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"C语言学习笔记（三）\"><a href=\"#C语言学习笔记（三）\" class=\"headerlink\" title=\"C语言学习笔记（三）\"></a>C语言学习笔记（三）</h1><h2 id=\"C语言进阶\"><a href=\"#C语言进阶\" class=\"headerlink\" title=\"C语言进阶\"></a>C语言进阶</h2><h3 id=\"1-预处理器\"><a href=\"#1-预处理器\" class=\"headerlink\" title=\"1.预处理器\"></a>1.预处理器</h3><h4 id=\"1-1预处理\"><a href=\"#1-1预处理\" class=\"headerlink\" title=\"1.1预处理\"></a>1.1预处理</h4><blockquote>\n<p>在源代码<strong>编译前</strong>对其进行一些<strong>文本性质</strong>操作</p>\n</blockquote>\n<p><strong>①</strong>删除注释<br><strong>②</strong>插入<code>#include</code>指令包含的文件的内容<br><strong>③</strong>定义和替换由<code>#define</code>指令定义的符号<br><strong>④</strong>确定代码部分内容是否根据一些<strong>条件编译</strong>指令进行编译</p>\n<h4 id=\"1-2预定义符号\"><a href=\"#1-2预定义符号\" class=\"headerlink\" title=\"1.2预定义符号\"></a>1.2预定义符号</h4><blockquote>\n<p>预处理器定义的符号，都有各自对应的含义</p>\n</blockquote>\n<p><strong>①</strong><code>__FILE__</code>：进行编译的源文件名<br><strong>②</strong><code>__LINE__</code>：文件当前行的行号<br><strong>③</strong><code>__DATE__</code>：文件被编译的日期<br><strong>④</strong><code>__TIME__</code>：文件被编译的时间<br><strong>⑤</strong><code>__STDC__</code>：若编译器遵循ANSI C，返回1</p>\n<h4 id=\"1-3-define\"><a href=\"#1-3-define\" class=\"headerlink\" title=\"1.3#define\"></a>1.3#define</h4><p><strong>①普通替换</strong>：<code>#define name stuff</code></p>\n<blockquote>\n<p>每当<code>name</code>出现在这条命令之后，都会被替换为<code>stuff</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 若stuff非常长，可以将其分为好几行，每行除了最后一行都要加上反斜杠\\</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 在使用该命令时，最好不要在末尾添加分号，而是在程序正文中添加，否则可能会多出一条空语句，在一些只能使用一条语句的地方会出错，如不使用代码块的if语句</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 宏的name全部大写，用于区分宏</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 使用宏定义类型，只需要修改宏的值就可改变类型</div>\n<p><strong>②带参数的宏</strong>：<code>#define name(parameter-list) stuff</code></p>\n<blockquote>\n<p><code>parameter-list</code>为参数列表，参数之间用逗号<code>,</code>相隔，类似于函数的形参，<code>stuff</code>为包含<strong>参数列表中参数</strong>的表达式<br><strong>运用实例</strong>：如果定义了一个宏<code>#define SQUARE(x) ((x) * (x))</code>，在代码块中输入<code>SQUARE(a)</code>，在预处理阶段会被替换为<code>((5) * (5))</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> #name会被预处理器处理为\"name\"，a##b会被预处理器处理为ab</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 宏本质上还是简单的替换操作，所以要避免其与正文中的其他操作符发生预料之外的作用，可以像上述一样采用()对每个参数和整体进行隔离</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 宏中可以出现其他宏定义的符号，但是不能出现递归</div>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 其中name和(parameter-list)之间不能有空格</div>\n<p><strong>③带副作用的宏参数</strong></p>\n<blockquote>\n<p>当宏参数在宏定义中出现不止一次时，若宏参数具有副作用，可能会带来无法预料的后果，副作用指<strong>永久性的效果</strong>，如<code>x+1</code>和<code>x++</code>，后者会永久改变x的值<br>以下程序运行后结果<code>x = 6,y = 10,z = 9</code>，这是因为<code>z = MAX(x++,y++)</code>被替换为<code>z = ((x++)&gt;(y++)?(x++):(y++))</code>，其中<code>y++</code><strong>执行了两次</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#define MAX(a,b) ((a)&gt;(b)?(a):(b))\nx&#x3D;5;\ny&#x3D;8;\nz &#x3D; MAX(x++,y++);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 为了避免这种情况，可以将宏需要使用的数据存储到临时变量中</div>\n<p><strong>④宏定义的移除</strong>：<code>#undef name</code><br><strong>⑤命令行控制宏</strong>：在命令行编译时<strong>添加编译选项</strong>对宏进行定义和修改</p>\n<blockquote>\n<p>如<code>cc -DARRAY_SIZE=100 prog.c</code>，则就是将<code>ARRAY_SIZE</code>修改为100<br>其他的选项还有<code>-Uname</code>（忽略宏<code>name</code>）以及<code>-Dname</code>（定义宏<code>name</code>）</p>\n</blockquote>\n<p><strong>⑥宏的利与弊</strong></p>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 宏比较适用于频繁使用的小型简单代码，因为函数的调用和返回也需要开支</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 宏是与类型无关的，有些参数无法传递给函数，比如说传递参数的类型</div>\n<blockquote>\n<p>如<code>#define MALLOC(n,type) ((type*)malloc((n)*sizeof(type)))</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 宏会使得代码变得更长，因为宏的本质就是插入代码副本</div>\n\n<h4 id=\"1-4条件编译\"><a href=\"#1-4条件编译\" class=\"headerlink\" title=\"1.4条件编译\"></a>1.4条件编译</h4><p><strong>①定义</strong>：选择一部分代码在编译时是被<strong>正常编译</strong>还是被<strong>忽略</strong><br><strong>②格式</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#if constant-expression\n  statement0\n#elif constant-expression\n  statement1\n#else\n  statement2\n#endif<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><code>constant-expression</code>为常量表达式，常常为<strong>宏</strong>（和命令行控制宏一同使用），当其为<strong>非零值</strong>时，<code>statement</code>被<strong>正常编译</strong>，反之则被忽略<br><code>elif</code>、<code>else</code>子句出现的次数可以不限，只有当其前面<strong>所有常量表达式均为假</strong>时，且自身的常量表达式为真时，才被正常编译</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 记住要以#endif结束条件编译</div>\n\n<p><strong>③定义判断</strong>：判断某个宏是否被定义</p>\n<blockquote>\n<p>若<code>symbol</code>被定义则为真<br><code>#if defined(symbol)</code><br><code>#ifdef symbol</code><br>若<code>symbol</code>没有被定义则为真<br><code>#if !defined(symbol)</code><br><code>#ifndef symbol</code></p>\n</blockquote>\n<h4 id=\"1-5文件包含\"><a href=\"#1-5文件包含\" class=\"headerlink\" title=\"1.5文件包含\"></a>1.5文件包含</h4><p><strong>①格式</strong>：<code>#include &lt;filename&gt;</code>&#x2F;<code>#include &quot;filename&quot;</code></p>\n<blockquote>\n<p>前者表示在<strong>编译器定义的标准位置</strong>寻找相关文件，后者表示在<strong>源文件所在目录</strong>寻找相关文件（如果没找到还是再去标准位置）</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> include的实质就是将对应文件内容复制到对应位置</div>\n\n\n<p><strong>②嵌套包含</strong>：有些头文件中还会包含其他的头文件，可能会导致<strong>某些头文件被包含多次</strong></p>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 可以使用条件编译避免这种情况</div>\n<blockquote>\n<p>如下，<code>_TOUWENJIAN_H</code>为这个头文件的代号，当头文件被第一次包含时，其被定义为1，第二次被包含时，通过条件编译，他的所有内容<strong>被忽略</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#ifndef _TOUWENJIAN_H\n#define _TOUWENJIAN_H 1\n    All the stuff that you want in the header file\n#endif <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 应该避免多重包含，因为上述做法只能忽略重复读入内容，该文件还是会被多次读取</div>\n<h4 id=\"1-6命令行参数\"><a href=\"#1-6命令行参数\" class=\"headerlink\" title=\"1.6命令行参数\"></a>1.6命令行参数</h4><blockquote>\n<p>C语言<code>main</code>函数有两个形参用于接收命令行参数，<code>int main (int argc,char **argv)</code></p>\n</blockquote>\n<p><strong>①</strong><code>argc</code>：命令行参数的<strong>数目</strong><br><strong>②</strong><code>argv</code>：本质上是一个<strong>指向字符指针的指针</strong>，将命令行参数看作为一个<strong>字符指针数组(以空指针结尾)<strong>，该参数指向该数组的</strong>第一个参数</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 命令行第一个参数固定是程序的名称，不需要用户输入</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 注意命令行参数是字符数组，在C中，没有字符串</div>\n<p><img src=\"/image/C_5.png\" alt=\"命令行参数\"></p>\n<h4 id=\"1-7其他预处理指令\"><a href=\"#1-7其他预处理指令\" class=\"headerlink\" title=\"1.7其他预处理指令\"></a>1.7其他预处理指令</h4><p><strong>①</strong><code>#error</code>：允许生成<strong>错误信息</strong></p>\n<blockquote>\n<p><code>#error message</code>，其中<code>message</code>为错误提示信息</p>\n</blockquote>\n<p><strong>②</strong><code>#line</code>：定义下一行的<strong>行号</strong>，且可以修改<strong>文件名</strong></p>\n<blockquote>\n<p><code>#line number &quot;strings&quot;</code>，其中<code>number</code>为下一行行号，<code>&quot;strings&quot;</code>为文件名</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> \"strings\"为可选选项</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 该命令会修改__LINE__和__FILE__</div>\n<p><strong>③</strong><code>#progma</code>：用于支持<strong>因编译器而异</strong>的特性，如向一个函数插入<strong>内联的汇编代码</strong></p>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 预处理器会忽略它不认识的#progma指令</div>\n<hr>\n<h3 id=\"2-I-x2F-O函数\"><a href=\"#2-I-x2F-O函数\" class=\"headerlink\" title=\"2.I&#x2F;O函数\"></a>2.I&#x2F;O函数</h3><div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 包含stdio.h头文件</div>\n<h4 id=\"2-1基本概念\"><a href=\"#2-1基本概念\" class=\"headerlink\" title=\"2.1基本概念\"></a>2.1基本概念</h4><p><strong>①流</strong>：C语言的I&#x2F;O操作就是从程序移进或移出字节，这个<strong>字节流</strong>称为流</p>\n<blockquote>\n<p><strong>标准流</strong>：标准输入<code>stdin</code>，标准输出<code>stdout</code>和标准错误<code>stderr</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 通常标准输入设备为键盘，标准输出/错误设备为终端或者屏幕</div>\n<blockquote>\n<p><strong>流的分类</strong><br><strong>文本流</strong>：零个或者多个字符，以<strong>换行符</strong>结束（UNIX系统）<br><strong>二进制流</strong>：完全根据<strong>程序编写它们的形式</strong>输入&#x2F;出</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 流本质上是一个指向FILE数据结构的指针，每个流都有一个相应的FILE文件与它关联</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 文本流的结束形式在不同的系统上可能不同，但是库函数会将标准形式（换行符）转化为对应的形式</div>\n<p><strong>②缓冲区</strong>：字节流并不是直接从输入端到输出端，而是要经过一块称为缓冲区的<strong>内存区域</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 缺省情况下，I/O函数库为流动态分配一个缓冲区</div>\n<blockquote>\n<p><strong>输出缓冲区</strong>：在<strong>被写满</strong>的时候才会被<strong>写入（刷新）</strong>到设备或者文件中<br><strong>输入缓冲区</strong>：同理，输入缓冲区<strong>为空时</strong>才会从设备或文件中<strong>读取</strong>数据</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 上述的缓冲为完全缓冲，但是通常情况下，流的缓冲状态由编译器决定，通常是请求输入的同时刷新输出缓冲区</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 可以使用int fflush(FILE *stream)使输出缓冲区立即刷新</div>\n<p><strong>③标准I&#x2F;O常量</strong></p>\n<blockquote>\n<p><code>EOF</code>：提示到达了文件末尾，所选择的实际值比一个字符要多几位<br><code>FOPEN_MAX</code>：一个程序最多能打开文件的数量，至少是8（包括三个标准流）<br><code>FILENAME_MAX</code>：合法文件名的最大长度</p>\n</blockquote>\n<p><strong>④临时文件</strong>：使用一个文件<strong>临时保存数据</strong>，当程序结束时，该文件就被<strong>删除</strong></p>\n<blockquote>\n<p><code>FILE *tmpfile(void)</code>：创建了一个<strong>临时文件</strong>，以<code>&quot;wb+&quot;</code>模式打开，当<strong>文件被关闭或程序终止</strong>时，文件便被删除</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 若该文件需要需以其他模式打开，或者需要由一个程序打开，由另一个程序读取，都不适用临时文件</div>\n<blockquote>\n<p><code>char *tmpnam(char *name)</code>：给临时文件命名，参数需是一个指向长度<strong>至少为<code>L_tmpnam</code><strong>的字符数组的指针。若参数为NULL，函数返回一个</strong>静态数组</strong>的指针，该数组包含了文件名。</p>\n</blockquote>\n<p><strong>⑤错误报告</strong></p>\n<blockquote>\n<p><code>void perror(char const *message)</code>：若<code>message</code>不为<code>NULL</code>，则该函数<strong>打印出这个字符串</strong>，后面跟一个分号和一个空格，并打印出一条用于解释当前<code>errno</code>当前<strong>错误代码的信息</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> errno定义在errno.h头文件中</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 只有当库函数失败时才会刷新errno，故需要在一些可能出错的地方判断错误是否发生，再调用该函数提示错误信息</div>\n<h4 id=\"2-2流的操控\"><a href=\"#2-2流的操控\" class=\"headerlink\" title=\"2.2流的操控\"></a>2.2流的操控</h4><p><strong>①创建流</strong>：调用<code>fopen</code>创建一个流，指定访问的文件&#x2F;设备以及他们的<strong>访问方式</strong>，并<strong>初始化</strong><code>FILE</code>结构</p>\n<blockquote>\n<p><strong>函数原型</strong>：<code>FILE *fopen(char const *name,char const *mode);</code><br>其中<code>name</code>是希望打开的<strong>设备和文件的名字</strong>，<code>mode</code>提示流的<strong>操作模式</strong>以及<strong>分类</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 时刻检查fopen的返回值</div>\n<blockquote>\n<p><strong><code>mode</code>参数</strong><br><strong>文本流</strong>：<code>&quot;r&quot;</code>只读 、<code>&quot;w&quot;</code>只写、<code>&quot;a&quot;</code>添加<br><strong>二进制流</strong>：<code>&quot;rb&quot;</code>只读、<code>&quot;wb&quot;</code>只写、<code>&quot;ab&quot;</code>添加</p>\n</blockquote>\n<p><strong>②操作模式</strong></p>\n<blockquote>\n<p><strong>读</strong>：访问文件<strong>必须已经存在</strong><br><strong>写</strong>：访问文件存在，<strong>原来的内容就会被删除</strong>，若不存在，则会<strong>新创建一个</strong><br><strong>添加</strong>：类似于写，但是不会覆盖内容，而是在<strong>尾部</strong>写入新内容</p>\n</blockquote>\n<p><strong>③重新打开一个流</strong></p>\n<blockquote>\n<p><code>FILE *freopen(char const *filename,char const *mode,FILE *stream)</code><br>该函数试图关闭<code>stream</code>对应的流，并<strong>重新打开</strong>它</p>\n</blockquote>\n<p><strong>④流的位置控制</strong></p>\n<blockquote>\n<p><code>long ftell(FILE *stream)</code>：返回<strong>下一个读写将要开始位置</strong>距离<strong>文件起始位置</strong>的偏移量</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 对于二进制流，这个偏移量为字节数，对于文本流，这个值取决于系统（由于行末字符映射）</div>\n\n<blockquote>\n<p><code>int fseek(FILE *stream,long offset,int from)</code>：改变下一次读写的起始位置，由<code>from</code>和<code>offset</code>决定</p>\n</blockquote>\n<blockquote>\n<p><code>from</code>参数有三种值<br><code>SEEK_SET</code>：从流的<strong>起始位置</strong>起<code>offset</code>个字节，<code>offset</code>必须是一个<strong>非负值</strong><br><code>SEEK_CUR</code>：从流的<strong>当前位置</strong>起<code>offset</code>个字节，<code>offset</code><strong>可正可负</strong><br><code>SEEK_END</code>：从流的<strong>尾部位置</strong>起<code>offset</code>个字节，<code>offset</code><strong>可正可负</strong>，当其为正数时，写入将扩展这个文件，读取将获得一条“到达文件尾的信息”</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 文本流为了其可移植性，当from为SEEK_END或者SEEK_CUR时，offset需为0，from为SEEK_SET，offset需为同一个流中之前调用ftell获得的返回值</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 二进制流中，SEEK_END定位可能不被支持</div>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 调用fseek之后，行末指示字符将会被清除</div>\n\n<p><strong>⑤改变缓冲方式</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 只有当指定流被打开但是还没有对其进行操作时，才能调用这些函数</div>\n<blockquote>\n<p><code>void setbuf(FILE *stream,char *buf)</code>：为流设置了<strong>一个数组</strong>作为其缓冲区，该数组长度必须为<code>BUFSIZ</code>（定义在stdio.h中）</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 若数组指针为空，则关闭流的所有缓冲方式，按照程序规定的方式读取写入（操作系统有自己的缓冲方式）</div>\n\n<blockquote>\n<p><code>int setvbuf(FILE *stream,char *buf,int mode,size_t size)</code>：其中，<code>mode</code>用于指定<strong>缓冲的类型</strong>，<code>buf</code>用于指向缓冲区，<code>size</code>用于指定缓冲区大小</p>\n</blockquote>\n<blockquote>\n<p><code>mode</code>的参数类型<br><code>_IOFBF</code>：完全缓冲<br><code>_IONBF</code>：不缓冲<br><code>_IOLBF</code>：行缓冲，即每当换行符被写入缓冲区时，缓冲区便刷新</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 缓冲区的大小最好是BUFSIZ的整数倍（与磁盘簇大小相匹配），否则可能会需要一些额外的磁盘操作</div>\n\n<p><strong>⑥状态判断</strong></p>\n<blockquote>\n<p><code>int feof(FILE *stream)</code>：若流处于<strong>文件尾</strong>，则返回真<br><code>int ferror(FILE *stream)</code>：若流出现<strong>读写错误</strong>，函数返回真<br><code>int clearerr(FILE *stream)</code>：<strong>重置</strong>流的错误状态</p>\n</blockquote>\n<p><strong>⑦关闭流</strong>：调用<code>fclose</code>关闭对应流（防止与其关联的设备文件被访问），并释放<code>FILE</code>文件</p>\n<blockquote>\n<p><code>int fclose(FILE *f);</code><br>如果执行成功，则返回零值，否则返回<code>EOF</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 如果关闭的是输出流，那么这个函数还会刷新缓冲区</div>\n\n<h4 id=\"2-3I-x2F-O函数\"><a href=\"#2-3I-x2F-O函数\" class=\"headerlink\" title=\"2.3I&#x2F;O函数\"></a>2.3I&#x2F;O函数</h4><div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 依据处理数据的类型将其分为单个字符、文本行和二进制数据三种</div>\n<p><strong>①字符I&#x2F;O</strong></p>\n<blockquote>\n<p><strong>字符输入（读取）</strong><br><code>int getchar(void)</code><br><code>int getc(FILE *stream)</code><br><code>int fgetc(FILE *stream)</code><br>每次从流中读取<strong>下一个字符</strong>，如果不存在更多的字符，则返回<code>EOF</code>（整型）</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 其中getchar从标准输入读取字符</div>\n<blockquote>\n<p><strong>字符输出（写入）</strong><br><code>int putchar(int character)</code><br><code>int putc(int character,FILE *stream)</code><br><code>int fputc(int character,FILE *stream)</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 同上，putchar写入到标准输出中</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 在打印前，这些函数会整型参数裁剪为一个无符号字符型</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 其中fgetc和fputc是函数，其余是宏</div>\n<blockquote>\n<p><strong>字符回退</strong><br><code>int ungetc(int character,FILE *stream)</code><br>将一个字符返回到流中，这样它可以<strong>被重新读入</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 注意退回到流和写入到流是不同的，前者类似于压栈，后者类似于队列的增长</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 如果流的位置之后被改变，则退回的字符会被丢弃</div>\n\n<p><strong>②未格式化行I&#x2F;O（字符串）</strong></p>\n<blockquote>\n<p><strong>字符串读取</strong><br><code>char *fgets(char *buffer,int buff_size,FILE *stream)</code><br><code>char *gets(char *buffer)</code></p>\n</blockquote>\n<blockquote>\n<p>从<code>stream</code>流中读取字符并将他们<strong>复制到</strong><code>buffer</code>中，当读取到<strong>一个换行符</strong>或者字符数达到<code>buffer_size-1</code>个时就<strong>停止读取</strong>，并在<strong>缓冲区结尾</strong>添加一个<code>nul</code>字节，使其成为一个字符串</p>\n</blockquote>\n<blockquote>\n<p>若没有读取到字符（<strong>到了文章尾</strong>），就返回<code>NULL</code>，否则返回<code>buffer</code>对应的指针</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> gets与fgets类似，是从标准输入中读取，但是gets不会存储换行符</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> gets函数没有缓冲区长度，所以很可能导致缓冲区溢出，只适用于玩具程序</div>\n<blockquote>\n<p><strong>字符串写入</strong><br><code>int fputs(char const *buffer,FILE *stream)</code><br><code>int puts(char const *buffer)</code></p>\n</blockquote>\n<blockquote>\n<p>传递给<code>fputs</code>的缓冲区<strong>必须包含一个字符串</strong>，并将该字符串<strong>逐字符</strong>写入流中，如果写入时发生了错误，则返回<code>EOF</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> puts与fputs类似，写入到标注输入中，且puts在写入一个字符串后，会再输出一个换行符</div>\n\n<p><strong>③二进制I&#x2F;O</strong></p>\n<blockquote>\n<p><code>size_t fread(void *buffer,size_t size,size_t count,FILE *stream)</code><br><code>size_t fwrite(void *buffer,size_t size,size_t count,FILE *stream)</code></p>\n</blockquote>\n<blockquote>\n<p>其中<code>buffer</code>指向用于<strong>保存数据的内存位置</strong>，<code>size</code>为缓冲区<strong>每个元素的字节数</strong>（使用sizeof计算即可），<code>count</code>为<strong>读取或者写入的元素数</strong>，<code>stream</code>为指定的流</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 二进制I/O的效率非常高，省区了转换的开销</div>\n<h4 id=\"2-4格式化读取\"><a href=\"#2-4格式化读取\" class=\"headerlink\" title=\"2.4格式化读取\"></a>2.4格式化读取</h4><div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 内容较多且重要，故单列出来</div>\n<p><strong>①scanf家族</strong></p>\n<blockquote>\n<p><code>int fscanf(FILE *stream,char const *format,...)</code><br><code>int scanf(char const *format,...)</code><br><code>int sscanf(char const *string,char const *format,...)</code></p>\n</blockquote>\n<blockquote>\n<p>当格式化字符串到达<strong>末尾</strong>或者读取的输入<strong>不再与格式匹配</strong>时，输入停止，返回<strong>转化的输入值的数目</strong>，若没有读取输入值，则返回<code>EOF</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 这些函数都从一定的输入源读入数据，其中fscanf为stream指定的流，scanf为标准输入，sscanf为string指向的字符串</div>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 其中format为一个字符串，表示转换的格式代码</div>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 其中...表示一个可变长度的指针列表，从输入源读取的数据转化后就存储在这些指针指向的位置</div>\n\n\n<p><strong>②format字符串</strong>：<code>format</code>字符串可能包含三种内容，即<strong>空白字符</strong>、<strong>格式代码</strong>和<strong>其他字符</strong></p>\n<blockquote>\n<p><strong>空白字符</strong>：<strong>丢弃</strong>输入中的<strong>所有</strong>空白字符</p>\n</blockquote>\n<blockquote>\n<p><strong>格式代码</strong>：指定函数将<strong>如何解释</strong>接下来的<strong>输入字符</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>其他字符</strong>：当出现其他字符时，<strong>下一个输入字符</strong>必须与他匹配，若匹配，输入字符将被<strong>丢弃</strong>，若不匹配，则直接结束</p>\n</blockquote>\n<p><strong>③scanf格式代码</strong>：以<code>%</code>开头，后面接一个<strong>可选的星号（<code>*</code>）</strong>、<strong>可选的宽度</strong>、<strong>可选的限定符</strong>和<strong>格式代码</strong></p>\n<blockquote>\n<p><strong>星号（<code>*</code>）</strong>：使转换后的值被<strong>丢弃</strong>而不是被存储</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 可以用于跳过不需要的字符</div>\n<blockquote>\n<p><strong>宽度</strong>：用于<strong>限制</strong>读取的输入字符的<strong>个数</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 若没有限定宽度，则遇到空白字符停止</div>\n<blockquote>\n<p><strong>限定符</strong>：修改一些<strong>格式代码的含义</strong>，主要是指定<strong>参数的长度</strong>，有<code>h</code>、<code>l</code>、<code>L</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> h修饰整型和无符号数，表示short和unsigned short，l修饰整型、无符号数和浮点型表示long、unsigned long和double，L修饰浮点型表示long double</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 在转换short、long和long double时，采用适当的限定符，提高程序可移植性</div>\n<blockquote>\n<p><strong>格式代码</strong>：一个<strong>单字符</strong>，表明如何解释输入字符</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> c表示char，d表示十进制int，u表示十进制无符号数，f表示浮点数等等</div>\n\n<h4 id=\"2-5格式化写入\"><a href=\"#2-5格式化写入\" class=\"headerlink\" title=\"2.5格式化写入\"></a>2.5格式化写入</h4><p><strong>①printf家族</strong></p>\n<blockquote>\n<p><code>int fprintf(FILE *stream,char const *format,...)</code><br><code>int printf(char const *format,...)</code><br><code>int sprintf(char const *buffer,char const *format,...)</code></p>\n</blockquote>\n<blockquote>\n<p>根据<code>format</code>字符串将参数列表的值<strong>格式化</strong>，并输出到一定的<strong>输出源</strong>中，返回值为实际输出的字符数</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 其中fprintf为stream指定的流，printf为标准输入，sprintf为buffer指向的缓冲区</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 使用sprintf要注意缓冲区的溢出问题</div>\n\n<p><strong>②format格式代码</strong>：由<code>%</code>开头，后跟零个或多个<strong>标志字符</strong>、可选的<strong>最小字段宽度</strong>、可选的<strong>精度</strong>、可选的<strong>修改符</strong>以及<strong>转换类型</strong></p>\n<blockquote>\n<p><strong>标志字符</strong>：决定其表现形式，如<strong>对齐</strong>、<strong>填充格式</strong>等</p>\n</blockquote>\n<blockquote>\n<p><strong>字段宽度</strong>：指定出现在结果中的<strong>最小字符数</strong>，如果值的字符数小于该值，则对其进行<strong>填充</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>精度</strong>：以<strong>一个句号开头</strong>，后跟一个可选的<strong>十进制整数</strong>，不同<strong>转换类型</strong>的格式也不尽相同，对于<code>f</code>是规定<strong>小数点后的位数</strong>，对于<code>s</code>则是指定被转换的<strong>最多字符</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>修改符</strong>：类似于<code>scanf</code>格式代码中的限定符，指定<strong>长短类型</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>转换类型</strong>：转化为那种<strong>数据类型</strong>、<strong>格式</strong>和<strong>进制</strong>等，常用的有整数<code>d</code>、字符串<code>s</code>和浮点数<code>f</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 其中字段宽度和精度可以用星号替代，由print的下一个参数指定</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 当字符或短整数作为printf的参数时，会被先转化为整数，需要使用修改符，修改符在转换发生之前将其转换为对应类型，同样在长整型和int长度不同的环境中也需要对应的修改符指明其长度</div>\n\n<hr>\n<h3 id=\"3-标准函数库\"><a href=\"#3-标准函数库\" class=\"headerlink\" title=\"3.标准函数库\"></a>3.标准函数库</h3><p><strong>3.1整型函数</strong><br><strong>①算数</strong></p>\n<blockquote>\n<p><code>int abs(int value)</code>：返回<strong>绝对值</strong><br><code>div_t div(int x,int y)</code>：将第二个参数除以第一个参数，产生<strong>商</strong>和<strong>余数</strong>，其中商是<strong>最靠近精确解</strong>的整数，其中<code>div_t</code>是一个结构，其中<code>quot</code>是商。<code>rem</code>是余数</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 都有对应的处理长整型的版本</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> /操作符的除法运算结果并未精确定义，当其操作数任一为负数且不能整除时，商和精确解的舍入关系取决于编译器</div>\n<p><strong>②随机数</strong></p>\n<blockquote>\n<p><code>int rand (void)</code>：返回一个0至RAND_MAX区间内的<strong>伪随机数</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 为了得到特定范围的伪随机数，可以对其进行取模并添加偏移量</div>\n<blockquote>\n<p><code>void srand(unsigned int seed)</code>：利用<code>seed</code>对<code>rand</code>进行初始化</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> seed常常采用每天的时间，即srand((unsigned int)time(0))</div>\n<p><strong>③字符串转化</strong></p>\n<p><strong>3.2浮点型函数</strong><br><strong>①算数</strong></p>\n<blockquote>\n<p><code>double sqrt(double x)</code>：取平方根<br><code>double exp(double x)</code>：返回以e的x次幂<br><code>double floor(double x)</code>：返回不大于参数的最大整数<br><code>double ceil(double x)</code>：返回不小于参数的最小整数<br><code>double fabs(double x)</code>：返回参数的绝对值<br><code>double fmod(double x,double y)</code>：返回x除以y的余数</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 参数需要在定义域内，结果需要在double所能表示的范围内</div>\n<p><strong>②三角函数</strong>：<code>sin</code>、<code>cos</code>、<code>tan</code>、<code>asin</code>、<code>acos</code>、<code>atan</code></p>\n<blockquote>\n<p><code>double sin(double angle)</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> sin、cos、tan的参数是弧度，asin、acos、atan的参数范围从-1至1</div>\n<p><strong>③对数和指数函数</strong></p>\n<blockquote>\n<p><code>double exp(double x)</code>：e的x次幂<br><code>double pow(double x,double y)</code>：x的y次幂，其中x不能是负数，y必须是整数<br><code>double log(double x)</code>：以e为底的对数<br><code>double log10(double x)</code>：以10为底的对数</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 可以采用换底公式计算任意底数的对数</div>\n<p><strong>④浮点数表示</strong></p>\n<blockquote>\n<p><code>double frexp(double value,int *exponent)</code>：该函数返回<code>fraction</code>，并将<code>exponent</code>存储到第二个参数指定位置，其中<code>fraction*2^exponent = value</code><br><code>double ldexp(double fraction,int exponent)</code>：配合以上函数，还原该浮点数</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 用于浮点格式不兼容的机器之间传递浮点数</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 要记得包含math.h头文件，绝大部分参数和返回值都是double类型</div>\n<p><strong>3.3时间与日期函数</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 要记得包含time.h头文件</div>\n<p><strong>①处理器时间</strong></p>\n<blockquote>\n<p><code>clock_t clock(void)</code>：返回从<strong>程序开始</strong>起处理器消耗的时间<br><code>clock_t</code>由编译器定义，通常是处理器时钟滴答的次数，可以将其除以<code>CLOCKS_PER_SEC</code>转化为秒</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 如果想要精确的执行时间，可以在程序（某段语句）开始处与结尾处，各放置一个clock()，将结果相减</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 若操作系统不能追踪处理器时间，则返回已经流逝的实际时间数量</div>\n<p><strong>②当天时间</strong></p>\n<blockquote>\n<p><code>time_t time(time_t *returned_value)</code>：返回当前的时期和时间，并存储到参数指向位置，当机器无法提供时间或者时间值太大，就返回-1</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 不同的编译器有不同的格式，常见的形式是从某一特定时间开始流逝的秒数，在UNIX中，这个时间为1970年1月1日零点</div>\n<p><strong>③日期和时间的转换</strong></p>\n<blockquote>\n<p><code>double difftime(time_t time1,time_t time2)</code>：计算<code>time1-time2</code>，并将其转化为秒</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 不要直接调用两次time函数并相减</div>\n<p><code>struct tm *gmtime(time_t const *time_value)</code>：将时间转换为<strong>世界协调时间</strong><br><code>struct tm *localtime(time_t const *time_value)</code>：将时间转换为<strong>当地时间</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> tm结构包含了很多与时间有关的成员</div>\n<blockquote>\n<p><code>char *ctime(time_t const *time_value)</code>：接收一个<code>time_t</code>的指针，返回一个对应时间的字符串<br><code>char *asctime(struct tm const *tm_ptr)</code>：将<code>tm</code>结构转化为与<code>ctime</code>结果一样的字符串</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 字符串格式是固定的，编译器通常将其保存在一个静态数组中，如果想要特定格式的字符串，可以调用strftime()</div>\n<p><strong>3.4非本地跳转</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 要记得包含setjmp.h头文件</div>\n<p><strong>①含义</strong>：类似于<code>goto</code>语句，但是<strong>不局限于一个函数的作用域</strong>之内<br><strong>②相关函数</strong></p>\n<blockquote>\n<p><code>int setjmp(jmp_buf state)</code>：初始化一个<code>jmp_buf</code>变量，并将程序的状态信息保存到<strong>跳转缓冲区</strong>，调用<code>setjmp</code>的函数便称为<strong>顶层函数</strong><br><code>void longjmp(jump_buf state,int value)</code>：使得跳转缓冲区的状态被恢复，从而立即跳转到<strong>顶层函数</strong></p>\n</blockquote>\n<p><strong>3.5信号</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 要记得包含signal.h头文件</div>\n<p><strong>①含义</strong>：信号表示一种<strong>非程序本身</strong>引发的事件<br><strong>②标准定义的信号</strong></p>\n<blockquote>\n<p><code>SIGABRT</code>：程序请求异常终止，由<code>abort</code>函数引发，常见的错误是<strong>算数溢出</strong>以及<strong>除零错误</strong><br><code>SIGFPE</code>：发生一个算数错误<br><code>SIGILL</code>：检测到非法指令，比如<strong>指令版本不同</strong><br><code>SIGSEGV</code>：检测到对内存的非法访问，比如访问<strong>未分配给该程序的内存</strong>，或者出现<strong>边界对齐错误</strong><br><code>SIGINT</code>：受到一个交互性注意信号<br><code>SIGTERM</code>：受到一个终止程序的请求</p>\n</blockquote>\n<p><strong>③信号处理</strong></p>\n<blockquote>\n<p><code>int raise(int sig)</code>：显示地引发一个信号<br><code>void (*signal(int sig,void(*handler)(int))) (int)</code>：指定程序对信号的反应，简化后的原型为<code>void(*signal()) (int)</code>，则<code>signal</code>是一个返回类型为函数指针（对应信号以前的处理函数）的函数，其所接受参数<code>sig</code>为标准定义的信号，<code>handler</code>为希望信号发生时调用的函数，当函数调用失败时，返回<code>SIG_ERR</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 还可以将signal函数第二个参数替换为SIG_DFL，恢复对该信号的缺省反应；或者替换为SIG_IGN，使该信号被忽略</div>\n\n<p><strong>3.6执行环境</strong><br><strong>①终止程序</strong></p>\n<blockquote>\n<p><code>void abort(void)</code>：引发<code>SIGABRT</code>信号，若没有在程序中为其设置信号处理函数，则程序终止<br><code>void atexit(void(func)(void))</code>：把一些函数注册为<strong>退出函数</strong>，当程序<strong>正常终止（调用<code>exit()</code>函数）</strong>，退出函数将被调用</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 注意该退出函数的格式</div>\n<blockquote>\n<p><code>void exit(int status)</code>：当该函数被调用时，所有被<code>atexit()</code>注册的函数将按照他们注册的顺序被<strong>反序</strong>调用，随后刷新所有缓冲区，关闭所有文件，并删除所有临时文件</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> main函数return语句相当将返回值传递给exit()并调用它</div>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 由atexit()注册的函数中不能包含exit()，其结果是未定义的</div>\n<p><strong>②断言</strong></p>\n<blockquote>\n<p><code>void assert(int expression)</code>：当<code>expression</code>为假时，向<strong>标准错误</strong>打印一条诊断信息并<strong>终止程序</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 本质上是一个宏，其诊断信息的格式由编译器定义</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 可以通过定义NDEBUG宏消除所有断言，可以将其定义为任意值</div>\n<p><strong>③环境与系统</strong></p>\n<blockquote>\n<p><code>char *getenv(char const *name)</code>：在<strong>环境</strong>中查找一个特定的名字，如果找到则返回一个<strong>不能修改</strong>的字符指针，否则返回<code>NULL</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 环境：一个由编译器定义的名字/值对的列表</div>\n<blockquote>\n<p><code>void system(char const *command)</code>：将字符串传递给<strong>操作系统</strong>，将其作为一条命令，由<strong>系统的命令处理器</strong>运行</p>\n</blockquote>\n<p><strong>④排序与查找</strong></p>\n<blockquote>\n<p><code>qsort()</code>：以<strong>升序</strong>的方式对数组进行排序，与<strong>类型无关</strong>，其函数原型如下<br><code>void qsort(void *base,size_t n_elements,size_t el_size,int(*compare)(void const *,void const *))</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 其中第一个参数指向需要排序的数组，第二个参数指定数组中元素的数目，第三个参数指定每个元素的长度，第四个参数时一个用于比较的函数指针</div>\n<blockquote>\n<p><code>bsearch()</code>：在一个已经<strong>排好序</strong>的数组中用<strong>二分法</strong>查找一个特定的元素，其函数原型如下<br><code>void *bsearch(void const *key,void const *base,size_t n_elements,size_t el_size,int(*compare)(void const *,void const *))</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 其中第一个参数时需要查找的值，第二个参数指向查找的数组，第三个参数指定数组的数目，第四个参数是每个元素的长度，最后一个参数是用于比较的函数指针</div>\n\n<p><strong>3.7本地化</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 详细见《C与指针》p347-349</div>\n<p><strong>①</strong><code>locale</code>：一组<strong>特定的参数</strong>，每个国家和地区都不同<br><strong>②设置</strong><code>locale</code></p>\n<blockquote>\n<p><code>char *setlocale(int category,char const *locale)</code><br>其中，<code>category</code>用于指定<code>locale</code>的哪个部分需要被修改，<code>locale</code>指定新的<code>locale</code>，若该参数为<code>NULL</code>，则返回当前的<code>locale</code></p>\n</blockquote>\n<blockquote>\n<p><code>setlocale</code><strong>参数列表</strong><br><code>LC_ALL</code>：整个<code>locale</code><br><code>LC_COLLATE</code>：<strong>字符集对照序列</strong>，将影响<code>strcoll</code>和<code>strxfrm</code>函数的行为<br><code>LC_CTYPE</code>：定义于<code>ctype.h</code>中的函数所使用的<strong>字符类型分类</strong>信息<br><code>LC_MONETARY</code>：<strong>格式化货币值</strong>使用的相关字符<br><code>LC_NUMERIC</code>：<strong>格式化非货币值</strong>使用的相关字符<br><code>LC_TIME</code>：<code>strftime</code>函数的行为</p>\n</blockquote>\n"},{"title":"LeeCode刷题笔记（一）","seo_title":"seo名称","toc":true,"indent":true,"top":false,"comments":1,"archive":true,"cover":false,"mathjax":false,"pin":false,"top_meta":false,"bottom_meta":false,"sidebar":["toc"],"keywords":"文章关键词","updated":"2023-11-07T14:10:58.014Z","img":"/medias/featureimages/28.webp","date":"2023-11-07T14:10:58.014Z","summary":"数组","_content":"# LeeCode刷题笔记（一）\n## 一、二分法\n### 1.二分查找（704）\n```\nint search(int* nums, int numsSize, int target){\n    int left = 0;\n    int right = numsSize-1;\n    int middle = 0;\n    //若left小于等于right，说明区间中元素不为0\n    while(left<=right) {\n        //更新查找下标middle的值\n        middle = (left+right)/2;\n        //此时target可能会在[left,middle-1]区间中\n        if(nums[middle] > target) {\n            right = middle-1;\n        } \n        //此时target可能会在[middle+1,right]区间中\n        else if(nums[middle] < target) {\n            left = middle+1;\n        } \n        //当前下标元素等于target值时，返回middle\n        else if(nums[middle] == target){\n            return middle;\n        }\n    }\n    //若未找到target元素，返回-1\n    return -1;\n}\n```\n>当题目中出现**排序好**的数组且**没有重复元素**时，可以考虑使用二分法\n使用二分法时，要注意**边界条件**\n","source":"_posts/LeeCode刷题笔记（一）.md","raw":"---\ntitle: LeeCode刷题笔记（一）\nseo_title: seo名称\ntoc: true\nindent: true\ntop: false\ncomments: true\narchive: true\ncover: false\nmathjax: false\npin: false\ntop_meta: false\nbottom_meta: false\nsidebar:\n  - toc\ntag:\n  - LeeCode\ncategories: 项目实战\nkeywords: 文章关键词\nupdated: ''\nimg: /medias/featureimages/28.webp\ndate:\nsummary: 数组\n---\n# LeeCode刷题笔记（一）\n## 一、二分法\n### 1.二分查找（704）\n```\nint search(int* nums, int numsSize, int target){\n    int left = 0;\n    int right = numsSize-1;\n    int middle = 0;\n    //若left小于等于right，说明区间中元素不为0\n    while(left<=right) {\n        //更新查找下标middle的值\n        middle = (left+right)/2;\n        //此时target可能会在[left,middle-1]区间中\n        if(nums[middle] > target) {\n            right = middle-1;\n        } \n        //此时target可能会在[middle+1,right]区间中\n        else if(nums[middle] < target) {\n            left = middle+1;\n        } \n        //当前下标元素等于target值时，返回middle\n        else if(nums[middle] == target){\n            return middle;\n        }\n    }\n    //若未找到target元素，返回-1\n    return -1;\n}\n```\n>当题目中出现**排序好**的数组且**没有重复元素**时，可以考虑使用二分法\n使用二分法时，要注意**边界条件**\n","slug":"LeeCode刷题笔记（一）","published":1,"_id":"clmkphbf2000b9gvdfluv3ge8","layout":"post","photos":[],"link":"","content":"<h1 id=\"LeeCode刷题笔记（一）\"><a href=\"#LeeCode刷题笔记（一）\" class=\"headerlink\" title=\"LeeCode刷题笔记（一）\"></a>LeeCode刷题笔记（一）</h1><h2 id=\"一、二分法\"><a href=\"#一、二分法\" class=\"headerlink\" title=\"一、二分法\"></a>一、二分法</h2><h3 id=\"1-二分查找（704）\"><a href=\"#1-二分查找（704）\" class=\"headerlink\" title=\"1.二分查找（704）\"></a>1.二分查找（704）</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">int search(int* nums, int numsSize, int target){\n    int left = 0;\n    int right = numsSize-1;\n    int middle = 0;\n    //若left小于等于right，说明区间中元素不为0\n    while(left&lt;=right) {\n        //更新查找下标middle的值\n        middle = (left+right)/2;\n        //此时target可能会在[left,middle-1]区间中\n        if(nums[middle] &gt; target) {\n            right = middle-1;\n        } \n        //此时target可能会在[middle+1,right]区间中\n        else if(nums[middle] &lt; target) {\n            left = middle+1;\n        } \n        //当前下标元素等于target值时，返回middle\n        else if(nums[middle] == target){\n            return middle;\n        }\n    }\n    //若未找到target元素，返回-1\n    return -1;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>当题目中出现<strong>排序好</strong>的数组且<strong>没有重复元素</strong>时，可以考虑使用二分法<br>使用二分法时，要注意<strong>边界条件</strong></p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"LeeCode刷题笔记（一）\"><a href=\"#LeeCode刷题笔记（一）\" class=\"headerlink\" title=\"LeeCode刷题笔记（一）\"></a>LeeCode刷题笔记（一）</h1><h2 id=\"一、二分法\"><a href=\"#一、二分法\" class=\"headerlink\" title=\"一、二分法\"></a>一、二分法</h2><h3 id=\"1-二分查找（704）\"><a href=\"#1-二分查找（704）\" class=\"headerlink\" title=\"1.二分查找（704）\"></a>1.二分查找（704）</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">int search(int* nums, int numsSize, int target)&#123;\n    int left &#x3D; 0;\n    int right &#x3D; numsSize-1;\n    int middle &#x3D; 0;\n    &#x2F;&#x2F;若left小于等于right，说明区间中元素不为0\n    while(left&lt;&#x3D;right) &#123;\n        &#x2F;&#x2F;更新查找下标middle的值\n        middle &#x3D; (left+right)&#x2F;2;\n        &#x2F;&#x2F;此时target可能会在[left,middle-1]区间中\n        if(nums[middle] &gt; target) &#123;\n            right &#x3D; middle-1;\n        &#125; \n        &#x2F;&#x2F;此时target可能会在[middle+1,right]区间中\n        else if(nums[middle] &lt; target) &#123;\n            left &#x3D; middle+1;\n        &#125; \n        &#x2F;&#x2F;当前下标元素等于target值时，返回middle\n        else if(nums[middle] &#x3D;&#x3D; target)&#123;\n            return middle;\n        &#125;\n    &#125;\n    &#x2F;&#x2F;若未找到target元素，返回-1\n    return -1;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>当题目中出现<strong>排序好</strong>的数组且<strong>没有重复元素</strong>时，可以考虑使用二分法<br>使用二分法时，要注意<strong>边界条件</strong></p>\n</blockquote>\n"},{"title":"Linux内核设计与实现（一）","seo_title":"seo名称","toc":true,"indent":true,"top":false,"comments":1,"archive":true,"cover":false,"mathjax":false,"pin":false,"top_meta":false,"bottom_meta":false,"sidebar":["toc"],"keywords":"文章关键词","updated":"2023-11-07T14:10:58.014Z","date":"2023-11-07T14:10:58.014Z","img":"/medias/featureimages/3.webp","summary":"Linux内核基础","_content":"# Linux内核设计与实现（一）\n## Linux内核基础\n### 1.Unix和Linux\n**1.1Unix系统特点**\n①简洁：只有几百个系统调用且设计目的简单明确\n②一切皆文件：对数据和设备的操作可以通过同一套接口完成\n③C语言编写：移植能力强\n④进程创建十分迅速，提供了一套十分简单稳定的进程间通信元语\n#Linux是类Unix系统，没有直接使用Unix源码，但是**设计理念一致**且保证了**应用程序编程接口的一致**\n**1.2Linux和Unix的差异**\n①Linux支持动态加载和卸载内核模块\n②Linux支持对称多处理（SMP）机制\n③linux内核可以抢占\n④Linux不区分进程和线程\n⑤Linux提供具有设备类的面向对象的设备模型、热插拔事件\n### 2.基本概念\n**2.1内核空间**：内核等相关程序运行的空间，拥有**受保护的内存空间**和访问硬件的**所有权利**\n**2.2用户空间**：应用程序执行的空间，应用程序在用户空间只能看到系统允许他们使用的部分系统资源，只能使用某些特定的系统功能，不能直接访问硬件，也不能访问内核划分给**其他应用程序的内存空间**\n#当内核运行时，系统以内核态进入内核空间，当用户程序运行时，系统以用户态进入用户空间\n**2.3系统调用**：应用程序通过系统调用陷入内核，应用程序调用库函数，库函数通过系统调用接口调用**内核子系统/设备驱动程序**\n**2.4单内核**：内核以**单个静态二进制文件**的形式存放在磁盘中，运行在一个**单独的地址空间**上，内核之间的通信耗时可忽略不计\n**2.5微内核**：内核功能被划分为**多个独立的过程**，每个过程叫做一个**服务器**，每个服务器独立运行在**各自的地址空间**上，除了强烈要求特权服务的服务器运行在特权模式下，其他服务器运行在**用户空间**，每个服务器采用**进程间通信机制**沟通，可靠性更强，一个服务器出现问题不会祸及其他服务器，且服务器**可以加载也可以卸载**\n#Linux是**单内核**，但是汲取了微内核的精髓——模块化设计、抢占式内核、支持内核线程及动态装载内核模块\n### 3.Linux版本\n**[主版本号].[从版本号].[修订版本号].[稳定版本号]**\n#稳定版本号是偶数则是稳定版，反之为开发版\n\n### 4.简述编译内核\n**4.1获得内核源码**：在[Linux内核官网](http://www.kernel.org)下载\n①使用git clone和git pull获得内核源码\n②自行下载安装，有bzip2和gzip两种形式，其中bzip2是默认和首选下载格式，采用tar命令解压，解压后的源码在linux-x.y.z.目录下（x.y.z.为Linux版本号）\n③安装内核补丁进行版本的更迭\n**4.2安装内核源码**：系统本身的内核源码**位于/usr/src/linux目录**下，但是**不能将该源码树用于开发**，因为**编译C库**所用的内核版本链接到该棵树。应该建立**自己的主目录**，仅仅以**root身份**安装新内核到该目录，系统本身目录不进行任何更改\n**4.3配置内核**：将自己需要的**特定功能和驱动程序**编进内核（根目录下.config文件），常见内核配置工具如下\n①make config\n#遍历所有配置项，要求用户选择选项，耗时长，不推荐\n②make menuconfig或者make gconfig\n#图形界面，推荐\n③make defconfig \n#基于默认配置为你的体系结构创建一个配置\n④make oldconfig\n#根据.config文件生成/更新配置\n#配置选项CONFIG_IKCONFIG_PROC将**完整压缩**的配置文件存放在/proc/config.gz下，可以采用zcat /proc/config.gz > .config及make oldconfig克隆当前配置\n**4.4编译内核**\n①编译内核：make\n②减少编译垃圾信息：make > ../detritus或者make > dev/null\n#前者将编译信息重定向到该文件中，后者的/dev/null是个永无返回值的黑洞，但是警告和错误信息还是会打印出来\n③将编译过程拆分为多个并行的作业：make -jn\n#其中n为作业数，一般**每个处理器上衍生出一两个作业**\n**4.5安装新内核**：根据启动引导工具的说明操作即可\n\n### 5.内核开发的特点\n**5.1不能访问C库及标准C头文件**:对于内核来说，C库**太大且低效**了\n#不过大部分常用的C库函数在内核中已经得到了实现，比如string库对应<linux/string.h>\n#基本的头文件位于内核源码树**顶级目录的include目录**下\n#体系结构相关头文件位于arch/[architecture]/include/asm目录下,以asm为前缀，如<asm/ioctl.h>\n**5.2必须使用GUN C**\n**5.3没有内存保护机制**：当内核自身发生了内存错误会导致oops\n#内核中的内存**不分页**\n**5.4不要轻易使用浮点数**：在内核中使用浮点数，不仅仅要人工保存和回复浮点寄存器，还需要一些繁琐的操作\n**5.5容积小且固定的栈**：内核栈大小随体系结构改变\n**5.6同步和并发**：内核的许多特性要求可以并发的访问共享数据，这就可能产生竞争\n**5.7可移植性的重要性**","source":"_posts/Linux内核设计与实现（一）.md","raw":"---\ntitle: Linux内核设计与实现（一）\nseo_title: seo名称\ntoc: true\nindent: true\ntop: false\ncomments: true\narchive: true\ncover: false\nmathjax: false\npin: false\ntop_meta: false\nbottom_meta: false\nsidebar:\n  - toc\ntag:\n  - Linux内核\ncategories: Linux内核\nkeywords: 文章关键词\nupdated: ''\ndate: ''\nimg: /medias/featureimages/3.webp\nsummary: Linux内核基础\n---\n# Linux内核设计与实现（一）\n## Linux内核基础\n### 1.Unix和Linux\n**1.1Unix系统特点**\n①简洁：只有几百个系统调用且设计目的简单明确\n②一切皆文件：对数据和设备的操作可以通过同一套接口完成\n③C语言编写：移植能力强\n④进程创建十分迅速，提供了一套十分简单稳定的进程间通信元语\n#Linux是类Unix系统，没有直接使用Unix源码，但是**设计理念一致**且保证了**应用程序编程接口的一致**\n**1.2Linux和Unix的差异**\n①Linux支持动态加载和卸载内核模块\n②Linux支持对称多处理（SMP）机制\n③linux内核可以抢占\n④Linux不区分进程和线程\n⑤Linux提供具有设备类的面向对象的设备模型、热插拔事件\n### 2.基本概念\n**2.1内核空间**：内核等相关程序运行的空间，拥有**受保护的内存空间**和访问硬件的**所有权利**\n**2.2用户空间**：应用程序执行的空间，应用程序在用户空间只能看到系统允许他们使用的部分系统资源，只能使用某些特定的系统功能，不能直接访问硬件，也不能访问内核划分给**其他应用程序的内存空间**\n#当内核运行时，系统以内核态进入内核空间，当用户程序运行时，系统以用户态进入用户空间\n**2.3系统调用**：应用程序通过系统调用陷入内核，应用程序调用库函数，库函数通过系统调用接口调用**内核子系统/设备驱动程序**\n**2.4单内核**：内核以**单个静态二进制文件**的形式存放在磁盘中，运行在一个**单独的地址空间**上，内核之间的通信耗时可忽略不计\n**2.5微内核**：内核功能被划分为**多个独立的过程**，每个过程叫做一个**服务器**，每个服务器独立运行在**各自的地址空间**上，除了强烈要求特权服务的服务器运行在特权模式下，其他服务器运行在**用户空间**，每个服务器采用**进程间通信机制**沟通，可靠性更强，一个服务器出现问题不会祸及其他服务器，且服务器**可以加载也可以卸载**\n#Linux是**单内核**，但是汲取了微内核的精髓——模块化设计、抢占式内核、支持内核线程及动态装载内核模块\n### 3.Linux版本\n**[主版本号].[从版本号].[修订版本号].[稳定版本号]**\n#稳定版本号是偶数则是稳定版，反之为开发版\n\n### 4.简述编译内核\n**4.1获得内核源码**：在[Linux内核官网](http://www.kernel.org)下载\n①使用git clone和git pull获得内核源码\n②自行下载安装，有bzip2和gzip两种形式，其中bzip2是默认和首选下载格式，采用tar命令解压，解压后的源码在linux-x.y.z.目录下（x.y.z.为Linux版本号）\n③安装内核补丁进行版本的更迭\n**4.2安装内核源码**：系统本身的内核源码**位于/usr/src/linux目录**下，但是**不能将该源码树用于开发**，因为**编译C库**所用的内核版本链接到该棵树。应该建立**自己的主目录**，仅仅以**root身份**安装新内核到该目录，系统本身目录不进行任何更改\n**4.3配置内核**：将自己需要的**特定功能和驱动程序**编进内核（根目录下.config文件），常见内核配置工具如下\n①make config\n#遍历所有配置项，要求用户选择选项，耗时长，不推荐\n②make menuconfig或者make gconfig\n#图形界面，推荐\n③make defconfig \n#基于默认配置为你的体系结构创建一个配置\n④make oldconfig\n#根据.config文件生成/更新配置\n#配置选项CONFIG_IKCONFIG_PROC将**完整压缩**的配置文件存放在/proc/config.gz下，可以采用zcat /proc/config.gz > .config及make oldconfig克隆当前配置\n**4.4编译内核**\n①编译内核：make\n②减少编译垃圾信息：make > ../detritus或者make > dev/null\n#前者将编译信息重定向到该文件中，后者的/dev/null是个永无返回值的黑洞，但是警告和错误信息还是会打印出来\n③将编译过程拆分为多个并行的作业：make -jn\n#其中n为作业数，一般**每个处理器上衍生出一两个作业**\n**4.5安装新内核**：根据启动引导工具的说明操作即可\n\n### 5.内核开发的特点\n**5.1不能访问C库及标准C头文件**:对于内核来说，C库**太大且低效**了\n#不过大部分常用的C库函数在内核中已经得到了实现，比如string库对应<linux/string.h>\n#基本的头文件位于内核源码树**顶级目录的include目录**下\n#体系结构相关头文件位于arch/[architecture]/include/asm目录下,以asm为前缀，如<asm/ioctl.h>\n**5.2必须使用GUN C**\n**5.3没有内存保护机制**：当内核自身发生了内存错误会导致oops\n#内核中的内存**不分页**\n**5.4不要轻易使用浮点数**：在内核中使用浮点数，不仅仅要人工保存和回复浮点寄存器，还需要一些繁琐的操作\n**5.5容积小且固定的栈**：内核栈大小随体系结构改变\n**5.6同步和并发**：内核的许多特性要求可以并发的访问共享数据，这就可能产生竞争\n**5.7可移植性的重要性**","slug":"Linux内核设计与实现（一）","published":1,"_id":"clmkphbf4000g9gvda6gigk2j","layout":"post","photos":[],"link":"","content":"<h1 id=\"Linux内核设计与实现（一）\"><a href=\"#Linux内核设计与实现（一）\" class=\"headerlink\" title=\"Linux内核设计与实现（一）\"></a>Linux内核设计与实现（一）</h1><h2 id=\"Linux内核基础\"><a href=\"#Linux内核基础\" class=\"headerlink\" title=\"Linux内核基础\"></a>Linux内核基础</h2><h3 id=\"1-Unix和Linux\"><a href=\"#1-Unix和Linux\" class=\"headerlink\" title=\"1.Unix和Linux\"></a>1.Unix和Linux</h3><p><strong>1.1Unix系统特点</strong><br>①简洁：只有几百个系统调用且设计目的简单明确<br>②一切皆文件：对数据和设备的操作可以通过同一套接口完成<br>③C语言编写：移植能力强<br>④进程创建十分迅速，提供了一套十分简单稳定的进程间通信元语<br>#Linux是类Unix系统，没有直接使用Unix源码，但是<strong>设计理念一致</strong>且保证了<strong>应用程序编程接口的一致</strong><br><strong>1.2Linux和Unix的差异</strong><br>①Linux支持动态加载和卸载内核模块<br>②Linux支持对称多处理（SMP）机制<br>③linux内核可以抢占<br>④Linux不区分进程和线程<br>⑤Linux提供具有设备类的面向对象的设备模型、热插拔事件</p>\n<h3 id=\"2-基本概念\"><a href=\"#2-基本概念\" class=\"headerlink\" title=\"2.基本概念\"></a>2.基本概念</h3><p><strong>2.1内核空间</strong>：内核等相关程序运行的空间，拥有<strong>受保护的内存空间</strong>和访问硬件的<strong>所有权利</strong><br><strong>2.2用户空间</strong>：应用程序执行的空间，应用程序在用户空间只能看到系统允许他们使用的部分系统资源，只能使用某些特定的系统功能，不能直接访问硬件，也不能访问内核划分给<strong>其他应用程序的内存空间</strong><br>#当内核运行时，系统以内核态进入内核空间，当用户程序运行时，系统以用户态进入用户空间<br><strong>2.3系统调用</strong>：应用程序通过系统调用陷入内核，应用程序调用库函数，库函数通过系统调用接口调用<strong>内核子系统/设备驱动程序</strong><br><strong>2.4单内核</strong>：内核以<strong>单个静态二进制文件</strong>的形式存放在磁盘中，运行在一个<strong>单独的地址空间</strong>上，内核之间的通信耗时可忽略不计<br><strong>2.5微内核</strong>：内核功能被划分为<strong>多个独立的过程</strong>，每个过程叫做一个<strong>服务器</strong>，每个服务器独立运行在<strong>各自的地址空间</strong>上，除了强烈要求特权服务的服务器运行在特权模式下，其他服务器运行在<strong>用户空间</strong>，每个服务器采用<strong>进程间通信机制</strong>沟通，可靠性更强，一个服务器出现问题不会祸及其他服务器，且服务器<strong>可以加载也可以卸载</strong><br>#Linux是<strong>单内核</strong>，但是汲取了微内核的精髓——模块化设计、抢占式内核、支持内核线程及动态装载内核模块</p>\n<h3 id=\"3-Linux版本\"><a href=\"#3-Linux版本\" class=\"headerlink\" title=\"3.Linux版本\"></a>3.Linux版本</h3><p><strong>[主版本号].[从版本号].[修订版本号].[稳定版本号]</strong><br>#稳定版本号是偶数则是稳定版，反之为开发版</p>\n<h3 id=\"4-简述编译内核\"><a href=\"#4-简述编译内核\" class=\"headerlink\" title=\"4.简述编译内核\"></a>4.简述编译内核</h3><p><strong>4.1获得内核源码</strong>：在<a href=\"http://www.kernel.org/\">Linux内核官网</a>下载<br>①使用git clone和git pull获得内核源码<br>②自行下载安装，有bzip2和gzip两种形式，其中bzip2是默认和首选下载格式，采用tar命令解压，解压后的源码在linux-x.y.z.目录下（x.y.z.为Linux版本号）<br>③安装内核补丁进行版本的更迭<br><strong>4.2安装内核源码</strong>：系统本身的内核源码<strong>位于/usr/src/linux目录</strong>下，但是<strong>不能将该源码树用于开发</strong>，因为<strong>编译C库</strong>所用的内核版本链接到该棵树。应该建立<strong>自己的主目录</strong>，仅仅以<strong>root身份</strong>安装新内核到该目录，系统本身目录不进行任何更改<br><strong>4.3配置内核</strong>：将自己需要的<strong>特定功能和驱动程序</strong>编进内核（根目录下.config文件），常见内核配置工具如下<br>①make config<br>#遍历所有配置项，要求用户选择选项，耗时长，不推荐<br>②make menuconfig或者make gconfig<br>#图形界面，推荐<br>③make defconfig<br>#基于默认配置为你的体系结构创建一个配置<br>④make oldconfig<br>#根据.config文件生成/更新配置<br>#配置选项CONFIG_IKCONFIG_PROC将<strong>完整压缩</strong>的配置文件存放在/proc/config.gz下，可以采用zcat /proc/config.gz &gt; .config及make oldconfig克隆当前配置<br><strong>4.4编译内核</strong><br>①编译内核：make<br>②减少编译垃圾信息：make &gt; ../detritus或者make &gt; dev/null<br>#前者将编译信息重定向到该文件中，后者的/dev/null是个永无返回值的黑洞，但是警告和错误信息还是会打印出来<br>③将编译过程拆分为多个并行的作业：make -jn<br>#其中n为作业数，一般<strong>每个处理器上衍生出一两个作业</strong><br><strong>4.5安装新内核</strong>：根据启动引导工具的说明操作即可</p>\n<h3 id=\"5-内核开发的特点\"><a href=\"#5-内核开发的特点\" class=\"headerlink\" title=\"5.内核开发的特点\"></a>5.内核开发的特点</h3><p><strong>5.1不能访问C库及标准C头文件</strong>:对于内核来说，C库<strong>太大且低效</strong>了<br>#不过大部分常用的C库函数在内核中已经得到了实现，比如string库对应&lt;linux/string.h&gt;<br>#基本的头文件位于内核源码树<strong>顶级目录的include目录</strong>下<br>#体系结构相关头文件位于arch/[architecture]/include/asm目录下,以asm为前缀，如&lt;asm/ioctl.h&gt;<br><strong>5.2必须使用GUN C</strong><br><strong>5.3没有内存保护机制</strong>：当内核自身发生了内存错误会导致oops<br>#内核中的内存<strong>不分页</strong><br><strong>5.4不要轻易使用浮点数</strong>：在内核中使用浮点数，不仅仅要人工保存和回复浮点寄存器，还需要一些繁琐的操作<br><strong>5.5容积小且固定的栈</strong>：内核栈大小随体系结构改变<br><strong>5.6同步和并发</strong>：内核的许多特性要求可以并发的访问共享数据，这就可能产生竞争<br><strong>5.7可移植性的重要性</strong></p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"Linux内核设计与实现（一）\"><a href=\"#Linux内核设计与实现（一）\" class=\"headerlink\" title=\"Linux内核设计与实现（一）\"></a>Linux内核设计与实现（一）</h1><h2 id=\"Linux内核基础\"><a href=\"#Linux内核基础\" class=\"headerlink\" title=\"Linux内核基础\"></a>Linux内核基础</h2><h3 id=\"1-Unix和Linux\"><a href=\"#1-Unix和Linux\" class=\"headerlink\" title=\"1.Unix和Linux\"></a>1.Unix和Linux</h3><p><strong>1.1Unix系统特点</strong><br>①简洁：只有几百个系统调用且设计目的简单明确<br>②一切皆文件：对数据和设备的操作可以通过同一套接口完成<br>③C语言编写：移植能力强<br>④进程创建十分迅速，提供了一套十分简单稳定的进程间通信元语<br>#Linux是类Unix系统，没有直接使用Unix源码，但是<strong>设计理念一致</strong>且保证了<strong>应用程序编程接口的一致</strong><br><strong>1.2Linux和Unix的差异</strong><br>①Linux支持动态加载和卸载内核模块<br>②Linux支持对称多处理（SMP）机制<br>③linux内核可以抢占<br>④Linux不区分进程和线程<br>⑤Linux提供具有设备类的面向对象的设备模型、热插拔事件</p>\n<h3 id=\"2-基本概念\"><a href=\"#2-基本概念\" class=\"headerlink\" title=\"2.基本概念\"></a>2.基本概念</h3><p><strong>2.1内核空间</strong>：内核等相关程序运行的空间，拥有<strong>受保护的内存空间</strong>和访问硬件的<strong>所有权利</strong><br><strong>2.2用户空间</strong>：应用程序执行的空间，应用程序在用户空间只能看到系统允许他们使用的部分系统资源，只能使用某些特定的系统功能，不能直接访问硬件，也不能访问内核划分给<strong>其他应用程序的内存空间</strong><br>#当内核运行时，系统以内核态进入内核空间，当用户程序运行时，系统以用户态进入用户空间<br><strong>2.3系统调用</strong>：应用程序通过系统调用陷入内核，应用程序调用库函数，库函数通过系统调用接口调用<strong>内核子系统&#x2F;设备驱动程序</strong><br><strong>2.4单内核</strong>：内核以<strong>单个静态二进制文件</strong>的形式存放在磁盘中，运行在一个<strong>单独的地址空间</strong>上，内核之间的通信耗时可忽略不计<br><strong>2.5微内核</strong>：内核功能被划分为<strong>多个独立的过程</strong>，每个过程叫做一个<strong>服务器</strong>，每个服务器独立运行在<strong>各自的地址空间</strong>上，除了强烈要求特权服务的服务器运行在特权模式下，其他服务器运行在<strong>用户空间</strong>，每个服务器采用<strong>进程间通信机制</strong>沟通，可靠性更强，一个服务器出现问题不会祸及其他服务器，且服务器<strong>可以加载也可以卸载</strong><br>#Linux是<strong>单内核</strong>，但是汲取了微内核的精髓——模块化设计、抢占式内核、支持内核线程及动态装载内核模块</p>\n<h3 id=\"3-Linux版本\"><a href=\"#3-Linux版本\" class=\"headerlink\" title=\"3.Linux版本\"></a>3.Linux版本</h3><p><strong>[主版本号].[从版本号].[修订版本号].[稳定版本号]</strong><br>#稳定版本号是偶数则是稳定版，反之为开发版</p>\n<h3 id=\"4-简述编译内核\"><a href=\"#4-简述编译内核\" class=\"headerlink\" title=\"4.简述编译内核\"></a>4.简述编译内核</h3><p><strong>4.1获得内核源码</strong>：在<a href=\"http://www.kernel.org/\">Linux内核官网</a>下载<br>①使用git clone和git pull获得内核源码<br>②自行下载安装，有bzip2和gzip两种形式，其中bzip2是默认和首选下载格式，采用tar命令解压，解压后的源码在linux-x.y.z.目录下（x.y.z.为Linux版本号）<br>③安装内核补丁进行版本的更迭<br><strong>4.2安装内核源码</strong>：系统本身的内核源码<strong>位于&#x2F;usr&#x2F;src&#x2F;linux目录</strong>下，但是<strong>不能将该源码树用于开发</strong>，因为<strong>编译C库</strong>所用的内核版本链接到该棵树。应该建立<strong>自己的主目录</strong>，仅仅以<strong>root身份</strong>安装新内核到该目录，系统本身目录不进行任何更改<br><strong>4.3配置内核</strong>：将自己需要的<strong>特定功能和驱动程序</strong>编进内核（根目录下.config文件），常见内核配置工具如下<br>①make config<br>#遍历所有配置项，要求用户选择选项，耗时长，不推荐<br>②make menuconfig或者make gconfig<br>#图形界面，推荐<br>③make defconfig<br>#基于默认配置为你的体系结构创建一个配置<br>④make oldconfig<br>#根据.config文件生成&#x2F;更新配置<br>#配置选项CONFIG_IKCONFIG_PROC将<strong>完整压缩</strong>的配置文件存放在&#x2F;proc&#x2F;config.gz下，可以采用zcat &#x2F;proc&#x2F;config.gz &gt; .config及make oldconfig克隆当前配置<br><strong>4.4编译内核</strong><br>①编译内核：make<br>②减少编译垃圾信息：make &gt; ..&#x2F;detritus或者make &gt; dev&#x2F;null<br>#前者将编译信息重定向到该文件中，后者的&#x2F;dev&#x2F;null是个永无返回值的黑洞，但是警告和错误信息还是会打印出来<br>③将编译过程拆分为多个并行的作业：make -jn<br>#其中n为作业数，一般<strong>每个处理器上衍生出一两个作业</strong><br><strong>4.5安装新内核</strong>：根据启动引导工具的说明操作即可</p>\n<h3 id=\"5-内核开发的特点\"><a href=\"#5-内核开发的特点\" class=\"headerlink\" title=\"5.内核开发的特点\"></a>5.内核开发的特点</h3><p><strong>5.1不能访问C库及标准C头文件</strong>:对于内核来说，C库<strong>太大且低效</strong>了<br>#不过大部分常用的C库函数在内核中已经得到了实现，比如string库对应&lt;linux&#x2F;string.h&gt;<br>#基本的头文件位于内核源码树<strong>顶级目录的include目录</strong>下<br>#体系结构相关头文件位于arch&#x2F;[architecture]&#x2F;include&#x2F;asm目录下,以asm为前缀，如&lt;asm&#x2F;ioctl.h&gt;<br><strong>5.2必须使用GUN C</strong><br><strong>5.3没有内存保护机制</strong>：当内核自身发生了内存错误会导致oops<br>#内核中的内存<strong>不分页</strong><br><strong>5.4不要轻易使用浮点数</strong>：在内核中使用浮点数，不仅仅要人工保存和回复浮点寄存器，还需要一些繁琐的操作<br><strong>5.5容积小且固定的栈</strong>：内核栈大小随体系结构改变<br><strong>5.6同步和并发</strong>：内核的许多特性要求可以并发的访问共享数据，这就可能产生竞争<br><strong>5.7可移植性的重要性</strong></p>\n"},{"title":"Linux下基于VScode和CMake的C/C++开发","seo_title":"seo名称","toc":true,"indent":true,"top":false,"comments":1,"archive":true,"cover":false,"mathjax":false,"pin":false,"top_meta":false,"bottom_meta":false,"sidebar":["toc"],"keywords":"文章关键词","updated":"2023-11-07T14:10:58.014Z","img":"/medias/featureimages/8.webp","date":"2023-11-07T14:10:58.014Z","summary":"Linux下C/C++开发概述","_content":"\n# 代码开发实战（一）\n## Linux下基于VScode和CMake的C/C++开发\n### 1.Linux系统概述\n**1.1Linux系统简介：**一个开源的**多用户多任务**的操作系统\n{%right%}\nLinux中一切皆文件\n{%endright%}\n**1.2目录结构**\n>/：根目录，最顶层的目录\nbin：全称binary，含义是二进制。该目录中存储的都是一些**二进制文件**，文件都是可以被运行的。\ndev：该目录中主要存放的是**外接设备**，例如盘、其他的光盘等。在其中的外接设备是不能直接被使用的，需要挂载（类似window下的分配盘符）。\netc：该目录主要存储一些**配置文件**。\nhome：表示“家”，表示除了root用户以外**其他用户的家目录**，类似于windows下的User/用户目录。\nproc：全称process，表示进程，该目录中存储的是Linux运行时候的**进程**。\nroot：该目录是**root用户**自己的家目录。\nsbin：全称super binary，该目录也是存储一些可以被执行的**二进制文件**，但是必须得有**super权限**的用户才能执行。\ntmp：表示“临时”的，当系统运行时候产生的**临时文件**会在这个目录存着。\nusr：存放的是用户**系统自带文件**。类似于windows下的program files。\nvar：存放的程序/系统的**日志文件**的目录。\nmnt：当外接设备需要**挂载**的时候，就需要挂载到mnt目录下。\nboot：**内核文件**及引导加载程序（**开机文件**）\nopt: 存放可选软件的安装目录，一些**第三方应用程序**可能会安装在这个目录下。\n\n**1.3指令与选项**\n①指令格式：`指令 [选项] [对象]`\n>选项和操作对象都可以没有，也可以是**多个**\n\n②路径相关指令\n>`pwd`：打印当前终端**所在的目录**\n`ls [选项] [路径]`：列出指定路径下的文件/文件夹的名称，并以指定的格式进行显示（不指定路径就是当前路径）\n`cd [路径]`：切换到对应路径下（不指定路径即为当前用户家目录）\n\n③文件相关指令\n>`mkdir`：创建目录\n`touch`：创建新文件/将指定文件的修改时间设置为当前时间\n`rm`：删除文件/目录\n`cp`：复制文件/文件夹到指定的位置\n`mv`：移动文件到新的位置，或者重命名文件\n`vi`：编辑文件\n\n③辅助指令\n>`man`：打开Linux下的命令手册\n`reboot`：重启系统\n`shutdown`：关机\n\n**1.4开发环境搭建**\n①安装GCC，GDB\n```\nsudo apt update\n# 通过以下命令安装编译器和调试器\nsudo apt install build-essential gdb\n```\n②安装Cmake和VSCode\n```\nsudo apt install cmake\nsudo apt install code\n```\n\n### 2.GCC/G++编译器\n**2.1概述：**gcc编译器用于编译C语言，g++用于编译C++语言\n{%warning%}\n虽然g++可以编译C代码，但它会将源代码解析为C++代码进行编译，某些特定的C++功能和语法可能会被启用\n{%endwarning%}\n**2.2编译过程及指令**\n①预处理：`g++  -E test.cpp  -o test.i`\n>-E选项指示编译器仅对输入文件进行预处理\n\n②编译：`g++  -S test.i  -o   test.s`\n>-S编译选项告诉g++在为C++代码产生了汇编语言文件后停止编译\ng++产生的汇编语言文件的缺省扩展名是.s\n\n③汇编：`g++  -c test.s  -o test.o`\n>-c选项告诉g++仅把源代码编译为机器语言的目标代码\n缺省时g++建立的目标代码文件有一个.o的扩展名。\n\n④链接：`g++ test.o  -o test`\n>-o编译选项来为将产生的可执行文件用指定的文件名\n\n{%right%}\n以上四个过程可以合并为g++ test.cpp -o test\n{%endright%}\n\n**2.3重要编译参数**\n①`-g`：编译带调试信息的可执行文件\n②`-O[n]`：优化源代码\n>`-O`选项告诉g++对源代码进行基本优化。这些优化在大多数情况下都会使程序执行的更快。 \n`-O0`表示不做优化\n`-O1`为默认优化\n`-O2`除了完成`-O1`的优化之外，还进行一些额外的调整工作，如指令调整等。\n`-O3`则包括循环展开和其他一些与处理特性相关的优化工作。\n\n③`-l`：指定库文件\n>`-l`参数(小写)就是用来指定程序要链接的库，`-l`参数紧接着就是库名\n在`/lib`和`/usr/lib`和`/usr/local/lib`里的库直接用`-l`参数就能链接\n\n④`-L`：指定库文件路径\n>如果库文件没放在上面三个目录里，需要使用`-L`参数(大写)指定库文件所在目录\n`-L`参数跟着的是库文件所在的目录名\n\n⑤-I：指定头文件搜索目录\n>`/usr/include`目录一般是不用指定的，gcc知道去那里找，但是如果头文件**不在**`/usr/icnclude`里我们就要用`-I`参数指定了，比如头文件放在`/myinclude`目录里，那编译命令行就要加上`I/myinclude` 参数了\n\n⑥`-Wall`：打印警告信息\n⑦`-w`：关闭警告信息\n⑧`-std=[语言版本]`:设置编译标准\n⑨`-o`：指定输出文件名\n{%warning%}\n注意-o参数和其他参数位置不同，其他参数在g++和编译文件之间，-o在编译文件之后，并接空格和文件名\n{%endwarning%}\n⑩`-D`：定义宏\n>`g++ -DVERSION=2.0 main.cpp -o program`：将`main.cpp文`件中的`VERSION`宏定义为2\n{%right%}\n-DDEBUG定义DEBUG宏，可能文件中有DEBUG宏部分的相关信息，用个DDEBUG来选择开启或关闭DEBUG\n{%endright%}\n\n**2.4编译过程**\n①目录结构\n```\n# 最初目录结构\n.\n├── include\n│   └── Swap.h\n├── main.cpp\n└── src\n   └── Swap.cpp\n```\n②直接编译：g++ main.cpp src/Swap.cpp -Iinclude\n③链接静态库编译\n```\n## 进入src目录下\n$cd src\n# 汇编，生成Swap.o文件\ng++ Swap.cpp -c -I../include\n# 生成静态库libSwap.a\nar rs libSwap.a Swap.o\n## 回到上级目录\n$cd ..\n# 链接，生成可执行文件:staticmain\ng++ main.cpp -Iinclude -Lsrc -lSwap -o staticmain\n```\n④链接动态库编译\n```\n## 进入src目录下\n$cd src\n# 生成动态库libSwap.so\ng++ Swap.cpp -I../include -fPIC -shared -o libSwap.so\n## 上面命令等价于以下两条命令\n# gcc Swap.cpp -I../include -c -fPIC\n# gcc -shared -o libSwap.so Swap.o\n## 回到上级目录\n$cd ..\n# 链接，生成可执行文件:sharemain\ng++ main.cpp -Iinclude -Lsrc -lSwap -o sharemain\n```\n{%warning%}\n运行动态库文件时，需要指定动态库所在位置：LD_LIBRARY_PATH=src ./sharemain\n{%endwarning%}\n\n### 3.GDB调试器\n**3.1概述：**\n①简介：GDB是一个用来调试C/C++程序的功能强大的调试器，是Linux系统开发C/C++最常用的调试器\n②主要功能\n>设置**断点**：使程序在指定的代码行上暂停执行，便于观察\n**单步执行**程序，便于调试\n查看程序中**变量值的变化**\n动态改变程序的**执行环境**\n分析崩溃程序产生的**core文件**\n\n③使用：在命令行中输入`gdb [exefilename]`即可启动GDB调试器\n{%warning%}\n编译程序时需要加上-g，之后才能用gdb进行调试：gcc -g main.c -o main\n{%endwarning%}\n**3.2常用指令**\n>`help(h)`：查看命令帮助，具体命令查询在gdb中输入help + 命令\n`run(r)`：重新开始运行文件（run-text：加载文本文件，run-bin：加载二进制文件）\n`start`：单步执行，运行程序，停在第一行执行语句\n`list(l)`：查看原代码（list-n,从第n行开始查看代码。list+ 函数名：查看具体函数）\n`set`：设置变量的值\n`next(n)`：单步调试（逐过程，函数直接执行）\n`step(s)`：单步调试（逐语句：跳入自定义函数内部执行）\n`backtrace(bt)`：查看函数的调用的栈帧和层级关系\n`frame(f)`：切换函数的栈帧\n`info(i)`：查看函数内部局部变量的数值\n`finish`：结束当前函数，返回到函数调用点\n`continue(c)`：继续运行\n`print(p)`：打印值及地址\n`quit(q)`：退出gdb\n`break+num(b)`：在第num行设置断点\n`info breakpoints`：查看当前设置的所有断点\n`delete breakpoints num(d)`：删除第num个断点\n`display`：追踪查看具体变量值\n`undisplay`：取消追踪观察变量\n`watch`：被设置观察点的变量发生修改时，打印显示\n`i watch`：显示观察点\n`enable breakpoint`：启用断点\n`disable breakpoints`：禁用断点\n`x`：查看内存x/20xw 显示20个单元，16进制，4字节每单元\n`run argv[1] argv[2]`：调试时命令行传参\n`set follow-fork-mode child`：Makefile项目管理：选择跟踪父子进程fork()\n{%right%}\n回车键：重复上一命令\n{%endright%}\n\n### 4.IDE(VSCode)\n**4.1简介**\n①界面可分为四部分\n>侧边栏\n菜单栏\n编辑区\n状态栏\n\n②插件安装\n>C/C++\nCMake\nCMake Tools\n\n③项目文件夹结构：一般将头文件放在`include`文件夹中，将源文件（记得要包含对应头文件）放在`src`文件夹中，随后`main`函数独立于这两个文件夹，**包含对应头文件**即可\n{%right%}\n在头文件中，可以添加#pragma once防止头文件重复编译\n{%endright%}\n**4.2快捷键**\n①常用快捷键\n>`Ctrl + P`：转到文件/其他常用操作 \n`Ctrl + W`：关闭当前文件\n`Ctrl + Shift + P`：打开命令面板\n`Alt + Up/Down`当前行上移/下移\n`F2`：变量统一重命名 \n`Ctrl + B`：关闭侧边栏  \n`F12`：转到定义处\n`Ctrl+C`：复制文本  \n`Ctrl+V`：粘贴文本 \n`Ctrl+S`：保存文件\n`Ctrl+Z`：撤销操作 \n{%right%}\nCtrl +\\`：打开终端\n{%endright%}\n\n②`Ctrl + P`窗口相关操作\n>直接输入文件名，跳转到文件\n`?`：列出当前可执行的动作\n`!`：显示`Errors`或`Warnings`，也可以`Ctrl+Shift+M`\n`:`：跳转到行数，也可以`Ctrl+G`直接进入\n`@`：跳转到`symbol`（搜索变量或者函数），也可以`Ctrl+Shift+O`直接进入\n`@`：根据分类跳转`symbol`，查找属性或函数，也可以`Ctrl+Shift+O`后输入`:`进入\n`#`：根据名字查找`symbol`，也可以`Ctrl+T`\n\n③编辑器与窗口管理\n>`Ctrl+Shift+N`：打开一个新窗口\n`Ctrl+Shift+W`：关闭窗口\n`Ctrl+N`：新建文件 \n`Ctrl+Tab`：文件之间切换\n`Ctrl+\\`：切出一个新的编辑器（最多 3 个） \n`Ctrl+1 Ctrl+2 Ctrl+3`：左中右3个编辑器的快捷键 \n`Ctrl+k然后按Left或Right`：编辑器换位置\n\n④代码格式调整\n>代码行缩进：`Ctrl+[`、`Ctrl+]`\n代码格式化：`Shift+Alt+F`\n上下移动一行：`Alt+Up`或`Alt+Down`\n向上向下复制一行：`Shift+Alt+Up`或`Shift+Alt+Down`\n在当前行下边插入一行：`Ctrl+Enter`\n在当前行上方插入一行：`Ctrl+Shift+Enter`\n\n⑤光标相关\n>移动到行首：`Home`\n移动到行尾：`End`\n移动到文件结尾：`Ctrl+End`\n移动到文件开头：`Ctrl+Home`\n移动到定义处：`F12`\n定义处缩略图（只看一眼而不跳转过去）：`Alt+F12`\n移动到后半个括号：`Ctrl+Shift+]`\n选择从光标到行尾：`Shift+End`\n选择从行首到光标处：`Shift+Home`\n删除光标右侧的所有字：`Ctrl+Delete`\n扩展/缩小选取范围：`Shift+Alt+Left`和`Shift+Alt+Right`\n同时选中所有匹配：`Ctrl+Shift+L`，`Ctrl+D`下一个匹配的也被选中\n\n⑥代码重构\n>找到所有的引用：`Shift+F12`\n同时修改本文件中所有匹配的：`Ctrl+F12`\n重命名：比如要修改一个方法名，可以选中后按`F2`，输入新的名字，回车，会发现所有的文件都修改了\n跳转到下一个Error或Warning：当有多个错误时可以按`F8`逐个跳转\n查看diff：在`explorer`里选择文件右键`Set file to compare`，然后需要对比的文件上右键选择`Compare with file_name_you_chose`\n\n⑦查找替换\n>查找：`Ctrl+F`\n查找替换：`Ctrl+H`\n整个文件夹中查找：`Ctrl+Shift+F`\n\n⑧显示相关\n>全屏：`F11`\nzoomIn/zoomOut：`Ctrl +/-`\n侧边栏显/隐：`Ctrl+B`\n显示资源管理器：`Ctrl+Shift+E`\n显示搜索：`Ctrl+Shift+F`\n显示Git：`Ctrl+Shift+G`\n显示Debug：`Ctrl+Shift+D`\n显示Output：`Ctrl+Shift+U`\n\n**4.3Jason文件配置**\n\n### 5.CMake\n**5.1概述**\n①简介：CMake是一个**跨平台**的安装编译工具，可以使用相同的`CMakeLists.txt`文件在多个操作系统（如Windows、Linux、macOS等）上生成适应不同编译器和构建工具的构建脚本\n>如果不使用CMake的话，就要自己写针对不同平台的构建脚本，修改项目时，就十分麻烦\n\n\n②基本语法格式：`指令(参数1 参数n)`\n>参数之间使用**空格**或者**分号**隔开\n指令时大小写无关的，参数是大小写相关的\n变量使用`${变量}`方式取值，但是在`IF`控制语句中是**直接使用变量名**\n\n③目录结构\n>项目主目录存在一个`CMakeLists.txt`文件\n**包含源文件的子文件夹**包含`CMakeLists.txt`文件:主目录的`CMakeLists.txt`通过`add_subdirectory`添加子目录即可；\n**包含源文件的子文件夹**未包含`CMakeLists.txt`文件:子目录编译规则体现在主目录的`CMakeLists.txt`中；\n\n④编译流程\n>手动编写`CMakeLists.txt`\n执行命令`cmake PATH`生成`Makefile`(`PATH`是**顶层CMakeLists.txt**所在的目录)。\n执行命令`make`进行编译。\n\n⑤外部构建(out-of-source build)\n```\n## 外部构建\n# 1. 在项目顶层目录下，创建build文件夹\nmkdir build\n# 2. 进入到build文件夹\ncd build\n# 3. 编译上级目录的CMakeLists.txt，生成Makefile和其他文件\ncmake ..\n# 4. 执行make命令，生成target\nmake\n```\n>内部构建会在同级目录下产生一大堆中间文件，这些中间文件并不是我们最终所需要的，和工程源文件放在一起会显得杂乱无章，不推荐使用\n\n\n**5.2常用语法**\n①`cmake_minimum_required`：指定CMake的**最小版本要求**\n>语法：`cmake_minimum_required(VERSION versionNumber [FATAL_ERROR])`\n示例：`cmake_minimum_required(VERSION 2.8.3)` \n#CMake最小版本要求为2.8.3\n\n②`project`：定义**工程名称**，并可指定工程支持的语言\n>语法：`project(projectname [CXX] [C] [Java])`\n示例：`project(HELLOWORLD) ` \n#指定工程名为HELLOWORLD\n\n③`set`：显式的定义变量\n>语法：`set(VAR [VALUE] [CACHE TYPE DOCSTRING [FORCE]])`\n示例：`set(SRC sayhello.cpp hello.cpp)` \n#定义SRC变量，其值为sayhello.cpp hello.cpp，即两个文件\n\n\n④`include_directories`：向工程添加多个特定的**头文件搜索路径**\n>语法：`include_directories([AFTER|BEFORE] [SYSTEM] dir1 dir2 ...)`\n示例：`include_directories(/usr/include/myincludefolder ./include) `\n#将/usr/include/myincludefolder 和 ./include 添加到头文件搜索路径，绝对路径和相对路径均可\n\n⑤`link_directories`：向工程添加多个特定的**库文件搜索路径**\n>语法：`link_directories(dir1 dir2 ...)`\n示例：`link_directories(/usr/lib/mylibfolder ./lib)`\n#将/usr/lib/mylibfolder 和 ./lib 添加到库文件搜索路径\n\n⑥`add_library`：生成**库文件**\n>语法：`add_library(libname [SHARED|STATIC|MODULE] [EXCLUDE_FROM_ALL] source1 source2 ... sourceN)`\n示例：`add_library(hello SHARED ${SRC})`\n#通过变量SRC生成libhello.so共享库\n\n⑦`add_compile_options`：添加**编译参数**\n>语法：`add_compile_options(<options>)`\n示例：`add_compile_options(-Wall -std=c++11 -O2)`\n#添加编译参数 -Wall -std=c++11 -O2\n\n⑧`add_executable`：生成**可执行文件**\n>语法：`add_executable(exename source1 source2 ... sourceN)`\n示例：`add_executable(main main.cpp)`\n#编译main.cpp生成可执行文件main\n\n⑨`target_link_libraries`：为target**添加需要链接的共享库**\n>语法：`target_link_libraries(target library1<debug | optimized> library2...)`\n示例：`target_link_libraries(main hello)`\n#将hello动态库文件链接到可执行文件main\n\n⑩`add_subdirectory`：向当前工程**添加存放源文件的子目录**，并可以指定中间二进制和目标二进制存放的位置\n>语法：`add_subdirectory(source_dir [binary_dir] [EXCLUDE_FROM_ALL])`\n示例：`add_subdirectory(src)`\n#添加src子目录，src中**需有一个CMakeLists.txt**\n\n⑪`aux_source_directory`：发现**一个目录下所有的源代码文件**并将列表存储在一个变量中，这个指令临时被用来自动构建源文件列表\n>语法：`aux_source_directory(dir VARIABLE)`\n示例：\n`aux_source_directory(. SRC)` #定义SRC变量，其值为当前目录下所有的源代码文件\n`add_executable(main ${SRC})` #编译SRC变量所代表的源代码文件，生成main可执行文件\n\n**5.3常用变量**\n①`CMAKE_C_FLAGS`：gcc编译选项\n②`CMAKE_CXX_FLAGS`：g++编译选项\n>`set( CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++11\")`\n#在CMAKE_CXX_FLAGS编译选项后追加-std=c++11\n③`CMAKE_C_COMPILER`：指定C编译器\n④`CMAKE_CXX_COMPILER`：指定C++编译器\n⑤`EXECUTABLE_OUTPUT_PATH`：可执行文件输出的存放路径\n⑥`LIBRARY_OUTPUT_PATH`：库文件输出的存放路径\n\n","source":"_posts/Linux下基于VScode和CMake的C语言开发.md","raw":"---\ntitle: Linux下基于VScode和CMake的C/C++开发\nseo_title: seo名称\ntoc: true\nindent: true\ntop: false\ncomments: true\narchive: true\ncover: false\nmathjax: false\npin: false\ntop_meta: false\nbottom_meta: false\nsidebar:\n  - toc\ntag:\n  - 软技能\n  - 代码开发实战\ncategories: 代码实战\nkeywords: 文章关键词\nupdated: ''\nimg: /medias/featureimages/8.webp\ndate:\nsummary: Linux下C/C++开发概述\n---\n\n# 代码开发实战（一）\n## Linux下基于VScode和CMake的C/C++开发\n### 1.Linux系统概述\n**1.1Linux系统简介：**一个开源的**多用户多任务**的操作系统\n{%right%}\nLinux中一切皆文件\n{%endright%}\n**1.2目录结构**\n>/：根目录，最顶层的目录\nbin：全称binary，含义是二进制。该目录中存储的都是一些**二进制文件**，文件都是可以被运行的。\ndev：该目录中主要存放的是**外接设备**，例如盘、其他的光盘等。在其中的外接设备是不能直接被使用的，需要挂载（类似window下的分配盘符）。\netc：该目录主要存储一些**配置文件**。\nhome：表示“家”，表示除了root用户以外**其他用户的家目录**，类似于windows下的User/用户目录。\nproc：全称process，表示进程，该目录中存储的是Linux运行时候的**进程**。\nroot：该目录是**root用户**自己的家目录。\nsbin：全称super binary，该目录也是存储一些可以被执行的**二进制文件**，但是必须得有**super权限**的用户才能执行。\ntmp：表示“临时”的，当系统运行时候产生的**临时文件**会在这个目录存着。\nusr：存放的是用户**系统自带文件**。类似于windows下的program files。\nvar：存放的程序/系统的**日志文件**的目录。\nmnt：当外接设备需要**挂载**的时候，就需要挂载到mnt目录下。\nboot：**内核文件**及引导加载程序（**开机文件**）\nopt: 存放可选软件的安装目录，一些**第三方应用程序**可能会安装在这个目录下。\n\n**1.3指令与选项**\n①指令格式：`指令 [选项] [对象]`\n>选项和操作对象都可以没有，也可以是**多个**\n\n②路径相关指令\n>`pwd`：打印当前终端**所在的目录**\n`ls [选项] [路径]`：列出指定路径下的文件/文件夹的名称，并以指定的格式进行显示（不指定路径就是当前路径）\n`cd [路径]`：切换到对应路径下（不指定路径即为当前用户家目录）\n\n③文件相关指令\n>`mkdir`：创建目录\n`touch`：创建新文件/将指定文件的修改时间设置为当前时间\n`rm`：删除文件/目录\n`cp`：复制文件/文件夹到指定的位置\n`mv`：移动文件到新的位置，或者重命名文件\n`vi`：编辑文件\n\n③辅助指令\n>`man`：打开Linux下的命令手册\n`reboot`：重启系统\n`shutdown`：关机\n\n**1.4开发环境搭建**\n①安装GCC，GDB\n```\nsudo apt update\n# 通过以下命令安装编译器和调试器\nsudo apt install build-essential gdb\n```\n②安装Cmake和VSCode\n```\nsudo apt install cmake\nsudo apt install code\n```\n\n### 2.GCC/G++编译器\n**2.1概述：**gcc编译器用于编译C语言，g++用于编译C++语言\n{%warning%}\n虽然g++可以编译C代码，但它会将源代码解析为C++代码进行编译，某些特定的C++功能和语法可能会被启用\n{%endwarning%}\n**2.2编译过程及指令**\n①预处理：`g++  -E test.cpp  -o test.i`\n>-E选项指示编译器仅对输入文件进行预处理\n\n②编译：`g++  -S test.i  -o   test.s`\n>-S编译选项告诉g++在为C++代码产生了汇编语言文件后停止编译\ng++产生的汇编语言文件的缺省扩展名是.s\n\n③汇编：`g++  -c test.s  -o test.o`\n>-c选项告诉g++仅把源代码编译为机器语言的目标代码\n缺省时g++建立的目标代码文件有一个.o的扩展名。\n\n④链接：`g++ test.o  -o test`\n>-o编译选项来为将产生的可执行文件用指定的文件名\n\n{%right%}\n以上四个过程可以合并为g++ test.cpp -o test\n{%endright%}\n\n**2.3重要编译参数**\n①`-g`：编译带调试信息的可执行文件\n②`-O[n]`：优化源代码\n>`-O`选项告诉g++对源代码进行基本优化。这些优化在大多数情况下都会使程序执行的更快。 \n`-O0`表示不做优化\n`-O1`为默认优化\n`-O2`除了完成`-O1`的优化之外，还进行一些额外的调整工作，如指令调整等。\n`-O3`则包括循环展开和其他一些与处理特性相关的优化工作。\n\n③`-l`：指定库文件\n>`-l`参数(小写)就是用来指定程序要链接的库，`-l`参数紧接着就是库名\n在`/lib`和`/usr/lib`和`/usr/local/lib`里的库直接用`-l`参数就能链接\n\n④`-L`：指定库文件路径\n>如果库文件没放在上面三个目录里，需要使用`-L`参数(大写)指定库文件所在目录\n`-L`参数跟着的是库文件所在的目录名\n\n⑤-I：指定头文件搜索目录\n>`/usr/include`目录一般是不用指定的，gcc知道去那里找，但是如果头文件**不在**`/usr/icnclude`里我们就要用`-I`参数指定了，比如头文件放在`/myinclude`目录里，那编译命令行就要加上`I/myinclude` 参数了\n\n⑥`-Wall`：打印警告信息\n⑦`-w`：关闭警告信息\n⑧`-std=[语言版本]`:设置编译标准\n⑨`-o`：指定输出文件名\n{%warning%}\n注意-o参数和其他参数位置不同，其他参数在g++和编译文件之间，-o在编译文件之后，并接空格和文件名\n{%endwarning%}\n⑩`-D`：定义宏\n>`g++ -DVERSION=2.0 main.cpp -o program`：将`main.cpp文`件中的`VERSION`宏定义为2\n{%right%}\n-DDEBUG定义DEBUG宏，可能文件中有DEBUG宏部分的相关信息，用个DDEBUG来选择开启或关闭DEBUG\n{%endright%}\n\n**2.4编译过程**\n①目录结构\n```\n# 最初目录结构\n.\n├── include\n│   └── Swap.h\n├── main.cpp\n└── src\n   └── Swap.cpp\n```\n②直接编译：g++ main.cpp src/Swap.cpp -Iinclude\n③链接静态库编译\n```\n## 进入src目录下\n$cd src\n# 汇编，生成Swap.o文件\ng++ Swap.cpp -c -I../include\n# 生成静态库libSwap.a\nar rs libSwap.a Swap.o\n## 回到上级目录\n$cd ..\n# 链接，生成可执行文件:staticmain\ng++ main.cpp -Iinclude -Lsrc -lSwap -o staticmain\n```\n④链接动态库编译\n```\n## 进入src目录下\n$cd src\n# 生成动态库libSwap.so\ng++ Swap.cpp -I../include -fPIC -shared -o libSwap.so\n## 上面命令等价于以下两条命令\n# gcc Swap.cpp -I../include -c -fPIC\n# gcc -shared -o libSwap.so Swap.o\n## 回到上级目录\n$cd ..\n# 链接，生成可执行文件:sharemain\ng++ main.cpp -Iinclude -Lsrc -lSwap -o sharemain\n```\n{%warning%}\n运行动态库文件时，需要指定动态库所在位置：LD_LIBRARY_PATH=src ./sharemain\n{%endwarning%}\n\n### 3.GDB调试器\n**3.1概述：**\n①简介：GDB是一个用来调试C/C++程序的功能强大的调试器，是Linux系统开发C/C++最常用的调试器\n②主要功能\n>设置**断点**：使程序在指定的代码行上暂停执行，便于观察\n**单步执行**程序，便于调试\n查看程序中**变量值的变化**\n动态改变程序的**执行环境**\n分析崩溃程序产生的**core文件**\n\n③使用：在命令行中输入`gdb [exefilename]`即可启动GDB调试器\n{%warning%}\n编译程序时需要加上-g，之后才能用gdb进行调试：gcc -g main.c -o main\n{%endwarning%}\n**3.2常用指令**\n>`help(h)`：查看命令帮助，具体命令查询在gdb中输入help + 命令\n`run(r)`：重新开始运行文件（run-text：加载文本文件，run-bin：加载二进制文件）\n`start`：单步执行，运行程序，停在第一行执行语句\n`list(l)`：查看原代码（list-n,从第n行开始查看代码。list+ 函数名：查看具体函数）\n`set`：设置变量的值\n`next(n)`：单步调试（逐过程，函数直接执行）\n`step(s)`：单步调试（逐语句：跳入自定义函数内部执行）\n`backtrace(bt)`：查看函数的调用的栈帧和层级关系\n`frame(f)`：切换函数的栈帧\n`info(i)`：查看函数内部局部变量的数值\n`finish`：结束当前函数，返回到函数调用点\n`continue(c)`：继续运行\n`print(p)`：打印值及地址\n`quit(q)`：退出gdb\n`break+num(b)`：在第num行设置断点\n`info breakpoints`：查看当前设置的所有断点\n`delete breakpoints num(d)`：删除第num个断点\n`display`：追踪查看具体变量值\n`undisplay`：取消追踪观察变量\n`watch`：被设置观察点的变量发生修改时，打印显示\n`i watch`：显示观察点\n`enable breakpoint`：启用断点\n`disable breakpoints`：禁用断点\n`x`：查看内存x/20xw 显示20个单元，16进制，4字节每单元\n`run argv[1] argv[2]`：调试时命令行传参\n`set follow-fork-mode child`：Makefile项目管理：选择跟踪父子进程fork()\n{%right%}\n回车键：重复上一命令\n{%endright%}\n\n### 4.IDE(VSCode)\n**4.1简介**\n①界面可分为四部分\n>侧边栏\n菜单栏\n编辑区\n状态栏\n\n②插件安装\n>C/C++\nCMake\nCMake Tools\n\n③项目文件夹结构：一般将头文件放在`include`文件夹中，将源文件（记得要包含对应头文件）放在`src`文件夹中，随后`main`函数独立于这两个文件夹，**包含对应头文件**即可\n{%right%}\n在头文件中，可以添加#pragma once防止头文件重复编译\n{%endright%}\n**4.2快捷键**\n①常用快捷键\n>`Ctrl + P`：转到文件/其他常用操作 \n`Ctrl + W`：关闭当前文件\n`Ctrl + Shift + P`：打开命令面板\n`Alt + Up/Down`当前行上移/下移\n`F2`：变量统一重命名 \n`Ctrl + B`：关闭侧边栏  \n`F12`：转到定义处\n`Ctrl+C`：复制文本  \n`Ctrl+V`：粘贴文本 \n`Ctrl+S`：保存文件\n`Ctrl+Z`：撤销操作 \n{%right%}\nCtrl +\\`：打开终端\n{%endright%}\n\n②`Ctrl + P`窗口相关操作\n>直接输入文件名，跳转到文件\n`?`：列出当前可执行的动作\n`!`：显示`Errors`或`Warnings`，也可以`Ctrl+Shift+M`\n`:`：跳转到行数，也可以`Ctrl+G`直接进入\n`@`：跳转到`symbol`（搜索变量或者函数），也可以`Ctrl+Shift+O`直接进入\n`@`：根据分类跳转`symbol`，查找属性或函数，也可以`Ctrl+Shift+O`后输入`:`进入\n`#`：根据名字查找`symbol`，也可以`Ctrl+T`\n\n③编辑器与窗口管理\n>`Ctrl+Shift+N`：打开一个新窗口\n`Ctrl+Shift+W`：关闭窗口\n`Ctrl+N`：新建文件 \n`Ctrl+Tab`：文件之间切换\n`Ctrl+\\`：切出一个新的编辑器（最多 3 个） \n`Ctrl+1 Ctrl+2 Ctrl+3`：左中右3个编辑器的快捷键 \n`Ctrl+k然后按Left或Right`：编辑器换位置\n\n④代码格式调整\n>代码行缩进：`Ctrl+[`、`Ctrl+]`\n代码格式化：`Shift+Alt+F`\n上下移动一行：`Alt+Up`或`Alt+Down`\n向上向下复制一行：`Shift+Alt+Up`或`Shift+Alt+Down`\n在当前行下边插入一行：`Ctrl+Enter`\n在当前行上方插入一行：`Ctrl+Shift+Enter`\n\n⑤光标相关\n>移动到行首：`Home`\n移动到行尾：`End`\n移动到文件结尾：`Ctrl+End`\n移动到文件开头：`Ctrl+Home`\n移动到定义处：`F12`\n定义处缩略图（只看一眼而不跳转过去）：`Alt+F12`\n移动到后半个括号：`Ctrl+Shift+]`\n选择从光标到行尾：`Shift+End`\n选择从行首到光标处：`Shift+Home`\n删除光标右侧的所有字：`Ctrl+Delete`\n扩展/缩小选取范围：`Shift+Alt+Left`和`Shift+Alt+Right`\n同时选中所有匹配：`Ctrl+Shift+L`，`Ctrl+D`下一个匹配的也被选中\n\n⑥代码重构\n>找到所有的引用：`Shift+F12`\n同时修改本文件中所有匹配的：`Ctrl+F12`\n重命名：比如要修改一个方法名，可以选中后按`F2`，输入新的名字，回车，会发现所有的文件都修改了\n跳转到下一个Error或Warning：当有多个错误时可以按`F8`逐个跳转\n查看diff：在`explorer`里选择文件右键`Set file to compare`，然后需要对比的文件上右键选择`Compare with file_name_you_chose`\n\n⑦查找替换\n>查找：`Ctrl+F`\n查找替换：`Ctrl+H`\n整个文件夹中查找：`Ctrl+Shift+F`\n\n⑧显示相关\n>全屏：`F11`\nzoomIn/zoomOut：`Ctrl +/-`\n侧边栏显/隐：`Ctrl+B`\n显示资源管理器：`Ctrl+Shift+E`\n显示搜索：`Ctrl+Shift+F`\n显示Git：`Ctrl+Shift+G`\n显示Debug：`Ctrl+Shift+D`\n显示Output：`Ctrl+Shift+U`\n\n**4.3Jason文件配置**\n\n### 5.CMake\n**5.1概述**\n①简介：CMake是一个**跨平台**的安装编译工具，可以使用相同的`CMakeLists.txt`文件在多个操作系统（如Windows、Linux、macOS等）上生成适应不同编译器和构建工具的构建脚本\n>如果不使用CMake的话，就要自己写针对不同平台的构建脚本，修改项目时，就十分麻烦\n\n\n②基本语法格式：`指令(参数1 参数n)`\n>参数之间使用**空格**或者**分号**隔开\n指令时大小写无关的，参数是大小写相关的\n变量使用`${变量}`方式取值，但是在`IF`控制语句中是**直接使用变量名**\n\n③目录结构\n>项目主目录存在一个`CMakeLists.txt`文件\n**包含源文件的子文件夹**包含`CMakeLists.txt`文件:主目录的`CMakeLists.txt`通过`add_subdirectory`添加子目录即可；\n**包含源文件的子文件夹**未包含`CMakeLists.txt`文件:子目录编译规则体现在主目录的`CMakeLists.txt`中；\n\n④编译流程\n>手动编写`CMakeLists.txt`\n执行命令`cmake PATH`生成`Makefile`(`PATH`是**顶层CMakeLists.txt**所在的目录)。\n执行命令`make`进行编译。\n\n⑤外部构建(out-of-source build)\n```\n## 外部构建\n# 1. 在项目顶层目录下，创建build文件夹\nmkdir build\n# 2. 进入到build文件夹\ncd build\n# 3. 编译上级目录的CMakeLists.txt，生成Makefile和其他文件\ncmake ..\n# 4. 执行make命令，生成target\nmake\n```\n>内部构建会在同级目录下产生一大堆中间文件，这些中间文件并不是我们最终所需要的，和工程源文件放在一起会显得杂乱无章，不推荐使用\n\n\n**5.2常用语法**\n①`cmake_minimum_required`：指定CMake的**最小版本要求**\n>语法：`cmake_minimum_required(VERSION versionNumber [FATAL_ERROR])`\n示例：`cmake_minimum_required(VERSION 2.8.3)` \n#CMake最小版本要求为2.8.3\n\n②`project`：定义**工程名称**，并可指定工程支持的语言\n>语法：`project(projectname [CXX] [C] [Java])`\n示例：`project(HELLOWORLD) ` \n#指定工程名为HELLOWORLD\n\n③`set`：显式的定义变量\n>语法：`set(VAR [VALUE] [CACHE TYPE DOCSTRING [FORCE]])`\n示例：`set(SRC sayhello.cpp hello.cpp)` \n#定义SRC变量，其值为sayhello.cpp hello.cpp，即两个文件\n\n\n④`include_directories`：向工程添加多个特定的**头文件搜索路径**\n>语法：`include_directories([AFTER|BEFORE] [SYSTEM] dir1 dir2 ...)`\n示例：`include_directories(/usr/include/myincludefolder ./include) `\n#将/usr/include/myincludefolder 和 ./include 添加到头文件搜索路径，绝对路径和相对路径均可\n\n⑤`link_directories`：向工程添加多个特定的**库文件搜索路径**\n>语法：`link_directories(dir1 dir2 ...)`\n示例：`link_directories(/usr/lib/mylibfolder ./lib)`\n#将/usr/lib/mylibfolder 和 ./lib 添加到库文件搜索路径\n\n⑥`add_library`：生成**库文件**\n>语法：`add_library(libname [SHARED|STATIC|MODULE] [EXCLUDE_FROM_ALL] source1 source2 ... sourceN)`\n示例：`add_library(hello SHARED ${SRC})`\n#通过变量SRC生成libhello.so共享库\n\n⑦`add_compile_options`：添加**编译参数**\n>语法：`add_compile_options(<options>)`\n示例：`add_compile_options(-Wall -std=c++11 -O2)`\n#添加编译参数 -Wall -std=c++11 -O2\n\n⑧`add_executable`：生成**可执行文件**\n>语法：`add_executable(exename source1 source2 ... sourceN)`\n示例：`add_executable(main main.cpp)`\n#编译main.cpp生成可执行文件main\n\n⑨`target_link_libraries`：为target**添加需要链接的共享库**\n>语法：`target_link_libraries(target library1<debug | optimized> library2...)`\n示例：`target_link_libraries(main hello)`\n#将hello动态库文件链接到可执行文件main\n\n⑩`add_subdirectory`：向当前工程**添加存放源文件的子目录**，并可以指定中间二进制和目标二进制存放的位置\n>语法：`add_subdirectory(source_dir [binary_dir] [EXCLUDE_FROM_ALL])`\n示例：`add_subdirectory(src)`\n#添加src子目录，src中**需有一个CMakeLists.txt**\n\n⑪`aux_source_directory`：发现**一个目录下所有的源代码文件**并将列表存储在一个变量中，这个指令临时被用来自动构建源文件列表\n>语法：`aux_source_directory(dir VARIABLE)`\n示例：\n`aux_source_directory(. SRC)` #定义SRC变量，其值为当前目录下所有的源代码文件\n`add_executable(main ${SRC})` #编译SRC变量所代表的源代码文件，生成main可执行文件\n\n**5.3常用变量**\n①`CMAKE_C_FLAGS`：gcc编译选项\n②`CMAKE_CXX_FLAGS`：g++编译选项\n>`set( CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++11\")`\n#在CMAKE_CXX_FLAGS编译选项后追加-std=c++11\n③`CMAKE_C_COMPILER`：指定C编译器\n④`CMAKE_CXX_COMPILER`：指定C++编译器\n⑤`EXECUTABLE_OUTPUT_PATH`：可执行文件输出的存放路径\n⑥`LIBRARY_OUTPUT_PATH`：库文件输出的存放路径\n\n","slug":"Linux下基于VScode和CMake的C语言开发","published":1,"_id":"clmkphbf5000k9gvd05v00wcn","layout":"post","photos":[],"link":"","content":"<h1 id=\"代码开发实战（一）\"><a href=\"#代码开发实战（一）\" class=\"headerlink\" title=\"代码开发实战（一）\"></a>代码开发实战（一）</h1><h2 id=\"Linux下基于VScode和CMake的C-x2F-C-开发\"><a href=\"#Linux下基于VScode和CMake的C-x2F-C-开发\" class=\"headerlink\" title=\"Linux下基于VScode和CMake的C/C++开发\"></a>Linux下基于VScode和CMake的C/C++开发</h2><h3 id=\"1-Linux系统概述\"><a href=\"#1-Linux系统概述\" class=\"headerlink\" title=\"1.Linux系统概述\"></a>1.Linux系统概述</h3><p><strong>1.1Linux系统简介：</strong>一个开源的<strong>多用户多任务</strong>的操作系统</p>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> Linux中一切皆文件</div>\n<p><strong>1.2目录结构</strong></p>\n<blockquote>\n<p>/：根目录，最顶层的目录<br>bin：全称binary，含义是二进制。该目录中存储的都是一些<strong>二进制文件</strong>，文件都是可以被运行的。<br>dev：该目录中主要存放的是<strong>外接设备</strong>，例如盘、其他的光盘等。在其中的外接设备是不能直接被使用的，需要挂载（类似window下的分配盘符）。<br>etc：该目录主要存储一些<strong>配置文件</strong>。<br>home：表示“家”，表示除了root用户以外<strong>其他用户的家目录</strong>，类似于windows下的User/用户目录。<br>proc：全称process，表示进程，该目录中存储的是Linux运行时候的<strong>进程</strong>。<br>root：该目录是<strong>root用户</strong>自己的家目录。<br>sbin：全称super binary，该目录也是存储一些可以被执行的<strong>二进制文件</strong>，但是必须得有<strong>super权限</strong>的用户才能执行。<br>tmp：表示“临时”的，当系统运行时候产生的<strong>临时文件</strong>会在这个目录存着。<br>usr：存放的是用户<strong>系统自带文件</strong>。类似于windows下的program files。<br>var：存放的程序/系统的<strong>日志文件</strong>的目录。<br>mnt：当外接设备需要<strong>挂载</strong>的时候，就需要挂载到mnt目录下。<br>boot：<strong>内核文件</strong>及引导加载程序（<strong>开机文件</strong>）<br>opt: 存放可选软件的安装目录，一些<strong>第三方应用程序</strong>可能会安装在这个目录下。</p>\n</blockquote>\n<p><strong>1.3指令与选项</strong><br>①指令格式：<code>指令 [选项] [对象]</code></p>\n<blockquote>\n<p>选项和操作对象都可以没有，也可以是<strong>多个</strong></p>\n</blockquote>\n<p>②路径相关指令</p>\n<blockquote>\n<p><code>pwd</code>：打印当前终端<strong>所在的目录</strong><br><code>ls [选项] [路径]</code>：列出指定路径下的文件/文件夹的名称，并以指定的格式进行显示（不指定路径就是当前路径）<br><code>cd [路径]</code>：切换到对应路径下（不指定路径即为当前用户家目录）</p>\n</blockquote>\n<p>③文件相关指令</p>\n<blockquote>\n<p><code>mkdir</code>：创建目录<br><code>touch</code>：创建新文件/将指定文件的修改时间设置为当前时间<br><code>rm</code>：删除文件/目录<br><code>cp</code>：复制文件/文件夹到指定的位置<br><code>mv</code>：移动文件到新的位置，或者重命名文件<br><code>vi</code>：编辑文件</p>\n</blockquote>\n<p>③辅助指令</p>\n<blockquote>\n<p><code>man</code>：打开Linux下的命令手册<br><code>reboot</code>：重启系统<br><code>shutdown</code>：关机</p>\n</blockquote>\n<p><strong>1.4开发环境搭建</strong><br>①安装GCC，GDB</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">sudo apt update\n# 通过以下命令安装编译器和调试器\nsudo apt install build-essential gdb<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>②安装Cmake和VSCode</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">sudo apt install cmake\nsudo apt install code<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-GCC-x2F-G-编译器\"><a href=\"#2-GCC-x2F-G-编译器\" class=\"headerlink\" title=\"2.GCC/G++编译器\"></a>2.GCC/G++编译器</h3><p><strong>2.1概述：</strong>gcc编译器用于编译C语言，g++用于编译C++语言</p>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 虽然g++可以编译C代码，但它会将源代码解析为C++代码进行编译，某些特定的C++功能和语法可能会被启用</div>\n<p><strong>2.2编译过程及指令</strong><br>①预处理：<code>g++  -E test.cpp  -o test.i</code></p>\n<blockquote>\n<p>-E选项指示编译器仅对输入文件进行预处理</p>\n</blockquote>\n<p>②编译：<code>g++  -S test.i  -o   test.s</code></p>\n<blockquote>\n<p>-S编译选项告诉g++在为C++代码产生了汇编语言文件后停止编译<br>g++产生的汇编语言文件的缺省扩展名是.s</p>\n</blockquote>\n<p>③汇编：<code>g++  -c test.s  -o test.o</code></p>\n<blockquote>\n<p>-c选项告诉g++仅把源代码编译为机器语言的目标代码<br>缺省时g++建立的目标代码文件有一个.o的扩展名。</p>\n</blockquote>\n<p>④链接：<code>g++ test.o  -o test</code></p>\n<blockquote>\n<p>-o编译选项来为将产生的可执行文件用指定的文件名</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 以上四个过程可以合并为g++ test.cpp -o test</div>\n\n<p><strong>2.3重要编译参数</strong><br>①<code>-g</code>：编译带调试信息的可执行文件<br>②<code>-O[n]</code>：优化源代码</p>\n<blockquote>\n<p><code>-O</code>选项告诉g++对源代码进行基本优化。这些优化在大多数情况下都会使程序执行的更快。<br><code>-O0</code>表示不做优化<br><code>-O1</code>为默认优化<br><code>-O2</code>除了完成<code>-O1</code>的优化之外，还进行一些额外的调整工作，如指令调整等。<br><code>-O3</code>则包括循环展开和其他一些与处理特性相关的优化工作。</p>\n</blockquote>\n<p>③<code>-l</code>：指定库文件</p>\n<blockquote>\n<p><code>-l</code>参数(小写)就是用来指定程序要链接的库，<code>-l</code>参数紧接着就是库名<br>在<code>/lib</code>和<code>/usr/lib</code>和<code>/usr/local/lib</code>里的库直接用<code>-l</code>参数就能链接</p>\n</blockquote>\n<p>④<code>-L</code>：指定库文件路径</p>\n<blockquote>\n<p>如果库文件没放在上面三个目录里，需要使用<code>-L</code>参数(大写)指定库文件所在目录<br><code>-L</code>参数跟着的是库文件所在的目录名</p>\n</blockquote>\n<p>⑤-I：指定头文件搜索目录</p>\n<blockquote>\n<p><code>/usr/include</code>目录一般是不用指定的，gcc知道去那里找，但是如果头文件<strong>不在</strong><code>/usr/icnclude</code>里我们就要用<code>-I</code>参数指定了，比如头文件放在<code>/myinclude</code>目录里，那编译命令行就要加上<code>I/myinclude</code> 参数了</p>\n</blockquote>\n<p>⑥<code>-Wall</code>：打印警告信息<br>⑦<code>-w</code>：关闭警告信息<br>⑧<code>-std=[语言版本]</code>:设置编译标准<br>⑨<code>-o</code>：指定输出文件名</p>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 注意-o参数和其他参数位置不同，其他参数在g++和编译文件之间，-o在编译文件之后，并接空格和文件名</div>\n<p>⑩<code>-D</code>：定义宏</p>\n<blockquote>\n<p><code>g++ -DVERSION=2.0 main.cpp -o program</code>：将<code>main.cpp文</code>件中的<code>VERSION</code>宏定义为2</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> -DDEBUG定义DEBUG宏，可能文件中有DEBUG宏部分的相关信息，用个DDEBUG来选择开启或关闭DEBUG</div>\n\n<p><strong>2.4编译过程</strong><br>①目录结构</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 最初目录结构\n.\n├── include\n│   └── Swap.h\n├── main.cpp\n└── src\n   └── Swap.cpp<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>②直接编译：g++ main.cpp src/Swap.cpp -Iinclude<br>③链接静态库编译</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">## 进入src目录下\n$cd src\n# 汇编，生成Swap.o文件\ng++ Swap.cpp -c -I../include\n# 生成静态库libSwap.a\nar rs libSwap.a Swap.o\n## 回到上级目录\n$cd ..\n# 链接，生成可执行文件:staticmain\ng++ main.cpp -Iinclude -Lsrc -lSwap -o staticmain<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>④链接动态库编译</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">## 进入src目录下\n$cd src\n# 生成动态库libSwap.so\ng++ Swap.cpp -I../include -fPIC -shared -o libSwap.so\n## 上面命令等价于以下两条命令\n# gcc Swap.cpp -I../include -c -fPIC\n# gcc -shared -o libSwap.so Swap.o\n## 回到上级目录\n$cd ..\n# 链接，生成可执行文件:sharemain\ng++ main.cpp -Iinclude -Lsrc -lSwap -o sharemain<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 运行动态库文件时，需要指定动态库所在位置：LD_LIBRARY_PATH=src ./sharemain</div>\n\n<h3 id=\"3-GDB调试器\"><a href=\"#3-GDB调试器\" class=\"headerlink\" title=\"3.GDB调试器\"></a>3.GDB调试器</h3><p><strong>3.1概述：</strong><br>①简介：GDB是一个用来调试C/C++程序的功能强大的调试器，是Linux系统开发C/C++最常用的调试器<br>②主要功能</p>\n<blockquote>\n<p>设置<strong>断点</strong>：使程序在指定的代码行上暂停执行，便于观察<br><strong>单步执行</strong>程序，便于调试<br>查看程序中<strong>变量值的变化</strong><br>动态改变程序的<strong>执行环境</strong><br>分析崩溃程序产生的<strong>core文件</strong></p>\n</blockquote>\n<p>③使用：在命令行中输入<code>gdb [exefilename]</code>即可启动GDB调试器</p>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 编译程序时需要加上-g，之后才能用gdb进行调试：gcc -g main.c -o main</div>\n<p><strong>3.2常用指令</strong></p>\n<blockquote>\n<p><code>help(h)</code>：查看命令帮助，具体命令查询在gdb中输入help + 命令<br><code>run(r)</code>：重新开始运行文件（run-text：加载文本文件，run-bin：加载二进制文件）<br><code>start</code>：单步执行，运行程序，停在第一行执行语句<br><code>list(l)</code>：查看原代码（list-n,从第n行开始查看代码。list+ 函数名：查看具体函数）<br><code>set</code>：设置变量的值<br><code>next(n)</code>：单步调试（逐过程，函数直接执行）<br><code>step(s)</code>：单步调试（逐语句：跳入自定义函数内部执行）<br><code>backtrace(bt)</code>：查看函数的调用的栈帧和层级关系<br><code>frame(f)</code>：切换函数的栈帧<br><code>info(i)</code>：查看函数内部局部变量的数值<br><code>finish</code>：结束当前函数，返回到函数调用点<br><code>continue(c)</code>：继续运行<br><code>print(p)</code>：打印值及地址<br><code>quit(q)</code>：退出gdb<br><code>break+num(b)</code>：在第num行设置断点<br><code>info breakpoints</code>：查看当前设置的所有断点<br><code>delete breakpoints num(d)</code>：删除第num个断点<br><code>display</code>：追踪查看具体变量值<br><code>undisplay</code>：取消追踪观察变量<br><code>watch</code>：被设置观察点的变量发生修改时，打印显示<br><code>i watch</code>：显示观察点<br><code>enable breakpoint</code>：启用断点<br><code>disable breakpoints</code>：禁用断点<br><code>x</code>：查看内存x/20xw 显示20个单元，16进制，4字节每单元<br><code>run argv[1] argv[2]</code>：调试时命令行传参<br><code>set follow-fork-mode child</code>：Makefile项目管理：选择跟踪父子进程fork()</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 回车键：重复上一命令</div>\n\n<h3 id=\"4-IDE-VSCode\"><a href=\"#4-IDE-VSCode\" class=\"headerlink\" title=\"4.IDE(VSCode)\"></a>4.IDE(VSCode)</h3><p><strong>4.1简介</strong><br>①界面可分为四部分</p>\n<blockquote>\n<p>侧边栏<br>菜单栏<br>编辑区<br>状态栏</p>\n</blockquote>\n<p>②插件安装</p>\n<blockquote>\n<p>C/C++<br>CMake<br>CMake Tools</p>\n</blockquote>\n<p>③项目文件夹结构：一般将头文件放在<code>include</code>文件夹中，将源文件（记得要包含对应头文件）放在<code>src</code>文件夹中，随后<code>main</code>函数独立于这两个文件夹，<strong>包含对应头文件</strong>即可</p>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 在头文件中，可以添加#pragma once防止头文件重复编译</div>\n<p><strong>4.2快捷键</strong><br>①常用快捷键</p>\n<blockquote>\n<p><code>Ctrl + P</code>：转到文件/其他常用操作<br><code>Ctrl + W</code>：关闭当前文件<br><code>Ctrl + Shift + P</code>：打开命令面板<br><code>Alt + Up/Down</code>当前行上移/下移<br><code>F2</code>：变量统一重命名<br><code>Ctrl + B</code>：关闭侧边栏<br><code>F12</code>：转到定义处<br><code>Ctrl+C</code>：复制文本<br><code>Ctrl+V</code>：粘贴文本<br><code>Ctrl+S</code>：保存文件<br><code>Ctrl+Z</code>：撤销操作 </p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> Ctrl +\\`：打开终端</div>\n\n<p>②<code>Ctrl + P</code>窗口相关操作</p>\n<blockquote>\n<p>直接输入文件名，跳转到文件<br><code>?</code>：列出当前可执行的动作<br><code>!</code>：显示<code>Errors</code>或<code>Warnings</code>，也可以<code>Ctrl+Shift+M</code><br><code>:</code>：跳转到行数，也可以<code>Ctrl+G</code>直接进入<br><code>@</code>：跳转到<code>symbol</code>（搜索变量或者函数），也可以<code>Ctrl+Shift+O</code>直接进入<br><code>@</code>：根据分类跳转<code>symbol</code>，查找属性或函数，也可以<code>Ctrl+Shift+O</code>后输入<code>:</code>进入<br><code>#</code>：根据名字查找<code>symbol</code>，也可以<code>Ctrl+T</code></p>\n</blockquote>\n<p>③编辑器与窗口管理</p>\n<blockquote>\n<p><code>Ctrl+Shift+N</code>：打开一个新窗口<br><code>Ctrl+Shift+W</code>：关闭窗口<br><code>Ctrl+N</code>：新建文件<br><code>Ctrl+Tab</code>：文件之间切换<br><code>Ctrl+\\</code>：切出一个新的编辑器（最多 3 个）<br><code>Ctrl+1 Ctrl+2 Ctrl+3</code>：左中右3个编辑器的快捷键<br><code>Ctrl+k然后按Left或Right</code>：编辑器换位置</p>\n</blockquote>\n<p>④代码格式调整</p>\n<blockquote>\n<p>代码行缩进：<code>Ctrl+[</code>、<code>Ctrl+]</code><br>代码格式化：<code>Shift+Alt+F</code><br>上下移动一行：<code>Alt+Up</code>或<code>Alt+Down</code><br>向上向下复制一行：<code>Shift+Alt+Up</code>或<code>Shift+Alt+Down</code><br>在当前行下边插入一行：<code>Ctrl+Enter</code><br>在当前行上方插入一行：<code>Ctrl+Shift+Enter</code></p>\n</blockquote>\n<p>⑤光标相关</p>\n<blockquote>\n<p>移动到行首：<code>Home</code><br>移动到行尾：<code>End</code><br>移动到文件结尾：<code>Ctrl+End</code><br>移动到文件开头：<code>Ctrl+Home</code><br>移动到定义处：<code>F12</code><br>定义处缩略图（只看一眼而不跳转过去）：<code>Alt+F12</code><br>移动到后半个括号：<code>Ctrl+Shift+]</code><br>选择从光标到行尾：<code>Shift+End</code><br>选择从行首到光标处：<code>Shift+Home</code><br>删除光标右侧的所有字：<code>Ctrl+Delete</code><br>扩展/缩小选取范围：<code>Shift+Alt+Left</code>和<code>Shift+Alt+Right</code><br>同时选中所有匹配：<code>Ctrl+Shift+L</code>，<code>Ctrl+D</code>下一个匹配的也被选中</p>\n</blockquote>\n<p>⑥代码重构</p>\n<blockquote>\n<p>找到所有的引用：<code>Shift+F12</code><br>同时修改本文件中所有匹配的：<code>Ctrl+F12</code><br>重命名：比如要修改一个方法名，可以选中后按<code>F2</code>，输入新的名字，回车，会发现所有的文件都修改了<br>跳转到下一个Error或Warning：当有多个错误时可以按<code>F8</code>逐个跳转<br>查看diff：在<code>explorer</code>里选择文件右键<code>Set file to compare</code>，然后需要对比的文件上右键选择<code>Compare with file_name_you_chose</code></p>\n</blockquote>\n<p>⑦查找替换</p>\n<blockquote>\n<p>查找：<code>Ctrl+F</code><br>查找替换：<code>Ctrl+H</code><br>整个文件夹中查找：<code>Ctrl+Shift+F</code></p>\n</blockquote>\n<p>⑧显示相关</p>\n<blockquote>\n<p>全屏：<code>F11</code><br>zoomIn/zoomOut：<code>Ctrl +/-</code><br>侧边栏显/隐：<code>Ctrl+B</code><br>显示资源管理器：<code>Ctrl+Shift+E</code><br>显示搜索：<code>Ctrl+Shift+F</code><br>显示Git：<code>Ctrl+Shift+G</code><br>显示Debug：<code>Ctrl+Shift+D</code><br>显示Output：<code>Ctrl+Shift+U</code></p>\n</blockquote>\n<p><strong>4.3Jason文件配置</strong></p>\n<h3 id=\"5-CMake\"><a href=\"#5-CMake\" class=\"headerlink\" title=\"5.CMake\"></a>5.CMake</h3><p><strong>5.1概述</strong><br>①简介：CMake是一个<strong>跨平台</strong>的安装编译工具，可以使用相同的<code>CMakeLists.txt</code>文件在多个操作系统（如Windows、Linux、macOS等）上生成适应不同编译器和构建工具的构建脚本</p>\n<blockquote>\n<p>如果不使用CMake的话，就要自己写针对不同平台的构建脚本，修改项目时，就十分麻烦</p>\n</blockquote>\n<p>②基本语法格式：<code>指令(参数1 参数n)</code></p>\n<blockquote>\n<p>参数之间使用<strong>空格</strong>或者<strong>分号</strong>隔开<br>指令时大小写无关的，参数是大小写相关的<br>变量使用<code>${变量}</code>方式取值，但是在<code>IF</code>控制语句中是<strong>直接使用变量名</strong></p>\n</blockquote>\n<p>③目录结构</p>\n<blockquote>\n<p>项目主目录存在一个<code>CMakeLists.txt</code>文件<br><strong>包含源文件的子文件夹</strong>包含<code>CMakeLists.txt</code>文件:主目录的<code>CMakeLists.txt</code>通过<code>add_subdirectory</code>添加子目录即可；<br><strong>包含源文件的子文件夹</strong>未包含<code>CMakeLists.txt</code>文件:子目录编译规则体现在主目录的<code>CMakeLists.txt</code>中；</p>\n</blockquote>\n<p>④编译流程</p>\n<blockquote>\n<p>手动编写<code>CMakeLists.txt</code><br>执行命令<code>cmake PATH</code>生成<code>Makefile</code>(<code>PATH</code>是<strong>顶层CMakeLists.txt</strong>所在的目录)。<br>执行命令<code>make</code>进行编译。</p>\n</blockquote>\n<p>⑤外部构建(out-of-source build)</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">## 外部构建\n# 1. 在项目顶层目录下，创建build文件夹\nmkdir build\n# 2. 进入到build文件夹\ncd build\n# 3. 编译上级目录的CMakeLists.txt，生成Makefile和其他文件\ncmake ..\n# 4. 执行make命令，生成target\nmake<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>内部构建会在同级目录下产生一大堆中间文件，这些中间文件并不是我们最终所需要的，和工程源文件放在一起会显得杂乱无章，不推荐使用</p>\n</blockquote>\n<p><strong>5.2常用语法</strong><br>①<code>cmake_minimum_required</code>：指定CMake的<strong>最小版本要求</strong></p>\n<blockquote>\n<p>语法：<code>cmake_minimum_required(VERSION versionNumber [FATAL_ERROR])</code><br>示例：<code>cmake_minimum_required(VERSION 2.8.3)</code><br>#CMake最小版本要求为2.8.3</p>\n</blockquote>\n<p>②<code>project</code>：定义<strong>工程名称</strong>，并可指定工程支持的语言</p>\n<blockquote>\n<p>语法：<code>project(projectname [CXX] [C] [Java])</code><br>示例：<code>project(HELLOWORLD) </code><br>#指定工程名为HELLOWORLD</p>\n</blockquote>\n<p>③<code>set</code>：显式的定义变量</p>\n<blockquote>\n<p>语法：<code>set(VAR [VALUE] [CACHE TYPE DOCSTRING [FORCE]])</code><br>示例：<code>set(SRC sayhello.cpp hello.cpp)</code><br>#定义SRC变量，其值为sayhello.cpp hello.cpp，即两个文件</p>\n</blockquote>\n<p>④<code>include_directories</code>：向工程添加多个特定的<strong>头文件搜索路径</strong></p>\n<blockquote>\n<p>语法：<code>include_directories([AFTER|BEFORE] [SYSTEM] dir1 dir2 ...)</code><br>示例：<code>include_directories(/usr/include/myincludefolder ./include) </code><br>#将/usr/include/myincludefolder 和 ./include 添加到头文件搜索路径，绝对路径和相对路径均可</p>\n</blockquote>\n<p>⑤<code>link_directories</code>：向工程添加多个特定的<strong>库文件搜索路径</strong></p>\n<blockquote>\n<p>语法：<code>link_directories(dir1 dir2 ...)</code><br>示例：<code>link_directories(/usr/lib/mylibfolder ./lib)</code><br>#将/usr/lib/mylibfolder 和 ./lib 添加到库文件搜索路径</p>\n</blockquote>\n<p>⑥<code>add_library</code>：生成<strong>库文件</strong></p>\n<blockquote>\n<p>语法：<code>add_library(libname [SHARED|STATIC|MODULE] [EXCLUDE_FROM_ALL] source1 source2 ... sourceN)</code><br>示例：<code>add_library(hello SHARED ${SRC})</code><br>#通过变量SRC生成libhello.so共享库</p>\n</blockquote>\n<p>⑦<code>add_compile_options</code>：添加<strong>编译参数</strong></p>\n<blockquote>\n<p>语法：<code>add_compile_options(&lt;options&gt;)</code><br>示例：<code>add_compile_options(-Wall -std=c++11 -O2)</code><br>#添加编译参数 -Wall -std=c++11 -O2</p>\n</blockquote>\n<p>⑧<code>add_executable</code>：生成<strong>可执行文件</strong></p>\n<blockquote>\n<p>语法：<code>add_executable(exename source1 source2 ... sourceN)</code><br>示例：<code>add_executable(main main.cpp)</code><br>#编译main.cpp生成可执行文件main</p>\n</blockquote>\n<p>⑨<code>target_link_libraries</code>：为target<strong>添加需要链接的共享库</strong></p>\n<blockquote>\n<p>语法：<code>target_link_libraries(target library1&lt;debug | optimized&gt; library2...)</code><br>示例：<code>target_link_libraries(main hello)</code><br>#将hello动态库文件链接到可执行文件main</p>\n</blockquote>\n<p>⑩<code>add_subdirectory</code>：向当前工程<strong>添加存放源文件的子目录</strong>，并可以指定中间二进制和目标二进制存放的位置</p>\n<blockquote>\n<p>语法：<code>add_subdirectory(source_dir [binary_dir] [EXCLUDE_FROM_ALL])</code><br>示例：<code>add_subdirectory(src)</code><br>#添加src子目录，src中<strong>需有一个CMakeLists.txt</strong></p>\n</blockquote>\n<p>⑪<code>aux_source_directory</code>：发现<strong>一个目录下所有的源代码文件</strong>并将列表存储在一个变量中，这个指令临时被用来自动构建源文件列表</p>\n<blockquote>\n<p>语法：<code>aux_source_directory(dir VARIABLE)</code><br>示例：<br><code>aux_source_directory(. SRC)</code> #定义SRC变量，其值为当前目录下所有的源代码文件<br><code>add_executable(main ${SRC})</code> #编译SRC变量所代表的源代码文件，生成main可执行文件</p>\n</blockquote>\n<p><strong>5.3常用变量</strong><br>①<code>CMAKE_C_FLAGS</code>：gcc编译选项<br>②<code>CMAKE_CXX_FLAGS</code>：g++编译选项</p>\n<blockquote>\n<p><code>set( CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++11\")</code><br>#在CMAKE_CXX_FLAGS编译选项后追加-std=c++11<br>③<code>CMAKE_C_COMPILER</code>：指定C编译器<br>④<code>CMAKE_CXX_COMPILER</code>：指定C++编译器<br>⑤<code>EXECUTABLE_OUTPUT_PATH</code>：可执行文件输出的存放路径<br>⑥<code>LIBRARY_OUTPUT_PATH</code>：库文件输出的存放路径</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"代码开发实战（一）\"><a href=\"#代码开发实战（一）\" class=\"headerlink\" title=\"代码开发实战（一）\"></a>代码开发实战（一）</h1><h2 id=\"Linux下基于VScode和CMake的C-x2F-C-开发\"><a href=\"#Linux下基于VScode和CMake的C-x2F-C-开发\" class=\"headerlink\" title=\"Linux下基于VScode和CMake的C&#x2F;C++开发\"></a>Linux下基于VScode和CMake的C&#x2F;C++开发</h2><h3 id=\"1-Linux系统概述\"><a href=\"#1-Linux系统概述\" class=\"headerlink\" title=\"1.Linux系统概述\"></a>1.Linux系统概述</h3><p><strong>1.1Linux系统简介：</strong>一个开源的<strong>多用户多任务</strong>的操作系统</p>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> Linux中一切皆文件</div>\n<p><strong>1.2目录结构</strong></p>\n<blockquote>\n<p>&#x2F;：根目录，最顶层的目录<br>bin：全称binary，含义是二进制。该目录中存储的都是一些<strong>二进制文件</strong>，文件都是可以被运行的。<br>dev：该目录中主要存放的是<strong>外接设备</strong>，例如盘、其他的光盘等。在其中的外接设备是不能直接被使用的，需要挂载（类似window下的分配盘符）。<br>etc：该目录主要存储一些<strong>配置文件</strong>。<br>home：表示“家”，表示除了root用户以外<strong>其他用户的家目录</strong>，类似于windows下的User&#x2F;用户目录。<br>proc：全称process，表示进程，该目录中存储的是Linux运行时候的<strong>进程</strong>。<br>root：该目录是<strong>root用户</strong>自己的家目录。<br>sbin：全称super binary，该目录也是存储一些可以被执行的<strong>二进制文件</strong>，但是必须得有<strong>super权限</strong>的用户才能执行。<br>tmp：表示“临时”的，当系统运行时候产生的<strong>临时文件</strong>会在这个目录存着。<br>usr：存放的是用户<strong>系统自带文件</strong>。类似于windows下的program files。<br>var：存放的程序&#x2F;系统的<strong>日志文件</strong>的目录。<br>mnt：当外接设备需要<strong>挂载</strong>的时候，就需要挂载到mnt目录下。<br>boot：<strong>内核文件</strong>及引导加载程序（<strong>开机文件</strong>）<br>opt: 存放可选软件的安装目录，一些<strong>第三方应用程序</strong>可能会安装在这个目录下。</p>\n</blockquote>\n<p><strong>1.3指令与选项</strong><br>①指令格式：<code>指令 [选项] [对象]</code></p>\n<blockquote>\n<p>选项和操作对象都可以没有，也可以是<strong>多个</strong></p>\n</blockquote>\n<p>②路径相关指令</p>\n<blockquote>\n<p><code>pwd</code>：打印当前终端<strong>所在的目录</strong><br><code>ls [选项] [路径]</code>：列出指定路径下的文件&#x2F;文件夹的名称，并以指定的格式进行显示（不指定路径就是当前路径）<br><code>cd [路径]</code>：切换到对应路径下（不指定路径即为当前用户家目录）</p>\n</blockquote>\n<p>③文件相关指令</p>\n<blockquote>\n<p><code>mkdir</code>：创建目录<br><code>touch</code>：创建新文件&#x2F;将指定文件的修改时间设置为当前时间<br><code>rm</code>：删除文件&#x2F;目录<br><code>cp</code>：复制文件&#x2F;文件夹到指定的位置<br><code>mv</code>：移动文件到新的位置，或者重命名文件<br><code>vi</code>：编辑文件</p>\n</blockquote>\n<p>③辅助指令</p>\n<blockquote>\n<p><code>man</code>：打开Linux下的命令手册<br><code>reboot</code>：重启系统<br><code>shutdown</code>：关机</p>\n</blockquote>\n<p><strong>1.4开发环境搭建</strong><br>①安装GCC，GDB</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">sudo apt update\n# 通过以下命令安装编译器和调试器\nsudo apt install build-essential gdb<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>②安装Cmake和VSCode</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">sudo apt install cmake\nsudo apt install code<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-GCC-x2F-G-编译器\"><a href=\"#2-GCC-x2F-G-编译器\" class=\"headerlink\" title=\"2.GCC&#x2F;G++编译器\"></a>2.GCC&#x2F;G++编译器</h3><p><strong>2.1概述：</strong>gcc编译器用于编译C语言，g++用于编译C++语言</p>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 虽然g++可以编译C代码，但它会将源代码解析为C++代码进行编译，某些特定的C++功能和语法可能会被启用</div>\n<p><strong>2.2编译过程及指令</strong><br>①预处理：<code>g++  -E test.cpp  -o test.i</code></p>\n<blockquote>\n<p>-E选项指示编译器仅对输入文件进行预处理</p>\n</blockquote>\n<p>②编译：<code>g++  -S test.i  -o   test.s</code></p>\n<blockquote>\n<p>-S编译选项告诉g++在为C++代码产生了汇编语言文件后停止编译<br>g++产生的汇编语言文件的缺省扩展名是.s</p>\n</blockquote>\n<p>③汇编：<code>g++  -c test.s  -o test.o</code></p>\n<blockquote>\n<p>-c选项告诉g++仅把源代码编译为机器语言的目标代码<br>缺省时g++建立的目标代码文件有一个.o的扩展名。</p>\n</blockquote>\n<p>④链接：<code>g++ test.o  -o test</code></p>\n<blockquote>\n<p>-o编译选项来为将产生的可执行文件用指定的文件名</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 以上四个过程可以合并为g++ test.cpp -o test</div>\n\n<p><strong>2.3重要编译参数</strong><br>①<code>-g</code>：编译带调试信息的可执行文件<br>②<code>-O[n]</code>：优化源代码</p>\n<blockquote>\n<p><code>-O</code>选项告诉g++对源代码进行基本优化。这些优化在大多数情况下都会使程序执行的更快。<br><code>-O0</code>表示不做优化<br><code>-O1</code>为默认优化<br><code>-O2</code>除了完成<code>-O1</code>的优化之外，还进行一些额外的调整工作，如指令调整等。<br><code>-O3</code>则包括循环展开和其他一些与处理特性相关的优化工作。</p>\n</blockquote>\n<p>③<code>-l</code>：指定库文件</p>\n<blockquote>\n<p><code>-l</code>参数(小写)就是用来指定程序要链接的库，<code>-l</code>参数紧接着就是库名<br>在<code>/lib</code>和<code>/usr/lib</code>和<code>/usr/local/lib</code>里的库直接用<code>-l</code>参数就能链接</p>\n</blockquote>\n<p>④<code>-L</code>：指定库文件路径</p>\n<blockquote>\n<p>如果库文件没放在上面三个目录里，需要使用<code>-L</code>参数(大写)指定库文件所在目录<br><code>-L</code>参数跟着的是库文件所在的目录名</p>\n</blockquote>\n<p>⑤-I：指定头文件搜索目录</p>\n<blockquote>\n<p><code>/usr/include</code>目录一般是不用指定的，gcc知道去那里找，但是如果头文件<strong>不在</strong><code>/usr/icnclude</code>里我们就要用<code>-I</code>参数指定了，比如头文件放在<code>/myinclude</code>目录里，那编译命令行就要加上<code>I/myinclude</code> 参数了</p>\n</blockquote>\n<p>⑥<code>-Wall</code>：打印警告信息<br>⑦<code>-w</code>：关闭警告信息<br>⑧<code>-std=[语言版本]</code>:设置编译标准<br>⑨<code>-o</code>：指定输出文件名</p>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 注意-o参数和其他参数位置不同，其他参数在g++和编译文件之间，-o在编译文件之后，并接空格和文件名</div>\n<p>⑩<code>-D</code>：定义宏</p>\n<blockquote>\n<p><code>g++ -DVERSION=2.0 main.cpp -o program</code>：将<code>main.cpp文</code>件中的<code>VERSION</code>宏定义为2</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> -DDEBUG定义DEBUG宏，可能文件中有DEBUG宏部分的相关信息，用个DDEBUG来选择开启或关闭DEBUG</div>\n\n<p><strong>2.4编译过程</strong><br>①目录结构</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 最初目录结构\n.\n├── include\n│   └── Swap.h\n├── main.cpp\n└── src\n   └── Swap.cpp<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>②直接编译：g++ main.cpp src&#x2F;Swap.cpp -Iinclude<br>③链接静态库编译</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">## 进入src目录下\n$cd src\n# 汇编，生成Swap.o文件\ng++ Swap.cpp -c -I..&#x2F;include\n# 生成静态库libSwap.a\nar rs libSwap.a Swap.o\n## 回到上级目录\n$cd ..\n# 链接，生成可执行文件:staticmain\ng++ main.cpp -Iinclude -Lsrc -lSwap -o staticmain<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>④链接动态库编译</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">## 进入src目录下\n$cd src\n# 生成动态库libSwap.so\ng++ Swap.cpp -I..&#x2F;include -fPIC -shared -o libSwap.so\n## 上面命令等价于以下两条命令\n# gcc Swap.cpp -I..&#x2F;include -c -fPIC\n# gcc -shared -o libSwap.so Swap.o\n## 回到上级目录\n$cd ..\n# 链接，生成可执行文件:sharemain\ng++ main.cpp -Iinclude -Lsrc -lSwap -o sharemain<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 运行动态库文件时，需要指定动态库所在位置：LD_LIBRARY_PATH=src ./sharemain</div>\n\n<h3 id=\"3-GDB调试器\"><a href=\"#3-GDB调试器\" class=\"headerlink\" title=\"3.GDB调试器\"></a>3.GDB调试器</h3><p><strong>3.1概述：</strong><br>①简介：GDB是一个用来调试C&#x2F;C++程序的功能强大的调试器，是Linux系统开发C&#x2F;C++最常用的调试器<br>②主要功能</p>\n<blockquote>\n<p>设置<strong>断点</strong>：使程序在指定的代码行上暂停执行，便于观察<br><strong>单步执行</strong>程序，便于调试<br>查看程序中<strong>变量值的变化</strong><br>动态改变程序的<strong>执行环境</strong><br>分析崩溃程序产生的<strong>core文件</strong></p>\n</blockquote>\n<p>③使用：在命令行中输入<code>gdb [exefilename]</code>即可启动GDB调试器</p>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 编译程序时需要加上-g，之后才能用gdb进行调试：gcc -g main.c -o main</div>\n<p><strong>3.2常用指令</strong></p>\n<blockquote>\n<p><code>help(h)</code>：查看命令帮助，具体命令查询在gdb中输入help + 命令<br><code>run(r)</code>：重新开始运行文件（run-text：加载文本文件，run-bin：加载二进制文件）<br><code>start</code>：单步执行，运行程序，停在第一行执行语句<br><code>list(l)</code>：查看原代码（list-n,从第n行开始查看代码。list+ 函数名：查看具体函数）<br><code>set</code>：设置变量的值<br><code>next(n)</code>：单步调试（逐过程，函数直接执行）<br><code>step(s)</code>：单步调试（逐语句：跳入自定义函数内部执行）<br><code>backtrace(bt)</code>：查看函数的调用的栈帧和层级关系<br><code>frame(f)</code>：切换函数的栈帧<br><code>info(i)</code>：查看函数内部局部变量的数值<br><code>finish</code>：结束当前函数，返回到函数调用点<br><code>continue(c)</code>：继续运行<br><code>print(p)</code>：打印值及地址<br><code>quit(q)</code>：退出gdb<br><code>break+num(b)</code>：在第num行设置断点<br><code>info breakpoints</code>：查看当前设置的所有断点<br><code>delete breakpoints num(d)</code>：删除第num个断点<br><code>display</code>：追踪查看具体变量值<br><code>undisplay</code>：取消追踪观察变量<br><code>watch</code>：被设置观察点的变量发生修改时，打印显示<br><code>i watch</code>：显示观察点<br><code>enable breakpoint</code>：启用断点<br><code>disable breakpoints</code>：禁用断点<br><code>x</code>：查看内存x&#x2F;20xw 显示20个单元，16进制，4字节每单元<br><code>run argv[1] argv[2]</code>：调试时命令行传参<br><code>set follow-fork-mode child</code>：Makefile项目管理：选择跟踪父子进程fork()</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 回车键：重复上一命令</div>\n\n<h3 id=\"4-IDE-VSCode\"><a href=\"#4-IDE-VSCode\" class=\"headerlink\" title=\"4.IDE(VSCode)\"></a>4.IDE(VSCode)</h3><p><strong>4.1简介</strong><br>①界面可分为四部分</p>\n<blockquote>\n<p>侧边栏<br>菜单栏<br>编辑区<br>状态栏</p>\n</blockquote>\n<p>②插件安装</p>\n<blockquote>\n<p>C&#x2F;C++<br>CMake<br>CMake Tools</p>\n</blockquote>\n<p>③项目文件夹结构：一般将头文件放在<code>include</code>文件夹中，将源文件（记得要包含对应头文件）放在<code>src</code>文件夹中，随后<code>main</code>函数独立于这两个文件夹，<strong>包含对应头文件</strong>即可</p>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 在头文件中，可以添加#pragma once防止头文件重复编译</div>\n<p><strong>4.2快捷键</strong><br>①常用快捷键</p>\n<blockquote>\n<p><code>Ctrl + P</code>：转到文件&#x2F;其他常用操作<br><code>Ctrl + W</code>：关闭当前文件<br><code>Ctrl + Shift + P</code>：打开命令面板<br><code>Alt + Up/Down</code>当前行上移&#x2F;下移<br><code>F2</code>：变量统一重命名<br><code>Ctrl + B</code>：关闭侧边栏<br><code>F12</code>：转到定义处<br><code>Ctrl+C</code>：复制文本<br><code>Ctrl+V</code>：粘贴文本<br><code>Ctrl+S</code>：保存文件<br><code>Ctrl+Z</code>：撤销操作 </p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> Ctrl +\\`：打开终端</div>\n\n<p>②<code>Ctrl + P</code>窗口相关操作</p>\n<blockquote>\n<p>直接输入文件名，跳转到文件<br><code>?</code>：列出当前可执行的动作<br><code>!</code>：显示<code>Errors</code>或<code>Warnings</code>，也可以<code>Ctrl+Shift+M</code><br><code>:</code>：跳转到行数，也可以<code>Ctrl+G</code>直接进入<br><code>@</code>：跳转到<code>symbol</code>（搜索变量或者函数），也可以<code>Ctrl+Shift+O</code>直接进入<br><code>@</code>：根据分类跳转<code>symbol</code>，查找属性或函数，也可以<code>Ctrl+Shift+O</code>后输入<code>:</code>进入<br><code>#</code>：根据名字查找<code>symbol</code>，也可以<code>Ctrl+T</code></p>\n</blockquote>\n<p>③编辑器与窗口管理</p>\n<blockquote>\n<p><code>Ctrl+Shift+N</code>：打开一个新窗口<br><code>Ctrl+Shift+W</code>：关闭窗口<br><code>Ctrl+N</code>：新建文件<br><code>Ctrl+Tab</code>：文件之间切换<br><code>Ctrl+\\</code>：切出一个新的编辑器（最多 3 个）<br><code>Ctrl+1 Ctrl+2 Ctrl+3</code>：左中右3个编辑器的快捷键<br><code>Ctrl+k然后按Left或Right</code>：编辑器换位置</p>\n</blockquote>\n<p>④代码格式调整</p>\n<blockquote>\n<p>代码行缩进：<code>Ctrl+[</code>、<code>Ctrl+]</code><br>代码格式化：<code>Shift+Alt+F</code><br>上下移动一行：<code>Alt+Up</code>或<code>Alt+Down</code><br>向上向下复制一行：<code>Shift+Alt+Up</code>或<code>Shift+Alt+Down</code><br>在当前行下边插入一行：<code>Ctrl+Enter</code><br>在当前行上方插入一行：<code>Ctrl+Shift+Enter</code></p>\n</blockquote>\n<p>⑤光标相关</p>\n<blockquote>\n<p>移动到行首：<code>Home</code><br>移动到行尾：<code>End</code><br>移动到文件结尾：<code>Ctrl+End</code><br>移动到文件开头：<code>Ctrl+Home</code><br>移动到定义处：<code>F12</code><br>定义处缩略图（只看一眼而不跳转过去）：<code>Alt+F12</code><br>移动到后半个括号：<code>Ctrl+Shift+]</code><br>选择从光标到行尾：<code>Shift+End</code><br>选择从行首到光标处：<code>Shift+Home</code><br>删除光标右侧的所有字：<code>Ctrl+Delete</code><br>扩展&#x2F;缩小选取范围：<code>Shift+Alt+Left</code>和<code>Shift+Alt+Right</code><br>同时选中所有匹配：<code>Ctrl+Shift+L</code>，<code>Ctrl+D</code>下一个匹配的也被选中</p>\n</blockquote>\n<p>⑥代码重构</p>\n<blockquote>\n<p>找到所有的引用：<code>Shift+F12</code><br>同时修改本文件中所有匹配的：<code>Ctrl+F12</code><br>重命名：比如要修改一个方法名，可以选中后按<code>F2</code>，输入新的名字，回车，会发现所有的文件都修改了<br>跳转到下一个Error或Warning：当有多个错误时可以按<code>F8</code>逐个跳转<br>查看diff：在<code>explorer</code>里选择文件右键<code>Set file to compare</code>，然后需要对比的文件上右键选择<code>Compare with file_name_you_chose</code></p>\n</blockquote>\n<p>⑦查找替换</p>\n<blockquote>\n<p>查找：<code>Ctrl+F</code><br>查找替换：<code>Ctrl+H</code><br>整个文件夹中查找：<code>Ctrl+Shift+F</code></p>\n</blockquote>\n<p>⑧显示相关</p>\n<blockquote>\n<p>全屏：<code>F11</code><br>zoomIn&#x2F;zoomOut：<code>Ctrl +/-</code><br>侧边栏显&#x2F;隐：<code>Ctrl+B</code><br>显示资源管理器：<code>Ctrl+Shift+E</code><br>显示搜索：<code>Ctrl+Shift+F</code><br>显示Git：<code>Ctrl+Shift+G</code><br>显示Debug：<code>Ctrl+Shift+D</code><br>显示Output：<code>Ctrl+Shift+U</code></p>\n</blockquote>\n<p><strong>4.3Jason文件配置</strong></p>\n<h3 id=\"5-CMake\"><a href=\"#5-CMake\" class=\"headerlink\" title=\"5.CMake\"></a>5.CMake</h3><p><strong>5.1概述</strong><br>①简介：CMake是一个<strong>跨平台</strong>的安装编译工具，可以使用相同的<code>CMakeLists.txt</code>文件在多个操作系统（如Windows、Linux、macOS等）上生成适应不同编译器和构建工具的构建脚本</p>\n<blockquote>\n<p>如果不使用CMake的话，就要自己写针对不同平台的构建脚本，修改项目时，就十分麻烦</p>\n</blockquote>\n<p>②基本语法格式：<code>指令(参数1 参数n)</code></p>\n<blockquote>\n<p>参数之间使用<strong>空格</strong>或者<strong>分号</strong>隔开<br>指令时大小写无关的，参数是大小写相关的<br>变量使用<code>$&#123;变量&#125;</code>方式取值，但是在<code>IF</code>控制语句中是<strong>直接使用变量名</strong></p>\n</blockquote>\n<p>③目录结构</p>\n<blockquote>\n<p>项目主目录存在一个<code>CMakeLists.txt</code>文件<br><strong>包含源文件的子文件夹</strong>包含<code>CMakeLists.txt</code>文件:主目录的<code>CMakeLists.txt</code>通过<code>add_subdirectory</code>添加子目录即可；<br><strong>包含源文件的子文件夹</strong>未包含<code>CMakeLists.txt</code>文件:子目录编译规则体现在主目录的<code>CMakeLists.txt</code>中；</p>\n</blockquote>\n<p>④编译流程</p>\n<blockquote>\n<p>手动编写<code>CMakeLists.txt</code><br>执行命令<code>cmake PATH</code>生成<code>Makefile</code>(<code>PATH</code>是<strong>顶层CMakeLists.txt</strong>所在的目录)。<br>执行命令<code>make</code>进行编译。</p>\n</blockquote>\n<p>⑤外部构建(out-of-source build)</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">## 外部构建\n# 1. 在项目顶层目录下，创建build文件夹\nmkdir build\n# 2. 进入到build文件夹\ncd build\n# 3. 编译上级目录的CMakeLists.txt，生成Makefile和其他文件\ncmake ..\n# 4. 执行make命令，生成target\nmake<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>内部构建会在同级目录下产生一大堆中间文件，这些中间文件并不是我们最终所需要的，和工程源文件放在一起会显得杂乱无章，不推荐使用</p>\n</blockquote>\n<p><strong>5.2常用语法</strong><br>①<code>cmake_minimum_required</code>：指定CMake的<strong>最小版本要求</strong></p>\n<blockquote>\n<p>语法：<code>cmake_minimum_required(VERSION versionNumber [FATAL_ERROR])</code><br>示例：<code>cmake_minimum_required(VERSION 2.8.3)</code><br>#CMake最小版本要求为2.8.3</p>\n</blockquote>\n<p>②<code>project</code>：定义<strong>工程名称</strong>，并可指定工程支持的语言</p>\n<blockquote>\n<p>语法：<code>project(projectname [CXX] [C] [Java])</code><br>示例：<code>project(HELLOWORLD) </code><br>#指定工程名为HELLOWORLD</p>\n</blockquote>\n<p>③<code>set</code>：显式的定义变量</p>\n<blockquote>\n<p>语法：<code>set(VAR [VALUE] [CACHE TYPE DOCSTRING [FORCE]])</code><br>示例：<code>set(SRC sayhello.cpp hello.cpp)</code><br>#定义SRC变量，其值为sayhello.cpp hello.cpp，即两个文件</p>\n</blockquote>\n<p>④<code>include_directories</code>：向工程添加多个特定的<strong>头文件搜索路径</strong></p>\n<blockquote>\n<p>语法：<code>include_directories([AFTER|BEFORE] [SYSTEM] dir1 dir2 ...)</code><br>示例：<code>include_directories(/usr/include/myincludefolder ./include) </code><br>#将&#x2F;usr&#x2F;include&#x2F;myincludefolder 和 .&#x2F;include 添加到头文件搜索路径，绝对路径和相对路径均可</p>\n</blockquote>\n<p>⑤<code>link_directories</code>：向工程添加多个特定的<strong>库文件搜索路径</strong></p>\n<blockquote>\n<p>语法：<code>link_directories(dir1 dir2 ...)</code><br>示例：<code>link_directories(/usr/lib/mylibfolder ./lib)</code><br>#将&#x2F;usr&#x2F;lib&#x2F;mylibfolder 和 .&#x2F;lib 添加到库文件搜索路径</p>\n</blockquote>\n<p>⑥<code>add_library</code>：生成<strong>库文件</strong></p>\n<blockquote>\n<p>语法：<code>add_library(libname [SHARED|STATIC|MODULE] [EXCLUDE_FROM_ALL] source1 source2 ... sourceN)</code><br>示例：<code>add_library(hello SHARED $&#123;SRC&#125;)</code><br>#通过变量SRC生成libhello.so共享库</p>\n</blockquote>\n<p>⑦<code>add_compile_options</code>：添加<strong>编译参数</strong></p>\n<blockquote>\n<p>语法：<code>add_compile_options(&lt;options&gt;)</code><br>示例：<code>add_compile_options(-Wall -std=c++11 -O2)</code><br>#添加编译参数 -Wall -std&#x3D;c++11 -O2</p>\n</blockquote>\n<p>⑧<code>add_executable</code>：生成<strong>可执行文件</strong></p>\n<blockquote>\n<p>语法：<code>add_executable(exename source1 source2 ... sourceN)</code><br>示例：<code>add_executable(main main.cpp)</code><br>#编译main.cpp生成可执行文件main</p>\n</blockquote>\n<p>⑨<code>target_link_libraries</code>：为target<strong>添加需要链接的共享库</strong></p>\n<blockquote>\n<p>语法：<code>target_link_libraries(target library1&lt;debug | optimized&gt; library2...)</code><br>示例：<code>target_link_libraries(main hello)</code><br>#将hello动态库文件链接到可执行文件main</p>\n</blockquote>\n<p>⑩<code>add_subdirectory</code>：向当前工程<strong>添加存放源文件的子目录</strong>，并可以指定中间二进制和目标二进制存放的位置</p>\n<blockquote>\n<p>语法：<code>add_subdirectory(source_dir [binary_dir] [EXCLUDE_FROM_ALL])</code><br>示例：<code>add_subdirectory(src)</code><br>#添加src子目录，src中<strong>需有一个CMakeLists.txt</strong></p>\n</blockquote>\n<p>⑪<code>aux_source_directory</code>：发现<strong>一个目录下所有的源代码文件</strong>并将列表存储在一个变量中，这个指令临时被用来自动构建源文件列表</p>\n<blockquote>\n<p>语法：<code>aux_source_directory(dir VARIABLE)</code><br>示例：<br><code>aux_source_directory(. SRC)</code> #定义SRC变量，其值为当前目录下所有的源代码文件<br><code>add_executable(main $&#123;SRC&#125;)</code> #编译SRC变量所代表的源代码文件，生成main可执行文件</p>\n</blockquote>\n<p><strong>5.3常用变量</strong><br>①<code>CMAKE_C_FLAGS</code>：gcc编译选项<br>②<code>CMAKE_CXX_FLAGS</code>：g++编译选项</p>\n<blockquote>\n<p><code>set( CMAKE_CXX_FLAGS &quot;$&#123;CMAKE_CXX_FLAGS&#125; -std=c++11&quot;)</code><br>#在CMAKE_CXX_FLAGS编译选项后追加-std&#x3D;c++11<br>③<code>CMAKE_C_COMPILER</code>：指定C编译器<br>④<code>CMAKE_CXX_COMPILER</code>：指定C++编译器<br>⑤<code>EXECUTABLE_OUTPUT_PATH</code>：可执行文件输出的存放路径<br>⑥<code>LIBRARY_OUTPUT_PATH</code>：库文件输出的存放路径</p>\n</blockquote>\n"},{"title":"Linux系统配置","seo_title":"seo名称","toc":true,"indent":true,"top":false,"comments":1,"archive":true,"cover":false,"mathjax":false,"pin":false,"top_meta":false,"bottom_meta":false,"sidebar":["toc"],"keywords":"文章关键词","updated":"2023-11-07T14:10:58.014Z","img":"/medias/featureimages/16.webp","date":"2023-11-07T14:10:58.014Z","summary":"Ubuntu虚拟机配置","_content":"# Linux系统配置（Ubuntu22.04）\n### 1.基本配置\n**1.1安装VMware-tools or open-vm-tools**：https://blog.csdn.net/baidu_38797690/article/details/124191747\n**1.2更换软件源**：在**软件和更新**中替换\n### 2.软件安装\n**2.1包管理器安装**：大多数Linux发行版都提供了自己的包管理器，例如Ubuntu自带的apt、第三方包管理器sanp（需要自己下载）等。使用包管理器可以方便地从官方软件仓库中安装、更新和卸载软件\n```\nsudo apt-get update    # 更新软件源\nsudo apt-get install 软件包名   # 安装软件\nsudo apt-get remove 软件包名    #卸载软件\n```\n**2.2源码安装**：有些软件可能不在官方软件仓库中，或者需要手动安装特定版本的软件。在这种情况下，你可以从软件官网上下载安装包，然后**解压缩、编译和安装**\n①安装底层依赖，比如python\n①到对应网站上下载自己想要的版本的源码：`wget`+下载地址\n③解压到任意目录\n④在解压目录下配置（./configure）并编译（make）安装（make install）\n⑤修改用户主目录下名为.bash_profile的文件，配置PATH环境变量并使其生效\n⑥激活环境变量：source .bash_profile\n\n### 3.C/C++环境配置\nhttps://blog.csdn.net/zcteo/article/details/117528089\n### 4.python环境配置\n**4.1python解释器安装**：使用源码编译安装时需要提前安装底层依赖\n**4.2IDE安装**：pycharm or visual studio code\n\n\n","source":"_posts/Linux系统配置.md","raw":"---\ntitle: Linux系统配置\nseo_title: seo名称\ntoc: true\nindent: true\ntop: false\ncomments: true\narchive: true\ncover: false\nmathjax: false\npin: false\ntop_meta: false\nbottom_meta: false\nsidebar:\n  - toc\ntag:\n  - Linux\ncategories: 软技能\nkeywords: 文章关键词\nupdated: ''\nimg: /medias/featureimages/16.webp\ndate:\nsummary: Ubuntu虚拟机配置\n---\n# Linux系统配置（Ubuntu22.04）\n### 1.基本配置\n**1.1安装VMware-tools or open-vm-tools**：https://blog.csdn.net/baidu_38797690/article/details/124191747\n**1.2更换软件源**：在**软件和更新**中替换\n### 2.软件安装\n**2.1包管理器安装**：大多数Linux发行版都提供了自己的包管理器，例如Ubuntu自带的apt、第三方包管理器sanp（需要自己下载）等。使用包管理器可以方便地从官方软件仓库中安装、更新和卸载软件\n```\nsudo apt-get update    # 更新软件源\nsudo apt-get install 软件包名   # 安装软件\nsudo apt-get remove 软件包名    #卸载软件\n```\n**2.2源码安装**：有些软件可能不在官方软件仓库中，或者需要手动安装特定版本的软件。在这种情况下，你可以从软件官网上下载安装包，然后**解压缩、编译和安装**\n①安装底层依赖，比如python\n①到对应网站上下载自己想要的版本的源码：`wget`+下载地址\n③解压到任意目录\n④在解压目录下配置（./configure）并编译（make）安装（make install）\n⑤修改用户主目录下名为.bash_profile的文件，配置PATH环境变量并使其生效\n⑥激活环境变量：source .bash_profile\n\n### 3.C/C++环境配置\nhttps://blog.csdn.net/zcteo/article/details/117528089\n### 4.python环境配置\n**4.1python解释器安装**：使用源码编译安装时需要提前安装底层依赖\n**4.2IDE安装**：pycharm or visual studio code\n\n\n","slug":"Linux系统配置","published":1,"_id":"clmkphbf6000m9gvd185z5g4j","layout":"post","photos":[],"link":"","content":"<h1 id=\"Linux系统配置（Ubuntu22-04）\"><a href=\"#Linux系统配置（Ubuntu22-04）\" class=\"headerlink\" title=\"Linux系统配置（Ubuntu22.04）\"></a>Linux系统配置（Ubuntu22.04）</h1><h3 id=\"1-基本配置\"><a href=\"#1-基本配置\" class=\"headerlink\" title=\"1.基本配置\"></a>1.基本配置</h3><p><strong>1.1安装VMware-tools or open-vm-tools</strong>：<a href=\"https://blog.csdn.net/baidu_38797690/article/details/124191747\">https://blog.csdn.net/baidu_38797690/article/details/124191747</a><br><strong>1.2更换软件源</strong>：在<strong>软件和更新</strong>中替换</p>\n<h3 id=\"2-软件安装\"><a href=\"#2-软件安装\" class=\"headerlink\" title=\"2.软件安装\"></a>2.软件安装</h3><p><strong>2.1包管理器安装</strong>：大多数Linux发行版都提供了自己的包管理器，例如Ubuntu自带的apt、第三方包管理器sanp（需要自己下载）等。使用包管理器可以方便地从官方软件仓库中安装、更新和卸载软件</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">sudo apt-get update    # 更新软件源\nsudo apt-get install 软件包名   # 安装软件\nsudo apt-get remove 软件包名    #卸载软件<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><strong>2.2源码安装</strong>：有些软件可能不在官方软件仓库中，或者需要手动安装特定版本的软件。在这种情况下，你可以从软件官网上下载安装包，然后<strong>解压缩、编译和安装</strong><br>①安装底层依赖，比如python<br>①到对应网站上下载自己想要的版本的源码：<code>wget</code>+下载地址<br>③解压到任意目录<br>④在解压目录下配置（./configure）并编译（make）安装（make install）<br>⑤修改用户主目录下名为.bash_profile的文件，配置PATH环境变量并使其生效<br>⑥激活环境变量：source .bash_profile</p>\n<h3 id=\"3-C-x2F-C-环境配置\"><a href=\"#3-C-x2F-C-环境配置\" class=\"headerlink\" title=\"3.C/C++环境配置\"></a>3.C/C++环境配置</h3><p><a href=\"https://blog.csdn.net/zcteo/article/details/117528089\">https://blog.csdn.net/zcteo/article/details/117528089</a></p>\n<h3 id=\"4-python环境配置\"><a href=\"#4-python环境配置\" class=\"headerlink\" title=\"4.python环境配置\"></a>4.python环境配置</h3><p><strong>4.1python解释器安装</strong>：使用源码编译安装时需要提前安装底层依赖<br><strong>4.2IDE安装</strong>：pycharm or visual studio code</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"Linux系统配置（Ubuntu22-04）\"><a href=\"#Linux系统配置（Ubuntu22-04）\" class=\"headerlink\" title=\"Linux系统配置（Ubuntu22.04）\"></a>Linux系统配置（Ubuntu22.04）</h1><h3 id=\"1-基本配置\"><a href=\"#1-基本配置\" class=\"headerlink\" title=\"1.基本配置\"></a>1.基本配置</h3><p><strong>1.1安装VMware-tools or open-vm-tools</strong>：<a href=\"https://blog.csdn.net/baidu_38797690/article/details/124191747\">https://blog.csdn.net/baidu_38797690/article/details/124191747</a><br><strong>1.2更换软件源</strong>：在<strong>软件和更新</strong>中替换</p>\n<h3 id=\"2-软件安装\"><a href=\"#2-软件安装\" class=\"headerlink\" title=\"2.软件安装\"></a>2.软件安装</h3><p><strong>2.1包管理器安装</strong>：大多数Linux发行版都提供了自己的包管理器，例如Ubuntu自带的apt、第三方包管理器sanp（需要自己下载）等。使用包管理器可以方便地从官方软件仓库中安装、更新和卸载软件</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">sudo apt-get update    # 更新软件源\nsudo apt-get install 软件包名   # 安装软件\nsudo apt-get remove 软件包名    #卸载软件<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><strong>2.2源码安装</strong>：有些软件可能不在官方软件仓库中，或者需要手动安装特定版本的软件。在这种情况下，你可以从软件官网上下载安装包，然后<strong>解压缩、编译和安装</strong><br>①安装底层依赖，比如python<br>①到对应网站上下载自己想要的版本的源码：<code>wget</code>+下载地址<br>③解压到任意目录<br>④在解压目录下配置（.&#x2F;configure）并编译（make）安装（make install）<br>⑤修改用户主目录下名为.bash_profile的文件，配置PATH环境变量并使其生效<br>⑥激活环境变量：source .bash_profile</p>\n<h3 id=\"3-C-x2F-C-环境配置\"><a href=\"#3-C-x2F-C-环境配置\" class=\"headerlink\" title=\"3.C&#x2F;C++环境配置\"></a>3.C&#x2F;C++环境配置</h3><p><a href=\"https://blog.csdn.net/zcteo/article/details/117528089\">https://blog.csdn.net/zcteo/article/details/117528089</a></p>\n<h3 id=\"4-python环境配置\"><a href=\"#4-python环境配置\" class=\"headerlink\" title=\"4.python环境配置\"></a>4.python环境配置</h3><p><strong>4.1python解释器安装</strong>：使用源码编译安装时需要提前安装底层依赖<br><strong>4.2IDE安装</strong>：pycharm or visual studio code</p>\n"},{"title":"linux内核设计与实现（二）","seo_title":"seo名称","toc":true,"indent":true,"top":false,"comments":1,"archive":true,"cover":false,"mathjax":false,"pin":false,"top_meta":false,"bottom_meta":false,"sidebar":["toc"],"keywords":"文章关键词","updated":"2023-11-07T14:10:58.014Z","date":"2023-11-07T14:10:58.014Z","img":"/medias/featureimages/3.webp","summary":"进程管理和进程调度","_content":"# Linux内核设计与实现（二）\n## 进程管理\n\n### 1.进程和线程\n**1.1进程**：**正在执行**的程序的**实时结果**\n①进程不仅仅是一段可执行程序代码，还包含其他资源，如打开的文件、挂起的信号、内核内部数据、处理器状态、一个或多个具有内存映射的内存地址空间、执行线程和存放全局变量的数据段等\n②进程和程序不是一对一关系，可能多个进程执行的是一个程序\n**1.2线程**：在**进程中活动的对象**，每个线程都拥有独立的程序计数器、进程栈和一组进程寄存器\n①**内核调度的对象**是线程，不是进程\n②在Linux中，线程被看作是**特殊的进程**\n③线程可以**共享虚拟内存**，但是有其**各自的虚拟处理器**\n**1.3内核线程**：独立运行在**内核空间**的标准进程，但是没有独立的地址空间，只能**由内核线程创建**\n**1.4进程上下文**：\n\n### 2.进程描述符（task_struct）\n**2.1定义**：内核将进程的列表存放在名为**任务队列**的**双向循环链表**中，链表的每一项就是进程描述符，包含了**内核管理一个进程的所有信息**，类型为`task_struct`，定义在<linxu/sched.h>中\n**2.2分配**\n①通过**slab分配器**分配进程描述符，能达到**对象复用**和**缓存着色**的目的\n②slab分配器分配进程描述符后，在**进程内核栈的尾端**创建`thread_info`结构，其中`task`域存放指向**其进程描述符的指针**\n**2.3访问**：内核通过访问进程描述符处理进程\n①thread_info结构：采用**硬件体系结构对应的current宏**访问thread_info结构访问其task域\n②特殊寄存器：有的硬件体系结构拿出**一个专门寄存器**存放指向当前进程task_struct的指针\n**2.4PID**：每个进程的标志，PID号的最大值表示系统中允许同时存在的进程的最大数目\n**2.5进程状态**：进程描述符中的**state域**描述了进程当前状态\n①TASK_RUNNING（运行）：正在执行或者在运行队列中等待执行\n②TASK_INTERRUPTIBLE（可中断）：进程被**阻塞（睡眠）**，**等待某些条件的达成**状态便改为运行，可能**被某些信号提前唤醒**\n③TASK_UNINTERRUPTIBLE（不可中断）：进程在等待时必须不受干扰，或者等待的事件很快就会发生，**不对信号做出响应**\n④_TASK_TRACED（被跟踪）：被一些进程监视\n⑤_TASK_STOPPED（停止）：**没有投入运行也不能投入运行**，进程退出运行，在接收到某些信号或者在调试时接收到任何信号便会变为这种状态\n#进程状态可以通过某些函数调整，如`set_task_state()`函数\n**2.6父子进程**：每个进程描述符中都包含一个`parent`指针指向其父进程，也有一个名为`children`的子进程列表\n#所有进程都是`init`进程的子进程\n\n### 3.进程的创建\n**3.1Unix进程创建概述**：`fork()`**拷贝当前进程**创建一个子进程，该子进程和父进程区别仅仅在于PID和PPID（父进程号）和某些资源，`exec()`读取**进程对应可执行文件**将其载入地址空间运行\n#Linux的`fork()`系统调用采用的是**写时拷贝**，不复制整个父进程的进程地址空间（**父进程占用的内存页**），而是和父进程**共享**，只有当**需要写入时**才创建自己的内存页,**在不写入的情况下，`fork()`函数只是复制了父进程的页表项和给子进程创建唯一的PID**\n**3.2fork()**\n①过程概述：`fork()`→`clone()`系统调用→`do_fork()`→调用`copy_process()`\n②copy_process过程\n- 为新进程创建一个内核栈、`thread_info`结构和`task_struct`结构，和父进程相同\n- 检查是否超出了资源的限制\n- 子进程`task_struct`的一些信息被清零或初始化，以便和父进程相区分，并将状态设置为“不可中断”，防止其投入运行\n- 更新子进程`task_struct`中的`flag`标志，去掉子进程的**超级用户权限**，设置其“没有调用过`exec()`”对应的标志，并分配一个PID\n- 根据`fork()`传递给`clone()`的标志判断其是否能**共享公共资源**，如果不能，则拷贝一份\n- 扫尾工作，并返回一个指向子进程的指针，返回成功则**先将子进程投入运行**，因为子进程会运行`exec()`进行写时拷贝，防止父进程运行后写入改变地址空间\n#如果创建的是线程的话，每个线程都有**各自的进程描述符**，描述**地址空间**、**文件资源系统**等**共享资源**，**线程本身**再去描述其**独占**的资源，需要传递参数标志给clone()指明需要共享的资源（查阅相关表格）\n#\n③vfork():除了不拷贝父进程的页表项外，其余和`fork()`功能一致，可以通过向`clone()`传递特殊标志实现`vfork()`\n\n### 4.进程的终结\n**4.1终结的产生**：进程调用exit()系统调用\n①主动调用\n②程序主函数返回：C语言会在函数的返回点后调用\n③接收到不能处理与忽略的信号和异常\n**4.2exit()**\n①概述：调用exit（）后，只与该进程相关的所有资源全部被释放，成为僵死进程，只剩下内存栈、thread_info结构和task_struct结构，等待父进程调用wait（）将其释放，父进程退出后，需要给子进程在当前线程组或者找一个线程或者init作为父进程\n②详细过程：LKD P31页\n父进程退出后，需要给子进程在当前线程组或者找一个线程或者init作为父进程\n\n### 5.进程调度","source":"_posts/Linux内核设计与实现（二）.md","raw":"---\ntitle: linux内核设计与实现（二）\nseo_title: seo名称\ntoc: true\nindent: true\ntop: false\ncomments: true\narchive: true\ncover: false\nmathjax: false\npin: false\ntop_meta: false\nbottom_meta: false\nsidebar:\n  - toc\ntag:\n  - Linux内核\ncategories: Linux内核\nkeywords: 文章关键词\nupdated: ''\ndate:\nimg: /medias/featureimages/3.webp\nsummary: 进程管理和进程调度\n---\n# Linux内核设计与实现（二）\n## 进程管理\n\n### 1.进程和线程\n**1.1进程**：**正在执行**的程序的**实时结果**\n①进程不仅仅是一段可执行程序代码，还包含其他资源，如打开的文件、挂起的信号、内核内部数据、处理器状态、一个或多个具有内存映射的内存地址空间、执行线程和存放全局变量的数据段等\n②进程和程序不是一对一关系，可能多个进程执行的是一个程序\n**1.2线程**：在**进程中活动的对象**，每个线程都拥有独立的程序计数器、进程栈和一组进程寄存器\n①**内核调度的对象**是线程，不是进程\n②在Linux中，线程被看作是**特殊的进程**\n③线程可以**共享虚拟内存**，但是有其**各自的虚拟处理器**\n**1.3内核线程**：独立运行在**内核空间**的标准进程，但是没有独立的地址空间，只能**由内核线程创建**\n**1.4进程上下文**：\n\n### 2.进程描述符（task_struct）\n**2.1定义**：内核将进程的列表存放在名为**任务队列**的**双向循环链表**中，链表的每一项就是进程描述符，包含了**内核管理一个进程的所有信息**，类型为`task_struct`，定义在<linxu/sched.h>中\n**2.2分配**\n①通过**slab分配器**分配进程描述符，能达到**对象复用**和**缓存着色**的目的\n②slab分配器分配进程描述符后，在**进程内核栈的尾端**创建`thread_info`结构，其中`task`域存放指向**其进程描述符的指针**\n**2.3访问**：内核通过访问进程描述符处理进程\n①thread_info结构：采用**硬件体系结构对应的current宏**访问thread_info结构访问其task域\n②特殊寄存器：有的硬件体系结构拿出**一个专门寄存器**存放指向当前进程task_struct的指针\n**2.4PID**：每个进程的标志，PID号的最大值表示系统中允许同时存在的进程的最大数目\n**2.5进程状态**：进程描述符中的**state域**描述了进程当前状态\n①TASK_RUNNING（运行）：正在执行或者在运行队列中等待执行\n②TASK_INTERRUPTIBLE（可中断）：进程被**阻塞（睡眠）**，**等待某些条件的达成**状态便改为运行，可能**被某些信号提前唤醒**\n③TASK_UNINTERRUPTIBLE（不可中断）：进程在等待时必须不受干扰，或者等待的事件很快就会发生，**不对信号做出响应**\n④_TASK_TRACED（被跟踪）：被一些进程监视\n⑤_TASK_STOPPED（停止）：**没有投入运行也不能投入运行**，进程退出运行，在接收到某些信号或者在调试时接收到任何信号便会变为这种状态\n#进程状态可以通过某些函数调整，如`set_task_state()`函数\n**2.6父子进程**：每个进程描述符中都包含一个`parent`指针指向其父进程，也有一个名为`children`的子进程列表\n#所有进程都是`init`进程的子进程\n\n### 3.进程的创建\n**3.1Unix进程创建概述**：`fork()`**拷贝当前进程**创建一个子进程，该子进程和父进程区别仅仅在于PID和PPID（父进程号）和某些资源，`exec()`读取**进程对应可执行文件**将其载入地址空间运行\n#Linux的`fork()`系统调用采用的是**写时拷贝**，不复制整个父进程的进程地址空间（**父进程占用的内存页**），而是和父进程**共享**，只有当**需要写入时**才创建自己的内存页,**在不写入的情况下，`fork()`函数只是复制了父进程的页表项和给子进程创建唯一的PID**\n**3.2fork()**\n①过程概述：`fork()`→`clone()`系统调用→`do_fork()`→调用`copy_process()`\n②copy_process过程\n- 为新进程创建一个内核栈、`thread_info`结构和`task_struct`结构，和父进程相同\n- 检查是否超出了资源的限制\n- 子进程`task_struct`的一些信息被清零或初始化，以便和父进程相区分，并将状态设置为“不可中断”，防止其投入运行\n- 更新子进程`task_struct`中的`flag`标志，去掉子进程的**超级用户权限**，设置其“没有调用过`exec()`”对应的标志，并分配一个PID\n- 根据`fork()`传递给`clone()`的标志判断其是否能**共享公共资源**，如果不能，则拷贝一份\n- 扫尾工作，并返回一个指向子进程的指针，返回成功则**先将子进程投入运行**，因为子进程会运行`exec()`进行写时拷贝，防止父进程运行后写入改变地址空间\n#如果创建的是线程的话，每个线程都有**各自的进程描述符**，描述**地址空间**、**文件资源系统**等**共享资源**，**线程本身**再去描述其**独占**的资源，需要传递参数标志给clone()指明需要共享的资源（查阅相关表格）\n#\n③vfork():除了不拷贝父进程的页表项外，其余和`fork()`功能一致，可以通过向`clone()`传递特殊标志实现`vfork()`\n\n### 4.进程的终结\n**4.1终结的产生**：进程调用exit()系统调用\n①主动调用\n②程序主函数返回：C语言会在函数的返回点后调用\n③接收到不能处理与忽略的信号和异常\n**4.2exit()**\n①概述：调用exit（）后，只与该进程相关的所有资源全部被释放，成为僵死进程，只剩下内存栈、thread_info结构和task_struct结构，等待父进程调用wait（）将其释放，父进程退出后，需要给子进程在当前线程组或者找一个线程或者init作为父进程\n②详细过程：LKD P31页\n父进程退出后，需要给子进程在当前线程组或者找一个线程或者init作为父进程\n\n### 5.进程调度","slug":"Linux内核设计与实现（二）","published":1,"_id":"clmkphbf6000r9gvd2k8h6z91","layout":"post","photos":[],"link":"","content":"<h1 id=\"Linux内核设计与实现（二）\"><a href=\"#Linux内核设计与实现（二）\" class=\"headerlink\" title=\"Linux内核设计与实现（二）\"></a>Linux内核设计与实现（二）</h1><h2 id=\"进程管理\"><a href=\"#进程管理\" class=\"headerlink\" title=\"进程管理\"></a>进程管理</h2><h3 id=\"1-进程和线程\"><a href=\"#1-进程和线程\" class=\"headerlink\" title=\"1.进程和线程\"></a>1.进程和线程</h3><p><strong>1.1进程</strong>：<strong>正在执行</strong>的程序的<strong>实时结果</strong><br>①进程不仅仅是一段可执行程序代码，还包含其他资源，如打开的文件、挂起的信号、内核内部数据、处理器状态、一个或多个具有内存映射的内存地址空间、执行线程和存放全局变量的数据段等<br>②进程和程序不是一对一关系，可能多个进程执行的是一个程序<br><strong>1.2线程</strong>：在<strong>进程中活动的对象</strong>，每个线程都拥有独立的程序计数器、进程栈和一组进程寄存器<br>①<strong>内核调度的对象</strong>是线程，不是进程<br>②在Linux中，线程被看作是<strong>特殊的进程</strong><br>③线程可以<strong>共享虚拟内存</strong>，但是有其<strong>各自的虚拟处理器</strong><br><strong>1.3内核线程</strong>：独立运行在<strong>内核空间</strong>的标准进程，但是没有独立的地址空间，只能<strong>由内核线程创建</strong><br><strong>1.4进程上下文</strong>：</p>\n<h3 id=\"2-进程描述符（task-struct）\"><a href=\"#2-进程描述符（task-struct）\" class=\"headerlink\" title=\"2.进程描述符（task_struct）\"></a>2.进程描述符（task_struct）</h3><p><strong>2.1定义</strong>：内核将进程的列表存放在名为<strong>任务队列</strong>的<strong>双向循环链表</strong>中，链表的每一项就是进程描述符，包含了<strong>内核管理一个进程的所有信息</strong>，类型为<code>task_struct</code>，定义在&lt;linxu/sched.h&gt;中<br><strong>2.2分配</strong><br>①通过<strong>slab分配器</strong>分配进程描述符，能达到<strong>对象复用</strong>和<strong>缓存着色</strong>的目的<br>②slab分配器分配进程描述符后，在<strong>进程内核栈的尾端</strong>创建<code>thread_info</code>结构，其中<code>task</code>域存放指向<strong>其进程描述符的指针</strong><br><strong>2.3访问</strong>：内核通过访问进程描述符处理进程<br>①thread_info结构：采用<strong>硬件体系结构对应的current宏</strong>访问thread_info结构访问其task域<br>②特殊寄存器：有的硬件体系结构拿出<strong>一个专门寄存器</strong>存放指向当前进程task_struct的指针<br><strong>2.4PID</strong>：每个进程的标志，PID号的最大值表示系统中允许同时存在的进程的最大数目<br><strong>2.5进程状态</strong>：进程描述符中的<strong>state域</strong>描述了进程当前状态<br>①TASK_RUNNING（运行）：正在执行或者在运行队列中等待执行<br>②TASK_INTERRUPTIBLE（可中断）：进程被<strong>阻塞（睡眠）</strong>，<strong>等待某些条件的达成</strong>状态便改为运行，可能<strong>被某些信号提前唤醒</strong><br>③TASK_UNINTERRUPTIBLE（不可中断）：进程在等待时必须不受干扰，或者等待的事件很快就会发生，<strong>不对信号做出响应</strong><br>④_TASK_TRACED（被跟踪）：被一些进程监视<br>⑤_TASK_STOPPED（停止）：<strong>没有投入运行也不能投入运行</strong>，进程退出运行，在接收到某些信号或者在调试时接收到任何信号便会变为这种状态<br>#进程状态可以通过某些函数调整，如<code>set_task_state()</code>函数<br><strong>2.6父子进程</strong>：每个进程描述符中都包含一个<code>parent</code>指针指向其父进程，也有一个名为<code>children</code>的子进程列表<br>#所有进程都是<code>init</code>进程的子进程</p>\n<h3 id=\"3-进程的创建\"><a href=\"#3-进程的创建\" class=\"headerlink\" title=\"3.进程的创建\"></a>3.进程的创建</h3><p><strong>3.1Unix进程创建概述</strong>：<code>fork()</code><strong>拷贝当前进程</strong>创建一个子进程，该子进程和父进程区别仅仅在于PID和PPID（父进程号）和某些资源，<code>exec()</code>读取<strong>进程对应可执行文件</strong>将其载入地址空间运行<br>#Linux的<code>fork()</code>系统调用采用的是<strong>写时拷贝</strong>，不复制整个父进程的进程地址空间（<strong>父进程占用的内存页</strong>），而是和父进程<strong>共享</strong>，只有当<strong>需要写入时</strong>才创建自己的内存页,<strong>在不写入的情况下，<code>fork()</code>函数只是复制了父进程的页表项和给子进程创建唯一的PID</strong><br><strong>3.2fork()</strong><br>①过程概述：<code>fork()</code>→<code>clone()</code>系统调用→<code>do_fork()</code>→调用<code>copy_process()</code><br>②copy_process过程</p>\n<ul>\n<li>为新进程创建一个内核栈、<code>thread_info</code>结构和<code>task_struct</code>结构，和父进程相同</li>\n<li>检查是否超出了资源的限制</li>\n<li>子进程<code>task_struct</code>的一些信息被清零或初始化，以便和父进程相区分，并将状态设置为“不可中断”，防止其投入运行</li>\n<li>更新子进程<code>task_struct</code>中的<code>flag</code>标志，去掉子进程的<strong>超级用户权限</strong>，设置其“没有调用过<code>exec()</code>”对应的标志，并分配一个PID</li>\n<li>根据<code>fork()</code>传递给<code>clone()</code>的标志判断其是否能<strong>共享公共资源</strong>，如果不能，则拷贝一份</li>\n<li>扫尾工作，并返回一个指向子进程的指针，返回成功则<strong>先将子进程投入运行</strong>，因为子进程会运行<code>exec()</code>进行写时拷贝，防止父进程运行后写入改变地址空间</li>\n</ul>\n<p>#如果创建的是线程的话，每个线程都有<strong>各自的进程描述符</strong>，描述<strong>地址空间</strong>、<strong>文件资源系统</strong>等<strong>共享资源</strong>，<strong>线程本身</strong>再去描述其<strong>独占</strong>的资源，需要传递参数标志给clone()指明需要共享的资源（查阅相关表格）<br>#<br>③vfork():除了不拷贝父进程的页表项外，其余和<code>fork()</code>功能一致，可以通过向<code>clone()</code>传递特殊标志实现<code>vfork()</code></p>\n<h3 id=\"4-进程的终结\"><a href=\"#4-进程的终结\" class=\"headerlink\" title=\"4.进程的终结\"></a>4.进程的终结</h3><p><strong>4.1终结的产生</strong>：进程调用exit()系统调用<br>①主动调用<br>②程序主函数返回：C语言会在函数的返回点后调用<br>③接收到不能处理与忽略的信号和异常<br><strong>4.2exit()</strong><br>①概述：调用exit（）后，只与该进程相关的所有资源全部被释放，成为僵死进程，只剩下内存栈、thread_info结构和task_struct结构，等待父进程调用wait（）将其释放，父进程退出后，需要给子进程在当前线程组或者找一个线程或者init作为父进程<br>②详细过程：LKD P31页<br>父进程退出后，需要给子进程在当前线程组或者找一个线程或者init作为父进程</p>\n<h3 id=\"5-进程调度\"><a href=\"#5-进程调度\" class=\"headerlink\" title=\"5.进程调度\"></a>5.进程调度</h3>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"Linux内核设计与实现（二）\"><a href=\"#Linux内核设计与实现（二）\" class=\"headerlink\" title=\"Linux内核设计与实现（二）\"></a>Linux内核设计与实现（二）</h1><h2 id=\"进程管理\"><a href=\"#进程管理\" class=\"headerlink\" title=\"进程管理\"></a>进程管理</h2><h3 id=\"1-进程和线程\"><a href=\"#1-进程和线程\" class=\"headerlink\" title=\"1.进程和线程\"></a>1.进程和线程</h3><p><strong>1.1进程</strong>：<strong>正在执行</strong>的程序的<strong>实时结果</strong><br>①进程不仅仅是一段可执行程序代码，还包含其他资源，如打开的文件、挂起的信号、内核内部数据、处理器状态、一个或多个具有内存映射的内存地址空间、执行线程和存放全局变量的数据段等<br>②进程和程序不是一对一关系，可能多个进程执行的是一个程序<br><strong>1.2线程</strong>：在<strong>进程中活动的对象</strong>，每个线程都拥有独立的程序计数器、进程栈和一组进程寄存器<br>①<strong>内核调度的对象</strong>是线程，不是进程<br>②在Linux中，线程被看作是<strong>特殊的进程</strong><br>③线程可以<strong>共享虚拟内存</strong>，但是有其<strong>各自的虚拟处理器</strong><br><strong>1.3内核线程</strong>：独立运行在<strong>内核空间</strong>的标准进程，但是没有独立的地址空间，只能<strong>由内核线程创建</strong><br><strong>1.4进程上下文</strong>：</p>\n<h3 id=\"2-进程描述符（task-struct）\"><a href=\"#2-进程描述符（task-struct）\" class=\"headerlink\" title=\"2.进程描述符（task_struct）\"></a>2.进程描述符（task_struct）</h3><p><strong>2.1定义</strong>：内核将进程的列表存放在名为<strong>任务队列</strong>的<strong>双向循环链表</strong>中，链表的每一项就是进程描述符，包含了<strong>内核管理一个进程的所有信息</strong>，类型为<code>task_struct</code>，定义在&lt;linxu&#x2F;sched.h&gt;中<br><strong>2.2分配</strong><br>①通过<strong>slab分配器</strong>分配进程描述符，能达到<strong>对象复用</strong>和<strong>缓存着色</strong>的目的<br>②slab分配器分配进程描述符后，在<strong>进程内核栈的尾端</strong>创建<code>thread_info</code>结构，其中<code>task</code>域存放指向<strong>其进程描述符的指针</strong><br><strong>2.3访问</strong>：内核通过访问进程描述符处理进程<br>①thread_info结构：采用<strong>硬件体系结构对应的current宏</strong>访问thread_info结构访问其task域<br>②特殊寄存器：有的硬件体系结构拿出<strong>一个专门寄存器</strong>存放指向当前进程task_struct的指针<br><strong>2.4PID</strong>：每个进程的标志，PID号的最大值表示系统中允许同时存在的进程的最大数目<br><strong>2.5进程状态</strong>：进程描述符中的<strong>state域</strong>描述了进程当前状态<br>①TASK_RUNNING（运行）：正在执行或者在运行队列中等待执行<br>②TASK_INTERRUPTIBLE（可中断）：进程被<strong>阻塞（睡眠）</strong>，<strong>等待某些条件的达成</strong>状态便改为运行，可能<strong>被某些信号提前唤醒</strong><br>③TASK_UNINTERRUPTIBLE（不可中断）：进程在等待时必须不受干扰，或者等待的事件很快就会发生，<strong>不对信号做出响应</strong><br>④_TASK_TRACED（被跟踪）：被一些进程监视<br>⑤_TASK_STOPPED（停止）：<strong>没有投入运行也不能投入运行</strong>，进程退出运行，在接收到某些信号或者在调试时接收到任何信号便会变为这种状态<br>#进程状态可以通过某些函数调整，如<code>set_task_state()</code>函数<br><strong>2.6父子进程</strong>：每个进程描述符中都包含一个<code>parent</code>指针指向其父进程，也有一个名为<code>children</code>的子进程列表<br>#所有进程都是<code>init</code>进程的子进程</p>\n<h3 id=\"3-进程的创建\"><a href=\"#3-进程的创建\" class=\"headerlink\" title=\"3.进程的创建\"></a>3.进程的创建</h3><p><strong>3.1Unix进程创建概述</strong>：<code>fork()</code><strong>拷贝当前进程</strong>创建一个子进程，该子进程和父进程区别仅仅在于PID和PPID（父进程号）和某些资源，<code>exec()</code>读取<strong>进程对应可执行文件</strong>将其载入地址空间运行<br>#Linux的<code>fork()</code>系统调用采用的是<strong>写时拷贝</strong>，不复制整个父进程的进程地址空间（<strong>父进程占用的内存页</strong>），而是和父进程<strong>共享</strong>，只有当<strong>需要写入时</strong>才创建自己的内存页,<strong>在不写入的情况下，<code>fork()</code>函数只是复制了父进程的页表项和给子进程创建唯一的PID</strong><br><strong>3.2fork()</strong><br>①过程概述：<code>fork()</code>→<code>clone()</code>系统调用→<code>do_fork()</code>→调用<code>copy_process()</code><br>②copy_process过程</p>\n<ul>\n<li>为新进程创建一个内核栈、<code>thread_info</code>结构和<code>task_struct</code>结构，和父进程相同</li>\n<li>检查是否超出了资源的限制</li>\n<li>子进程<code>task_struct</code>的一些信息被清零或初始化，以便和父进程相区分，并将状态设置为“不可中断”，防止其投入运行</li>\n<li>更新子进程<code>task_struct</code>中的<code>flag</code>标志，去掉子进程的<strong>超级用户权限</strong>，设置其“没有调用过<code>exec()</code>”对应的标志，并分配一个PID</li>\n<li>根据<code>fork()</code>传递给<code>clone()</code>的标志判断其是否能<strong>共享公共资源</strong>，如果不能，则拷贝一份</li>\n<li>扫尾工作，并返回一个指向子进程的指针，返回成功则<strong>先将子进程投入运行</strong>，因为子进程会运行<code>exec()</code>进行写时拷贝，防止父进程运行后写入改变地址空间</li>\n</ul>\n<p>#如果创建的是线程的话，每个线程都有<strong>各自的进程描述符</strong>，描述<strong>地址空间</strong>、<strong>文件资源系统</strong>等<strong>共享资源</strong>，<strong>线程本身</strong>再去描述其<strong>独占</strong>的资源，需要传递参数标志给clone()指明需要共享的资源（查阅相关表格）<br>#<br>③vfork():除了不拷贝父进程的页表项外，其余和<code>fork()</code>功能一致，可以通过向<code>clone()</code>传递特殊标志实现<code>vfork()</code></p>\n<h3 id=\"4-进程的终结\"><a href=\"#4-进程的终结\" class=\"headerlink\" title=\"4.进程的终结\"></a>4.进程的终结</h3><p><strong>4.1终结的产生</strong>：进程调用exit()系统调用<br>①主动调用<br>②程序主函数返回：C语言会在函数的返回点后调用<br>③接收到不能处理与忽略的信号和异常<br><strong>4.2exit()</strong><br>①概述：调用exit（）后，只与该进程相关的所有资源全部被释放，成为僵死进程，只剩下内存栈、thread_info结构和task_struct结构，等待父进程调用wait（）将其释放，父进程退出后，需要给子进程在当前线程组或者找一个线程或者init作为父进程<br>②详细过程：LKD P31页<br>父进程退出后，需要给子进程在当前线程组或者找一个线程或者init作为父进程</p>\n<h3 id=\"5-进程调度\"><a href=\"#5-进程调度\" class=\"headerlink\" title=\"5.进程调度\"></a>5.进程调度</h3>"},{"title":"MITS6.081（一）","seo_title":"seo名称","toc":true,"indent":true,"top":false,"comments":1,"archive":true,"cover":false,"mathjax":false,"pin":false,"top_meta":false,"bottom_meta":false,"sidebar":["toc"],"keywords":"文章关键词","updated":"2023-11-07T14:10:58.014Z","img":"/medias/featureimages/29.webp","date":"2023-11-07T14:10:58.014Z","summary":"MITS6.081环境配置","_content":"# MITS6.081（一）\n\n","source":"_posts/MITS6-081环境配置.md","raw":"---\ntitle: MITS6.081（一）\nseo_title: seo名称\ntoc: true\nindent: true\ntop: false\ncomments: true\narchive: true\ncover: false\nmathjax: false\npin: false\ntop_meta: false\nbottom_meta: false\nsidebar:\n  - toc\ntag:\n  - 操作系统\n  - MITS6.081\ncategories: 项目实战\nkeywords: 文章关键词\nupdated: ''\nimg: /medias/featureimages/29.webp\ndate:\nsummary: MITS6.081环境配置\n---\n# MITS6.081（一）\n\n","slug":"MITS6-081环境配置","published":1,"_id":"clmkphbf7000t9gvddjyrf668","layout":"post","photos":[],"link":"","content":"<h1 id=\"MITS6-081（一）\"><a href=\"#MITS6-081（一）\" class=\"headerlink\" title=\"MITS6.081（一）\"></a>MITS6.081（一）</h1>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"MITS6-081（一）\"><a href=\"#MITS6-081（一）\" class=\"headerlink\" title=\"MITS6.081（一）\"></a>MITS6.081（一）</h1>"},{"title":"PPT制作（基础篇）","seo_title":"seo名称","toc":true,"indent":true,"top":false,"comments":1,"archive":true,"cover":false,"mathjax":false,"pin":false,"top_meta":false,"bottom_meta":false,"sidebar":["toc"],"keywords":"文章关键词","updated":"2023-11-08T07:24:15.705Z","img":"/medias/featureimages/12.webp","date":"2023-11-07T14:10:58.014Z","summary":"PPT风格确定","_content":"# PPT制作（基础篇）\n## PPT风格矩阵\n### 1.配色\n#### 1.1主色\n**①根据logo选择**\n>学校、企业**logo**\n\n**②根据风格选择**\n>比如说**黑金风**就是**黑色**和**金色**，**科技风**经常是**蓝色**和**青色**，**党政风**是**红色**和**黄色**\n\n**③根据主题选择**：\n>比如说**医疗行业**对应的是**蓝色**\n{%list%}\n可以在网上搜索对应关键字，提取配色\n{%endlist%}\n#### 1.2辅助色\n**①邻近色**：\n>**基于主色**调整**色调**，用于区分不同**维度**\n{%list%}\n右击色块→填充→其他颜色填充→颜色模式改为“HSL”→调整色调数值\n{%endlist%}\n{%right%}\n跨度最好在45以内，20较佳\n{%endright%}\n{%warning%}\n色调数值的界限时0-255，所以-15相当于240，270相当于15\n{%endwarning%}\n**②梯度色**\n>调整**亮度**，用于区分不同**层级**\n{%list%}\n右击色块→填充→其他颜色填充→颜色模式改为“HSL”→调整亮度数值\n{%endlist%}\n{%right%}\n设计选项卡→变体选项卡→颜色→自定义颜色→着色1，输入主色的色值即可\n{%endright%}\n![辅助色矩阵](/image/ppt_40.png)\n**③相关网站**\n>[Adobe Color](https://color.adobe.com/zh/)、[Palette](https://arco.design/palette/list)、[撞色](https://colorsupplyyy.com/app)、[渐变色](https://webgradients.com/)\n***\n### 2.修饰边框\n#### 2.1形状\n**①轮廓**\n>**矩形**：工业、商务和力量\n\n>**圆角矩形**：卡通、儿童和女性\n\n>**去角矩形**：文化、国风和传统\n\n>**平行四边形**：运动、速度和竞赛\n\n>**折角**：科技、未来\n{%list%}\n插入基础图形→右击→编辑顶点→每个顶点对应两个控点，拖动控点即可做出有弧度的图形\n{%endlist%}\n{%right%}\n比较新颖的形状可以在素材网站上寻找，记得要下载矢量图（SVG）\n{%endright%}\n**②填充**\n>**色块填充**：**纯色**和**渐变色**\n\n>**纹理填充**：找到**纹理素材**→在ppt中将**纹理图片和形状重叠**→**先选形状，后选纹理**→**形状选项卡**→**合并形状**→**剪除**\n\n#### 2.2效果\n**①立体**\n>**设置渐变**：两个**颜色一致**的光圈→**第一个光圈**亮度调整至**70％**→**渐变类型**调整为**射线渐变**，**方向**调整为**从左上角**\n{%list%}\n适当调整两个光圈位置调整效果，如两个光圈位置分别在15%和85%\n{%endlist%}\n>**添加映像效果**：选择**第一个预设**，**透明度**85％，**大小**20％左右，适当添加**模糊**效果\n\n![立体](/image/ppt_41.png)\n**②光泽**\n>**设置渐变**：选择**线性渐变**，**方向**调整为45°→**左右两侧光圈**设置为**主色**→**中间**添加**一到两个光圈**，颜色设置为**背景色**，**透明度**设置为100\n{%list%}\n适当调整两个光圈位置调整效果\n{%endlist%}\n>将**轮廓**设置为**实线**,并**同上**添加**映像**\n{%list%}\n轮廓线的亮度最好比主色高一些\n{%endlist%}\n\n![光泽](/image/ppt_42.png)\n**③新拟态**\n>**凸起**：**形状颜色**和**背景色**相同，**去除轮廓**，给**两个相同的形状**添加**外阴影**，**方向对立**（比如说右下45°和左上45°），一个阴影的**色调**比背景色**暗**，一个阴影的**色调**比背景**亮**，然后**重叠这两个形状**\n\n>**凹陷**：**形状颜色**和**背景色**相同，**去除轮廓**，给两个**相同的形状**添加**内阴影**，**方向对立**（比如说右下45°和左上45°），一个阴影的**色调**比背景色**暗**，**复制**其中一个，对另一个进行**图片纹理填充**（剪切板）即可\n{%list%}\n表现为凹凸不平的图形\n{%endlist%}\n{%right%}\n适当调节阴影的距离和模糊使其更加柔和\n{%endright%}\n{%warning%}\n背景不能是纯白纯黑，可以是灰色，淡蓝色等\n{%endwarning%}\n![新拟态](/image/ppt_43.png)\n**④毛玻璃**\n>对**背景图**做**全屏虚化**（100即可），再将**正常背景图覆盖**在上面，添加色块，将**色块颜色**改为**幻灯片背景填充**即可，这个**色块**就是**一块毛玻璃**\n{%right%}\n还可以添加白色描边、内阴影使其更加逼真\n{%endright%}\n![毛玻璃](/image/ppt_44.png)\n**⑤发光**\n>**内发光**：**射线渐变（圆形）/路径渐变（调整方向）**，**左光圈**为**背景色**（**透明度**调节为100%），**右光圈**为**发光色**\n{%list%}\n调整光圈位置调整发光效果\n{%endlist%}\n{%right%}\n设置好渐变参数后，先点击纯色填充，再点击渐变填充可以使得发光效果更强\n{%endright%}\n\n>**外发光**：**复制**对应图形，**柔化边缘**，将其与**原图形重叠**，**调整大小**即可\n{%list%}\n柔化边缘的磅数可以适当大一些\n{%endlist%}\n>**发光平台**：**渐变透明**的**梯形**，**从上往下**的渐变，一个光圈为**背景色**，一个光圈为**主色**\n{%list%}\n梯形、矩形和平行四边形（侧面）组合可以成为三维平台，其中正面的透明度应该比上平面的透明度低\n{%endlist%}\n{%right%}\n给边框添加光效素材，使其更漂亮\n{%endright%}\n\n![发光](/image/ppt_45.png)\n#### 2.3参考网站\n>[freepik](https://www.freepik.com/)、[花瓣网](https://huaban.com/)、[zcool](https://www.zcool.com)、[pinterest](www.pinterest.com\n)\n***\n### 3.修饰\n#### 3.1背景\n**①基调**\n>**基于环境**：当**环境比较明亮**时采用**浅色**，当**环境比较暗**时采用**深色**\n\n>**基于主色**：当**主色**为**浅色**时，采用**深色背景**，**反之**采用**浅色背景**\n\n>**基于风格**：比如**科技风**经常采用**深色渐变背景**\n\n**②类型**\n>**图片背景**：常作为**封面**背景\n\n>**色块背景**：常作为**正文**背景，可以是**纯色**，也可以是**渐变色**\n{%list%}\n渐变背景：使用两个光圈，一个为主色，一个为白色，选择合适的渐变方向，提高主色光圈亮度即可（80%-90%）\n{%endlist%}\n{%right%}\n可以修改幻灯片母版修改每一张幻灯片，视图选项卡→幻灯片母版\n{%endright%}\n\n\n#### 3.2字体\n**①种类**\n>字体种类最好**不超过两种**，一般**正文**采用**黑体**\n{%list%}\n一般来说中文和西文的字体是不一样的，在调整两种字体都有的段落时，先整体设置中文，再设置英文\n{%endlist%}\n**②风格**\n{%list%}\n一般只有标题能使用风格字体，字体风格要和ppt整体风格相符合\n{%endlist%}\n>**黑体**：力量、动感和科技\n\n>**宋体**：文化、庄严和雅致\n\n>**书法**：豪迈、奔放和大气\n\n**③粗细**\n>`light`、`regular`和`bold`为常见的三种**字体字重**\n{%list%}\n使用粗体，不要使用ppt自带的字体加粗，而是采用字体本身的bold类型\n{%endlist%}\n{%right%}\nppt主题字体设置：设计选项卡→变体分区→字体→自定义字体\n{%endright%}\n#### 3.3素材\n**①图标**\n>填补/代替**标题或小标题**，使其更加**生动饱满**\n{%warning%}\n图标主要有填充型和线条型，不要混用\n{%endwarning%}\n\n\n**②图案**\n>**不同风格**使用**不同的素材**修饰，使其更加**饱满**，比如**中国风**有**笔刷**、**祥云**、**卷轴**等\n{%right%}\n也可以将ppt中的某些形状、边框等替换为类似的素材\n{%endright%}\n**③素材网站**\n>**图标**：[flaticon](https://www.flaticon.com/)、[iconpark](https://iconpark.oceanengine.com/official)\n\n>**图案**：[freepik](https://www.freepik.com/)、[花瓣网](https://huaban.com/)、[zcool](https://www.zcool.com)、[pinterest](www.pinterest.com\n)\n\n\n\n\n\n\n","source":"_posts/PPT制作（基础篇）.md","raw":"---\ntitle: PPT制作（基础篇）\nseo_title: seo名称\ntoc: true\nindent: true\ntop: false\ncomments: true\narchive: true\ncover: false\nmathjax: false\npin: false\ntop_meta: false\nbottom_meta: false\nsidebar:\n  - toc\ntag:\n  - PPT\ncategories: 软技能\nkeywords: 文章关键词\nupdated: ''\nimg: /medias/featureimages/12.webp\ndate:\nsummary: PPT风格确定\n---\n# PPT制作（基础篇）\n## PPT风格矩阵\n### 1.配色\n#### 1.1主色\n**①根据logo选择**\n>学校、企业**logo**\n\n**②根据风格选择**\n>比如说**黑金风**就是**黑色**和**金色**，**科技风**经常是**蓝色**和**青色**，**党政风**是**红色**和**黄色**\n\n**③根据主题选择**：\n>比如说**医疗行业**对应的是**蓝色**\n{%list%}\n可以在网上搜索对应关键字，提取配色\n{%endlist%}\n#### 1.2辅助色\n**①邻近色**：\n>**基于主色**调整**色调**，用于区分不同**维度**\n{%list%}\n右击色块→填充→其他颜色填充→颜色模式改为“HSL”→调整色调数值\n{%endlist%}\n{%right%}\n跨度最好在45以内，20较佳\n{%endright%}\n{%warning%}\n色调数值的界限时0-255，所以-15相当于240，270相当于15\n{%endwarning%}\n**②梯度色**\n>调整**亮度**，用于区分不同**层级**\n{%list%}\n右击色块→填充→其他颜色填充→颜色模式改为“HSL”→调整亮度数值\n{%endlist%}\n{%right%}\n设计选项卡→变体选项卡→颜色→自定义颜色→着色1，输入主色的色值即可\n{%endright%}\n![辅助色矩阵](/image/ppt_40.png)\n**③相关网站**\n>[Adobe Color](https://color.adobe.com/zh/)、[Palette](https://arco.design/palette/list)、[撞色](https://colorsupplyyy.com/app)、[渐变色](https://webgradients.com/)\n***\n### 2.修饰边框\n#### 2.1形状\n**①轮廓**\n>**矩形**：工业、商务和力量\n\n>**圆角矩形**：卡通、儿童和女性\n\n>**去角矩形**：文化、国风和传统\n\n>**平行四边形**：运动、速度和竞赛\n\n>**折角**：科技、未来\n{%list%}\n插入基础图形→右击→编辑顶点→每个顶点对应两个控点，拖动控点即可做出有弧度的图形\n{%endlist%}\n{%right%}\n比较新颖的形状可以在素材网站上寻找，记得要下载矢量图（SVG）\n{%endright%}\n**②填充**\n>**色块填充**：**纯色**和**渐变色**\n\n>**纹理填充**：找到**纹理素材**→在ppt中将**纹理图片和形状重叠**→**先选形状，后选纹理**→**形状选项卡**→**合并形状**→**剪除**\n\n#### 2.2效果\n**①立体**\n>**设置渐变**：两个**颜色一致**的光圈→**第一个光圈**亮度调整至**70％**→**渐变类型**调整为**射线渐变**，**方向**调整为**从左上角**\n{%list%}\n适当调整两个光圈位置调整效果，如两个光圈位置分别在15%和85%\n{%endlist%}\n>**添加映像效果**：选择**第一个预设**，**透明度**85％，**大小**20％左右，适当添加**模糊**效果\n\n![立体](/image/ppt_41.png)\n**②光泽**\n>**设置渐变**：选择**线性渐变**，**方向**调整为45°→**左右两侧光圈**设置为**主色**→**中间**添加**一到两个光圈**，颜色设置为**背景色**，**透明度**设置为100\n{%list%}\n适当调整两个光圈位置调整效果\n{%endlist%}\n>将**轮廓**设置为**实线**,并**同上**添加**映像**\n{%list%}\n轮廓线的亮度最好比主色高一些\n{%endlist%}\n\n![光泽](/image/ppt_42.png)\n**③新拟态**\n>**凸起**：**形状颜色**和**背景色**相同，**去除轮廓**，给**两个相同的形状**添加**外阴影**，**方向对立**（比如说右下45°和左上45°），一个阴影的**色调**比背景色**暗**，一个阴影的**色调**比背景**亮**，然后**重叠这两个形状**\n\n>**凹陷**：**形状颜色**和**背景色**相同，**去除轮廓**，给两个**相同的形状**添加**内阴影**，**方向对立**（比如说右下45°和左上45°），一个阴影的**色调**比背景色**暗**，**复制**其中一个，对另一个进行**图片纹理填充**（剪切板）即可\n{%list%}\n表现为凹凸不平的图形\n{%endlist%}\n{%right%}\n适当调节阴影的距离和模糊使其更加柔和\n{%endright%}\n{%warning%}\n背景不能是纯白纯黑，可以是灰色，淡蓝色等\n{%endwarning%}\n![新拟态](/image/ppt_43.png)\n**④毛玻璃**\n>对**背景图**做**全屏虚化**（100即可），再将**正常背景图覆盖**在上面，添加色块，将**色块颜色**改为**幻灯片背景填充**即可，这个**色块**就是**一块毛玻璃**\n{%right%}\n还可以添加白色描边、内阴影使其更加逼真\n{%endright%}\n![毛玻璃](/image/ppt_44.png)\n**⑤发光**\n>**内发光**：**射线渐变（圆形）/路径渐变（调整方向）**，**左光圈**为**背景色**（**透明度**调节为100%），**右光圈**为**发光色**\n{%list%}\n调整光圈位置调整发光效果\n{%endlist%}\n{%right%}\n设置好渐变参数后，先点击纯色填充，再点击渐变填充可以使得发光效果更强\n{%endright%}\n\n>**外发光**：**复制**对应图形，**柔化边缘**，将其与**原图形重叠**，**调整大小**即可\n{%list%}\n柔化边缘的磅数可以适当大一些\n{%endlist%}\n>**发光平台**：**渐变透明**的**梯形**，**从上往下**的渐变，一个光圈为**背景色**，一个光圈为**主色**\n{%list%}\n梯形、矩形和平行四边形（侧面）组合可以成为三维平台，其中正面的透明度应该比上平面的透明度低\n{%endlist%}\n{%right%}\n给边框添加光效素材，使其更漂亮\n{%endright%}\n\n![发光](/image/ppt_45.png)\n#### 2.3参考网站\n>[freepik](https://www.freepik.com/)、[花瓣网](https://huaban.com/)、[zcool](https://www.zcool.com)、[pinterest](www.pinterest.com\n)\n***\n### 3.修饰\n#### 3.1背景\n**①基调**\n>**基于环境**：当**环境比较明亮**时采用**浅色**，当**环境比较暗**时采用**深色**\n\n>**基于主色**：当**主色**为**浅色**时，采用**深色背景**，**反之**采用**浅色背景**\n\n>**基于风格**：比如**科技风**经常采用**深色渐变背景**\n\n**②类型**\n>**图片背景**：常作为**封面**背景\n\n>**色块背景**：常作为**正文**背景，可以是**纯色**，也可以是**渐变色**\n{%list%}\n渐变背景：使用两个光圈，一个为主色，一个为白色，选择合适的渐变方向，提高主色光圈亮度即可（80%-90%）\n{%endlist%}\n{%right%}\n可以修改幻灯片母版修改每一张幻灯片，视图选项卡→幻灯片母版\n{%endright%}\n\n\n#### 3.2字体\n**①种类**\n>字体种类最好**不超过两种**，一般**正文**采用**黑体**\n{%list%}\n一般来说中文和西文的字体是不一样的，在调整两种字体都有的段落时，先整体设置中文，再设置英文\n{%endlist%}\n**②风格**\n{%list%}\n一般只有标题能使用风格字体，字体风格要和ppt整体风格相符合\n{%endlist%}\n>**黑体**：力量、动感和科技\n\n>**宋体**：文化、庄严和雅致\n\n>**书法**：豪迈、奔放和大气\n\n**③粗细**\n>`light`、`regular`和`bold`为常见的三种**字体字重**\n{%list%}\n使用粗体，不要使用ppt自带的字体加粗，而是采用字体本身的bold类型\n{%endlist%}\n{%right%}\nppt主题字体设置：设计选项卡→变体分区→字体→自定义字体\n{%endright%}\n#### 3.3素材\n**①图标**\n>填补/代替**标题或小标题**，使其更加**生动饱满**\n{%warning%}\n图标主要有填充型和线条型，不要混用\n{%endwarning%}\n\n\n**②图案**\n>**不同风格**使用**不同的素材**修饰，使其更加**饱满**，比如**中国风**有**笔刷**、**祥云**、**卷轴**等\n{%right%}\n也可以将ppt中的某些形状、边框等替换为类似的素材\n{%endright%}\n**③素材网站**\n>**图标**：[flaticon](https://www.flaticon.com/)、[iconpark](https://iconpark.oceanengine.com/official)\n\n>**图案**：[freepik](https://www.freepik.com/)、[花瓣网](https://huaban.com/)、[zcool](https://www.zcool.com)、[pinterest](www.pinterest.com\n)\n\n\n\n\n\n\n","slug":"PPT制作（基础篇）","published":1,"_id":"clmkphbf7000x9gvdc21achf0","layout":"post","photos":[],"link":"","content":"<h1 id=\"PPT制作（基础篇）\"><a href=\"#PPT制作（基础篇）\" class=\"headerlink\" title=\"PPT制作（基础篇）\"></a>PPT制作（基础篇）</h1><h2 id=\"PPT风格矩阵\"><a href=\"#PPT风格矩阵\" class=\"headerlink\" title=\"PPT风格矩阵\"></a>PPT风格矩阵</h2><h3 id=\"1-配色\"><a href=\"#1-配色\" class=\"headerlink\" title=\"1.配色\"></a>1.配色</h3><h4 id=\"1-1主色\"><a href=\"#1-1主色\" class=\"headerlink\" title=\"1.1主色\"></a>1.1主色</h4><p><strong>①根据logo选择</strong></p>\n<blockquote>\n<p>学校、企业<strong>logo</strong></p>\n</blockquote>\n<p><strong>②根据风格选择</strong></p>\n<blockquote>\n<p>比如说<strong>黑金风</strong>就是<strong>黑色</strong>和<strong>金色</strong>，<strong>科技风</strong>经常是<strong>蓝色</strong>和<strong>青色</strong>，<strong>党政风</strong>是<strong>红色</strong>和<strong>黄色</strong></p>\n</blockquote>\n<p><strong>③根据主题选择</strong>：</p>\n<blockquote>\n<p>比如说<strong>医疗行业</strong>对应的是<strong>蓝色</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 可以在网上搜索对应关键字，提取配色</div>\n<h4 id=\"1-2辅助色\"><a href=\"#1-2辅助色\" class=\"headerlink\" title=\"1.2辅助色\"></a>1.2辅助色</h4><p><strong>①邻近色</strong>：</p>\n<blockquote>\n<p><strong>基于主色</strong>调整<strong>色调</strong>，用于区分不同<strong>维度</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 右击色块→填充→其他颜色填充→颜色模式改为“HSL”→调整色调数值</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 跨度最好在45以内，20较佳</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 色调数值的界限时0-255，所以-15相当于240，270相当于15</div>\n<p><strong>②梯度色</strong></p>\n<blockquote>\n<p>调整<strong>亮度</strong>，用于区分不同<strong>层级</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 右击色块→填充→其他颜色填充→颜色模式改为“HSL”→调整亮度数值</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 设计选项卡→变体选项卡→颜色→自定义颜色→着色1，输入主色的色值即可</div>\n<p><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/ppt_40.png\" alt=\"辅助色矩阵\"><br><strong>③相关网站</strong></p>\n<blockquote>\n<p><a href=\"https://color.adobe.com/zh/\">Adobe Color</a>、<a href=\"https://arco.design/palette/list\">Palette</a>、<a href=\"https://colorsupplyyy.com/app\">撞色</a>、<a href=\"https://webgradients.com/\">渐变色</a></p>\n</blockquote>\n<hr>\n<h3 id=\"2-修饰边框\"><a href=\"#2-修饰边框\" class=\"headerlink\" title=\"2.修饰边框\"></a>2.修饰边框</h3><h4 id=\"2-1形状\"><a href=\"#2-1形状\" class=\"headerlink\" title=\"2.1形状\"></a>2.1形状</h4><p><strong>①轮廓</strong></p>\n<blockquote>\n<p><strong>矩形</strong>：工业、商务和力量</p>\n</blockquote>\n<blockquote>\n<p><strong>圆角矩形</strong>：卡通、儿童和女性</p>\n</blockquote>\n<blockquote>\n<p><strong>去角矩形</strong>：文化、国风和传统</p>\n</blockquote>\n<blockquote>\n<p><strong>平行四边形</strong>：运动、速度和竞赛</p>\n</blockquote>\n<blockquote>\n<p><strong>折角</strong>：科技、未来</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 插入基础图形→右击→编辑顶点→每个顶点对应两个控点，拖动控点即可做出有弧度的图形</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 比较新颖的形状可以在素材网站上寻找，记得要下载矢量图（SVG）</div>\n<p><strong>②填充</strong></p>\n<blockquote>\n<p><strong>色块填充</strong>：<strong>纯色</strong>和<strong>渐变色</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>纹理填充</strong>：找到<strong>纹理素材</strong>→在ppt中将<strong>纹理图片和形状重叠</strong>→<strong>先选形状，后选纹理</strong>→<strong>形状选项卡</strong>→<strong>合并形状</strong>→<strong>剪除</strong></p>\n</blockquote>\n<h4 id=\"2-2效果\"><a href=\"#2-2效果\" class=\"headerlink\" title=\"2.2效果\"></a>2.2效果</h4><p><strong>①立体</strong></p>\n<blockquote>\n<p><strong>设置渐变</strong>：两个<strong>颜色一致</strong>的光圈→<strong>第一个光圈</strong>亮度调整至<strong>70％</strong>→<strong>渐变类型</strong>调整为<strong>射线渐变</strong>，<strong>方向</strong>调整为<strong>从左上角</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 适当调整两个光圈位置调整效果，如两个光圈位置分别在15%和85%</div>\n<blockquote>\n<p><strong>添加映像效果</strong>：选择<strong>第一个预设</strong>，<strong>透明度</strong>85％，<strong>大小</strong>20％左右，适当添加<strong>模糊</strong>效果</p>\n</blockquote>\n<p><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/ppt_41.png\" alt=\"立体\"><br><strong>②光泽</strong></p>\n<blockquote>\n<p><strong>设置渐变</strong>：选择<strong>线性渐变</strong>，<strong>方向</strong>调整为45°→<strong>左右两侧光圈</strong>设置为<strong>主色</strong>→<strong>中间</strong>添加<strong>一到两个光圈</strong>，颜色设置为<strong>背景色</strong>，<strong>透明度</strong>设置为100</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 适当调整两个光圈位置调整效果</div>\n<blockquote>\n<p>将<strong>轮廓</strong>设置为<strong>实线</strong>,并<strong>同上</strong>添加<strong>映像</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 轮廓线的亮度最好比主色高一些</div>\n\n<p><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/ppt_42.png\" alt=\"光泽\"><br><strong>③新拟态</strong></p>\n<blockquote>\n<p><strong>凸起</strong>：<strong>形状颜色</strong>和<strong>背景色</strong>相同，<strong>去除轮廓</strong>，给<strong>两个相同的形状</strong>添加<strong>外阴影</strong>，<strong>方向对立</strong>（比如说右下45°和左上45°），一个阴影的<strong>色调</strong>比背景色<strong>暗</strong>，一个阴影的<strong>色调</strong>比背景<strong>亮</strong>，然后<strong>重叠这两个形状</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>凹陷</strong>：<strong>形状颜色</strong>和<strong>背景色</strong>相同，<strong>去除轮廓</strong>，给两个<strong>相同的形状</strong>添加<strong>内阴影</strong>，<strong>方向对立</strong>（比如说右下45°和左上45°），一个阴影的<strong>色调</strong>比背景色<strong>暗</strong>，<strong>复制</strong>其中一个，对另一个进行<strong>图片纹理填充</strong>（剪切板）即可</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 表现为凹凸不平的图形</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 适当调节阴影的距离和模糊使其更加柔和</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 背景不能是纯白纯黑，可以是灰色，淡蓝色等</div>\n<p><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/ppt_43.png\" alt=\"新拟态\"><br><strong>④毛玻璃</strong></p>\n<blockquote>\n<p>对<strong>背景图</strong>做<strong>全屏虚化</strong>（100即可），再将<strong>正常背景图覆盖</strong>在上面，添加色块，将<strong>色块颜色</strong>改为<strong>幻灯片背景填充</strong>即可，这个<strong>色块</strong>就是<strong>一块毛玻璃</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 还可以添加白色描边、内阴影使其更加逼真</div>\n<p><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/ppt_44.png\" alt=\"毛玻璃\"><br><strong>⑤发光</strong></p>\n<blockquote>\n<p><strong>内发光</strong>：<strong>射线渐变（圆形）/路径渐变（调整方向）</strong>，<strong>左光圈</strong>为<strong>背景色</strong>（<strong>透明度</strong>调节为100%），<strong>右光圈</strong>为<strong>发光色</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 调整光圈位置调整发光效果</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 设置好渐变参数后，先点击纯色填充，再点击渐变填充可以使得发光效果更强</div>\n\n<blockquote>\n<p><strong>外发光</strong>：<strong>复制</strong>对应图形，<strong>柔化边缘</strong>，将其与<strong>原图形重叠</strong>，<strong>调整大小</strong>即可</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 柔化边缘的磅数可以适当大一些</div>\n<blockquote>\n<p><strong>发光平台</strong>：<strong>渐变透明</strong>的<strong>梯形</strong>，<strong>从上往下</strong>的渐变，一个光圈为<strong>背景色</strong>，一个光圈为<strong>主色</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 梯形、矩形和平行四边形（侧面）组合可以成为三维平台，其中正面的透明度应该比上平面的透明度低</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 给边框添加光效素材，使其更漂亮</div>\n\n<p><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/ppt_45.png\" alt=\"发光\"></p>\n<h4 id=\"2-3参考网站\"><a href=\"#2-3参考网站\" class=\"headerlink\" title=\"2.3参考网站\"></a>2.3参考网站</h4><blockquote>\n<p><a href=\"https://www.freepik.com/\">freepik</a>、<a href=\"https://huaban.com/\">花瓣网</a>、<a href=\"https://www.zcool.com/\">zcool</a>、<a href=\"www.pinterest.com\">pinterest</a></p>\n</blockquote>\n<hr>\n<h3 id=\"3-修饰\"><a href=\"#3-修饰\" class=\"headerlink\" title=\"3.修饰\"></a>3.修饰</h3><h4 id=\"3-1背景\"><a href=\"#3-1背景\" class=\"headerlink\" title=\"3.1背景\"></a>3.1背景</h4><p><strong>①基调</strong></p>\n<blockquote>\n<p><strong>基于环境</strong>：当<strong>环境比较明亮</strong>时采用<strong>浅色</strong>，当<strong>环境比较暗</strong>时采用<strong>深色</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>基于主色</strong>：当<strong>主色</strong>为<strong>浅色</strong>时，采用<strong>深色背景</strong>，<strong>反之</strong>采用<strong>浅色背景</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>基于风格</strong>：比如<strong>科技风</strong>经常采用<strong>深色渐变背景</strong></p>\n</blockquote>\n<p><strong>②类型</strong></p>\n<blockquote>\n<p><strong>图片背景</strong>：常作为<strong>封面</strong>背景</p>\n</blockquote>\n<blockquote>\n<p><strong>色块背景</strong>：常作为<strong>正文</strong>背景，可以是<strong>纯色</strong>，也可以是<strong>渐变色</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 渐变背景：使用两个光圈，一个为主色，一个为白色，选择合适的渐变方向，提高主色光圈亮度即可（80%-90%）</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 可以修改幻灯片母版修改每一张幻灯片，视图选项卡→幻灯片母版</div>\n\n\n<h4 id=\"3-2字体\"><a href=\"#3-2字体\" class=\"headerlink\" title=\"3.2字体\"></a>3.2字体</h4><p><strong>①种类</strong></p>\n<blockquote>\n<p>字体种类最好<strong>不超过两种</strong>，一般<strong>正文</strong>采用<strong>黑体</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 一般来说中文和西文的字体是不一样的，在调整两种字体都有的段落时，先整体设置中文，再设置英文</div>\n<p><strong>②风格</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 一般只有标题能使用风格字体，字体风格要和ppt整体风格相符合</div>\n<blockquote>\n<p><strong>黑体</strong>：力量、动感和科技</p>\n</blockquote>\n<blockquote>\n<p><strong>宋体</strong>：文化、庄严和雅致</p>\n</blockquote>\n<blockquote>\n<p><strong>书法</strong>：豪迈、奔放和大气</p>\n</blockquote>\n<p><strong>③粗细</strong></p>\n<blockquote>\n<p><code>light</code>、<code>regular</code>和<code>bold</code>为常见的三种<strong>字体字重</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 使用粗体，不要使用ppt自带的字体加粗，而是采用字体本身的bold类型</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> ppt主题字体设置：设计选项卡→变体分区→字体→自定义字体</div>\n<h4 id=\"3-3素材\"><a href=\"#3-3素材\" class=\"headerlink\" title=\"3.3素材\"></a>3.3素材</h4><p><strong>①图标</strong></p>\n<blockquote>\n<p>填补/代替<strong>标题或小标题</strong>，使其更加<strong>生动饱满</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 图标主要有填充型和线条型，不要混用</div>\n\n\n<p><strong>②图案</strong></p>\n<blockquote>\n<p><strong>不同风格</strong>使用<strong>不同的素材</strong>修饰，使其更加<strong>饱满</strong>，比如<strong>中国风</strong>有<strong>笔刷</strong>、<strong>祥云</strong>、<strong>卷轴</strong>等</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 也可以将ppt中的某些形状、边框等替换为类似的素材</div>\n<p><strong>③素材网站</strong></p>\n<blockquote>\n<p><strong>图标</strong>：<a href=\"https://www.flaticon.com/\">flaticon</a>、<a href=\"https://iconpark.oceanengine.com/official\">iconpark</a></p>\n</blockquote>\n<blockquote>\n<p><strong>图案</strong>：<a href=\"https://www.freepik.com/\">freepik</a>、<a href=\"https://huaban.com/\">花瓣网</a>、<a href=\"https://www.zcool.com/\">zcool</a>、<a href=\"www.pinterest.com\">pinterest</a></p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"PPT制作（基础篇）\"><a href=\"#PPT制作（基础篇）\" class=\"headerlink\" title=\"PPT制作（基础篇）\"></a>PPT制作（基础篇）</h1><h2 id=\"PPT风格矩阵\"><a href=\"#PPT风格矩阵\" class=\"headerlink\" title=\"PPT风格矩阵\"></a>PPT风格矩阵</h2><h3 id=\"1-配色\"><a href=\"#1-配色\" class=\"headerlink\" title=\"1.配色\"></a>1.配色</h3><h4 id=\"1-1主色\"><a href=\"#1-1主色\" class=\"headerlink\" title=\"1.1主色\"></a>1.1主色</h4><p><strong>①根据logo选择</strong></p>\n<blockquote>\n<p>学校、企业<strong>logo</strong></p>\n</blockquote>\n<p><strong>②根据风格选择</strong></p>\n<blockquote>\n<p>比如说<strong>黑金风</strong>就是<strong>黑色</strong>和<strong>金色</strong>，<strong>科技风</strong>经常是<strong>蓝色</strong>和<strong>青色</strong>，<strong>党政风</strong>是<strong>红色</strong>和<strong>黄色</strong></p>\n</blockquote>\n<p><strong>③根据主题选择</strong>：</p>\n<blockquote>\n<p>比如说<strong>医疗行业</strong>对应的是<strong>蓝色</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 可以在网上搜索对应关键字，提取配色</div>\n<h4 id=\"1-2辅助色\"><a href=\"#1-2辅助色\" class=\"headerlink\" title=\"1.2辅助色\"></a>1.2辅助色</h4><p><strong>①邻近色</strong>：</p>\n<blockquote>\n<p><strong>基于主色</strong>调整<strong>色调</strong>，用于区分不同<strong>维度</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 右击色块→填充→其他颜色填充→颜色模式改为“HSL”→调整色调数值</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 跨度最好在45以内，20较佳</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 色调数值的界限时0-255，所以-15相当于240，270相当于15</div>\n<p><strong>②梯度色</strong></p>\n<blockquote>\n<p>调整<strong>亮度</strong>，用于区分不同<strong>层级</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 右击色块→填充→其他颜色填充→颜色模式改为“HSL”→调整亮度数值</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 设计选项卡→变体选项卡→颜色→自定义颜色→着色1，输入主色的色值即可</div>\n<p><img src=\"/image/ppt_40.png\" alt=\"辅助色矩阵\"><br><strong>③相关网站</strong></p>\n<blockquote>\n<p><a href=\"https://color.adobe.com/zh/\">Adobe Color</a>、<a href=\"https://arco.design/palette/list\">Palette</a>、<a href=\"https://colorsupplyyy.com/app\">撞色</a>、<a href=\"https://webgradients.com/\">渐变色</a></p>\n</blockquote>\n<hr>\n<h3 id=\"2-修饰边框\"><a href=\"#2-修饰边框\" class=\"headerlink\" title=\"2.修饰边框\"></a>2.修饰边框</h3><h4 id=\"2-1形状\"><a href=\"#2-1形状\" class=\"headerlink\" title=\"2.1形状\"></a>2.1形状</h4><p><strong>①轮廓</strong></p>\n<blockquote>\n<p><strong>矩形</strong>：工业、商务和力量</p>\n</blockquote>\n<blockquote>\n<p><strong>圆角矩形</strong>：卡通、儿童和女性</p>\n</blockquote>\n<blockquote>\n<p><strong>去角矩形</strong>：文化、国风和传统</p>\n</blockquote>\n<blockquote>\n<p><strong>平行四边形</strong>：运动、速度和竞赛</p>\n</blockquote>\n<blockquote>\n<p><strong>折角</strong>：科技、未来</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 插入基础图形→右击→编辑顶点→每个顶点对应两个控点，拖动控点即可做出有弧度的图形</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 比较新颖的形状可以在素材网站上寻找，记得要下载矢量图（SVG）</div>\n<p><strong>②填充</strong></p>\n<blockquote>\n<p><strong>色块填充</strong>：<strong>纯色</strong>和<strong>渐变色</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>纹理填充</strong>：找到<strong>纹理素材</strong>→在ppt中将<strong>纹理图片和形状重叠</strong>→<strong>先选形状，后选纹理</strong>→<strong>形状选项卡</strong>→<strong>合并形状</strong>→<strong>剪除</strong></p>\n</blockquote>\n<h4 id=\"2-2效果\"><a href=\"#2-2效果\" class=\"headerlink\" title=\"2.2效果\"></a>2.2效果</h4><p><strong>①立体</strong></p>\n<blockquote>\n<p><strong>设置渐变</strong>：两个<strong>颜色一致</strong>的光圈→<strong>第一个光圈</strong>亮度调整至<strong>70％</strong>→<strong>渐变类型</strong>调整为<strong>射线渐变</strong>，<strong>方向</strong>调整为<strong>从左上角</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 适当调整两个光圈位置调整效果，如两个光圈位置分别在15%和85%</div>\n<blockquote>\n<p><strong>添加映像效果</strong>：选择<strong>第一个预设</strong>，<strong>透明度</strong>85％，<strong>大小</strong>20％左右，适当添加<strong>模糊</strong>效果</p>\n</blockquote>\n<p><img src=\"/image/ppt_41.png\" alt=\"立体\"><br><strong>②光泽</strong></p>\n<blockquote>\n<p><strong>设置渐变</strong>：选择<strong>线性渐变</strong>，<strong>方向</strong>调整为45°→<strong>左右两侧光圈</strong>设置为<strong>主色</strong>→<strong>中间</strong>添加<strong>一到两个光圈</strong>，颜色设置为<strong>背景色</strong>，<strong>透明度</strong>设置为100</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 适当调整两个光圈位置调整效果</div>\n<blockquote>\n<p>将<strong>轮廓</strong>设置为<strong>实线</strong>,并<strong>同上</strong>添加<strong>映像</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 轮廓线的亮度最好比主色高一些</div>\n\n<p><img src=\"/image/ppt_42.png\" alt=\"光泽\"><br><strong>③新拟态</strong></p>\n<blockquote>\n<p><strong>凸起</strong>：<strong>形状颜色</strong>和<strong>背景色</strong>相同，<strong>去除轮廓</strong>，给<strong>两个相同的形状</strong>添加<strong>外阴影</strong>，<strong>方向对立</strong>（比如说右下45°和左上45°），一个阴影的<strong>色调</strong>比背景色<strong>暗</strong>，一个阴影的<strong>色调</strong>比背景<strong>亮</strong>，然后<strong>重叠这两个形状</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>凹陷</strong>：<strong>形状颜色</strong>和<strong>背景色</strong>相同，<strong>去除轮廓</strong>，给两个<strong>相同的形状</strong>添加<strong>内阴影</strong>，<strong>方向对立</strong>（比如说右下45°和左上45°），一个阴影的<strong>色调</strong>比背景色<strong>暗</strong>，<strong>复制</strong>其中一个，对另一个进行<strong>图片纹理填充</strong>（剪切板）即可</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 表现为凹凸不平的图形</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 适当调节阴影的距离和模糊使其更加柔和</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 背景不能是纯白纯黑，可以是灰色，淡蓝色等</div>\n<p><img src=\"/image/ppt_43.png\" alt=\"新拟态\"><br><strong>④毛玻璃</strong></p>\n<blockquote>\n<p>对<strong>背景图</strong>做<strong>全屏虚化</strong>（100即可），再将<strong>正常背景图覆盖</strong>在上面，添加色块，将<strong>色块颜色</strong>改为<strong>幻灯片背景填充</strong>即可，这个<strong>色块</strong>就是<strong>一块毛玻璃</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 还可以添加白色描边、内阴影使其更加逼真</div>\n<p><img src=\"/image/ppt_44.png\" alt=\"毛玻璃\"><br><strong>⑤发光</strong></p>\n<blockquote>\n<p><strong>内发光</strong>：<strong>射线渐变（圆形）&#x2F;路径渐变（调整方向）</strong>，<strong>左光圈</strong>为<strong>背景色</strong>（<strong>透明度</strong>调节为100%），<strong>右光圈</strong>为<strong>发光色</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 调整光圈位置调整发光效果</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 设置好渐变参数后，先点击纯色填充，再点击渐变填充可以使得发光效果更强</div>\n\n<blockquote>\n<p><strong>外发光</strong>：<strong>复制</strong>对应图形，<strong>柔化边缘</strong>，将其与<strong>原图形重叠</strong>，<strong>调整大小</strong>即可</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 柔化边缘的磅数可以适当大一些</div>\n<blockquote>\n<p><strong>发光平台</strong>：<strong>渐变透明</strong>的<strong>梯形</strong>，<strong>从上往下</strong>的渐变，一个光圈为<strong>背景色</strong>，一个光圈为<strong>主色</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 梯形、矩形和平行四边形（侧面）组合可以成为三维平台，其中正面的透明度应该比上平面的透明度低</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 给边框添加光效素材，使其更漂亮</div>\n\n<p><img src=\"/image/ppt_45.png\" alt=\"发光\"></p>\n<h4 id=\"2-3参考网站\"><a href=\"#2-3参考网站\" class=\"headerlink\" title=\"2.3参考网站\"></a>2.3参考网站</h4><blockquote>\n<p><a href=\"https://www.freepik.com/\">freepik</a>、<a href=\"https://huaban.com/\">花瓣网</a>、<a href=\"https://www.zcool.com/\">zcool</a>、<a href=\"www.pinterest.com\">pinterest</a></p>\n</blockquote>\n<hr>\n<h3 id=\"3-修饰\"><a href=\"#3-修饰\" class=\"headerlink\" title=\"3.修饰\"></a>3.修饰</h3><h4 id=\"3-1背景\"><a href=\"#3-1背景\" class=\"headerlink\" title=\"3.1背景\"></a>3.1背景</h4><p><strong>①基调</strong></p>\n<blockquote>\n<p><strong>基于环境</strong>：当<strong>环境比较明亮</strong>时采用<strong>浅色</strong>，当<strong>环境比较暗</strong>时采用<strong>深色</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>基于主色</strong>：当<strong>主色</strong>为<strong>浅色</strong>时，采用<strong>深色背景</strong>，<strong>反之</strong>采用<strong>浅色背景</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>基于风格</strong>：比如<strong>科技风</strong>经常采用<strong>深色渐变背景</strong></p>\n</blockquote>\n<p><strong>②类型</strong></p>\n<blockquote>\n<p><strong>图片背景</strong>：常作为<strong>封面</strong>背景</p>\n</blockquote>\n<blockquote>\n<p><strong>色块背景</strong>：常作为<strong>正文</strong>背景，可以是<strong>纯色</strong>，也可以是<strong>渐变色</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 渐变背景：使用两个光圈，一个为主色，一个为白色，选择合适的渐变方向，提高主色光圈亮度即可（80%-90%）</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 可以修改幻灯片母版修改每一张幻灯片，视图选项卡→幻灯片母版</div>\n\n\n<h4 id=\"3-2字体\"><a href=\"#3-2字体\" class=\"headerlink\" title=\"3.2字体\"></a>3.2字体</h4><p><strong>①种类</strong></p>\n<blockquote>\n<p>字体种类最好<strong>不超过两种</strong>，一般<strong>正文</strong>采用<strong>黑体</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 一般来说中文和西文的字体是不一样的，在调整两种字体都有的段落时，先整体设置中文，再设置英文</div>\n<p><strong>②风格</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 一般只有标题能使用风格字体，字体风格要和ppt整体风格相符合</div>\n<blockquote>\n<p><strong>黑体</strong>：力量、动感和科技</p>\n</blockquote>\n<blockquote>\n<p><strong>宋体</strong>：文化、庄严和雅致</p>\n</blockquote>\n<blockquote>\n<p><strong>书法</strong>：豪迈、奔放和大气</p>\n</blockquote>\n<p><strong>③粗细</strong></p>\n<blockquote>\n<p><code>light</code>、<code>regular</code>和<code>bold</code>为常见的三种<strong>字体字重</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 使用粗体，不要使用ppt自带的字体加粗，而是采用字体本身的bold类型</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> ppt主题字体设置：设计选项卡→变体分区→字体→自定义字体</div>\n<h4 id=\"3-3素材\"><a href=\"#3-3素材\" class=\"headerlink\" title=\"3.3素材\"></a>3.3素材</h4><p><strong>①图标</strong></p>\n<blockquote>\n<p>填补&#x2F;代替<strong>标题或小标题</strong>，使其更加<strong>生动饱满</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 图标主要有填充型和线条型，不要混用</div>\n\n\n<p><strong>②图案</strong></p>\n<blockquote>\n<p><strong>不同风格</strong>使用<strong>不同的素材</strong>修饰，使其更加<strong>饱满</strong>，比如<strong>中国风</strong>有<strong>笔刷</strong>、<strong>祥云</strong>、<strong>卷轴</strong>等</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 也可以将ppt中的某些形状、边框等替换为类似的素材</div>\n<p><strong>③素材网站</strong></p>\n<blockquote>\n<p><strong>图标</strong>：<a href=\"https://www.flaticon.com/\">flaticon</a>、<a href=\"https://iconpark.oceanengine.com/official\">iconpark</a></p>\n</blockquote>\n<blockquote>\n<p><strong>图案</strong>：<a href=\"https://www.freepik.com/\">freepik</a>、<a href=\"https://huaban.com/\">花瓣网</a>、<a href=\"https://www.zcool.com/\">zcool</a>、<a href=\"www.pinterest.com\">pinterest</a></p>\n</blockquote>\n"},{"title":"python学习笔记（一）","seo_title":"seo名称","toc":true,"indent":true,"top":false,"comments":1,"archive":true,"cover":false,"mathjax":false,"pin":false,"top_meta":false,"bottom_meta":false,"sidebar":["toc"],"keywords":"文章关键词","updated":"2023-11-07T14:10:58.014Z","date":"2023-11-07T14:10:58.014Z","img":"/medias/featureimages/4.webp","summary":"python启蒙","_content":"# python学习笔记（一）\n## python启蒙\n### 1.基本元素\n**1.1表达式**：python中最基本的执行结构，由“**对象**”和**操作符**组成，并返回**一个对象**\n**1.2对象**：即被存储的数据，类似于C语言中的字面值，如`1`、`\"cat\"`、`1.23456e2`等\n①当一个对象被声明后，会给其分配对应的ID（地址）和内存，且数据类型不能更改\n②基本数据类型：整型（int）、浮点型（float）、字符串（strs）、布尔类型（bool）、复数类型（a+bj）\n>可以使用`type()`检查数据类型\n\n③可变类型与不可变类型\n>不可变类型是指对象一旦创建，内容就**不能被更改**，常见的不可变类型包括整数、浮点数、布尔值、字符串和元组等，其对应的变量只能被**覆盖**\n\n>可变类型是指变量的值可以被更改，常见的可变类型包括列表、集合和字典等\n\n**1.3变量**\n①取名规则\n> 只能是一个词\n只能包含**字母、数字和下划线**\n不能以数字开头\n不能使用**关键词**\n\n{%right%}\n一个好的变量名包含了数据对应的信息，常见的命名格式有my_cat和MyCat\n{%endright%}\n\n②变量的本质\n> 变量是对象的一个**引用**，本身也占用一定的内存（存储对象的地址）\n**没有变量**指向的**对象**会被**回收**（垃圾回收机制）\n变量名代表的内存地址是**变化的**，是**上次赋值时**新数据所在的内存的地址，而C语言**变量名所代表的地址是不变的**，**变化的是该地址内存单元的数据**\n\n{%warning%}\n所以说如果两个变量指向是同一个可变类型对象，改变其中一个，另一个也随之改变\n{%endwarning%}\n![变量的本质](/image/python_7.png)\n\n**1.4操作符**\n①数字操作符\n![数字操作符](/image/python_1.png)\n> `+`可以用于**拼接字符串**，比如`'a'+'b'`结果是`'ab'`\n`*`可以用于**字符串复制**，比如`'a'*5`结果时`'aaaaa'`\n\n②比较操作符\n![比较操作符](/image/python_3.png)\n{%warning%}\n注意\n整型和浮点型之间是可以使用==正常比较的，但是整型、浮点型和字符串使用==只能得到False\n>、<、≥、≤只能用于整型和浮点型\n{%endwarning%}\n\n\n③增强的赋值操作符\n![赋值操作符](/image/python_4.png)\n④布尔操作符：`and`、`or`、`not`\n>`not`优先级最高，随后是`and`，最后是`or`\n\n**1.5注释**\n①单行注释：以`#`开头\n②多行注释：用三个单引号/双引号包围\n**1.6类型转换**\n①自动类型转换\n> 将一种类型的数据**赋值**给另外一种类型的变量时，**表达式右边**的类型**转换为左边**变量的类型\n在不同类型的**混合运算**中，将参与运算的所有数据先转换为**同一种类型**，然后再进行计算\n\n![混合运算下的类型转换](/image/python_2.png)\n②强制类型转换\n> `str()`：转化为字符串类型\n`int()`：转化为整数类型\n`float()`：转化为浮点数类型\n\n### 2.控制流\n**2.1基本格式**\n①语句关键词后面的**冒号**，以及python使用**换行符**而不是分号作为语句终止符\n②python的代码块不用花括号划分范围，而是**根据代码的缩进**\n> 缩进**增加**时，代码块**开始**\n代码块可以包含其他代码块,缩进减少为零，或减**少为外面包围代码块的缩进，代码块就结束了**\n\n{%right%}\n通常以四个空格为一个缩进，不要使用制表键\n{%endright%}\n\n**2.2条件语句**\n```\nif(条件): #条件为结果为布尔值的表达式\n  statement\nelif(条件):\n  statement\nelse:\n  statement\n```\n{%right%}\n一旦一个语句的条件为Ture，后面的语句会被忽略，所以要注意语句的顺序，或者说清晰化条件的范围，使其之间没有交集\n{%endright%}\n\n**2.3循环语句**\n①`while`循环语句\n```\nwhile(条件):\n  statement\n```\n②`for`循环语句\n```\nfor 控制变量 in range(): \n  statement\n```\n>缺省情况下，控制变量被初始化为0\n在Python中，下划线`_`通常用作一个无用的变量名称，常用做控制变量的名称\n\n**2.4range函数**\n①`range(a)`：0至**a-1**，取不到a\n②`range(a,b)`：a至**b-1**，步长为1\n③`range(a,b,i)`：a至**b-1**,步长为i\n>range()的返回值是类似于**列表**的值（但是不是列表），所以也可以将循环中的`range()`换为一个列表，在每次迭代中，让变量**依次**设置为**列表中的值**\n\n{%right%}\n一个常见的Python技巧，是在for循环中使用range(len(someList))，迭代列表的每一个下标\n{%endright%}\n\n\n**2.5循环控制语句**\n①break：遇到`break`语句，马上退出循环\n②continue：遇到`continue`语句，马上跳回到循环开始处，重新对循环条件求值\n{%right%}\n可以结合条件语句对循环进行控制\n{%endright%}\n\n### 3.函数\n**3.1格式**\n```\ndef 函数名(变元n):\n  statement\n  return expression #可以是变量，也可以是表达式\n\n```\n①变元即形参\n②`None`是**NoneType数据类型**的唯一值，代表没有值，相当于C中的`void`\n③关键字参数：某些函数有可选的关键字参数，在函数调用时可以指定，相当于修改函数的**默认设置**\n{%right%}\n如果需要传递多个同一位置的关键字参数，可以采用 | 管道命令将这些参数连接\n{%endright%}\n④函数的参数可以有**默认值**，也支持使用**可变参数**（类型、个数均可变），所以Python并**不需要**像其他语言一样支持**函数的重载**\n{%right%}\n未知个数参数可以使用args关键字实现\n{%endright%}\n\n```\n# 在参数名前面的*表示args是一个可变参数\ndef add(*args):\n    total = 0\n    for val in args:\n        total += val\n    return total\n\n\n# 在调用add函数时可以传入0个或多个参数\nprint(add())\nprint(add(1))\nprint(add(1, 2))\nprint(add(1, 2, 3))\nprint(add(1, 3, 5, 7, 9))\n```\n**3.2作用域**\n①局部作用域：在被调用**函数内赋值**（注意，如果在函数内没有对其进进行赋值，则为全局变量）的变量，局部作用域在**函数被调用**时创建，在**函数返回时**销毁\n②全局作用域：在所有**函数之外**赋值的变量，属于**全局作用域**，全局作用域在**程序开始时**创建，在**程序终止时**销毁\n③嵌套作用域：当一个函数1内部有另一个函数2时，对于函数1内部的函数2来说，函数1中的变量属于函数2的嵌套作用域\n④内置作用域：Python内置的那些**标识符**\n>**联系**\n内置作用域→全局作用域→嵌套作用域→局部作用域，从左往右依次内推，内部的作用域可以访问外部作用域中的变量，但是外部作用域不能访问内部作用域的变量，局部作用域不能访问**其他局部作用域**的变量\n如果在不同的作用域中，你可以用相同的名字命名不同的变量\n可以使用`global`关键字修饰变量使其变为**全局变量**\n可以使用`nonlocal`关键字修饰变量使其变为**嵌套作用域变量**\n\n{%warning%}\n尽量减少对全局变量的使用，因为全局变量的作用域和影响过于广泛，可能会发生意料之外的修改和使用，除此之外全局变量比局部变量拥有更长的生命周期，可能导致对象占用的内存长时间无法被垃圾回收\n{%endwarning%}\n**3.3异常处理**：捕捉**函数内部某些语句**的错误\n①`try`语句：将可**能出错的语句**放在`try`之后，当这些语句出错后，会立马跳到`except`语句\n```\ntry:\n  statement\n```\n②`except`语句：后面常接一些错误提醒的`print`语句\n```\nexcept 错误名:\n  print()\n```\n③`finally`语句：`finally`块的代码不论程序正常还是异常**都**会执行到\n>该语句不是必须的，通常用于执行一些必要的**清理操作**，如关闭文件、释放资源、关闭数据库连接等\n\n**3.4模块**\n①导入模块：`import 模块名,模块名n`\n②调用模块中函数/方法：模块名.函数名/方法名\n>模块类似于C++中的命名空间，可以**防止命名冲突**，同时也封装了代码\n\n③模块的测试：写完自定义的模块之后，都会写一个测试代码，**直接运行**该模块，检验一些模块中各个功能是否能够成功运行\n```\ndef c2f(cel):\n    fah = cel * 1.8 + 32\n    return fah\ndef f2c(fah):\n    cel = (fah - 32) / 1.8\n    return cel\ndef test():\n    print(\"测试数据：0 摄氏度 = %.2f 华氏度\" % c2f(0))\n    print(\"测试数据：0 华氏度 = %.2f 摄氏度\" % f2c(0))\nif __name__ == '__main__':\ntest()\n```\n>其中`if __name__ == '__main__':`的作用是检测当前模块是否被直接运行（作为主程序），还是被导入到其他模块中作为一个模块使用\n`__name__`为python中的一个**内置变量**，当程序直接被执行时，其`__name__`的值为`'__main__'`，而当导入到其他模块中时，其`__name__ `值为自己的模块名。\n\n**3.5常用函数（待合并）**\n①print()：将括号内的**字符串**显示在屏幕上\n#所以要输出其他类型变量时，需要使用`str()`将其**转换为字符串类型**\n#占位符语法：\n- `print('%d + %d = %d' % (a, b, a + b))`,其中`%d`是整数的占位符，`%f`是小数的占位符，`%%`表示百分号（因为百分号代表了占位符，所以带占位符的字符串中要表示百分号必须写成`%%`），字符串之后的`%`后面跟的变量值会替换掉占位符然后输出到终端中。\n- `print('{0} * {1} = {2}'.format(a, b, a * b))`，其中`{0}`等都是占位符，`0`为format方法的**索引**，**可省略，即按照默认顺序插入**，还可以使用更多的格式选项，用于指定值的**格式**，还可以利用语法糖简化写法，即`print(f'{a} * {b} = {a * b}')`\n\n②input()：等待用户输入文本，并按下**回车键**，将其转化为一个**字符串**\n\n### 4.面向对象编程\n**4.1类的定义**\n```\nclass Student(object):\n\n    # __init__是一个特殊方法用于在创建对象时进行初始化操作\n    # 通过这个方法我们可以为学生对象绑定name和age两个属性\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def study(self, course_name):\n        print('%s正在学习%s.' % (self.name, course_name))\n\n    # PEP 8要求标识符的名字用全小写多个单词用下划线连接\n    # 但是部分程序员和公司更倾向于使用驼峰命名法(驼峰标识)\n    def watch_movie(self):\n        if self.age < 18:\n            print('%s只能观看《熊出没》.' % self.name)\n        else:\n            print('%s正在观看岛国爱情大电影.' % self.name)\n```\n①在Python中可以使用`class`关键字定义类，其中`object`是所有类的基类，即**顶级父类**，这意味着在Python中定义的任何类都可以调用`object`类的方法（如`__init__`方法），并继承`object`类的特性\n②类中的函数被称为**方法**，以描述对象的动态特征，其中方法的**第一个参数**通常被命名为`self`，Python会自动将对象绑定到第一个参数上\n③`__init__`方法定义了类的**属性**，这些属性是描述类的关键\n\n**4.2对象的创建与使用**\n```\ndef main():\n    # 创建学生对象并指定姓名和年龄\n    stu1 = Student('骆昊', 38)\n    # 给对象发study消息\n    stu1.study('Python程序设计')\n    # 给对象发watch_av消息\n    stu1.watch_movie()\n    stu2 = Student('王大锤', 15)\n    stu2.study('思想品德')\n    stu2.watch_movie()\n\n\nif __name__ == '__main__':\n    main()\n```\n①可以通过`对象.方法名/属性名`访问类的方法和属性\n>对象的创建不使用`__init__`方法，而是使用**类名**创建，使用类名创建对象实际上是通过**调用构造函数**来创建对象\n\n②属性和方法的访问权限只有两种，也就是公开的和私有的，如果希望属性是私有的，在给属性命名时可以用**两个下划线**作为开头\n{%warning%}\n但是，Python并没有从语法上严格保证私有属性或方法的私密性，它只是给私有的属性和方法换了一个名字来妨碍对它们的访问，事实上如果你知道更换名字的规则仍然可以访问到它们\n{%endwarning%}\n{%right%}\npython程序员遵循一种命名惯例就是让属性名以单下划线开头来表示属性是受保护的，本类之外的代码在访问这样的属性时应该要保持慎重\n{%endright%}\n\n**4.3property装饰器**\n```\nclass Person(object):\n\n    def __init__(self, name, age):\n        self._name = name\n        self._age = age\n\n    # 访问器 - getter方法\n    @property\n    def name(self):\n        return self._name\n\n    # 访问器 - getter方法\n    @property\n    def age(self):\n        return self._age\n\n    # 修改器 - setter方法\n    @age.setter\n    def age(self, age):\n        self._age = age\n\n    def play(self):\n        if self._age <= 16:\n            print('%s正在玩飞行棋.' % self._name)\n        else:\n            print('%s正在玩斗地主.' % self._name)\n\n\ndef main():\n    person = Person('王大锤', 12)\n    person.play()\n    person.age = 22\n    person.play()\n    # person.name = '白元芳'  # AttributeError: can't set attribute\n\n\nif __name__ == '__main__':\n    main()\n```\n①`@property`:将一个**方法**转换为相应的**属性**，将**方法的调用方式**变为**属性的访问方式**\n>具体而言，`@property`装饰器定义了一个`getter`方法，用于获取属性的值,如果没有`@property`的话，`person.age`应为`person.age()`\n\n②在定义了**访问器**后,可以使用`age.setter`等装饰器定义对应的`setter`方法，记住要有**对应的前缀**，且方法名需要一致（即`age`）\n**4.4静态方法和类方法：**当类中需要一些方法，但是不是基于具体对象实例的，如在**创建对象前**验证其是否合理的方法\n①静态方法：使用`@staticmethod`修饰器定义，直接通过`类名.方法名()`调用\n>静态方法属于**类本身**，所以在定义时不需要`self`参数\n```\nfrom math import sqrt\n\n\nclass Triangle(object):\n\n    def __init__(self, a, b, c):\n        self._a = a\n        self._b = b\n        self._c = c\n\n    @staticmethod\n    def is_valid(a, b, c):\n        return a + b > c and b + c > a and a + c > b\n\n\ndef main():\n    a, b, c = 3, 4, 5\n    # 静态方法和类方法都是通过给类发消息来调用的\n    if Triangle.is_valid(a, b, c):\n        t = Triangle(a, b, c)\n    else:\n        print('无法构成三角形.')\n\n\nif __name__ == '__main__':\n    main()\n```\n②类方法：使用`@classmethod`修饰器定义类方法，直接通过`类名.方法名()`调用\n>方法的第一个参数约定名为`cls`，类似于`self`，但是`cls`代表是对应的类，允许在类方法内部访问**类级别**的属性和方法\n```\nfrom time import time, localtime, sleep\n\n\nclass Clock(object):\n    \"\"\"数字时钟\"\"\"\n\n    def __init__(self, hour=0, minute=0, second=0):\n        self._hour = hour\n        self._minute = minute\n        self._second = second\n\n    @classmethod\n    def now(cls):\n        ctime = localtime(time())\n        return cls(ctime.tm_hour, ctime.tm_min, ctime.tm_sec)\n\n\ndef main():\n    # 通过类方法创建对象并获取系统时间\n    clock = Clock.now()\n\n\nif __name__ == '__main__':\n    main()\n```\n**4.5继承和继承**：\n```\nclass Person(object):\n    \"\"\"人\"\"\"\n\n    def __init__(self, name, age):\n        self._name = name\n        self._age = age\n\n    @property\n    def name(self):\n        return self._name\n\n    @property\n    def age(self):\n        return self._age\n\n    @age.setter\n    def age(self, age):\n        self._age = age\n\n    def play(self):\n        print('%s正在愉快的玩耍.' % self._name)\n\n    def watch_av(self):\n        if self._age >= 18:\n            print('%s正在观看爱情动作片.' % self._name)\n        else:\n            print('%s只能观看《熊出没》.' % self._name)\n\n\nclass Student(Person):\n    \"\"\"学生\"\"\"\n\n    def __init__(self, name, age, grade):\n        super().__init__(name, age)\n        self._grade = grade\n\n    @property\n    def grade(self):\n        return self._grade\n\n    @grade.setter\n    def grade(self, grade):\n        self._grade = grade\n\n    def study(self, course):\n        print('%s的%s正在学习%s.' % (self._grade, self._name, course))\n\n\nclass Teacher(Person):\n    \"\"\"老师\"\"\"\n\n    def __init__(self, name, age, title):\n        super().__init__(name, age)\n        self._title = title\n\n    @property\n    def title(self):\n        return self._title\n\n    @title.setter\n    def title(self, title):\n        self._title = title\n\n    def teach(self, course):\n        print('%s%s正在讲%s.' % (self._name, self._title, course))\n\n\ndef main():\n    stu = Student('王大锤', 15, '初三')\n    stu.study('数学')\n    stu.watch_av()\n    t = Teacher('骆昊', 38, '砖家')\n    t.teach('Python程序设计')\n    t.watch_av()\n\n\nif __name__ == '__main__':\n    main()\n```\n①继承：子类除了继承父类提供的属性和方法，还可以定义自己**特有**的属性和方法，所以子类比父类拥有的更多的能力\n②多态：子类在继承了父类的方法后，可以对父类已有的方法给出新的实现版本，不同的子类表现不同\n>抽象类是一种专门让其他类继承的类，**不能创建对应的对象**，子类可以重写其中的**抽象方法**从而实现多态\n\n{%right%}\n通过abc模块的ABCMeta元类和abstractmethod包装器来达到抽象类的效果\n{%endright%}\n\n```\nfrom abc import ABCMeta, abstractmethod\n\n\nclass Pet(object, metaclass=ABCMeta):\n    \"\"\"宠物\"\"\"\n\n    def __init__(self, nickname):\n        self._nickname = nickname\n\n    @abstractmethod\n    def make_voice(self):\n        \"\"\"发出声音\"\"\"\n        pass\n\n\nclass Dog(Pet):\n    \"\"\"狗\"\"\"\n\n    def make_voice(self):\n        print('%s: 汪汪汪...' % self._nickname)\n\n\nclass Cat(Pet):\n    \"\"\"猫\"\"\"\n\n    def make_voice(self):\n        print('%s: 喵...喵...' % self._nickname)\n\n\ndef main():\n    pets = [Dog('旺财'), Cat('凯蒂'), Dog('大黄')]\n    for pet in pets:\n        pet.make_voice()\n\n\nif __name__ == '__main__':\n    main()\n```\n\n### 5.列表\n**5.1声明**：`列表名 = [表项1,...,表项n]`\n>表项的数据类型**可以不是一致的**，也可以是**列表**，如果全部都是大小相同列表的话，类似于C语言中的**多维数组**\n\n**5.2访问**\n①`列表名[i]`:访问列表中**第i-1表项**\n>python中**有**对应的**下标检查**\n当i前面有**负号**时，代表**倒数**第i个\n当列表某个表项是列表时，如果想要访问其中元素，需要再次使用下标，即`列表名[i][j]`\n\n②`列表名[i:j:n]`：访问列表的一部分（第i个下标到第j个下标,n为步长，默认为1），结果还是一个列表\n>省略**第一个下标**相当于使用 0，或列表的**开始**\n省略**第二个下标**相当于使用列表的长度，意味着分片直至列表的**末尾**\n当n为**负数**时，表示从第j个下标到第i个下标，即**反向切片**\n\n**5.3常用操作**\n①操作符\n>`+`操作符可以**连接**两个列表，得到一个新列表，就像它将两个字符串合并成一个新字符串一样\n`*`操作符可以用于一个列表和一个整数，实现列表的**复制**\n`del`语句将删除列表中下标处的值，表中被删除值后面的所有值，都将**向前移动一个下标**\n`del spam[2]`\n`in`和`not in`:连接两个值,一个要在列表中**查找的值**，以及待查找的**列表**。这些表达式将求值为**布尔值**\n\n②常用方法\n>index()：传入一个值，如果该值存在于列表中，就返回它**第一次**出现的下标\nappend()：将参数添加到列表**末尾**\ninsert()：以在列表**任意下标处**插入一个值\nremove()：将对应值从被调用的列表中删除\nsort()：对于`数值`或`字符串`的列表，基于“ASCII字符顺序”排序\n\n**5.4元组和集合**\n①元组：几乎与列表数据类型一样，但是元组输入时用**圆括号()**，而不是用方括号，且也是**不可变数据类型**\n>如果元组中只有**一个值**，你可以在括号内该值的后面跟上一个**逗号**，否则就是一个值，而不是包含一个值的元组\n元组在创建**时间**和占用的**空间**上面都优于列表\n\n②集合：`set1 = {1, 2, 3, 3, 3, 2}`，是**无序**的可变数据类型\n>不允许有重复元素，而且可以进行交集、并集、差集等运算\n\n③转换\n>\n`list()`：返回传递给它们的值的列表版本\n`tuple()`：返回传递给它们的值的元组版本\n`set()`：返回集合版本\n\n{%right%}\n在将可变数据类型传递给函数时，又不希望函数改变其值，可以在函数内部拷贝一份对应的值，这就需要使用copy模块的copy()函数（直接赋值传递的还是引用）\n{%endright%}\n\n### 6.字典\n**6.1声明：**`字典名 = {键1:值1,...,键n:值n};`\n>字典的键相当于相当于列表的**下标**，但是列表的下标只能时整数，而字典的键可以是**其他数据类型**，比如说字符串\n字典是**无序**的，只要键名和对应的值完全相同，两个字典就是完全相同的\n字典的**键**不能重复\n\n**6.2常用操作：**\n①访问：`字典名[键名]`\n②添加/修改键值对：`字典名[键名]=值`\n③删除键值对：`del 字典名[键名]`\n④判断是否存在：`键名 in 字典名`\n\n**6.3常用方法：**\n①`keys()`:返回`dict_keys`，类似于字典的键的列表\n②`values()`：返回`dict_values`，类似于字典的值的列表\n③`items()`：返回`dict_items`，类似于字典的键-值对的列表\n{%right%}\n这些返回值不能改变，常用于for循环判定条件中如for v in spam.values()用于遍历字典\n{%endright%}\n④`get()`：它有两个参数，要取得其值的**键**，以及如果该键不存在时，返回的**备用值**\n⑤`setdefault()`:为字典中某个键设置一个默认值，当该键没有任何值时使用它，传递给该方法的第一个参数，是要**检查的键**，第二个参数，是如果**该键不存在时要设置的值**，即`spam.setdefault('color', 'black')`\n```\n#计算一个字符串中每个字符出现的次数\nmessage = 'It was a bright cold day in April, and the clocks were striking thirteen.'\ncount = {}\n#for循环语句，即将character依次设置为message列表中的值\nfor character in message:\n  count.setdefault(character, 0)\n  count[character] = count[character] + 1\nprint(count)\n```\n\n### 7.字符串\n**7.1声明**\n①以**单引号**开始和结束\n>但是这样会导致字符串不能包含单引号，可以使用对应的**转义字符**`\\'`\n\n②以**双引号**开始和结束\n>同理，不能包含双引号，可以使用对应的转义字符`\\\"`\n\n③以**3个单引号或3个双引号**开始和结束，“三重引号”之间的所有**引号、制表符或换行**，都被认为是字符串的一部分缩进规则在这种字符串中不适用\n④原始字符串：在字符串开始的**引号之前加上r**，完全忽略所有的转义字符，打印出字符串中所有的**倒斜杠**\n>字符串是**不可变类型**，可以看作是**单个文本字符的元组（空格也算）**，`name = 'cat'`相当于`name = ('c','a','t')`\n\n**7.2常用方法**\n\n>`islower()/islower()`:如果字符串至少有一个字母，并且所有字母**都是**大写/小写,就会相应地返回布尔值 True。否则，该方法返回 False。\n`isalpha()`：如果字符串只包含字母，并且非空，返回True\n`isalnum()`：如果字符串只包含字母和数字，并且非空，返回True\n`isdecimal()`：如果字符串只包含数字字符，并且非空，返回 True\n`isspace()`：如果字符串只包含空格、制表符和换行，并且非空,返回 True\n`istitle()`:如果字符串仅包含以大写字母开头、后面都是小写字母的单词,返回 True\n`startswith()/endswith()`:如果它们所调用的字符串以该方法传入的字符串开始或结束,返回 True\n\n>`upper()/lower()`：将原字符串的所有字母都被相应地转换为大写/小写，非字母字符保持不变，返回一个**新**字符串，而不是将旧字符串修改\n因为 upper()和 lower()字符串方法本身返回字符串，可以在返回的字符串上继续调用字符串方法,如`'Hello'.upper().lower()`\n\n>`join()`:在一个字符串上调用，参数是一个字符串列表，返回一个字符串,返回的字符串由传入的列表中每个字符串连接而成。\n `' '.join(['My', 'name', 'is', 'Simon'])`,返回结果是'My name is Simon'\n\n>`split()`：传入一个分割字符串，指定它按照不同的字符串分割\n`'MyABCnameABCisABCSimon'.split('ABC')返回值为['My', 'name', 'is', 'Simon']`\n\n>`rjust()/ljust()/center()`:该方法的第一个参数为**填充后**的字符串的长度，第二个参数为**填充使用的字符**，默认是空格，分别为\n`'Hello'.rjust(20, '*')'***************Hello'`\n`'Hello'.center(20, '=')'=======Hello========'`\n\n>`strip()/lstrip()/rstrip()`:删除字符串左边、右边或两边的空白字符（空格、制表符和换行符）有一个可选的字符串参数，指定两边的哪些**字符**应该删除（注意，删除的不一定和参数完全符合，可能是他们的组合）\n```\nspam = 'SpamSpamBaconSpamEggsSpamSpam'\nspam.strip('ampS')\n'BaconSpamEggs'\n```\n>`pyperclip`模块有`copy()`和`paste()`函数，可以向计算机的剪贴板发送文本，或从它接收文本,如果你的程序之外的某个程序改变了剪贴板的内容，`paste()`函数就会返回它\n\n7.生成式和生成器语法\nhttps://www.cnblogs.com/yyds/p/6281453.html\n","source":"_posts/python学习笔记（一）.md","raw":"---\ntitle: python学习笔记（一）\nseo_title: seo名称\ntoc: true\nindent: true\ntop: false\ncomments: true\narchive: true\ncover: false\nmathjax: false\npin: false\ntop_meta: false\nbottom_meta: false\nsidebar:\n  - toc\ntag:\n  - 编程语言\n  - python\ncategories: 编程语言\nkeywords: 文章关键词\nupdated: ''\ndate:\nimg: /medias/featureimages/4.webp\nsummary: python启蒙\n---\n# python学习笔记（一）\n## python启蒙\n### 1.基本元素\n**1.1表达式**：python中最基本的执行结构，由“**对象**”和**操作符**组成，并返回**一个对象**\n**1.2对象**：即被存储的数据，类似于C语言中的字面值，如`1`、`\"cat\"`、`1.23456e2`等\n①当一个对象被声明后，会给其分配对应的ID（地址）和内存，且数据类型不能更改\n②基本数据类型：整型（int）、浮点型（float）、字符串（strs）、布尔类型（bool）、复数类型（a+bj）\n>可以使用`type()`检查数据类型\n\n③可变类型与不可变类型\n>不可变类型是指对象一旦创建，内容就**不能被更改**，常见的不可变类型包括整数、浮点数、布尔值、字符串和元组等，其对应的变量只能被**覆盖**\n\n>可变类型是指变量的值可以被更改，常见的可变类型包括列表、集合和字典等\n\n**1.3变量**\n①取名规则\n> 只能是一个词\n只能包含**字母、数字和下划线**\n不能以数字开头\n不能使用**关键词**\n\n{%right%}\n一个好的变量名包含了数据对应的信息，常见的命名格式有my_cat和MyCat\n{%endright%}\n\n②变量的本质\n> 变量是对象的一个**引用**，本身也占用一定的内存（存储对象的地址）\n**没有变量**指向的**对象**会被**回收**（垃圾回收机制）\n变量名代表的内存地址是**变化的**，是**上次赋值时**新数据所在的内存的地址，而C语言**变量名所代表的地址是不变的**，**变化的是该地址内存单元的数据**\n\n{%warning%}\n所以说如果两个变量指向是同一个可变类型对象，改变其中一个，另一个也随之改变\n{%endwarning%}\n![变量的本质](/image/python_7.png)\n\n**1.4操作符**\n①数字操作符\n![数字操作符](/image/python_1.png)\n> `+`可以用于**拼接字符串**，比如`'a'+'b'`结果是`'ab'`\n`*`可以用于**字符串复制**，比如`'a'*5`结果时`'aaaaa'`\n\n②比较操作符\n![比较操作符](/image/python_3.png)\n{%warning%}\n注意\n整型和浮点型之间是可以使用==正常比较的，但是整型、浮点型和字符串使用==只能得到False\n>、<、≥、≤只能用于整型和浮点型\n{%endwarning%}\n\n\n③增强的赋值操作符\n![赋值操作符](/image/python_4.png)\n④布尔操作符：`and`、`or`、`not`\n>`not`优先级最高，随后是`and`，最后是`or`\n\n**1.5注释**\n①单行注释：以`#`开头\n②多行注释：用三个单引号/双引号包围\n**1.6类型转换**\n①自动类型转换\n> 将一种类型的数据**赋值**给另外一种类型的变量时，**表达式右边**的类型**转换为左边**变量的类型\n在不同类型的**混合运算**中，将参与运算的所有数据先转换为**同一种类型**，然后再进行计算\n\n![混合运算下的类型转换](/image/python_2.png)\n②强制类型转换\n> `str()`：转化为字符串类型\n`int()`：转化为整数类型\n`float()`：转化为浮点数类型\n\n### 2.控制流\n**2.1基本格式**\n①语句关键词后面的**冒号**，以及python使用**换行符**而不是分号作为语句终止符\n②python的代码块不用花括号划分范围，而是**根据代码的缩进**\n> 缩进**增加**时，代码块**开始**\n代码块可以包含其他代码块,缩进减少为零，或减**少为外面包围代码块的缩进，代码块就结束了**\n\n{%right%}\n通常以四个空格为一个缩进，不要使用制表键\n{%endright%}\n\n**2.2条件语句**\n```\nif(条件): #条件为结果为布尔值的表达式\n  statement\nelif(条件):\n  statement\nelse:\n  statement\n```\n{%right%}\n一旦一个语句的条件为Ture，后面的语句会被忽略，所以要注意语句的顺序，或者说清晰化条件的范围，使其之间没有交集\n{%endright%}\n\n**2.3循环语句**\n①`while`循环语句\n```\nwhile(条件):\n  statement\n```\n②`for`循环语句\n```\nfor 控制变量 in range(): \n  statement\n```\n>缺省情况下，控制变量被初始化为0\n在Python中，下划线`_`通常用作一个无用的变量名称，常用做控制变量的名称\n\n**2.4range函数**\n①`range(a)`：0至**a-1**，取不到a\n②`range(a,b)`：a至**b-1**，步长为1\n③`range(a,b,i)`：a至**b-1**,步长为i\n>range()的返回值是类似于**列表**的值（但是不是列表），所以也可以将循环中的`range()`换为一个列表，在每次迭代中，让变量**依次**设置为**列表中的值**\n\n{%right%}\n一个常见的Python技巧，是在for循环中使用range(len(someList))，迭代列表的每一个下标\n{%endright%}\n\n\n**2.5循环控制语句**\n①break：遇到`break`语句，马上退出循环\n②continue：遇到`continue`语句，马上跳回到循环开始处，重新对循环条件求值\n{%right%}\n可以结合条件语句对循环进行控制\n{%endright%}\n\n### 3.函数\n**3.1格式**\n```\ndef 函数名(变元n):\n  statement\n  return expression #可以是变量，也可以是表达式\n\n```\n①变元即形参\n②`None`是**NoneType数据类型**的唯一值，代表没有值，相当于C中的`void`\n③关键字参数：某些函数有可选的关键字参数，在函数调用时可以指定，相当于修改函数的**默认设置**\n{%right%}\n如果需要传递多个同一位置的关键字参数，可以采用 | 管道命令将这些参数连接\n{%endright%}\n④函数的参数可以有**默认值**，也支持使用**可变参数**（类型、个数均可变），所以Python并**不需要**像其他语言一样支持**函数的重载**\n{%right%}\n未知个数参数可以使用args关键字实现\n{%endright%}\n\n```\n# 在参数名前面的*表示args是一个可变参数\ndef add(*args):\n    total = 0\n    for val in args:\n        total += val\n    return total\n\n\n# 在调用add函数时可以传入0个或多个参数\nprint(add())\nprint(add(1))\nprint(add(1, 2))\nprint(add(1, 2, 3))\nprint(add(1, 3, 5, 7, 9))\n```\n**3.2作用域**\n①局部作用域：在被调用**函数内赋值**（注意，如果在函数内没有对其进进行赋值，则为全局变量）的变量，局部作用域在**函数被调用**时创建，在**函数返回时**销毁\n②全局作用域：在所有**函数之外**赋值的变量，属于**全局作用域**，全局作用域在**程序开始时**创建，在**程序终止时**销毁\n③嵌套作用域：当一个函数1内部有另一个函数2时，对于函数1内部的函数2来说，函数1中的变量属于函数2的嵌套作用域\n④内置作用域：Python内置的那些**标识符**\n>**联系**\n内置作用域→全局作用域→嵌套作用域→局部作用域，从左往右依次内推，内部的作用域可以访问外部作用域中的变量，但是外部作用域不能访问内部作用域的变量，局部作用域不能访问**其他局部作用域**的变量\n如果在不同的作用域中，你可以用相同的名字命名不同的变量\n可以使用`global`关键字修饰变量使其变为**全局变量**\n可以使用`nonlocal`关键字修饰变量使其变为**嵌套作用域变量**\n\n{%warning%}\n尽量减少对全局变量的使用，因为全局变量的作用域和影响过于广泛，可能会发生意料之外的修改和使用，除此之外全局变量比局部变量拥有更长的生命周期，可能导致对象占用的内存长时间无法被垃圾回收\n{%endwarning%}\n**3.3异常处理**：捕捉**函数内部某些语句**的错误\n①`try`语句：将可**能出错的语句**放在`try`之后，当这些语句出错后，会立马跳到`except`语句\n```\ntry:\n  statement\n```\n②`except`语句：后面常接一些错误提醒的`print`语句\n```\nexcept 错误名:\n  print()\n```\n③`finally`语句：`finally`块的代码不论程序正常还是异常**都**会执行到\n>该语句不是必须的，通常用于执行一些必要的**清理操作**，如关闭文件、释放资源、关闭数据库连接等\n\n**3.4模块**\n①导入模块：`import 模块名,模块名n`\n②调用模块中函数/方法：模块名.函数名/方法名\n>模块类似于C++中的命名空间，可以**防止命名冲突**，同时也封装了代码\n\n③模块的测试：写完自定义的模块之后，都会写一个测试代码，**直接运行**该模块，检验一些模块中各个功能是否能够成功运行\n```\ndef c2f(cel):\n    fah = cel * 1.8 + 32\n    return fah\ndef f2c(fah):\n    cel = (fah - 32) / 1.8\n    return cel\ndef test():\n    print(\"测试数据：0 摄氏度 = %.2f 华氏度\" % c2f(0))\n    print(\"测试数据：0 华氏度 = %.2f 摄氏度\" % f2c(0))\nif __name__ == '__main__':\ntest()\n```\n>其中`if __name__ == '__main__':`的作用是检测当前模块是否被直接运行（作为主程序），还是被导入到其他模块中作为一个模块使用\n`__name__`为python中的一个**内置变量**，当程序直接被执行时，其`__name__`的值为`'__main__'`，而当导入到其他模块中时，其`__name__ `值为自己的模块名。\n\n**3.5常用函数（待合并）**\n①print()：将括号内的**字符串**显示在屏幕上\n#所以要输出其他类型变量时，需要使用`str()`将其**转换为字符串类型**\n#占位符语法：\n- `print('%d + %d = %d' % (a, b, a + b))`,其中`%d`是整数的占位符，`%f`是小数的占位符，`%%`表示百分号（因为百分号代表了占位符，所以带占位符的字符串中要表示百分号必须写成`%%`），字符串之后的`%`后面跟的变量值会替换掉占位符然后输出到终端中。\n- `print('{0} * {1} = {2}'.format(a, b, a * b))`，其中`{0}`等都是占位符，`0`为format方法的**索引**，**可省略，即按照默认顺序插入**，还可以使用更多的格式选项，用于指定值的**格式**，还可以利用语法糖简化写法，即`print(f'{a} * {b} = {a * b}')`\n\n②input()：等待用户输入文本，并按下**回车键**，将其转化为一个**字符串**\n\n### 4.面向对象编程\n**4.1类的定义**\n```\nclass Student(object):\n\n    # __init__是一个特殊方法用于在创建对象时进行初始化操作\n    # 通过这个方法我们可以为学生对象绑定name和age两个属性\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def study(self, course_name):\n        print('%s正在学习%s.' % (self.name, course_name))\n\n    # PEP 8要求标识符的名字用全小写多个单词用下划线连接\n    # 但是部分程序员和公司更倾向于使用驼峰命名法(驼峰标识)\n    def watch_movie(self):\n        if self.age < 18:\n            print('%s只能观看《熊出没》.' % self.name)\n        else:\n            print('%s正在观看岛国爱情大电影.' % self.name)\n```\n①在Python中可以使用`class`关键字定义类，其中`object`是所有类的基类，即**顶级父类**，这意味着在Python中定义的任何类都可以调用`object`类的方法（如`__init__`方法），并继承`object`类的特性\n②类中的函数被称为**方法**，以描述对象的动态特征，其中方法的**第一个参数**通常被命名为`self`，Python会自动将对象绑定到第一个参数上\n③`__init__`方法定义了类的**属性**，这些属性是描述类的关键\n\n**4.2对象的创建与使用**\n```\ndef main():\n    # 创建学生对象并指定姓名和年龄\n    stu1 = Student('骆昊', 38)\n    # 给对象发study消息\n    stu1.study('Python程序设计')\n    # 给对象发watch_av消息\n    stu1.watch_movie()\n    stu2 = Student('王大锤', 15)\n    stu2.study('思想品德')\n    stu2.watch_movie()\n\n\nif __name__ == '__main__':\n    main()\n```\n①可以通过`对象.方法名/属性名`访问类的方法和属性\n>对象的创建不使用`__init__`方法，而是使用**类名**创建，使用类名创建对象实际上是通过**调用构造函数**来创建对象\n\n②属性和方法的访问权限只有两种，也就是公开的和私有的，如果希望属性是私有的，在给属性命名时可以用**两个下划线**作为开头\n{%warning%}\n但是，Python并没有从语法上严格保证私有属性或方法的私密性，它只是给私有的属性和方法换了一个名字来妨碍对它们的访问，事实上如果你知道更换名字的规则仍然可以访问到它们\n{%endwarning%}\n{%right%}\npython程序员遵循一种命名惯例就是让属性名以单下划线开头来表示属性是受保护的，本类之外的代码在访问这样的属性时应该要保持慎重\n{%endright%}\n\n**4.3property装饰器**\n```\nclass Person(object):\n\n    def __init__(self, name, age):\n        self._name = name\n        self._age = age\n\n    # 访问器 - getter方法\n    @property\n    def name(self):\n        return self._name\n\n    # 访问器 - getter方法\n    @property\n    def age(self):\n        return self._age\n\n    # 修改器 - setter方法\n    @age.setter\n    def age(self, age):\n        self._age = age\n\n    def play(self):\n        if self._age <= 16:\n            print('%s正在玩飞行棋.' % self._name)\n        else:\n            print('%s正在玩斗地主.' % self._name)\n\n\ndef main():\n    person = Person('王大锤', 12)\n    person.play()\n    person.age = 22\n    person.play()\n    # person.name = '白元芳'  # AttributeError: can't set attribute\n\n\nif __name__ == '__main__':\n    main()\n```\n①`@property`:将一个**方法**转换为相应的**属性**，将**方法的调用方式**变为**属性的访问方式**\n>具体而言，`@property`装饰器定义了一个`getter`方法，用于获取属性的值,如果没有`@property`的话，`person.age`应为`person.age()`\n\n②在定义了**访问器**后,可以使用`age.setter`等装饰器定义对应的`setter`方法，记住要有**对应的前缀**，且方法名需要一致（即`age`）\n**4.4静态方法和类方法：**当类中需要一些方法，但是不是基于具体对象实例的，如在**创建对象前**验证其是否合理的方法\n①静态方法：使用`@staticmethod`修饰器定义，直接通过`类名.方法名()`调用\n>静态方法属于**类本身**，所以在定义时不需要`self`参数\n```\nfrom math import sqrt\n\n\nclass Triangle(object):\n\n    def __init__(self, a, b, c):\n        self._a = a\n        self._b = b\n        self._c = c\n\n    @staticmethod\n    def is_valid(a, b, c):\n        return a + b > c and b + c > a and a + c > b\n\n\ndef main():\n    a, b, c = 3, 4, 5\n    # 静态方法和类方法都是通过给类发消息来调用的\n    if Triangle.is_valid(a, b, c):\n        t = Triangle(a, b, c)\n    else:\n        print('无法构成三角形.')\n\n\nif __name__ == '__main__':\n    main()\n```\n②类方法：使用`@classmethod`修饰器定义类方法，直接通过`类名.方法名()`调用\n>方法的第一个参数约定名为`cls`，类似于`self`，但是`cls`代表是对应的类，允许在类方法内部访问**类级别**的属性和方法\n```\nfrom time import time, localtime, sleep\n\n\nclass Clock(object):\n    \"\"\"数字时钟\"\"\"\n\n    def __init__(self, hour=0, minute=0, second=0):\n        self._hour = hour\n        self._minute = minute\n        self._second = second\n\n    @classmethod\n    def now(cls):\n        ctime = localtime(time())\n        return cls(ctime.tm_hour, ctime.tm_min, ctime.tm_sec)\n\n\ndef main():\n    # 通过类方法创建对象并获取系统时间\n    clock = Clock.now()\n\n\nif __name__ == '__main__':\n    main()\n```\n**4.5继承和继承**：\n```\nclass Person(object):\n    \"\"\"人\"\"\"\n\n    def __init__(self, name, age):\n        self._name = name\n        self._age = age\n\n    @property\n    def name(self):\n        return self._name\n\n    @property\n    def age(self):\n        return self._age\n\n    @age.setter\n    def age(self, age):\n        self._age = age\n\n    def play(self):\n        print('%s正在愉快的玩耍.' % self._name)\n\n    def watch_av(self):\n        if self._age >= 18:\n            print('%s正在观看爱情动作片.' % self._name)\n        else:\n            print('%s只能观看《熊出没》.' % self._name)\n\n\nclass Student(Person):\n    \"\"\"学生\"\"\"\n\n    def __init__(self, name, age, grade):\n        super().__init__(name, age)\n        self._grade = grade\n\n    @property\n    def grade(self):\n        return self._grade\n\n    @grade.setter\n    def grade(self, grade):\n        self._grade = grade\n\n    def study(self, course):\n        print('%s的%s正在学习%s.' % (self._grade, self._name, course))\n\n\nclass Teacher(Person):\n    \"\"\"老师\"\"\"\n\n    def __init__(self, name, age, title):\n        super().__init__(name, age)\n        self._title = title\n\n    @property\n    def title(self):\n        return self._title\n\n    @title.setter\n    def title(self, title):\n        self._title = title\n\n    def teach(self, course):\n        print('%s%s正在讲%s.' % (self._name, self._title, course))\n\n\ndef main():\n    stu = Student('王大锤', 15, '初三')\n    stu.study('数学')\n    stu.watch_av()\n    t = Teacher('骆昊', 38, '砖家')\n    t.teach('Python程序设计')\n    t.watch_av()\n\n\nif __name__ == '__main__':\n    main()\n```\n①继承：子类除了继承父类提供的属性和方法，还可以定义自己**特有**的属性和方法，所以子类比父类拥有的更多的能力\n②多态：子类在继承了父类的方法后，可以对父类已有的方法给出新的实现版本，不同的子类表现不同\n>抽象类是一种专门让其他类继承的类，**不能创建对应的对象**，子类可以重写其中的**抽象方法**从而实现多态\n\n{%right%}\n通过abc模块的ABCMeta元类和abstractmethod包装器来达到抽象类的效果\n{%endright%}\n\n```\nfrom abc import ABCMeta, abstractmethod\n\n\nclass Pet(object, metaclass=ABCMeta):\n    \"\"\"宠物\"\"\"\n\n    def __init__(self, nickname):\n        self._nickname = nickname\n\n    @abstractmethod\n    def make_voice(self):\n        \"\"\"发出声音\"\"\"\n        pass\n\n\nclass Dog(Pet):\n    \"\"\"狗\"\"\"\n\n    def make_voice(self):\n        print('%s: 汪汪汪...' % self._nickname)\n\n\nclass Cat(Pet):\n    \"\"\"猫\"\"\"\n\n    def make_voice(self):\n        print('%s: 喵...喵...' % self._nickname)\n\n\ndef main():\n    pets = [Dog('旺财'), Cat('凯蒂'), Dog('大黄')]\n    for pet in pets:\n        pet.make_voice()\n\n\nif __name__ == '__main__':\n    main()\n```\n\n### 5.列表\n**5.1声明**：`列表名 = [表项1,...,表项n]`\n>表项的数据类型**可以不是一致的**，也可以是**列表**，如果全部都是大小相同列表的话，类似于C语言中的**多维数组**\n\n**5.2访问**\n①`列表名[i]`:访问列表中**第i-1表项**\n>python中**有**对应的**下标检查**\n当i前面有**负号**时，代表**倒数**第i个\n当列表某个表项是列表时，如果想要访问其中元素，需要再次使用下标，即`列表名[i][j]`\n\n②`列表名[i:j:n]`：访问列表的一部分（第i个下标到第j个下标,n为步长，默认为1），结果还是一个列表\n>省略**第一个下标**相当于使用 0，或列表的**开始**\n省略**第二个下标**相当于使用列表的长度，意味着分片直至列表的**末尾**\n当n为**负数**时，表示从第j个下标到第i个下标，即**反向切片**\n\n**5.3常用操作**\n①操作符\n>`+`操作符可以**连接**两个列表，得到一个新列表，就像它将两个字符串合并成一个新字符串一样\n`*`操作符可以用于一个列表和一个整数，实现列表的**复制**\n`del`语句将删除列表中下标处的值，表中被删除值后面的所有值，都将**向前移动一个下标**\n`del spam[2]`\n`in`和`not in`:连接两个值,一个要在列表中**查找的值**，以及待查找的**列表**。这些表达式将求值为**布尔值**\n\n②常用方法\n>index()：传入一个值，如果该值存在于列表中，就返回它**第一次**出现的下标\nappend()：将参数添加到列表**末尾**\ninsert()：以在列表**任意下标处**插入一个值\nremove()：将对应值从被调用的列表中删除\nsort()：对于`数值`或`字符串`的列表，基于“ASCII字符顺序”排序\n\n**5.4元组和集合**\n①元组：几乎与列表数据类型一样，但是元组输入时用**圆括号()**，而不是用方括号，且也是**不可变数据类型**\n>如果元组中只有**一个值**，你可以在括号内该值的后面跟上一个**逗号**，否则就是一个值，而不是包含一个值的元组\n元组在创建**时间**和占用的**空间**上面都优于列表\n\n②集合：`set1 = {1, 2, 3, 3, 3, 2}`，是**无序**的可变数据类型\n>不允许有重复元素，而且可以进行交集、并集、差集等运算\n\n③转换\n>\n`list()`：返回传递给它们的值的列表版本\n`tuple()`：返回传递给它们的值的元组版本\n`set()`：返回集合版本\n\n{%right%}\n在将可变数据类型传递给函数时，又不希望函数改变其值，可以在函数内部拷贝一份对应的值，这就需要使用copy模块的copy()函数（直接赋值传递的还是引用）\n{%endright%}\n\n### 6.字典\n**6.1声明：**`字典名 = {键1:值1,...,键n:值n};`\n>字典的键相当于相当于列表的**下标**，但是列表的下标只能时整数，而字典的键可以是**其他数据类型**，比如说字符串\n字典是**无序**的，只要键名和对应的值完全相同，两个字典就是完全相同的\n字典的**键**不能重复\n\n**6.2常用操作：**\n①访问：`字典名[键名]`\n②添加/修改键值对：`字典名[键名]=值`\n③删除键值对：`del 字典名[键名]`\n④判断是否存在：`键名 in 字典名`\n\n**6.3常用方法：**\n①`keys()`:返回`dict_keys`，类似于字典的键的列表\n②`values()`：返回`dict_values`，类似于字典的值的列表\n③`items()`：返回`dict_items`，类似于字典的键-值对的列表\n{%right%}\n这些返回值不能改变，常用于for循环判定条件中如for v in spam.values()用于遍历字典\n{%endright%}\n④`get()`：它有两个参数，要取得其值的**键**，以及如果该键不存在时，返回的**备用值**\n⑤`setdefault()`:为字典中某个键设置一个默认值，当该键没有任何值时使用它，传递给该方法的第一个参数，是要**检查的键**，第二个参数，是如果**该键不存在时要设置的值**，即`spam.setdefault('color', 'black')`\n```\n#计算一个字符串中每个字符出现的次数\nmessage = 'It was a bright cold day in April, and the clocks were striking thirteen.'\ncount = {}\n#for循环语句，即将character依次设置为message列表中的值\nfor character in message:\n  count.setdefault(character, 0)\n  count[character] = count[character] + 1\nprint(count)\n```\n\n### 7.字符串\n**7.1声明**\n①以**单引号**开始和结束\n>但是这样会导致字符串不能包含单引号，可以使用对应的**转义字符**`\\'`\n\n②以**双引号**开始和结束\n>同理，不能包含双引号，可以使用对应的转义字符`\\\"`\n\n③以**3个单引号或3个双引号**开始和结束，“三重引号”之间的所有**引号、制表符或换行**，都被认为是字符串的一部分缩进规则在这种字符串中不适用\n④原始字符串：在字符串开始的**引号之前加上r**，完全忽略所有的转义字符，打印出字符串中所有的**倒斜杠**\n>字符串是**不可变类型**，可以看作是**单个文本字符的元组（空格也算）**，`name = 'cat'`相当于`name = ('c','a','t')`\n\n**7.2常用方法**\n\n>`islower()/islower()`:如果字符串至少有一个字母，并且所有字母**都是**大写/小写,就会相应地返回布尔值 True。否则，该方法返回 False。\n`isalpha()`：如果字符串只包含字母，并且非空，返回True\n`isalnum()`：如果字符串只包含字母和数字，并且非空，返回True\n`isdecimal()`：如果字符串只包含数字字符，并且非空，返回 True\n`isspace()`：如果字符串只包含空格、制表符和换行，并且非空,返回 True\n`istitle()`:如果字符串仅包含以大写字母开头、后面都是小写字母的单词,返回 True\n`startswith()/endswith()`:如果它们所调用的字符串以该方法传入的字符串开始或结束,返回 True\n\n>`upper()/lower()`：将原字符串的所有字母都被相应地转换为大写/小写，非字母字符保持不变，返回一个**新**字符串，而不是将旧字符串修改\n因为 upper()和 lower()字符串方法本身返回字符串，可以在返回的字符串上继续调用字符串方法,如`'Hello'.upper().lower()`\n\n>`join()`:在一个字符串上调用，参数是一个字符串列表，返回一个字符串,返回的字符串由传入的列表中每个字符串连接而成。\n `' '.join(['My', 'name', 'is', 'Simon'])`,返回结果是'My name is Simon'\n\n>`split()`：传入一个分割字符串，指定它按照不同的字符串分割\n`'MyABCnameABCisABCSimon'.split('ABC')返回值为['My', 'name', 'is', 'Simon']`\n\n>`rjust()/ljust()/center()`:该方法的第一个参数为**填充后**的字符串的长度，第二个参数为**填充使用的字符**，默认是空格，分别为\n`'Hello'.rjust(20, '*')'***************Hello'`\n`'Hello'.center(20, '=')'=======Hello========'`\n\n>`strip()/lstrip()/rstrip()`:删除字符串左边、右边或两边的空白字符（空格、制表符和换行符）有一个可选的字符串参数，指定两边的哪些**字符**应该删除（注意，删除的不一定和参数完全符合，可能是他们的组合）\n```\nspam = 'SpamSpamBaconSpamEggsSpamSpam'\nspam.strip('ampS')\n'BaconSpamEggs'\n```\n>`pyperclip`模块有`copy()`和`paste()`函数，可以向计算机的剪贴板发送文本，或从它接收文本,如果你的程序之外的某个程序改变了剪贴板的内容，`paste()`函数就会返回它\n\n7.生成式和生成器语法\nhttps://www.cnblogs.com/yyds/p/6281453.html\n","slug":"python学习笔记（一）","published":1,"_id":"clmkphbf800149gvd85bw8xif","layout":"post","photos":[],"link":"","content":"<h1 id=\"python学习笔记（一）\"><a href=\"#python学习笔记（一）\" class=\"headerlink\" title=\"python学习笔记（一）\"></a>python学习笔记（一）</h1><h2 id=\"python启蒙\"><a href=\"#python启蒙\" class=\"headerlink\" title=\"python启蒙\"></a>python启蒙</h2><h3 id=\"1-基本元素\"><a href=\"#1-基本元素\" class=\"headerlink\" title=\"1.基本元素\"></a>1.基本元素</h3><p><strong>1.1表达式</strong>：python中最基本的执行结构，由“<strong>对象</strong>”和<strong>操作符</strong>组成，并返回<strong>一个对象</strong><br><strong>1.2对象</strong>：即被存储的数据，类似于C语言中的字面值，如<code>1</code>、<code>\"cat\"</code>、<code>1.23456e2</code>等<br>①当一个对象被声明后，会给其分配对应的ID（地址）和内存，且数据类型不能更改<br>②基本数据类型：整型（int）、浮点型（float）、字符串（strs）、布尔类型（bool）、复数类型（a+bj）</p>\n<blockquote>\n<p>可以使用<code>type()</code>检查数据类型</p>\n</blockquote>\n<p>③可变类型与不可变类型</p>\n<blockquote>\n<p>不可变类型是指对象一旦创建，内容就<strong>不能被更改</strong>，常见的不可变类型包括整数、浮点数、布尔值、字符串和元组等，其对应的变量只能被<strong>覆盖</strong></p>\n</blockquote>\n<blockquote>\n<p>可变类型是指变量的值可以被更改，常见的可变类型包括列表、集合和字典等</p>\n</blockquote>\n<p><strong>1.3变量</strong><br>①取名规则</p>\n<blockquote>\n<p>只能是一个词<br>只能包含<strong>字母、数字和下划线</strong><br>不能以数字开头<br>不能使用<strong>关键词</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 一个好的变量名包含了数据对应的信息，常见的命名格式有my_cat和MyCat</div>\n\n<p>②变量的本质</p>\n<blockquote>\n<p>变量是对象的一个<strong>引用</strong>，本身也占用一定的内存（存储对象的地址）<br><strong>没有变量</strong>指向的<strong>对象</strong>会被<strong>回收</strong>（垃圾回收机制）<br>变量名代表的内存地址是<strong>变化的</strong>，是<strong>上次赋值时</strong>新数据所在的内存的地址，而C语言<strong>变量名所代表的地址是不变的</strong>，<strong>变化的是该地址内存单元的数据</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 所以说如果两个变量指向是同一个可变类型对象，改变其中一个，另一个也随之改变</div>\n<p><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/python_7.png\" alt=\"变量的本质\"></p>\n<p><strong>1.4操作符</strong><br>①数字操作符<br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/python_1.png\" alt=\"数字操作符\"></p>\n<blockquote>\n<p><code>+</code>可以用于<strong>拼接字符串</strong>，比如<code>'a'+'b'</code>结果是<code>'ab'</code><br><code>*</code>可以用于<strong>字符串复制</strong>，比如<code>'a'*5</code>结果时<code>'aaaaa'</code></p>\n</blockquote>\n<p>②比较操作符<br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/python_3.png\" alt=\"比较操作符\"></p>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 注意<br>整型和浮点型之间是可以使用==正常比较的，但是整型、浮点型和字符串使用==只能得到False<br>&gt;、&lt;、≥、≤只能用于整型和浮点型</div>\n\n\n<p>③增强的赋值操作符<br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/python_4.png\" alt=\"赋值操作符\"><br>④布尔操作符：<code>and</code>、<code>or</code>、<code>not</code></p>\n<blockquote>\n<p><code>not</code>优先级最高，随后是<code>and</code>，最后是<code>or</code></p>\n</blockquote>\n<p><strong>1.5注释</strong><br>①单行注释：以<code>#</code>开头<br>②多行注释：用三个单引号/双引号包围<br><strong>1.6类型转换</strong><br>①自动类型转换</p>\n<blockquote>\n<p>将一种类型的数据<strong>赋值</strong>给另外一种类型的变量时，<strong>表达式右边</strong>的类型<strong>转换为左边</strong>变量的类型<br>在不同类型的<strong>混合运算</strong>中，将参与运算的所有数据先转换为<strong>同一种类型</strong>，然后再进行计算</p>\n</blockquote>\n<p><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/python_2.png\" alt=\"混合运算下的类型转换\"><br>②强制类型转换</p>\n<blockquote>\n<p><code>str()</code>：转化为字符串类型<br><code>int()</code>：转化为整数类型<br><code>float()</code>：转化为浮点数类型</p>\n</blockquote>\n<h3 id=\"2-控制流\"><a href=\"#2-控制流\" class=\"headerlink\" title=\"2.控制流\"></a>2.控制流</h3><p><strong>2.1基本格式</strong><br>①语句关键词后面的<strong>冒号</strong>，以及python使用<strong>换行符</strong>而不是分号作为语句终止符<br>②python的代码块不用花括号划分范围，而是<strong>根据代码的缩进</strong></p>\n<blockquote>\n<p>缩进<strong>增加</strong>时，代码块<strong>开始</strong><br>代码块可以包含其他代码块,缩进减少为零，或减<strong>少为外面包围代码块的缩进，代码块就结束了</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 通常以四个空格为一个缩进，不要使用制表键</div>\n\n<p><strong>2.2条件语句</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">if(条件): #条件为结果为布尔值的表达式\n  statement\nelif(条件):\n  statement\nelse:\n  statement<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 一旦一个语句的条件为Ture，后面的语句会被忽略，所以要注意语句的顺序，或者说清晰化条件的范围，使其之间没有交集</div>\n\n<p><strong>2.3循环语句</strong><br>①<code>while</code>循环语句</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">while(条件):\n  statement<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>②<code>for</code>循环语句</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">for 控制变量 in range(): \n  statement<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<blockquote>\n<p>缺省情况下，控制变量被初始化为0<br>在Python中，下划线<code>_</code>通常用作一个无用的变量名称，常用做控制变量的名称</p>\n</blockquote>\n<p><strong>2.4range函数</strong><br>①<code>range(a)</code>：0至<strong>a-1</strong>，取不到a<br>②<code>range(a,b)</code>：a至<strong>b-1</strong>，步长为1<br>③<code>range(a,b,i)</code>：a至<strong>b-1</strong>,步长为i</p>\n<blockquote>\n<p>range()的返回值是类似于<strong>列表</strong>的值（但是不是列表），所以也可以将循环中的<code>range()</code>换为一个列表，在每次迭代中，让变量<strong>依次</strong>设置为<strong>列表中的值</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 一个常见的Python技巧，是在for循环中使用range(len(someList))，迭代列表的每一个下标</div>\n\n\n<p><strong>2.5循环控制语句</strong><br>①break：遇到<code>break</code>语句，马上退出循环<br>②continue：遇到<code>continue</code>语句，马上跳回到循环开始处，重新对循环条件求值</p>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 可以结合条件语句对循环进行控制</div>\n\n<h3 id=\"3-函数\"><a href=\"#3-函数\" class=\"headerlink\" title=\"3.函数\"></a>3.函数</h3><p><strong>3.1格式</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">def 函数名(变元n):\n  statement\n  return expression #可以是变量，也可以是表达式\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>①变元即形参<br>②<code>None</code>是<strong>NoneType数据类型</strong>的唯一值，代表没有值，相当于C中的<code>void</code><br>③关键字参数：某些函数有可选的关键字参数，在函数调用时可以指定，相当于修改函数的<strong>默认设置</strong></p>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 如果需要传递多个同一位置的关键字参数，可以采用 | 管道命令将这些参数连接</div>\n<p>④函数的参数可以有<strong>默认值</strong>，也支持使用<strong>可变参数</strong>（类型、个数均可变），所以Python并<strong>不需要</strong>像其他语言一样支持<strong>函数的重载</strong></p>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 未知个数参数可以使用args关键字实现</div>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 在参数名前面的*表示args是一个可变参数\ndef add(*args):\n    total = 0\n    for val in args:\n        total += val\n    return total\n\n\n# 在调用add函数时可以传入0个或多个参数\nprint(add())\nprint(add(1))\nprint(add(1, 2))\nprint(add(1, 2, 3))\nprint(add(1, 3, 5, 7, 9))<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>3.2作用域</strong><br>①局部作用域：在被调用<strong>函数内赋值</strong>（注意，如果在函数内没有对其进进行赋值，则为全局变量）的变量，局部作用域在<strong>函数被调用</strong>时创建，在<strong>函数返回时</strong>销毁<br>②全局作用域：在所有<strong>函数之外</strong>赋值的变量，属于<strong>全局作用域</strong>，全局作用域在<strong>程序开始时</strong>创建，在<strong>程序终止时</strong>销毁<br>③嵌套作用域：当一个函数1内部有另一个函数2时，对于函数1内部的函数2来说，函数1中的变量属于函数2的嵌套作用域<br>④内置作用域：Python内置的那些<strong>标识符</strong></p>\n<blockquote>\n<p><strong>联系</strong><br>内置作用域→全局作用域→嵌套作用域→局部作用域，从左往右依次内推，内部的作用域可以访问外部作用域中的变量，但是外部作用域不能访问内部作用域的变量，局部作用域不能访问<strong>其他局部作用域</strong>的变量<br>如果在不同的作用域中，你可以用相同的名字命名不同的变量<br>可以使用<code>global</code>关键字修饰变量使其变为<strong>全局变量</strong><br>可以使用<code>nonlocal</code>关键字修饰变量使其变为<strong>嵌套作用域变量</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 尽量减少对全局变量的使用，因为全局变量的作用域和影响过于广泛，可能会发生意料之外的修改和使用，除此之外全局变量比局部变量拥有更长的生命周期，可能导致对象占用的内存长时间无法被垃圾回收</div>\n<p><strong>3.3异常处理</strong>：捕捉<strong>函数内部某些语句</strong>的错误<br>①<code>try</code>语句：将可<strong>能出错的语句</strong>放在<code>try</code>之后，当这些语句出错后，会立马跳到<code>except</code>语句</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">try:\n  statement<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>②<code>except</code>语句：后面常接一些错误提醒的<code>print</code>语句</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">except 错误名:\n  print()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>③<code>finally</code>语句：<code>finally</code>块的代码不论程序正常还是异常<strong>都</strong>会执行到</p>\n<blockquote>\n<p>该语句不是必须的，通常用于执行一些必要的<strong>清理操作</strong>，如关闭文件、释放资源、关闭数据库连接等</p>\n</blockquote>\n<p><strong>3.4模块</strong><br>①导入模块：<code>import 模块名,模块名n</code><br>②调用模块中函数/方法：模块名.函数名/方法名</p>\n<blockquote>\n<p>模块类似于C++中的命名空间，可以<strong>防止命名冲突</strong>，同时也封装了代码</p>\n</blockquote>\n<p>③模块的测试：写完自定义的模块之后，都会写一个测试代码，<strong>直接运行</strong>该模块，检验一些模块中各个功能是否能够成功运行</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">def c2f(cel):\n    fah = cel * 1.8 + 32\n    return fah\ndef f2c(fah):\n    cel = (fah - 32) / 1.8\n    return cel\ndef test():\n    print(\"测试数据：0 摄氏度 = %.2f 华氏度\" % c2f(0))\n    print(\"测试数据：0 华氏度 = %.2f 摄氏度\" % f2c(0))\nif __name__ == '__main__':\ntest()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>其中<code>if __name__ == '__main__':</code>的作用是检测当前模块是否被直接运行（作为主程序），还是被导入到其他模块中作为一个模块使用<br><code>__name__</code>为python中的一个<strong>内置变量</strong>，当程序直接被执行时，其<code>__name__</code>的值为<code>'__main__'</code>，而当导入到其他模块中时，其<code>__name__ </code>值为自己的模块名。</p>\n</blockquote>\n<p><strong>3.5常用函数（待合并）</strong><br>①print()：将括号内的<strong>字符串</strong>显示在屏幕上<br>#所以要输出其他类型变量时，需要使用<code>str()</code>将其<strong>转换为字符串类型</strong><br>#占位符语法：</p>\n<ul>\n<li><code>print('%d + %d = %d' % (a, b, a + b))</code>,其中<code>%d</code>是整数的占位符，<code>%f</code>是小数的占位符，<code>%%</code>表示百分号（因为百分号代表了占位符，所以带占位符的字符串中要表示百分号必须写成<code>%%</code>），字符串之后的<code>%</code>后面跟的变量值会替换掉占位符然后输出到终端中。</li>\n<li><code>print('{0} * {1} = {2}'.format(a, b, a * b))</code>，其中<code>{0}</code>等都是占位符，<code>0</code>为format方法的<strong>索引</strong>，<strong>可省略，即按照默认顺序插入</strong>，还可以使用更多的格式选项，用于指定值的<strong>格式</strong>，还可以利用语法糖简化写法，即<code>print(f'{a} * {b} = {a * b}')</code></li>\n</ul>\n<p>②input()：等待用户输入文本，并按下<strong>回车键</strong>，将其转化为一个<strong>字符串</strong></p>\n<h3 id=\"4-面向对象编程\"><a href=\"#4-面向对象编程\" class=\"headerlink\" title=\"4.面向对象编程\"></a>4.面向对象编程</h3><p><strong>4.1类的定义</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">class Student(object):\n\n    # __init__是一个特殊方法用于在创建对象时进行初始化操作\n    # 通过这个方法我们可以为学生对象绑定name和age两个属性\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def study(self, course_name):\n        print('%s正在学习%s.' % (self.name, course_name))\n\n    # PEP 8要求标识符的名字用全小写多个单词用下划线连接\n    # 但是部分程序员和公司更倾向于使用驼峰命名法(驼峰标识)\n    def watch_movie(self):\n        if self.age &lt; 18:\n            print('%s只能观看《熊出没》.' % self.name)\n        else:\n            print('%s正在观看岛国爱情大电影.' % self.name)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>①在Python中可以使用<code>class</code>关键字定义类，其中<code>object</code>是所有类的基类，即<strong>顶级父类</strong>，这意味着在Python中定义的任何类都可以调用<code>object</code>类的方法（如<code>__init__</code>方法），并继承<code>object</code>类的特性<br>②类中的函数被称为<strong>方法</strong>，以描述对象的动态特征，其中方法的<strong>第一个参数</strong>通常被命名为<code>self</code>，Python会自动将对象绑定到第一个参数上<br>③<code>__init__</code>方法定义了类的<strong>属性</strong>，这些属性是描述类的关键</p>\n<p><strong>4.2对象的创建与使用</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">def main():\n    # 创建学生对象并指定姓名和年龄\n    stu1 = Student('骆昊', 38)\n    # 给对象发study消息\n    stu1.study('Python程序设计')\n    # 给对象发watch_av消息\n    stu1.watch_movie()\n    stu2 = Student('王大锤', 15)\n    stu2.study('思想品德')\n    stu2.watch_movie()\n\n\nif __name__ == '__main__':\n    main()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>①可以通过<code>对象.方法名/属性名</code>访问类的方法和属性</p>\n<blockquote>\n<p>对象的创建不使用<code>__init__</code>方法，而是使用<strong>类名</strong>创建，使用类名创建对象实际上是通过<strong>调用构造函数</strong>来创建对象</p>\n</blockquote>\n<p>②属性和方法的访问权限只有两种，也就是公开的和私有的，如果希望属性是私有的，在给属性命名时可以用<strong>两个下划线</strong>作为开头</p>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 但是，Python并没有从语法上严格保证私有属性或方法的私密性，它只是给私有的属性和方法换了一个名字来妨碍对它们的访问，事实上如果你知道更换名字的规则仍然可以访问到它们</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> python程序员遵循一种命名惯例就是让属性名以单下划线开头来表示属性是受保护的，本类之外的代码在访问这样的属性时应该要保持慎重</div>\n\n<p><strong>4.3property装饰器</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">class Person(object):\n\n    def __init__(self, name, age):\n        self._name = name\n        self._age = age\n\n    # 访问器 - getter方法\n    @property\n    def name(self):\n        return self._name\n\n    # 访问器 - getter方法\n    @property\n    def age(self):\n        return self._age\n\n    # 修改器 - setter方法\n    @age.setter\n    def age(self, age):\n        self._age = age\n\n    def play(self):\n        if self._age &lt;= 16:\n            print('%s正在玩飞行棋.' % self._name)\n        else:\n            print('%s正在玩斗地主.' % self._name)\n\n\ndef main():\n    person = Person('王大锤', 12)\n    person.play()\n    person.age = 22\n    person.play()\n    # person.name = '白元芳'  # AttributeError: can't set attribute\n\n\nif __name__ == '__main__':\n    main()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>①<code>@property</code>:将一个<strong>方法</strong>转换为相应的<strong>属性</strong>，将<strong>方法的调用方式</strong>变为<strong>属性的访问方式</strong></p>\n<blockquote>\n<p>具体而言，<code>@property</code>装饰器定义了一个<code>getter</code>方法，用于获取属性的值,如果没有<code>@property</code>的话，<code>person.age</code>应为<code>person.age()</code></p>\n</blockquote>\n<p>②在定义了<strong>访问器</strong>后,可以使用<code>age.setter</code>等装饰器定义对应的<code>setter</code>方法，记住要有<strong>对应的前缀</strong>，且方法名需要一致（即<code>age</code>）<br><strong>4.4静态方法和类方法：</strong>当类中需要一些方法，但是不是基于具体对象实例的，如在<strong>创建对象前</strong>验证其是否合理的方法<br>①静态方法：使用<code>@staticmethod</code>修饰器定义，直接通过<code>类名.方法名()</code>调用</p>\n<blockquote>\n<p>静态方法属于<strong>类本身</strong>，所以在定义时不需要<code>self</code>参数</p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">from math import sqrt\n\n\nclass Triangle(object):\n\n    def __init__(self, a, b, c):\n        self._a = a\n        self._b = b\n        self._c = c\n\n    @staticmethod\n    def is_valid(a, b, c):\n        return a + b &gt; c and b + c &gt; a and a + c &gt; b\n\n\ndef main():\n    a, b, c = 3, 4, 5\n    # 静态方法和类方法都是通过给类发消息来调用的\n    if Triangle.is_valid(a, b, c):\n        t = Triangle(a, b, c)\n    else:\n        print('无法构成三角形.')\n\n\nif __name__ == '__main__':\n    main()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>②类方法：使用<code>@classmethod</code>修饰器定义类方法，直接通过<code>类名.方法名()</code>调用</p>\n<blockquote>\n<p>方法的第一个参数约定名为<code>cls</code>，类似于<code>self</code>，但是<code>cls</code>代表是对应的类，允许在类方法内部访问<strong>类级别</strong>的属性和方法</p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">from time import time, localtime, sleep\n\n\nclass Clock(object):\n    \"\"\"数字时钟\"\"\"\n\n    def __init__(self, hour=0, minute=0, second=0):\n        self._hour = hour\n        self._minute = minute\n        self._second = second\n\n    @classmethod\n    def now(cls):\n        ctime = localtime(time())\n        return cls(ctime.tm_hour, ctime.tm_min, ctime.tm_sec)\n\n\ndef main():\n    # 通过类方法创建对象并获取系统时间\n    clock = Clock.now()\n\n\nif __name__ == '__main__':\n    main()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>4.5继承和继承</strong>：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">class Person(object):\n    \"\"\"人\"\"\"\n\n    def __init__(self, name, age):\n        self._name = name\n        self._age = age\n\n    @property\n    def name(self):\n        return self._name\n\n    @property\n    def age(self):\n        return self._age\n\n    @age.setter\n    def age(self, age):\n        self._age = age\n\n    def play(self):\n        print('%s正在愉快的玩耍.' % self._name)\n\n    def watch_av(self):\n        if self._age &gt;= 18:\n            print('%s正在观看爱情动作片.' % self._name)\n        else:\n            print('%s只能观看《熊出没》.' % self._name)\n\n\nclass Student(Person):\n    \"\"\"学生\"\"\"\n\n    def __init__(self, name, age, grade):\n        super().__init__(name, age)\n        self._grade = grade\n\n    @property\n    def grade(self):\n        return self._grade\n\n    @grade.setter\n    def grade(self, grade):\n        self._grade = grade\n\n    def study(self, course):\n        print('%s的%s正在学习%s.' % (self._grade, self._name, course))\n\n\nclass Teacher(Person):\n    \"\"\"老师\"\"\"\n\n    def __init__(self, name, age, title):\n        super().__init__(name, age)\n        self._title = title\n\n    @property\n    def title(self):\n        return self._title\n\n    @title.setter\n    def title(self, title):\n        self._title = title\n\n    def teach(self, course):\n        print('%s%s正在讲%s.' % (self._name, self._title, course))\n\n\ndef main():\n    stu = Student('王大锤', 15, '初三')\n    stu.study('数学')\n    stu.watch_av()\n    t = Teacher('骆昊', 38, '砖家')\n    t.teach('Python程序设计')\n    t.watch_av()\n\n\nif __name__ == '__main__':\n    main()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>①继承：子类除了继承父类提供的属性和方法，还可以定义自己<strong>特有</strong>的属性和方法，所以子类比父类拥有的更多的能力<br>②多态：子类在继承了父类的方法后，可以对父类已有的方法给出新的实现版本，不同的子类表现不同</p>\n<blockquote>\n<p>抽象类是一种专门让其他类继承的类，<strong>不能创建对应的对象</strong>，子类可以重写其中的<strong>抽象方法</strong>从而实现多态</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 通过abc模块的ABCMeta元类和abstractmethod包装器来达到抽象类的效果</div>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">from abc import ABCMeta, abstractmethod\n\n\nclass Pet(object, metaclass=ABCMeta):\n    \"\"\"宠物\"\"\"\n\n    def __init__(self, nickname):\n        self._nickname = nickname\n\n    @abstractmethod\n    def make_voice(self):\n        \"\"\"发出声音\"\"\"\n        pass\n\n\nclass Dog(Pet):\n    \"\"\"狗\"\"\"\n\n    def make_voice(self):\n        print('%s: 汪汪汪...' % self._nickname)\n\n\nclass Cat(Pet):\n    \"\"\"猫\"\"\"\n\n    def make_voice(self):\n        print('%s: 喵...喵...' % self._nickname)\n\n\ndef main():\n    pets = [Dog('旺财'), Cat('凯蒂'), Dog('大黄')]\n    for pet in pets:\n        pet.make_voice()\n\n\nif __name__ == '__main__':\n    main()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"5-列表\"><a href=\"#5-列表\" class=\"headerlink\" title=\"5.列表\"></a>5.列表</h3><p><strong>5.1声明</strong>：<code>列表名 = [表项1,...,表项n]</code></p>\n<blockquote>\n<p>表项的数据类型<strong>可以不是一致的</strong>，也可以是<strong>列表</strong>，如果全部都是大小相同列表的话，类似于C语言中的<strong>多维数组</strong></p>\n</blockquote>\n<p><strong>5.2访问</strong><br>①<code>列表名[i]</code>:访问列表中<strong>第i-1表项</strong></p>\n<blockquote>\n<p>python中<strong>有</strong>对应的<strong>下标检查</strong><br>当i前面有<strong>负号</strong>时，代表<strong>倒数</strong>第i个<br>当列表某个表项是列表时，如果想要访问其中元素，需要再次使用下标，即<code>列表名[i][j]</code></p>\n</blockquote>\n<p>②<code>列表名[i:j:n]</code>：访问列表的一部分（第i个下标到第j个下标,n为步长，默认为1），结果还是一个列表</p>\n<blockquote>\n<p>省略<strong>第一个下标</strong>相当于使用 0，或列表的<strong>开始</strong><br>省略<strong>第二个下标</strong>相当于使用列表的长度，意味着分片直至列表的<strong>末尾</strong><br>当n为<strong>负数</strong>时，表示从第j个下标到第i个下标，即<strong>反向切片</strong></p>\n</blockquote>\n<p><strong>5.3常用操作</strong><br>①操作符</p>\n<blockquote>\n<p><code>+</code>操作符可以<strong>连接</strong>两个列表，得到一个新列表，就像它将两个字符串合并成一个新字符串一样<br><code>*</code>操作符可以用于一个列表和一个整数，实现列表的<strong>复制</strong><br><code>del</code>语句将删除列表中下标处的值，表中被删除值后面的所有值，都将<strong>向前移动一个下标</strong><br><code>del spam[2]</code><br><code>in</code>和<code>not in</code>:连接两个值,一个要在列表中<strong>查找的值</strong>，以及待查找的<strong>列表</strong>。这些表达式将求值为<strong>布尔值</strong></p>\n</blockquote>\n<p>②常用方法</p>\n<blockquote>\n<p>index()：传入一个值，如果该值存在于列表中，就返回它<strong>第一次</strong>出现的下标<br>append()：将参数添加到列表<strong>末尾</strong><br>insert()：以在列表<strong>任意下标处</strong>插入一个值<br>remove()：将对应值从被调用的列表中删除<br>sort()：对于<code>数值</code>或<code>字符串</code>的列表，基于“ASCII字符顺序”排序</p>\n</blockquote>\n<p><strong>5.4元组和集合</strong><br>①元组：几乎与列表数据类型一样，但是元组输入时用<strong>圆括号()<strong>，而不是用方括号，且也是</strong>不可变数据类型</strong></p>\n<blockquote>\n<p>如果元组中只有<strong>一个值</strong>，你可以在括号内该值的后面跟上一个<strong>逗号</strong>，否则就是一个值，而不是包含一个值的元组<br>元组在创建<strong>时间</strong>和占用的<strong>空间</strong>上面都优于列表</p>\n</blockquote>\n<p>②集合：<code>set1 = {1, 2, 3, 3, 3, 2}</code>，是<strong>无序</strong>的可变数据类型</p>\n<blockquote>\n<p>不允许有重复元素，而且可以进行交集、并集、差集等运算</p>\n</blockquote>\n<p>③转换</p>\n<blockquote>\n</blockquote>\n<p><code>list()</code>：返回传递给它们的值的列表版本<br><code>tuple()</code>：返回传递给它们的值的元组版本<br><code>set()</code>：返回集合版本</p>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 在将可变数据类型传递给函数时，又不希望函数改变其值，可以在函数内部拷贝一份对应的值，这就需要使用copy模块的copy()函数（直接赋值传递的还是引用）</div>\n\n<h3 id=\"6-字典\"><a href=\"#6-字典\" class=\"headerlink\" title=\"6.字典\"></a>6.字典</h3><p><strong>6.1声明：</strong><code>字典名 = {键1:值1,...,键n:值n};</code></p>\n<blockquote>\n<p>字典的键相当于相当于列表的<strong>下标</strong>，但是列表的下标只能时整数，而字典的键可以是<strong>其他数据类型</strong>，比如说字符串<br>字典是<strong>无序</strong>的，只要键名和对应的值完全相同，两个字典就是完全相同的<br>字典的<strong>键</strong>不能重复</p>\n</blockquote>\n<p><strong>6.2常用操作：</strong><br>①访问：<code>字典名[键名]</code><br>②添加/修改键值对：<code>字典名[键名]=值</code><br>③删除键值对：<code>del 字典名[键名]</code><br>④判断是否存在：<code>键名 in 字典名</code></p>\n<p><strong>6.3常用方法：</strong><br>①<code>keys()</code>:返回<code>dict_keys</code>，类似于字典的键的列表<br>②<code>values()</code>：返回<code>dict_values</code>，类似于字典的值的列表<br>③<code>items()</code>：返回<code>dict_items</code>，类似于字典的键-值对的列表</p>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 这些返回值不能改变，常用于for循环判定条件中如for v in spam.values()用于遍历字典</div>\n<p>④<code>get()</code>：它有两个参数，要取得其值的<strong>键</strong>，以及如果该键不存在时，返回的<strong>备用值</strong><br>⑤<code>setdefault()</code>:为字典中某个键设置一个默认值，当该键没有任何值时使用它，传递给该方法的第一个参数，是要<strong>检查的键</strong>，第二个参数，是如果<strong>该键不存在时要设置的值</strong>，即<code>spam.setdefault('color', 'black')</code></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#计算一个字符串中每个字符出现的次数\nmessage = 'It was a bright cold day in April, and the clocks were striking thirteen.'\ncount = {}\n#for循环语句，即将character依次设置为message列表中的值\nfor character in message:\n  count.setdefault(character, 0)\n  count[character] = count[character] + 1\nprint(count)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"7-字符串\"><a href=\"#7-字符串\" class=\"headerlink\" title=\"7.字符串\"></a>7.字符串</h3><p><strong>7.1声明</strong><br>①以<strong>单引号</strong>开始和结束</p>\n<blockquote>\n<p>但是这样会导致字符串不能包含单引号，可以使用对应的<strong>转义字符</strong><code>\\'</code></p>\n</blockquote>\n<p>②以<strong>双引号</strong>开始和结束</p>\n<blockquote>\n<p>同理，不能包含双引号，可以使用对应的转义字符<code>\\\"</code></p>\n</blockquote>\n<p>③以<strong>3个单引号或3个双引号</strong>开始和结束，“三重引号”之间的所有<strong>引号、制表符或换行</strong>，都被认为是字符串的一部分缩进规则在这种字符串中不适用<br>④原始字符串：在字符串开始的<strong>引号之前加上r</strong>，完全忽略所有的转义字符，打印出字符串中所有的<strong>倒斜杠</strong></p>\n<blockquote>\n<p>字符串是<strong>不可变类型</strong>，可以看作是<strong>单个文本字符的元组（空格也算）</strong>，<code>name = 'cat'</code>相当于<code>name = ('c','a','t')</code></p>\n</blockquote>\n<p><strong>7.2常用方法</strong></p>\n<blockquote>\n<p><code>islower()/islower()</code>:如果字符串至少有一个字母，并且所有字母<strong>都是</strong>大写/小写,就会相应地返回布尔值 True。否则，该方法返回 False。<br><code>isalpha()</code>：如果字符串只包含字母，并且非空，返回True<br><code>isalnum()</code>：如果字符串只包含字母和数字，并且非空，返回True<br><code>isdecimal()</code>：如果字符串只包含数字字符，并且非空，返回 True<br><code>isspace()</code>：如果字符串只包含空格、制表符和换行，并且非空,返回 True<br><code>istitle()</code>:如果字符串仅包含以大写字母开头、后面都是小写字母的单词,返回 True<br><code>startswith()/endswith()</code>:如果它们所调用的字符串以该方法传入的字符串开始或结束,返回 True</p>\n</blockquote>\n<blockquote>\n<p><code>upper()/lower()</code>：将原字符串的所有字母都被相应地转换为大写/小写，非字母字符保持不变，返回一个<strong>新</strong>字符串，而不是将旧字符串修改<br>因为 upper()和 lower()字符串方法本身返回字符串，可以在返回的字符串上继续调用字符串方法,如<code>'Hello'.upper().lower()</code></p>\n</blockquote>\n<blockquote>\n<p><code>join()</code>:在一个字符串上调用，参数是一个字符串列表，返回一个字符串,返回的字符串由传入的列表中每个字符串连接而成。<br> <code>' '.join(['My', 'name', 'is', 'Simon'])</code>,返回结果是’My name is Simon’</p>\n</blockquote>\n<blockquote>\n<p><code>split()</code>：传入一个分割字符串，指定它按照不同的字符串分割<br><code>'MyABCnameABCisABCSimon'.split('ABC')返回值为['My', 'name', 'is', 'Simon']</code></p>\n</blockquote>\n<blockquote>\n<p><code>rjust()/ljust()/center()</code>:该方法的第一个参数为<strong>填充后</strong>的字符串的长度，第二个参数为<strong>填充使用的字符</strong>，默认是空格，分别为<br><code>'Hello'.rjust(20, '*')'***************Hello'</code><br><code>'Hello'.center(20, '=')'=======Hello========'</code></p>\n</blockquote>\n<blockquote>\n<p><code>strip()/lstrip()/rstrip()</code>:删除字符串左边、右边或两边的空白字符（空格、制表符和换行符）有一个可选的字符串参数，指定两边的哪些<strong>字符</strong>应该删除（注意，删除的不一定和参数完全符合，可能是他们的组合）</p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">spam = 'SpamSpamBaconSpamEggsSpamSpam'\nspam.strip('ampS')\n'BaconSpamEggs'<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><code>pyperclip</code>模块有<code>copy()</code>和<code>paste()</code>函数，可以向计算机的剪贴板发送文本，或从它接收文本,如果你的程序之外的某个程序改变了剪贴板的内容，<code>paste()</code>函数就会返回它</p>\n</blockquote>\n<p>7.生成式和生成器语法<br><a href=\"https://www.cnblogs.com/yyds/p/6281453.html\">https://www.cnblogs.com/yyds/p/6281453.html</a></p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"python学习笔记（一）\"><a href=\"#python学习笔记（一）\" class=\"headerlink\" title=\"python学习笔记（一）\"></a>python学习笔记（一）</h1><h2 id=\"python启蒙\"><a href=\"#python启蒙\" class=\"headerlink\" title=\"python启蒙\"></a>python启蒙</h2><h3 id=\"1-基本元素\"><a href=\"#1-基本元素\" class=\"headerlink\" title=\"1.基本元素\"></a>1.基本元素</h3><p><strong>1.1表达式</strong>：python中最基本的执行结构，由“<strong>对象</strong>”和<strong>操作符</strong>组成，并返回<strong>一个对象</strong><br><strong>1.2对象</strong>：即被存储的数据，类似于C语言中的字面值，如<code>1</code>、<code>&quot;cat&quot;</code>、<code>1.23456e2</code>等<br>①当一个对象被声明后，会给其分配对应的ID（地址）和内存，且数据类型不能更改<br>②基本数据类型：整型（int）、浮点型（float）、字符串（strs）、布尔类型（bool）、复数类型（a+bj）</p>\n<blockquote>\n<p>可以使用<code>type()</code>检查数据类型</p>\n</blockquote>\n<p>③可变类型与不可变类型</p>\n<blockquote>\n<p>不可变类型是指对象一旦创建，内容就<strong>不能被更改</strong>，常见的不可变类型包括整数、浮点数、布尔值、字符串和元组等，其对应的变量只能被<strong>覆盖</strong></p>\n</blockquote>\n<blockquote>\n<p>可变类型是指变量的值可以被更改，常见的可变类型包括列表、集合和字典等</p>\n</blockquote>\n<p><strong>1.3变量</strong><br>①取名规则</p>\n<blockquote>\n<p>只能是一个词<br>只能包含<strong>字母、数字和下划线</strong><br>不能以数字开头<br>不能使用<strong>关键词</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 一个好的变量名包含了数据对应的信息，常见的命名格式有my_cat和MyCat</div>\n\n<p>②变量的本质</p>\n<blockquote>\n<p>变量是对象的一个<strong>引用</strong>，本身也占用一定的内存（存储对象的地址）<br><strong>没有变量</strong>指向的<strong>对象</strong>会被<strong>回收</strong>（垃圾回收机制）<br>变量名代表的内存地址是<strong>变化的</strong>，是<strong>上次赋值时</strong>新数据所在的内存的地址，而C语言<strong>变量名所代表的地址是不变的</strong>，<strong>变化的是该地址内存单元的数据</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 所以说如果两个变量指向是同一个可变类型对象，改变其中一个，另一个也随之改变</div>\n<p><img src=\"/image/python_7.png\" alt=\"变量的本质\"></p>\n<p><strong>1.4操作符</strong><br>①数字操作符<br><img src=\"/image/python_1.png\" alt=\"数字操作符\"></p>\n<blockquote>\n<p><code>+</code>可以用于<strong>拼接字符串</strong>，比如<code>&#39;a&#39;+&#39;b&#39;</code>结果是<code>&#39;ab&#39;</code><br><code>*</code>可以用于<strong>字符串复制</strong>，比如<code>&#39;a&#39;*5</code>结果时<code>&#39;aaaaa&#39;</code></p>\n</blockquote>\n<p>②比较操作符<br><img src=\"/image/python_3.png\" alt=\"比较操作符\"></p>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 注意<br>整型和浮点型之间是可以使用==正常比较的，但是整型、浮点型和字符串使用==只能得到False<br>>、<、≥、≤只能用于整型和浮点型</div>\n\n\n<p>③增强的赋值操作符<br><img src=\"/image/python_4.png\" alt=\"赋值操作符\"><br>④布尔操作符：<code>and</code>、<code>or</code>、<code>not</code></p>\n<blockquote>\n<p><code>not</code>优先级最高，随后是<code>and</code>，最后是<code>or</code></p>\n</blockquote>\n<p><strong>1.5注释</strong><br>①单行注释：以<code>#</code>开头<br>②多行注释：用三个单引号&#x2F;双引号包围<br><strong>1.6类型转换</strong><br>①自动类型转换</p>\n<blockquote>\n<p>将一种类型的数据<strong>赋值</strong>给另外一种类型的变量时，<strong>表达式右边</strong>的类型<strong>转换为左边</strong>变量的类型<br>在不同类型的<strong>混合运算</strong>中，将参与运算的所有数据先转换为<strong>同一种类型</strong>，然后再进行计算</p>\n</blockquote>\n<p><img src=\"/image/python_2.png\" alt=\"混合运算下的类型转换\"><br>②强制类型转换</p>\n<blockquote>\n<p><code>str()</code>：转化为字符串类型<br><code>int()</code>：转化为整数类型<br><code>float()</code>：转化为浮点数类型</p>\n</blockquote>\n<h3 id=\"2-控制流\"><a href=\"#2-控制流\" class=\"headerlink\" title=\"2.控制流\"></a>2.控制流</h3><p><strong>2.1基本格式</strong><br>①语句关键词后面的<strong>冒号</strong>，以及python使用<strong>换行符</strong>而不是分号作为语句终止符<br>②python的代码块不用花括号划分范围，而是<strong>根据代码的缩进</strong></p>\n<blockquote>\n<p>缩进<strong>增加</strong>时，代码块<strong>开始</strong><br>代码块可以包含其他代码块,缩进减少为零，或减<strong>少为外面包围代码块的缩进，代码块就结束了</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 通常以四个空格为一个缩进，不要使用制表键</div>\n\n<p><strong>2.2条件语句</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">if(条件): #条件为结果为布尔值的表达式\n  statement\nelif(条件):\n  statement\nelse:\n  statement<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 一旦一个语句的条件为Ture，后面的语句会被忽略，所以要注意语句的顺序，或者说清晰化条件的范围，使其之间没有交集</div>\n\n<p><strong>2.3循环语句</strong><br>①<code>while</code>循环语句</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">while(条件):\n  statement<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>②<code>for</code>循环语句</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">for 控制变量 in range(): \n  statement<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<blockquote>\n<p>缺省情况下，控制变量被初始化为0<br>在Python中，下划线<code>_</code>通常用作一个无用的变量名称，常用做控制变量的名称</p>\n</blockquote>\n<p><strong>2.4range函数</strong><br>①<code>range(a)</code>：0至<strong>a-1</strong>，取不到a<br>②<code>range(a,b)</code>：a至<strong>b-1</strong>，步长为1<br>③<code>range(a,b,i)</code>：a至<strong>b-1</strong>,步长为i</p>\n<blockquote>\n<p>range()的返回值是类似于<strong>列表</strong>的值（但是不是列表），所以也可以将循环中的<code>range()</code>换为一个列表，在每次迭代中，让变量<strong>依次</strong>设置为<strong>列表中的值</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 一个常见的Python技巧，是在for循环中使用range(len(someList))，迭代列表的每一个下标</div>\n\n\n<p><strong>2.5循环控制语句</strong><br>①break：遇到<code>break</code>语句，马上退出循环<br>②continue：遇到<code>continue</code>语句，马上跳回到循环开始处，重新对循环条件求值</p>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 可以结合条件语句对循环进行控制</div>\n\n<h3 id=\"3-函数\"><a href=\"#3-函数\" class=\"headerlink\" title=\"3.函数\"></a>3.函数</h3><p><strong>3.1格式</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">def 函数名(变元n):\n  statement\n  return expression #可以是变量，也可以是表达式\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>①变元即形参<br>②<code>None</code>是<strong>NoneType数据类型</strong>的唯一值，代表没有值，相当于C中的<code>void</code><br>③关键字参数：某些函数有可选的关键字参数，在函数调用时可以指定，相当于修改函数的<strong>默认设置</strong></p>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 如果需要传递多个同一位置的关键字参数，可以采用 | 管道命令将这些参数连接</div>\n<p>④函数的参数可以有<strong>默认值</strong>，也支持使用<strong>可变参数</strong>（类型、个数均可变），所以Python并<strong>不需要</strong>像其他语言一样支持<strong>函数的重载</strong></p>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 未知个数参数可以使用args关键字实现</div>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 在参数名前面的*表示args是一个可变参数\ndef add(*args):\n    total &#x3D; 0\n    for val in args:\n        total +&#x3D; val\n    return total\n\n\n# 在调用add函数时可以传入0个或多个参数\nprint(add())\nprint(add(1))\nprint(add(1, 2))\nprint(add(1, 2, 3))\nprint(add(1, 3, 5, 7, 9))<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>3.2作用域</strong><br>①局部作用域：在被调用<strong>函数内赋值</strong>（注意，如果在函数内没有对其进进行赋值，则为全局变量）的变量，局部作用域在<strong>函数被调用</strong>时创建，在<strong>函数返回时</strong>销毁<br>②全局作用域：在所有<strong>函数之外</strong>赋值的变量，属于<strong>全局作用域</strong>，全局作用域在<strong>程序开始时</strong>创建，在<strong>程序终止时</strong>销毁<br>③嵌套作用域：当一个函数1内部有另一个函数2时，对于函数1内部的函数2来说，函数1中的变量属于函数2的嵌套作用域<br>④内置作用域：Python内置的那些<strong>标识符</strong></p>\n<blockquote>\n<p><strong>联系</strong><br>内置作用域→全局作用域→嵌套作用域→局部作用域，从左往右依次内推，内部的作用域可以访问外部作用域中的变量，但是外部作用域不能访问内部作用域的变量，局部作用域不能访问<strong>其他局部作用域</strong>的变量<br>如果在不同的作用域中，你可以用相同的名字命名不同的变量<br>可以使用<code>global</code>关键字修饰变量使其变为<strong>全局变量</strong><br>可以使用<code>nonlocal</code>关键字修饰变量使其变为<strong>嵌套作用域变量</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 尽量减少对全局变量的使用，因为全局变量的作用域和影响过于广泛，可能会发生意料之外的修改和使用，除此之外全局变量比局部变量拥有更长的生命周期，可能导致对象占用的内存长时间无法被垃圾回收</div>\n<p><strong>3.3异常处理</strong>：捕捉<strong>函数内部某些语句</strong>的错误<br>①<code>try</code>语句：将可<strong>能出错的语句</strong>放在<code>try</code>之后，当这些语句出错后，会立马跳到<code>except</code>语句</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">try:\n  statement<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>②<code>except</code>语句：后面常接一些错误提醒的<code>print</code>语句</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">except 错误名:\n  print()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>③<code>finally</code>语句：<code>finally</code>块的代码不论程序正常还是异常<strong>都</strong>会执行到</p>\n<blockquote>\n<p>该语句不是必须的，通常用于执行一些必要的<strong>清理操作</strong>，如关闭文件、释放资源、关闭数据库连接等</p>\n</blockquote>\n<p><strong>3.4模块</strong><br>①导入模块：<code>import 模块名,模块名n</code><br>②调用模块中函数&#x2F;方法：模块名.函数名&#x2F;方法名</p>\n<blockquote>\n<p>模块类似于C++中的命名空间，可以<strong>防止命名冲突</strong>，同时也封装了代码</p>\n</blockquote>\n<p>③模块的测试：写完自定义的模块之后，都会写一个测试代码，<strong>直接运行</strong>该模块，检验一些模块中各个功能是否能够成功运行</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">def c2f(cel):\n    fah &#x3D; cel * 1.8 + 32\n    return fah\ndef f2c(fah):\n    cel &#x3D; (fah - 32) &#x2F; 1.8\n    return cel\ndef test():\n    print(&quot;测试数据：0 摄氏度 &#x3D; %.2f 华氏度&quot; % c2f(0))\n    print(&quot;测试数据：0 华氏度 &#x3D; %.2f 摄氏度&quot; % f2c(0))\nif __name__ &#x3D;&#x3D; &#39;__main__&#39;:\ntest()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>其中<code>if __name__ == &#39;__main__&#39;:</code>的作用是检测当前模块是否被直接运行（作为主程序），还是被导入到其他模块中作为一个模块使用<br><code>__name__</code>为python中的一个<strong>内置变量</strong>，当程序直接被执行时，其<code>__name__</code>的值为<code>&#39;__main__&#39;</code>，而当导入到其他模块中时，其<code>__name__ </code>值为自己的模块名。</p>\n</blockquote>\n<p><strong>3.5常用函数（待合并）</strong><br>①print()：将括号内的<strong>字符串</strong>显示在屏幕上<br>#所以要输出其他类型变量时，需要使用<code>str()</code>将其<strong>转换为字符串类型</strong><br>#占位符语法：</p>\n<ul>\n<li><code>print(&#39;%d + %d = %d&#39; % (a, b, a + b))</code>,其中<code>%d</code>是整数的占位符，<code>%f</code>是小数的占位符，<code>%%</code>表示百分号（因为百分号代表了占位符，所以带占位符的字符串中要表示百分号必须写成<code>%%</code>），字符串之后的<code>%</code>后面跟的变量值会替换掉占位符然后输出到终端中。</li>\n<li><code>print(&#39;&#123;0&#125; * &#123;1&#125; = &#123;2&#125;&#39;.format(a, b, a * b))</code>，其中<code>&#123;0&#125;</code>等都是占位符，<code>0</code>为format方法的<strong>索引</strong>，<strong>可省略，即按照默认顺序插入</strong>，还可以使用更多的格式选项，用于指定值的<strong>格式</strong>，还可以利用语法糖简化写法，即<code>print(f&#39;&#123;a&#125; * &#123;b&#125; = &#123;a * b&#125;&#39;)</code></li>\n</ul>\n<p>②input()：等待用户输入文本，并按下<strong>回车键</strong>，将其转化为一个<strong>字符串</strong></p>\n<h3 id=\"4-面向对象编程\"><a href=\"#4-面向对象编程\" class=\"headerlink\" title=\"4.面向对象编程\"></a>4.面向对象编程</h3><p><strong>4.1类的定义</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">class Student(object):\n\n    # __init__是一个特殊方法用于在创建对象时进行初始化操作\n    # 通过这个方法我们可以为学生对象绑定name和age两个属性\n    def __init__(self, name, age):\n        self.name &#x3D; name\n        self.age &#x3D; age\n\n    def study(self, course_name):\n        print(&#39;%s正在学习%s.&#39; % (self.name, course_name))\n\n    # PEP 8要求标识符的名字用全小写多个单词用下划线连接\n    # 但是部分程序员和公司更倾向于使用驼峰命名法(驼峰标识)\n    def watch_movie(self):\n        if self.age &lt; 18:\n            print(&#39;%s只能观看《熊出没》.&#39; % self.name)\n        else:\n            print(&#39;%s正在观看岛国爱情大电影.&#39; % self.name)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>①在Python中可以使用<code>class</code>关键字定义类，其中<code>object</code>是所有类的基类，即<strong>顶级父类</strong>，这意味着在Python中定义的任何类都可以调用<code>object</code>类的方法（如<code>__init__</code>方法），并继承<code>object</code>类的特性<br>②类中的函数被称为<strong>方法</strong>，以描述对象的动态特征，其中方法的<strong>第一个参数</strong>通常被命名为<code>self</code>，Python会自动将对象绑定到第一个参数上<br>③<code>__init__</code>方法定义了类的<strong>属性</strong>，这些属性是描述类的关键</p>\n<p><strong>4.2对象的创建与使用</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">def main():\n    # 创建学生对象并指定姓名和年龄\n    stu1 &#x3D; Student(&#39;骆昊&#39;, 38)\n    # 给对象发study消息\n    stu1.study(&#39;Python程序设计&#39;)\n    # 给对象发watch_av消息\n    stu1.watch_movie()\n    stu2 &#x3D; Student(&#39;王大锤&#39;, 15)\n    stu2.study(&#39;思想品德&#39;)\n    stu2.watch_movie()\n\n\nif __name__ &#x3D;&#x3D; &#39;__main__&#39;:\n    main()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>①可以通过<code>对象.方法名/属性名</code>访问类的方法和属性</p>\n<blockquote>\n<p>对象的创建不使用<code>__init__</code>方法，而是使用<strong>类名</strong>创建，使用类名创建对象实际上是通过<strong>调用构造函数</strong>来创建对象</p>\n</blockquote>\n<p>②属性和方法的访问权限只有两种，也就是公开的和私有的，如果希望属性是私有的，在给属性命名时可以用<strong>两个下划线</strong>作为开头</p>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 但是，Python并没有从语法上严格保证私有属性或方法的私密性，它只是给私有的属性和方法换了一个名字来妨碍对它们的访问，事实上如果你知道更换名字的规则仍然可以访问到它们</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> python程序员遵循一种命名惯例就是让属性名以单下划线开头来表示属性是受保护的，本类之外的代码在访问这样的属性时应该要保持慎重</div>\n\n<p><strong>4.3property装饰器</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">class Person(object):\n\n    def __init__(self, name, age):\n        self._name &#x3D; name\n        self._age &#x3D; age\n\n    # 访问器 - getter方法\n    @property\n    def name(self):\n        return self._name\n\n    # 访问器 - getter方法\n    @property\n    def age(self):\n        return self._age\n\n    # 修改器 - setter方法\n    @age.setter\n    def age(self, age):\n        self._age &#x3D; age\n\n    def play(self):\n        if self._age &lt;&#x3D; 16:\n            print(&#39;%s正在玩飞行棋.&#39; % self._name)\n        else:\n            print(&#39;%s正在玩斗地主.&#39; % self._name)\n\n\ndef main():\n    person &#x3D; Person(&#39;王大锤&#39;, 12)\n    person.play()\n    person.age &#x3D; 22\n    person.play()\n    # person.name &#x3D; &#39;白元芳&#39;  # AttributeError: can&#39;t set attribute\n\n\nif __name__ &#x3D;&#x3D; &#39;__main__&#39;:\n    main()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>①<code>@property</code>:将一个<strong>方法</strong>转换为相应的<strong>属性</strong>，将<strong>方法的调用方式</strong>变为<strong>属性的访问方式</strong></p>\n<blockquote>\n<p>具体而言，<code>@property</code>装饰器定义了一个<code>getter</code>方法，用于获取属性的值,如果没有<code>@property</code>的话，<code>person.age</code>应为<code>person.age()</code></p>\n</blockquote>\n<p>②在定义了<strong>访问器</strong>后,可以使用<code>age.setter</code>等装饰器定义对应的<code>setter</code>方法，记住要有<strong>对应的前缀</strong>，且方法名需要一致（即<code>age</code>）<br><strong>4.4静态方法和类方法：</strong>当类中需要一些方法，但是不是基于具体对象实例的，如在<strong>创建对象前</strong>验证其是否合理的方法<br>①静态方法：使用<code>@staticmethod</code>修饰器定义，直接通过<code>类名.方法名()</code>调用</p>\n<blockquote>\n<p>静态方法属于<strong>类本身</strong>，所以在定义时不需要<code>self</code>参数</p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">from math import sqrt\n\n\nclass Triangle(object):\n\n    def __init__(self, a, b, c):\n        self._a &#x3D; a\n        self._b &#x3D; b\n        self._c &#x3D; c\n\n    @staticmethod\n    def is_valid(a, b, c):\n        return a + b &gt; c and b + c &gt; a and a + c &gt; b\n\n\ndef main():\n    a, b, c &#x3D; 3, 4, 5\n    # 静态方法和类方法都是通过给类发消息来调用的\n    if Triangle.is_valid(a, b, c):\n        t &#x3D; Triangle(a, b, c)\n    else:\n        print(&#39;无法构成三角形.&#39;)\n\n\nif __name__ &#x3D;&#x3D; &#39;__main__&#39;:\n    main()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>②类方法：使用<code>@classmethod</code>修饰器定义类方法，直接通过<code>类名.方法名()</code>调用</p>\n<blockquote>\n<p>方法的第一个参数约定名为<code>cls</code>，类似于<code>self</code>，但是<code>cls</code>代表是对应的类，允许在类方法内部访问<strong>类级别</strong>的属性和方法</p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">from time import time, localtime, sleep\n\n\nclass Clock(object):\n    &quot;&quot;&quot;数字时钟&quot;&quot;&quot;\n\n    def __init__(self, hour&#x3D;0, minute&#x3D;0, second&#x3D;0):\n        self._hour &#x3D; hour\n        self._minute &#x3D; minute\n        self._second &#x3D; second\n\n    @classmethod\n    def now(cls):\n        ctime &#x3D; localtime(time())\n        return cls(ctime.tm_hour, ctime.tm_min, ctime.tm_sec)\n\n\ndef main():\n    # 通过类方法创建对象并获取系统时间\n    clock &#x3D; Clock.now()\n\n\nif __name__ &#x3D;&#x3D; &#39;__main__&#39;:\n    main()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>4.5继承和继承</strong>：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">class Person(object):\n    &quot;&quot;&quot;人&quot;&quot;&quot;\n\n    def __init__(self, name, age):\n        self._name &#x3D; name\n        self._age &#x3D; age\n\n    @property\n    def name(self):\n        return self._name\n\n    @property\n    def age(self):\n        return self._age\n\n    @age.setter\n    def age(self, age):\n        self._age &#x3D; age\n\n    def play(self):\n        print(&#39;%s正在愉快的玩耍.&#39; % self._name)\n\n    def watch_av(self):\n        if self._age &gt;&#x3D; 18:\n            print(&#39;%s正在观看爱情动作片.&#39; % self._name)\n        else:\n            print(&#39;%s只能观看《熊出没》.&#39; % self._name)\n\n\nclass Student(Person):\n    &quot;&quot;&quot;学生&quot;&quot;&quot;\n\n    def __init__(self, name, age, grade):\n        super().__init__(name, age)\n        self._grade &#x3D; grade\n\n    @property\n    def grade(self):\n        return self._grade\n\n    @grade.setter\n    def grade(self, grade):\n        self._grade &#x3D; grade\n\n    def study(self, course):\n        print(&#39;%s的%s正在学习%s.&#39; % (self._grade, self._name, course))\n\n\nclass Teacher(Person):\n    &quot;&quot;&quot;老师&quot;&quot;&quot;\n\n    def __init__(self, name, age, title):\n        super().__init__(name, age)\n        self._title &#x3D; title\n\n    @property\n    def title(self):\n        return self._title\n\n    @title.setter\n    def title(self, title):\n        self._title &#x3D; title\n\n    def teach(self, course):\n        print(&#39;%s%s正在讲%s.&#39; % (self._name, self._title, course))\n\n\ndef main():\n    stu &#x3D; Student(&#39;王大锤&#39;, 15, &#39;初三&#39;)\n    stu.study(&#39;数学&#39;)\n    stu.watch_av()\n    t &#x3D; Teacher(&#39;骆昊&#39;, 38, &#39;砖家&#39;)\n    t.teach(&#39;Python程序设计&#39;)\n    t.watch_av()\n\n\nif __name__ &#x3D;&#x3D; &#39;__main__&#39;:\n    main()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>①继承：子类除了继承父类提供的属性和方法，还可以定义自己<strong>特有</strong>的属性和方法，所以子类比父类拥有的更多的能力<br>②多态：子类在继承了父类的方法后，可以对父类已有的方法给出新的实现版本，不同的子类表现不同</p>\n<blockquote>\n<p>抽象类是一种专门让其他类继承的类，<strong>不能创建对应的对象</strong>，子类可以重写其中的<strong>抽象方法</strong>从而实现多态</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 通过abc模块的ABCMeta元类和abstractmethod包装器来达到抽象类的效果</div>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">from abc import ABCMeta, abstractmethod\n\n\nclass Pet(object, metaclass&#x3D;ABCMeta):\n    &quot;&quot;&quot;宠物&quot;&quot;&quot;\n\n    def __init__(self, nickname):\n        self._nickname &#x3D; nickname\n\n    @abstractmethod\n    def make_voice(self):\n        &quot;&quot;&quot;发出声音&quot;&quot;&quot;\n        pass\n\n\nclass Dog(Pet):\n    &quot;&quot;&quot;狗&quot;&quot;&quot;\n\n    def make_voice(self):\n        print(&#39;%s: 汪汪汪...&#39; % self._nickname)\n\n\nclass Cat(Pet):\n    &quot;&quot;&quot;猫&quot;&quot;&quot;\n\n    def make_voice(self):\n        print(&#39;%s: 喵...喵...&#39; % self._nickname)\n\n\ndef main():\n    pets &#x3D; [Dog(&#39;旺财&#39;), Cat(&#39;凯蒂&#39;), Dog(&#39;大黄&#39;)]\n    for pet in pets:\n        pet.make_voice()\n\n\nif __name__ &#x3D;&#x3D; &#39;__main__&#39;:\n    main()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"5-列表\"><a href=\"#5-列表\" class=\"headerlink\" title=\"5.列表\"></a>5.列表</h3><p><strong>5.1声明</strong>：<code>列表名 = [表项1,...,表项n]</code></p>\n<blockquote>\n<p>表项的数据类型<strong>可以不是一致的</strong>，也可以是<strong>列表</strong>，如果全部都是大小相同列表的话，类似于C语言中的<strong>多维数组</strong></p>\n</blockquote>\n<p><strong>5.2访问</strong><br>①<code>列表名[i]</code>:访问列表中<strong>第i-1表项</strong></p>\n<blockquote>\n<p>python中<strong>有</strong>对应的<strong>下标检查</strong><br>当i前面有<strong>负号</strong>时，代表<strong>倒数</strong>第i个<br>当列表某个表项是列表时，如果想要访问其中元素，需要再次使用下标，即<code>列表名[i][j]</code></p>\n</blockquote>\n<p>②<code>列表名[i:j:n]</code>：访问列表的一部分（第i个下标到第j个下标,n为步长，默认为1），结果还是一个列表</p>\n<blockquote>\n<p>省略<strong>第一个下标</strong>相当于使用 0，或列表的<strong>开始</strong><br>省略<strong>第二个下标</strong>相当于使用列表的长度，意味着分片直至列表的<strong>末尾</strong><br>当n为<strong>负数</strong>时，表示从第j个下标到第i个下标，即<strong>反向切片</strong></p>\n</blockquote>\n<p><strong>5.3常用操作</strong><br>①操作符</p>\n<blockquote>\n<p><code>+</code>操作符可以<strong>连接</strong>两个列表，得到一个新列表，就像它将两个字符串合并成一个新字符串一样<br><code>*</code>操作符可以用于一个列表和一个整数，实现列表的<strong>复制</strong><br><code>del</code>语句将删除列表中下标处的值，表中被删除值后面的所有值，都将<strong>向前移动一个下标</strong><br><code>del spam[2]</code><br><code>in</code>和<code>not in</code>:连接两个值,一个要在列表中<strong>查找的值</strong>，以及待查找的<strong>列表</strong>。这些表达式将求值为<strong>布尔值</strong></p>\n</blockquote>\n<p>②常用方法</p>\n<blockquote>\n<p>index()：传入一个值，如果该值存在于列表中，就返回它<strong>第一次</strong>出现的下标<br>append()：将参数添加到列表<strong>末尾</strong><br>insert()：以在列表<strong>任意下标处</strong>插入一个值<br>remove()：将对应值从被调用的列表中删除<br>sort()：对于<code>数值</code>或<code>字符串</code>的列表，基于“ASCII字符顺序”排序</p>\n</blockquote>\n<p><strong>5.4元组和集合</strong><br>①元组：几乎与列表数据类型一样，但是元组输入时用<strong>圆括号()<strong>，而不是用方括号，且也是</strong>不可变数据类型</strong></p>\n<blockquote>\n<p>如果元组中只有<strong>一个值</strong>，你可以在括号内该值的后面跟上一个<strong>逗号</strong>，否则就是一个值，而不是包含一个值的元组<br>元组在创建<strong>时间</strong>和占用的<strong>空间</strong>上面都优于列表</p>\n</blockquote>\n<p>②集合：<code>set1 = &#123;1, 2, 3, 3, 3, 2&#125;</code>，是<strong>无序</strong>的可变数据类型</p>\n<blockquote>\n<p>不允许有重复元素，而且可以进行交集、并集、差集等运算</p>\n</blockquote>\n<p>③转换</p>\n<blockquote>\n</blockquote>\n<p><code>list()</code>：返回传递给它们的值的列表版本<br><code>tuple()</code>：返回传递给它们的值的元组版本<br><code>set()</code>：返回集合版本</p>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 在将可变数据类型传递给函数时，又不希望函数改变其值，可以在函数内部拷贝一份对应的值，这就需要使用copy模块的copy()函数（直接赋值传递的还是引用）</div>\n\n<h3 id=\"6-字典\"><a href=\"#6-字典\" class=\"headerlink\" title=\"6.字典\"></a>6.字典</h3><p><strong>6.1声明：</strong><code>字典名 = &#123;键1:值1,...,键n:值n&#125;;</code></p>\n<blockquote>\n<p>字典的键相当于相当于列表的<strong>下标</strong>，但是列表的下标只能时整数，而字典的键可以是<strong>其他数据类型</strong>，比如说字符串<br>字典是<strong>无序</strong>的，只要键名和对应的值完全相同，两个字典就是完全相同的<br>字典的<strong>键</strong>不能重复</p>\n</blockquote>\n<p><strong>6.2常用操作：</strong><br>①访问：<code>字典名[键名]</code><br>②添加&#x2F;修改键值对：<code>字典名[键名]=值</code><br>③删除键值对：<code>del 字典名[键名]</code><br>④判断是否存在：<code>键名 in 字典名</code></p>\n<p><strong>6.3常用方法：</strong><br>①<code>keys()</code>:返回<code>dict_keys</code>，类似于字典的键的列表<br>②<code>values()</code>：返回<code>dict_values</code>，类似于字典的值的列表<br>③<code>items()</code>：返回<code>dict_items</code>，类似于字典的键-值对的列表</p>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 这些返回值不能改变，常用于for循环判定条件中如for v in spam.values()用于遍历字典</div>\n<p>④<code>get()</code>：它有两个参数，要取得其值的<strong>键</strong>，以及如果该键不存在时，返回的<strong>备用值</strong><br>⑤<code>setdefault()</code>:为字典中某个键设置一个默认值，当该键没有任何值时使用它，传递给该方法的第一个参数，是要<strong>检查的键</strong>，第二个参数，是如果<strong>该键不存在时要设置的值</strong>，即<code>spam.setdefault(&#39;color&#39;, &#39;black&#39;)</code></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#计算一个字符串中每个字符出现的次数\nmessage &#x3D; &#39;It was a bright cold day in April, and the clocks were striking thirteen.&#39;\ncount &#x3D; &#123;&#125;\n#for循环语句，即将character依次设置为message列表中的值\nfor character in message:\n  count.setdefault(character, 0)\n  count[character] &#x3D; count[character] + 1\nprint(count)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"7-字符串\"><a href=\"#7-字符串\" class=\"headerlink\" title=\"7.字符串\"></a>7.字符串</h3><p><strong>7.1声明</strong><br>①以<strong>单引号</strong>开始和结束</p>\n<blockquote>\n<p>但是这样会导致字符串不能包含单引号，可以使用对应的<strong>转义字符</strong><code>\\&#39;</code></p>\n</blockquote>\n<p>②以<strong>双引号</strong>开始和结束</p>\n<blockquote>\n<p>同理，不能包含双引号，可以使用对应的转义字符<code>\\&quot;</code></p>\n</blockquote>\n<p>③以<strong>3个单引号或3个双引号</strong>开始和结束，“三重引号”之间的所有<strong>引号、制表符或换行</strong>，都被认为是字符串的一部分缩进规则在这种字符串中不适用<br>④原始字符串：在字符串开始的<strong>引号之前加上r</strong>，完全忽略所有的转义字符，打印出字符串中所有的<strong>倒斜杠</strong></p>\n<blockquote>\n<p>字符串是<strong>不可变类型</strong>，可以看作是<strong>单个文本字符的元组（空格也算）</strong>，<code>name = &#39;cat&#39;</code>相当于<code>name = (&#39;c&#39;,&#39;a&#39;,&#39;t&#39;)</code></p>\n</blockquote>\n<p><strong>7.2常用方法</strong></p>\n<blockquote>\n<p><code>islower()/islower()</code>:如果字符串至少有一个字母，并且所有字母<strong>都是</strong>大写&#x2F;小写,就会相应地返回布尔值 True。否则，该方法返回 False。<br><code>isalpha()</code>：如果字符串只包含字母，并且非空，返回True<br><code>isalnum()</code>：如果字符串只包含字母和数字，并且非空，返回True<br><code>isdecimal()</code>：如果字符串只包含数字字符，并且非空，返回 True<br><code>isspace()</code>：如果字符串只包含空格、制表符和换行，并且非空,返回 True<br><code>istitle()</code>:如果字符串仅包含以大写字母开头、后面都是小写字母的单词,返回 True<br><code>startswith()/endswith()</code>:如果它们所调用的字符串以该方法传入的字符串开始或结束,返回 True</p>\n</blockquote>\n<blockquote>\n<p><code>upper()/lower()</code>：将原字符串的所有字母都被相应地转换为大写&#x2F;小写，非字母字符保持不变，返回一个<strong>新</strong>字符串，而不是将旧字符串修改<br>因为 upper()和 lower()字符串方法本身返回字符串，可以在返回的字符串上继续调用字符串方法,如<code>&#39;Hello&#39;.upper().lower()</code></p>\n</blockquote>\n<blockquote>\n<p><code>join()</code>:在一个字符串上调用，参数是一个字符串列表，返回一个字符串,返回的字符串由传入的列表中每个字符串连接而成。<br> <code>&#39; &#39;.join([&#39;My&#39;, &#39;name&#39;, &#39;is&#39;, &#39;Simon&#39;])</code>,返回结果是’My name is Simon’</p>\n</blockquote>\n<blockquote>\n<p><code>split()</code>：传入一个分割字符串，指定它按照不同的字符串分割<br><code>&#39;MyABCnameABCisABCSimon&#39;.split(&#39;ABC&#39;)返回值为[&#39;My&#39;, &#39;name&#39;, &#39;is&#39;, &#39;Simon&#39;]</code></p>\n</blockquote>\n<blockquote>\n<p><code>rjust()/ljust()/center()</code>:该方法的第一个参数为<strong>填充后</strong>的字符串的长度，第二个参数为<strong>填充使用的字符</strong>，默认是空格，分别为<br><code>&#39;Hello&#39;.rjust(20, &#39;*&#39;)&#39;***************Hello&#39;</code><br><code>&#39;Hello&#39;.center(20, &#39;=&#39;)&#39;=======Hello========&#39;</code></p>\n</blockquote>\n<blockquote>\n<p><code>strip()/lstrip()/rstrip()</code>:删除字符串左边、右边或两边的空白字符（空格、制表符和换行符）有一个可选的字符串参数，指定两边的哪些<strong>字符</strong>应该删除（注意，删除的不一定和参数完全符合，可能是他们的组合）</p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">spam &#x3D; &#39;SpamSpamBaconSpamEggsSpamSpam&#39;\nspam.strip(&#39;ampS&#39;)\n&#39;BaconSpamEggs&#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><code>pyperclip</code>模块有<code>copy()</code>和<code>paste()</code>函数，可以向计算机的剪贴板发送文本，或从它接收文本,如果你的程序之外的某个程序改变了剪贴板的内容，<code>paste()</code>函数就会返回它</p>\n</blockquote>\n<p>7.生成式和生成器语法<br><a href=\"https://www.cnblogs.com/yyds/p/6281453.html\">https://www.cnblogs.com/yyds/p/6281453.html</a></p>\n"},{"title":"PPT制作（进阶篇）","seo_title":"seo名称","toc":true,"indent":true,"top":false,"comments":1,"archive":true,"cover":false,"mathjax":false,"pin":false,"top_meta":false,"bottom_meta":false,"sidebar":["toc"],"keywords":"文章关键词","updated":"2023-11-07T14:10:58.014Z","date":"2023-11-07T14:10:58.014Z","summary":"PPT制作技巧-进阶","img":"/medias/featureimages/12.webp","_content":"# PPT制作（进阶篇）\n\n## 一、封面页\n### 1.标题排版\n**1.1换行有节奏**：当标题过长时，可以将标题分为多行，每一行要**完整且相对独立**，且**长短交错**，否则会很呆板\n**1.2对比有重点**：使标题有层次感，突出重点\n①调粗细：粗体（Bold）用于标题，标准（Regular）用于副标题、正文（比如说汇报人什么什么 \n②变大小：一般来说标题为第一层级，副标题为第二层级，正文为第三层级，不同信息层级字体大小成**倍数关系**，如（60-20-15）\n③换颜色：将标题字体颜色更换为**PPT主色**，可以采用渐进色进行修饰\n④改间距：调整各个层级之间的间距使其不要太拥挤\n⑤特殊效果：如倾斜、错位排版等\n#倾斜：选中文本框→形状格式→文本效果→转换→正方形→拖动控点控制文字的倾斜角度\n### 2.背景图片\n**2.1图片网站**\n①unsplash.com\n②www.pexels.com\n③pixabay.com\n**2.2图片选择**\n①语意关联：根据**关键词**寻找配图\n②留白空间：根据标题的排版，选择一张对应位置有留白的图片\n③色调匹配：图片色调要和PPT主色相符合\n### 3.构图形式\n**3.1布局选择**\n①居中构图：当图片为上下构图时，采用居中布局，图片主体占图片的1/3\n②居左布局：图片为左右构图时，采用居左布局，图片主体占图片的1/2\n③根据图片留白放置标题\n**tips：可以通过裁剪，获得想要的留白空间**\n**3.2图形凸显**：降低图片对文字的干扰\n①色块：使用**一定颜色的形状**作为图片的衬底，调整透明度使其更为自然\n②蒙版：渐变透明的蒙版\n#全屏蒙版：插入全屏矩形→选择**线性渐变**→渐变方向**根据封面布局**选择，比如居中布局采用自上而下，居左布局采用自左向右→光圈颜色选择背景图片的主色→将**非文字区域**的光圈透明度调整为100→调整光圈位置，使其更加自然\n#局部蒙版：插入刚好能覆盖文案的形状（比较推荐椭圆）→设置为无轮廓→选择**路径渐变**→光圈颜色采用图片的主色→右侧光圈透明度调节为100→调整光圈位置，将**图片置于底层**\n**tips：如果觉得蒙版破坏了图片主体，可以将图片主体扣出来**\n**等距缩放，为了让左右和上下的边距相等，可以创建一个小正方形，置于形状的左上角，按住ctrl键缩放即可**\n\n## 二、排版\n### 1.文字排版\n**1.1对齐**：不要使用首行缩进，这样会导致文本不够饱满，最好采用**两端对齐**\n**1.2调整间距**\n①本身：标题字号较大，采用1.0倍行距，正文字号比较小，采用1.2-1.5倍行距\n②相互：**标题和正文间距＞段落间距＞行间距＞字间距**\n#可以采用**分隔线**突出重点段落，比如副标题\n**1.3控制行长**：行长最好**略小于页面的二分之一**，可以采用多段左右、上下分布，**避免出现独字**\n\n### 2.内容排版\n**2.1梳理文案信息**\n①分段：将一段文字内容分为**独立的几个维度**\n②精简：删除**连接词和重复词语**，提炼核心内容\n③凸显层级和重要内容：大小对比、颜色对比、粗细对比、距离对比、下划线、色块、字体对比\n**2.2确定版式布局**\n①统一版心，利用**参考线**确定标题区域和正文区域\n#可以先创建一个全屏矩形，然后等比缩放，调节至合适大小，分布在ppt四角**确定留白区域**，随后在非留白区域确定标题位置和正文位置，标题位置和正文位置之间**相隔一个标题高度**\n![统一版心](/image/ppt_1.png)\n②内容分块：利用**色块、形状**等根据文案信息对正文位置进行分块\n#注意色块、形状等**修饰内容可以占用留白区域**，只要正文内容按照格式排版即可\n![内容分块](/image/ppt_2.png)\n**2.3内容可视化**\n①图标：给小标题增加合适的图标\n#素材网站:https://www.flaticon.com/ https://iconpark.oceanengine.com/official www.iconfont.cn\n#可以将图标截图，并将**位图转化为矢量图**，这样就可以在ppt中修改格式了\n②图片：给**文本块**增加对应的图片背景等 \n③逻辑图示：流程图、带有**关系暗示**的图形等等\n#并列、包含、流程、循环和层级\n#素材网站：https://www.freepik.com/\n**2.4实例**\n![实例一](/image/ppt_3.png)\n![实例二](/image/ppt_4.png)\n\n### 3.多点排版\n**3.1中心环绕式布局**\n①全圆式布局：段落数量为**偶数**\n![全圆式布局](/image/ppt_5.png)\n②半圆式布局：段落数量为**奇数**\n![半圆式布局](/image/ppt_6.png)\n#可以利用等比例缩放绘制圆辅助线，并**利用对齐**将段落点贴近辅助线\n**3.2确定中心点样式**\n①基本形状：并不一定要局限于圆形，还可以是其他多边形\n![基本图形](/image/ppt_7.png)\n②图片素材：选取符合主题的图片\n**3.3丰富层次**\n①文本层次\n![文本层次](/image/ppt_9.png)\n②图形层次\n![图形层次](/image/ppt_8.png)\n\n### 4.多图排版\n**4.1尺寸**：图片格式→裁剪→纵横比，将图片裁剪为比例一致的图片，然后再调整大小\n**4.2间距**：利用**对齐**，注意**图片之间**的间距要小于**图片和页面之间**的间距\n**4.3效果**\n①形状：将图片裁剪为特定形状，图片格式→裁剪→形状\n②轮廓：给图片加上边框\n③阴影：ctrl拖动复制图片→图片格式→艺术效果→虚化→调整虚化半径（调整为90）→柔化边缘→将该图片拖动到原图片底部\n④映像：ctrl拖动复制图片→图片格式→映像效果→选择第一个预设→调整映像大小→增加模糊度\n#可以设置好一张图片效果，然后采用**格式**刷快速复制\n**4.4创意排版**\n①瀑布流\n![瀑布流](/image/ppt_10.png)\n②三维旋转\n![平行预设](/image/ppt_11.png)\n![角度预设](/image/ppt_12.png)\n**#要将光源改为对比**，防止过曝\n\n**5.创意排版**\n**5.1分栏排版**：利用**色块、图片等**将不同维度内容分隔开\n![分栏排版](/image/ppt_34.png)\n![示例](/image/ppt_35.png)\n**5.2拦腰排版**：用于需要突出重点内容的**总分关系**\n![拦腰排版](/image/ppt_36.png)\n![示例](/image/ppt_37.png)\n**5.3卡片排版**：变种的分栏排版，注意卡片组合起来要是一个规整的矩形（可以有无内容色块），**形状和间距相同**\n![拦腰排版](/image/ppt_38.png)\n![示例](/image/ppt_39.png)\n\n#配色可以采用主色+**黑白灰**/主色的梯度色\n#当内容不够饱满时，可以插入**图片**\n## 三、特殊要素\n\n### 1.表格\n**1.1大小**\n①整体大小：要**占满版心**\n②单元格大小：全选表格→**布局选项卡**调整单元格高度→然后双击单元格的**竖边**，使得**单元格宽度匹配文本宽度**\n**1.2样式**\n![表格样式](/image/ppt_13.png)\n①选择**无样式**的表格样式，随后自己编辑\n②线条型表格的**内部框线不宜太粗**，防止喧宾夺主，**表头**、**表尾**和**分割表格**的框线可以适当增粗\n③色块型表格，可以在表格**底部**添加**对应大小颜色**的色块，也可以对表格进行颜色填充，但是后者是对**每个单元格**进行对应填充且**不能改变形状**，在使用渐变色时还是使用前者\n**1.3对齐**：文本左对齐，数据右对齐\n①如果遇到小数，位数要统一\n②文本内容过多，可以分点介绍\n**1.4突出重点**：粗细、颜色、衬底\n**1.5可视化**\n①文本可视化：利用图标、图片代替文字或者作为背景\n②数据可视化：比如百分比可以利用对应的进度条和饼状图代替\n**1.6实例**\n![实例一](/image/ppt_14.png)\n![实例二](/image/ppt_15.png)\n![实例三](/image/ppt_16.png)\n![实例四](/image/ppt_17.png)\n\n### 2.时间轴\n**2.1时间轴线**\n①直线：渐变、箭头\n![直线](/image/ppt_18.png)\n![示例](/image/ppt_21.png)\n②不规则线条：曲线、折线\n![曲线绘制](/image/ppt_19.png)\n![示例](/image/ppt_20.png)\n#注意其中的技巧三，可以在**ppt画面之外**使其形成一个封闭图形，并进行**颜色填充**，如示例所示\n③实物元素\n![实物元素](/image/ppt_22.png)\n![示例](/image/ppt_23.png)\n**2.2节点**\n![节点](/image/ppt_24.png)\n①还可以使用图标\n②节点**外发光**效果：去除线条→**偏移为中**的**阴影**预设→透明度将为0→调整**大小**从而调节发光范围\n③节点**内发光**效果：**射线**渐变→方向改为**从中心**→**左侧**光圈改为**背景色**，调整为**完全透明**→调整光圈位置即可\n**2.3文案排版**\n①文本层次\n![文本层次](/image/ppt_9.png)\n②文本修饰：在节点和文案之间添加**直线**等元素进行**联系**\n\n### 3.架构图\n**3.1确定走向**\n①自上而下：适合分支较**少**的架构图\n![示例](/image/ppt_25.png)\n②自左向右：适合分支较**多**的架构图\n![示例](/image/ppt_26.png)\n③中心扩散：适合分支较**多**的架构图\n![示例](/image/ppt_27.png)\n**3.2元素形状**\n①衬底图形\n![衬底图形](/image/ppt_28.png)\n#还可以将这些基本图形**结合**到一起形成新的衬底\n②连接线条\n![连接线条](/image/ppt_29.png)\n#其中曲线型连接可以采用**花括号**和箭头等组合而来\n#可以在形状格式中修改箭头、花括号的**末端形状**\n**3.3区分层级**\n①颜色对比：不同层级采用不同的颜色（最好**梯度色**），其中衬底颜色和文字颜色**色调要相反**，即衬底为深色，文字就要为浅色\n②虚实对比：当层级过多，颜色对比不够用时，末端可以采用**无填充、虚线框**的形式\n③形状对比\n![示例](/image/ppt_30.png)\n\n### 4.图表\n**4.1确定样式**\n①柱形图：大小比较，项目名较短\n②条形图：大小比较，项目名较长\n③饼状图：占比关系\n④环形图表：占比关系，可以使用弧形和圆组合而成，调**粗**其线宽，改变其**线端类型**，将弧形置于顶层即可\n⑤折线图：变化趋势\n\n#直接**插入图表**即可\n**4.2图标优化**\n①柱/条形图\n- 弱化或者删除**网格**、**图例**和**坐标轴**元素\n- 间隙宽度**50%-100%**\n- 突出重点，利用**颜色**和**色块衬底**即可\n\n②饼状图\n- 扇面**从大到小顺时针排序**\n- 扇面配色避免花哨，使用**梯度色**即可\n\n③折线图\n- 弱化或者删除**网格**、**图例**和**坐标轴**元素\n- 如果无需精确呈现数据时，可使用**平滑线**（右击→设计数据系列格式→填充与线条→勾选平滑线选项）\n- 可以将其改变为**面积图**，对其进行**渐变填充**，但是如果要使用**平滑线**的话，不能将其改变为面积图，应该先将其改变为**平滑线**→新建一页，将图表**选择性粘贴**为**图片（增强型图元文件）**→取消组合，提取曲线→利用曲线和目标颜色色块进行**组合拆分**，将对应颜色色块裁剪为目标形状**填充回原幻灯片**即可\n\n#图表不仅仅局限于ppt图表自带的修饰，还可以自己利用**线条、形状**等素材对图表进行修饰，比如说用**文本框**代替图表原本的**标题**，用色块和文本框代替图例等\n#可以使用**数据标签**代替纵轴\n\n\n**4.3布局**\n①单个图表：占满版心即可\n②多个图表：利用**色块**对页面进行分区，将图表放在对应的色块中\n\n**4.4实例**\n![实例一](/image/ppt_31.png)\n![实例二](/image/ppt_32.png)\n![实例三](/image/ppt_33.png)","source":"_posts/PPT制作（进阶篇）.md","raw":"---\ntitle: PPT制作（进阶篇）\nseo_title: seo名称\ntoc: true\nindent: true\ntop: false\ncomments: true\narchive: true\ncover: false\nmathjax: false\npin: false\ntop_meta: false\nbottom_meta: false\nsidebar:\n  - toc\ntag:\n  - PPT\n  - 软技能\ncategories: 软技能\nkeywords: 文章关键词\nupdated: ''\ndate:\nsummary: PPT制作技巧-进阶\nimg: /medias/featureimages/12.webp\n---\n# PPT制作（进阶篇）\n\n## 一、封面页\n### 1.标题排版\n**1.1换行有节奏**：当标题过长时，可以将标题分为多行，每一行要**完整且相对独立**，且**长短交错**，否则会很呆板\n**1.2对比有重点**：使标题有层次感，突出重点\n①调粗细：粗体（Bold）用于标题，标准（Regular）用于副标题、正文（比如说汇报人什么什么 \n②变大小：一般来说标题为第一层级，副标题为第二层级，正文为第三层级，不同信息层级字体大小成**倍数关系**，如（60-20-15）\n③换颜色：将标题字体颜色更换为**PPT主色**，可以采用渐进色进行修饰\n④改间距：调整各个层级之间的间距使其不要太拥挤\n⑤特殊效果：如倾斜、错位排版等\n#倾斜：选中文本框→形状格式→文本效果→转换→正方形→拖动控点控制文字的倾斜角度\n### 2.背景图片\n**2.1图片网站**\n①unsplash.com\n②www.pexels.com\n③pixabay.com\n**2.2图片选择**\n①语意关联：根据**关键词**寻找配图\n②留白空间：根据标题的排版，选择一张对应位置有留白的图片\n③色调匹配：图片色调要和PPT主色相符合\n### 3.构图形式\n**3.1布局选择**\n①居中构图：当图片为上下构图时，采用居中布局，图片主体占图片的1/3\n②居左布局：图片为左右构图时，采用居左布局，图片主体占图片的1/2\n③根据图片留白放置标题\n**tips：可以通过裁剪，获得想要的留白空间**\n**3.2图形凸显**：降低图片对文字的干扰\n①色块：使用**一定颜色的形状**作为图片的衬底，调整透明度使其更为自然\n②蒙版：渐变透明的蒙版\n#全屏蒙版：插入全屏矩形→选择**线性渐变**→渐变方向**根据封面布局**选择，比如居中布局采用自上而下，居左布局采用自左向右→光圈颜色选择背景图片的主色→将**非文字区域**的光圈透明度调整为100→调整光圈位置，使其更加自然\n#局部蒙版：插入刚好能覆盖文案的形状（比较推荐椭圆）→设置为无轮廓→选择**路径渐变**→光圈颜色采用图片的主色→右侧光圈透明度调节为100→调整光圈位置，将**图片置于底层**\n**tips：如果觉得蒙版破坏了图片主体，可以将图片主体扣出来**\n**等距缩放，为了让左右和上下的边距相等，可以创建一个小正方形，置于形状的左上角，按住ctrl键缩放即可**\n\n## 二、排版\n### 1.文字排版\n**1.1对齐**：不要使用首行缩进，这样会导致文本不够饱满，最好采用**两端对齐**\n**1.2调整间距**\n①本身：标题字号较大，采用1.0倍行距，正文字号比较小，采用1.2-1.5倍行距\n②相互：**标题和正文间距＞段落间距＞行间距＞字间距**\n#可以采用**分隔线**突出重点段落，比如副标题\n**1.3控制行长**：行长最好**略小于页面的二分之一**，可以采用多段左右、上下分布，**避免出现独字**\n\n### 2.内容排版\n**2.1梳理文案信息**\n①分段：将一段文字内容分为**独立的几个维度**\n②精简：删除**连接词和重复词语**，提炼核心内容\n③凸显层级和重要内容：大小对比、颜色对比、粗细对比、距离对比、下划线、色块、字体对比\n**2.2确定版式布局**\n①统一版心，利用**参考线**确定标题区域和正文区域\n#可以先创建一个全屏矩形，然后等比缩放，调节至合适大小，分布在ppt四角**确定留白区域**，随后在非留白区域确定标题位置和正文位置，标题位置和正文位置之间**相隔一个标题高度**\n![统一版心](/image/ppt_1.png)\n②内容分块：利用**色块、形状**等根据文案信息对正文位置进行分块\n#注意色块、形状等**修饰内容可以占用留白区域**，只要正文内容按照格式排版即可\n![内容分块](/image/ppt_2.png)\n**2.3内容可视化**\n①图标：给小标题增加合适的图标\n#素材网站:https://www.flaticon.com/ https://iconpark.oceanengine.com/official www.iconfont.cn\n#可以将图标截图，并将**位图转化为矢量图**，这样就可以在ppt中修改格式了\n②图片：给**文本块**增加对应的图片背景等 \n③逻辑图示：流程图、带有**关系暗示**的图形等等\n#并列、包含、流程、循环和层级\n#素材网站：https://www.freepik.com/\n**2.4实例**\n![实例一](/image/ppt_3.png)\n![实例二](/image/ppt_4.png)\n\n### 3.多点排版\n**3.1中心环绕式布局**\n①全圆式布局：段落数量为**偶数**\n![全圆式布局](/image/ppt_5.png)\n②半圆式布局：段落数量为**奇数**\n![半圆式布局](/image/ppt_6.png)\n#可以利用等比例缩放绘制圆辅助线，并**利用对齐**将段落点贴近辅助线\n**3.2确定中心点样式**\n①基本形状：并不一定要局限于圆形，还可以是其他多边形\n![基本图形](/image/ppt_7.png)\n②图片素材：选取符合主题的图片\n**3.3丰富层次**\n①文本层次\n![文本层次](/image/ppt_9.png)\n②图形层次\n![图形层次](/image/ppt_8.png)\n\n### 4.多图排版\n**4.1尺寸**：图片格式→裁剪→纵横比，将图片裁剪为比例一致的图片，然后再调整大小\n**4.2间距**：利用**对齐**，注意**图片之间**的间距要小于**图片和页面之间**的间距\n**4.3效果**\n①形状：将图片裁剪为特定形状，图片格式→裁剪→形状\n②轮廓：给图片加上边框\n③阴影：ctrl拖动复制图片→图片格式→艺术效果→虚化→调整虚化半径（调整为90）→柔化边缘→将该图片拖动到原图片底部\n④映像：ctrl拖动复制图片→图片格式→映像效果→选择第一个预设→调整映像大小→增加模糊度\n#可以设置好一张图片效果，然后采用**格式**刷快速复制\n**4.4创意排版**\n①瀑布流\n![瀑布流](/image/ppt_10.png)\n②三维旋转\n![平行预设](/image/ppt_11.png)\n![角度预设](/image/ppt_12.png)\n**#要将光源改为对比**，防止过曝\n\n**5.创意排版**\n**5.1分栏排版**：利用**色块、图片等**将不同维度内容分隔开\n![分栏排版](/image/ppt_34.png)\n![示例](/image/ppt_35.png)\n**5.2拦腰排版**：用于需要突出重点内容的**总分关系**\n![拦腰排版](/image/ppt_36.png)\n![示例](/image/ppt_37.png)\n**5.3卡片排版**：变种的分栏排版，注意卡片组合起来要是一个规整的矩形（可以有无内容色块），**形状和间距相同**\n![拦腰排版](/image/ppt_38.png)\n![示例](/image/ppt_39.png)\n\n#配色可以采用主色+**黑白灰**/主色的梯度色\n#当内容不够饱满时，可以插入**图片**\n## 三、特殊要素\n\n### 1.表格\n**1.1大小**\n①整体大小：要**占满版心**\n②单元格大小：全选表格→**布局选项卡**调整单元格高度→然后双击单元格的**竖边**，使得**单元格宽度匹配文本宽度**\n**1.2样式**\n![表格样式](/image/ppt_13.png)\n①选择**无样式**的表格样式，随后自己编辑\n②线条型表格的**内部框线不宜太粗**，防止喧宾夺主，**表头**、**表尾**和**分割表格**的框线可以适当增粗\n③色块型表格，可以在表格**底部**添加**对应大小颜色**的色块，也可以对表格进行颜色填充，但是后者是对**每个单元格**进行对应填充且**不能改变形状**，在使用渐变色时还是使用前者\n**1.3对齐**：文本左对齐，数据右对齐\n①如果遇到小数，位数要统一\n②文本内容过多，可以分点介绍\n**1.4突出重点**：粗细、颜色、衬底\n**1.5可视化**\n①文本可视化：利用图标、图片代替文字或者作为背景\n②数据可视化：比如百分比可以利用对应的进度条和饼状图代替\n**1.6实例**\n![实例一](/image/ppt_14.png)\n![实例二](/image/ppt_15.png)\n![实例三](/image/ppt_16.png)\n![实例四](/image/ppt_17.png)\n\n### 2.时间轴\n**2.1时间轴线**\n①直线：渐变、箭头\n![直线](/image/ppt_18.png)\n![示例](/image/ppt_21.png)\n②不规则线条：曲线、折线\n![曲线绘制](/image/ppt_19.png)\n![示例](/image/ppt_20.png)\n#注意其中的技巧三，可以在**ppt画面之外**使其形成一个封闭图形，并进行**颜色填充**，如示例所示\n③实物元素\n![实物元素](/image/ppt_22.png)\n![示例](/image/ppt_23.png)\n**2.2节点**\n![节点](/image/ppt_24.png)\n①还可以使用图标\n②节点**外发光**效果：去除线条→**偏移为中**的**阴影**预设→透明度将为0→调整**大小**从而调节发光范围\n③节点**内发光**效果：**射线**渐变→方向改为**从中心**→**左侧**光圈改为**背景色**，调整为**完全透明**→调整光圈位置即可\n**2.3文案排版**\n①文本层次\n![文本层次](/image/ppt_9.png)\n②文本修饰：在节点和文案之间添加**直线**等元素进行**联系**\n\n### 3.架构图\n**3.1确定走向**\n①自上而下：适合分支较**少**的架构图\n![示例](/image/ppt_25.png)\n②自左向右：适合分支较**多**的架构图\n![示例](/image/ppt_26.png)\n③中心扩散：适合分支较**多**的架构图\n![示例](/image/ppt_27.png)\n**3.2元素形状**\n①衬底图形\n![衬底图形](/image/ppt_28.png)\n#还可以将这些基本图形**结合**到一起形成新的衬底\n②连接线条\n![连接线条](/image/ppt_29.png)\n#其中曲线型连接可以采用**花括号**和箭头等组合而来\n#可以在形状格式中修改箭头、花括号的**末端形状**\n**3.3区分层级**\n①颜色对比：不同层级采用不同的颜色（最好**梯度色**），其中衬底颜色和文字颜色**色调要相反**，即衬底为深色，文字就要为浅色\n②虚实对比：当层级过多，颜色对比不够用时，末端可以采用**无填充、虚线框**的形式\n③形状对比\n![示例](/image/ppt_30.png)\n\n### 4.图表\n**4.1确定样式**\n①柱形图：大小比较，项目名较短\n②条形图：大小比较，项目名较长\n③饼状图：占比关系\n④环形图表：占比关系，可以使用弧形和圆组合而成，调**粗**其线宽，改变其**线端类型**，将弧形置于顶层即可\n⑤折线图：变化趋势\n\n#直接**插入图表**即可\n**4.2图标优化**\n①柱/条形图\n- 弱化或者删除**网格**、**图例**和**坐标轴**元素\n- 间隙宽度**50%-100%**\n- 突出重点，利用**颜色**和**色块衬底**即可\n\n②饼状图\n- 扇面**从大到小顺时针排序**\n- 扇面配色避免花哨，使用**梯度色**即可\n\n③折线图\n- 弱化或者删除**网格**、**图例**和**坐标轴**元素\n- 如果无需精确呈现数据时，可使用**平滑线**（右击→设计数据系列格式→填充与线条→勾选平滑线选项）\n- 可以将其改变为**面积图**，对其进行**渐变填充**，但是如果要使用**平滑线**的话，不能将其改变为面积图，应该先将其改变为**平滑线**→新建一页，将图表**选择性粘贴**为**图片（增强型图元文件）**→取消组合，提取曲线→利用曲线和目标颜色色块进行**组合拆分**，将对应颜色色块裁剪为目标形状**填充回原幻灯片**即可\n\n#图表不仅仅局限于ppt图表自带的修饰，还可以自己利用**线条、形状**等素材对图表进行修饰，比如说用**文本框**代替图表原本的**标题**，用色块和文本框代替图例等\n#可以使用**数据标签**代替纵轴\n\n\n**4.3布局**\n①单个图表：占满版心即可\n②多个图表：利用**色块**对页面进行分区，将图表放在对应的色块中\n\n**4.4实例**\n![实例一](/image/ppt_31.png)\n![实例二](/image/ppt_32.png)\n![实例三](/image/ppt_33.png)","slug":"PPT制作（进阶篇）","published":1,"_id":"clmkphbf900169gvdc4oo19nj","layout":"post","photos":[],"link":"","content":"<h1 id=\"PPT制作（进阶篇）\"><a href=\"#PPT制作（进阶篇）\" class=\"headerlink\" title=\"PPT制作（进阶篇）\"></a>PPT制作（进阶篇）</h1><h2 id=\"一、封面页\"><a href=\"#一、封面页\" class=\"headerlink\" title=\"一、封面页\"></a>一、封面页</h2><h3 id=\"1-标题排版\"><a href=\"#1-标题排版\" class=\"headerlink\" title=\"1.标题排版\"></a>1.标题排版</h3><p><strong>1.1换行有节奏</strong>：当标题过长时，可以将标题分为多行，每一行要<strong>完整且相对独立</strong>，且<strong>长短交错</strong>，否则会很呆板<br><strong>1.2对比有重点</strong>：使标题有层次感，突出重点<br>①调粗细：粗体（Bold）用于标题，标准（Regular）用于副标题、正文（比如说汇报人什么什么<br>②变大小：一般来说标题为第一层级，副标题为第二层级，正文为第三层级，不同信息层级字体大小成<strong>倍数关系</strong>，如（60-20-15）<br>③换颜色：将标题字体颜色更换为<strong>PPT主色</strong>，可以采用渐进色进行修饰<br>④改间距：调整各个层级之间的间距使其不要太拥挤<br>⑤特殊效果：如倾斜、错位排版等<br>#倾斜：选中文本框→形状格式→文本效果→转换→正方形→拖动控点控制文字的倾斜角度</p>\n<h3 id=\"2-背景图片\"><a href=\"#2-背景图片\" class=\"headerlink\" title=\"2.背景图片\"></a>2.背景图片</h3><p><strong>2.1图片网站</strong><br>①unsplash.com<br>②<a href=\"http://www.pexels.com/\">www.pexels.com</a><br>③pixabay.com<br><strong>2.2图片选择</strong><br>①语意关联：根据<strong>关键词</strong>寻找配图<br>②留白空间：根据标题的排版，选择一张对应位置有留白的图片<br>③色调匹配：图片色调要和PPT主色相符合</p>\n<h3 id=\"3-构图形式\"><a href=\"#3-构图形式\" class=\"headerlink\" title=\"3.构图形式\"></a>3.构图形式</h3><p><strong>3.1布局选择</strong><br>①居中构图：当图片为上下构图时，采用居中布局，图片主体占图片的1/3<br>②居左布局：图片为左右构图时，采用居左布局，图片主体占图片的1/2<br>③根据图片留白放置标题<br><strong>tips：可以通过裁剪，获得想要的留白空间</strong><br><strong>3.2图形凸显</strong>：降低图片对文字的干扰<br>①色块：使用<strong>一定颜色的形状</strong>作为图片的衬底，调整透明度使其更为自然<br>②蒙版：渐变透明的蒙版<br>#全屏蒙版：插入全屏矩形→选择<strong>线性渐变</strong>→渐变方向<strong>根据封面布局</strong>选择，比如居中布局采用自上而下，居左布局采用自左向右→光圈颜色选择背景图片的主色→将<strong>非文字区域</strong>的光圈透明度调整为100→调整光圈位置，使其更加自然<br>#局部蒙版：插入刚好能覆盖文案的形状（比较推荐椭圆）→设置为无轮廓→选择<strong>路径渐变</strong>→光圈颜色采用图片的主色→右侧光圈透明度调节为100→调整光圈位置，将<strong>图片置于底层</strong><br><strong>tips：如果觉得蒙版破坏了图片主体，可以将图片主体扣出来</strong><br><strong>等距缩放，为了让左右和上下的边距相等，可以创建一个小正方形，置于形状的左上角，按住ctrl键缩放即可</strong></p>\n<h2 id=\"二、排版\"><a href=\"#二、排版\" class=\"headerlink\" title=\"二、排版\"></a>二、排版</h2><h3 id=\"1-文字排版\"><a href=\"#1-文字排版\" class=\"headerlink\" title=\"1.文字排版\"></a>1.文字排版</h3><p><strong>1.1对齐</strong>：不要使用首行缩进，这样会导致文本不够饱满，最好采用<strong>两端对齐</strong><br><strong>1.2调整间距</strong><br>①本身：标题字号较大，采用1.0倍行距，正文字号比较小，采用1.2-1.5倍行距<br>②相互：<strong>标题和正文间距＞段落间距＞行间距＞字间距</strong><br>#可以采用<strong>分隔线</strong>突出重点段落，比如副标题<br><strong>1.3控制行长</strong>：行长最好<strong>略小于页面的二分之一</strong>，可以采用多段左右、上下分布，<strong>避免出现独字</strong></p>\n<h3 id=\"2-内容排版\"><a href=\"#2-内容排版\" class=\"headerlink\" title=\"2.内容排版\"></a>2.内容排版</h3><p><strong>2.1梳理文案信息</strong><br>①分段：将一段文字内容分为<strong>独立的几个维度</strong><br>②精简：删除<strong>连接词和重复词语</strong>，提炼核心内容<br>③凸显层级和重要内容：大小对比、颜色对比、粗细对比、距离对比、下划线、色块、字体对比<br><strong>2.2确定版式布局</strong><br>①统一版心，利用<strong>参考线</strong>确定标题区域和正文区域<br>#可以先创建一个全屏矩形，然后等比缩放，调节至合适大小，分布在ppt四角<strong>确定留白区域</strong>，随后在非留白区域确定标题位置和正文位置，标题位置和正文位置之间<strong>相隔一个标题高度</strong><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/ppt_1.png\" alt=\"统一版心\"><br>②内容分块：利用<strong>色块、形状</strong>等根据文案信息对正文位置进行分块<br>#注意色块、形状等<strong>修饰内容可以占用留白区域</strong>，只要正文内容按照格式排版即可<br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/ppt_2.png\" alt=\"内容分块\"><br><strong>2.3内容可视化</strong><br>①图标：给小标题增加合适的图标<br>#素材网站:<a href=\"https://www.flaticon.com/\">https://www.flaticon.com/</a> <a href=\"https://iconpark.oceanengine.com/official\">https://iconpark.oceanengine.com/official</a> <a href=\"http://www.iconfont.cn/\">www.iconfont.cn</a><br>#可以将图标截图，并将<strong>位图转化为矢量图</strong>，这样就可以在ppt中修改格式了<br>②图片：给<strong>文本块</strong>增加对应的图片背景等<br>③逻辑图示：流程图、带有<strong>关系暗示</strong>的图形等等<br>#并列、包含、流程、循环和层级<br>#素材网站：<a href=\"https://www.freepik.com/\">https://www.freepik.com/</a><br><strong>2.4实例</strong><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/ppt_3.png\" alt=\"实例一\"><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/ppt_4.png\" alt=\"实例二\"></p>\n<h3 id=\"3-多点排版\"><a href=\"#3-多点排版\" class=\"headerlink\" title=\"3.多点排版\"></a>3.多点排版</h3><p><strong>3.1中心环绕式布局</strong><br>①全圆式布局：段落数量为<strong>偶数</strong><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/ppt_5.png\" alt=\"全圆式布局\"><br>②半圆式布局：段落数量为<strong>奇数</strong><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/ppt_6.png\" alt=\"半圆式布局\"><br>#可以利用等比例缩放绘制圆辅助线，并<strong>利用对齐</strong>将段落点贴近辅助线<br><strong>3.2确定中心点样式</strong><br>①基本形状：并不一定要局限于圆形，还可以是其他多边形<br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/ppt_7.png\" alt=\"基本图形\"><br>②图片素材：选取符合主题的图片<br><strong>3.3丰富层次</strong><br>①文本层次<br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/ppt_9.png\" alt=\"文本层次\"><br>②图形层次<br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/ppt_8.png\" alt=\"图形层次\"></p>\n<h3 id=\"4-多图排版\"><a href=\"#4-多图排版\" class=\"headerlink\" title=\"4.多图排版\"></a>4.多图排版</h3><p><strong>4.1尺寸</strong>：图片格式→裁剪→纵横比，将图片裁剪为比例一致的图片，然后再调整大小<br><strong>4.2间距</strong>：利用<strong>对齐</strong>，注意<strong>图片之间</strong>的间距要小于<strong>图片和页面之间</strong>的间距<br><strong>4.3效果</strong><br>①形状：将图片裁剪为特定形状，图片格式→裁剪→形状<br>②轮廓：给图片加上边框<br>③阴影：ctrl拖动复制图片→图片格式→艺术效果→虚化→调整虚化半径（调整为90）→柔化边缘→将该图片拖动到原图片底部<br>④映像：ctrl拖动复制图片→图片格式→映像效果→选择第一个预设→调整映像大小→增加模糊度<br>#可以设置好一张图片效果，然后采用<strong>格式</strong>刷快速复制<br><strong>4.4创意排版</strong><br>①瀑布流<br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/ppt_10.png\" alt=\"瀑布流\"><br>②三维旋转<br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/ppt_11.png\" alt=\"平行预设\"><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/ppt_12.png\" alt=\"角度预设\"><br><strong>#要将光源改为对比</strong>，防止过曝</p>\n<p><strong>5.创意排版</strong><br><strong>5.1分栏排版</strong>：利用<strong>色块、图片等</strong>将不同维度内容分隔开<br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/ppt_34.png\" alt=\"分栏排版\"><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/ppt_35.png\" alt=\"示例\"><br><strong>5.2拦腰排版</strong>：用于需要突出重点内容的<strong>总分关系</strong><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/ppt_36.png\" alt=\"拦腰排版\"><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/ppt_37.png\" alt=\"示例\"><br><strong>5.3卡片排版</strong>：变种的分栏排版，注意卡片组合起来要是一个规整的矩形（可以有无内容色块），<strong>形状和间距相同</strong><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/ppt_38.png\" alt=\"拦腰排版\"><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/ppt_39.png\" alt=\"示例\"></p>\n<p>#配色可以采用主色+<strong>黑白灰</strong>/主色的梯度色<br>#当内容不够饱满时，可以插入<strong>图片</strong></p>\n<h2 id=\"三、特殊要素\"><a href=\"#三、特殊要素\" class=\"headerlink\" title=\"三、特殊要素\"></a>三、特殊要素</h2><h3 id=\"1-表格\"><a href=\"#1-表格\" class=\"headerlink\" title=\"1.表格\"></a>1.表格</h3><p><strong>1.1大小</strong><br>①整体大小：要<strong>占满版心</strong><br>②单元格大小：全选表格→<strong>布局选项卡</strong>调整单元格高度→然后双击单元格的<strong>竖边</strong>，使得<strong>单元格宽度匹配文本宽度</strong><br><strong>1.2样式</strong><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/ppt_13.png\" alt=\"表格样式\"><br>①选择<strong>无样式</strong>的表格样式，随后自己编辑<br>②线条型表格的<strong>内部框线不宜太粗</strong>，防止喧宾夺主，<strong>表头</strong>、<strong>表尾</strong>和<strong>分割表格</strong>的框线可以适当增粗<br>③色块型表格，可以在表格<strong>底部</strong>添加<strong>对应大小颜色</strong>的色块，也可以对表格进行颜色填充，但是后者是对<strong>每个单元格</strong>进行对应填充且<strong>不能改变形状</strong>，在使用渐变色时还是使用前者<br><strong>1.3对齐</strong>：文本左对齐，数据右对齐<br>①如果遇到小数，位数要统一<br>②文本内容过多，可以分点介绍<br><strong>1.4突出重点</strong>：粗细、颜色、衬底<br><strong>1.5可视化</strong><br>①文本可视化：利用图标、图片代替文字或者作为背景<br>②数据可视化：比如百分比可以利用对应的进度条和饼状图代替<br><strong>1.6实例</strong><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/ppt_14.png\" alt=\"实例一\"><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/ppt_15.png\" alt=\"实例二\"><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/ppt_16.png\" alt=\"实例三\"><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/ppt_17.png\" alt=\"实例四\"></p>\n<h3 id=\"2-时间轴\"><a href=\"#2-时间轴\" class=\"headerlink\" title=\"2.时间轴\"></a>2.时间轴</h3><p><strong>2.1时间轴线</strong><br>①直线：渐变、箭头<br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/ppt_18.png\" alt=\"直线\"><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/ppt_21.png\" alt=\"示例\"><br>②不规则线条：曲线、折线<br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/ppt_19.png\" alt=\"曲线绘制\"><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/ppt_20.png\" alt=\"示例\"><br>#注意其中的技巧三，可以在<strong>ppt画面之外</strong>使其形成一个封闭图形，并进行<strong>颜色填充</strong>，如示例所示<br>③实物元素<br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/ppt_22.png\" alt=\"实物元素\"><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/ppt_23.png\" alt=\"示例\"><br><strong>2.2节点</strong><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/ppt_24.png\" alt=\"节点\"><br>①还可以使用图标<br>②节点<strong>外发光</strong>效果：去除线条→<strong>偏移为中</strong>的<strong>阴影</strong>预设→透明度将为0→调整<strong>大小</strong>从而调节发光范围<br>③节点<strong>内发光</strong>效果：<strong>射线</strong>渐变→方向改为<strong>从中心</strong>→<strong>左侧</strong>光圈改为<strong>背景色</strong>，调整为<strong>完全透明</strong>→调整光圈位置即可<br><strong>2.3文案排版</strong><br>①文本层次<br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/ppt_9.png\" alt=\"文本层次\"><br>②文本修饰：在节点和文案之间添加<strong>直线</strong>等元素进行<strong>联系</strong></p>\n<h3 id=\"3-架构图\"><a href=\"#3-架构图\" class=\"headerlink\" title=\"3.架构图\"></a>3.架构图</h3><p><strong>3.1确定走向</strong><br>①自上而下：适合分支较<strong>少</strong>的架构图<br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/ppt_25.png\" alt=\"示例\"><br>②自左向右：适合分支较<strong>多</strong>的架构图<br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/ppt_26.png\" alt=\"示例\"><br>③中心扩散：适合分支较<strong>多</strong>的架构图<br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/ppt_27.png\" alt=\"示例\"><br><strong>3.2元素形状</strong><br>①衬底图形<br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/ppt_28.png\" alt=\"衬底图形\"><br>#还可以将这些基本图形<strong>结合</strong>到一起形成新的衬底<br>②连接线条<br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/ppt_29.png\" alt=\"连接线条\"><br>#其中曲线型连接可以采用<strong>花括号</strong>和箭头等组合而来<br>#可以在形状格式中修改箭头、花括号的<strong>末端形状</strong><br><strong>3.3区分层级</strong><br>①颜色对比：不同层级采用不同的颜色（最好<strong>梯度色</strong>），其中衬底颜色和文字颜色<strong>色调要相反</strong>，即衬底为深色，文字就要为浅色<br>②虚实对比：当层级过多，颜色对比不够用时，末端可以采用<strong>无填充、虚线框</strong>的形式<br>③形状对比<br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/ppt_30.png\" alt=\"示例\"></p>\n<h3 id=\"4-图表\"><a href=\"#4-图表\" class=\"headerlink\" title=\"4.图表\"></a>4.图表</h3><p><strong>4.1确定样式</strong><br>①柱形图：大小比较，项目名较短<br>②条形图：大小比较，项目名较长<br>③饼状图：占比关系<br>④环形图表：占比关系，可以使用弧形和圆组合而成，调<strong>粗</strong>其线宽，改变其<strong>线端类型</strong>，将弧形置于顶层即可<br>⑤折线图：变化趋势</p>\n<p>#直接<strong>插入图表</strong>即可<br><strong>4.2图标优化</strong><br>①柱/条形图</p>\n<ul>\n<li>弱化或者删除<strong>网格</strong>、<strong>图例</strong>和<strong>坐标轴</strong>元素</li>\n<li>间隙宽度<strong>50%-100%</strong></li>\n<li>突出重点，利用<strong>颜色</strong>和<strong>色块衬底</strong>即可</li>\n</ul>\n<p>②饼状图</p>\n<ul>\n<li>扇面<strong>从大到小顺时针排序</strong></li>\n<li>扇面配色避免花哨，使用<strong>梯度色</strong>即可</li>\n</ul>\n<p>③折线图</p>\n<ul>\n<li>弱化或者删除<strong>网格</strong>、<strong>图例</strong>和<strong>坐标轴</strong>元素</li>\n<li>如果无需精确呈现数据时，可使用<strong>平滑线</strong>（右击→设计数据系列格式→填充与线条→勾选平滑线选项）</li>\n<li>可以将其改变为<strong>面积图</strong>，对其进行<strong>渐变填充</strong>，但是如果要使用<strong>平滑线</strong>的话，不能将其改变为面积图，应该先将其改变为<strong>平滑线</strong>→新建一页，将图表<strong>选择性粘贴</strong>为<strong>图片（增强型图元文件）</strong>→取消组合，提取曲线→利用曲线和目标颜色色块进行<strong>组合拆分</strong>，将对应颜色色块裁剪为目标形状<strong>填充回原幻灯片</strong>即可</li>\n</ul>\n<p>#图表不仅仅局限于ppt图表自带的修饰，还可以自己利用<strong>线条、形状</strong>等素材对图表进行修饰，比如说用<strong>文本框</strong>代替图表原本的<strong>标题</strong>，用色块和文本框代替图例等<br>#可以使用<strong>数据标签</strong>代替纵轴</p>\n<p><strong>4.3布局</strong><br>①单个图表：占满版心即可<br>②多个图表：利用<strong>色块</strong>对页面进行分区，将图表放在对应的色块中</p>\n<p><strong>4.4实例</strong><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/ppt_31.png\" alt=\"实例一\"><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/ppt_32.png\" alt=\"实例二\"><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/ppt_33.png\" alt=\"实例三\"></p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"PPT制作（进阶篇）\"><a href=\"#PPT制作（进阶篇）\" class=\"headerlink\" title=\"PPT制作（进阶篇）\"></a>PPT制作（进阶篇）</h1><h2 id=\"一、封面页\"><a href=\"#一、封面页\" class=\"headerlink\" title=\"一、封面页\"></a>一、封面页</h2><h3 id=\"1-标题排版\"><a href=\"#1-标题排版\" class=\"headerlink\" title=\"1.标题排版\"></a>1.标题排版</h3><p><strong>1.1换行有节奏</strong>：当标题过长时，可以将标题分为多行，每一行要<strong>完整且相对独立</strong>，且<strong>长短交错</strong>，否则会很呆板<br><strong>1.2对比有重点</strong>：使标题有层次感，突出重点<br>①调粗细：粗体（Bold）用于标题，标准（Regular）用于副标题、正文（比如说汇报人什么什么<br>②变大小：一般来说标题为第一层级，副标题为第二层级，正文为第三层级，不同信息层级字体大小成<strong>倍数关系</strong>，如（60-20-15）<br>③换颜色：将标题字体颜色更换为<strong>PPT主色</strong>，可以采用渐进色进行修饰<br>④改间距：调整各个层级之间的间距使其不要太拥挤<br>⑤特殊效果：如倾斜、错位排版等<br>#倾斜：选中文本框→形状格式→文本效果→转换→正方形→拖动控点控制文字的倾斜角度</p>\n<h3 id=\"2-背景图片\"><a href=\"#2-背景图片\" class=\"headerlink\" title=\"2.背景图片\"></a>2.背景图片</h3><p><strong>2.1图片网站</strong><br>①unsplash.com<br>②<a href=\"http://www.pexels.com/\">www.pexels.com</a><br>③pixabay.com<br><strong>2.2图片选择</strong><br>①语意关联：根据<strong>关键词</strong>寻找配图<br>②留白空间：根据标题的排版，选择一张对应位置有留白的图片<br>③色调匹配：图片色调要和PPT主色相符合</p>\n<h3 id=\"3-构图形式\"><a href=\"#3-构图形式\" class=\"headerlink\" title=\"3.构图形式\"></a>3.构图形式</h3><p><strong>3.1布局选择</strong><br>①居中构图：当图片为上下构图时，采用居中布局，图片主体占图片的1&#x2F;3<br>②居左布局：图片为左右构图时，采用居左布局，图片主体占图片的1&#x2F;2<br>③根据图片留白放置标题<br><strong>tips：可以通过裁剪，获得想要的留白空间</strong><br><strong>3.2图形凸显</strong>：降低图片对文字的干扰<br>①色块：使用<strong>一定颜色的形状</strong>作为图片的衬底，调整透明度使其更为自然<br>②蒙版：渐变透明的蒙版<br>#全屏蒙版：插入全屏矩形→选择<strong>线性渐变</strong>→渐变方向<strong>根据封面布局</strong>选择，比如居中布局采用自上而下，居左布局采用自左向右→光圈颜色选择背景图片的主色→将<strong>非文字区域</strong>的光圈透明度调整为100→调整光圈位置，使其更加自然<br>#局部蒙版：插入刚好能覆盖文案的形状（比较推荐椭圆）→设置为无轮廓→选择<strong>路径渐变</strong>→光圈颜色采用图片的主色→右侧光圈透明度调节为100→调整光圈位置，将<strong>图片置于底层</strong><br><strong>tips：如果觉得蒙版破坏了图片主体，可以将图片主体扣出来</strong><br><strong>等距缩放，为了让左右和上下的边距相等，可以创建一个小正方形，置于形状的左上角，按住ctrl键缩放即可</strong></p>\n<h2 id=\"二、排版\"><a href=\"#二、排版\" class=\"headerlink\" title=\"二、排版\"></a>二、排版</h2><h3 id=\"1-文字排版\"><a href=\"#1-文字排版\" class=\"headerlink\" title=\"1.文字排版\"></a>1.文字排版</h3><p><strong>1.1对齐</strong>：不要使用首行缩进，这样会导致文本不够饱满，最好采用<strong>两端对齐</strong><br><strong>1.2调整间距</strong><br>①本身：标题字号较大，采用1.0倍行距，正文字号比较小，采用1.2-1.5倍行距<br>②相互：<strong>标题和正文间距＞段落间距＞行间距＞字间距</strong><br>#可以采用<strong>分隔线</strong>突出重点段落，比如副标题<br><strong>1.3控制行长</strong>：行长最好<strong>略小于页面的二分之一</strong>，可以采用多段左右、上下分布，<strong>避免出现独字</strong></p>\n<h3 id=\"2-内容排版\"><a href=\"#2-内容排版\" class=\"headerlink\" title=\"2.内容排版\"></a>2.内容排版</h3><p><strong>2.1梳理文案信息</strong><br>①分段：将一段文字内容分为<strong>独立的几个维度</strong><br>②精简：删除<strong>连接词和重复词语</strong>，提炼核心内容<br>③凸显层级和重要内容：大小对比、颜色对比、粗细对比、距离对比、下划线、色块、字体对比<br><strong>2.2确定版式布局</strong><br>①统一版心，利用<strong>参考线</strong>确定标题区域和正文区域<br>#可以先创建一个全屏矩形，然后等比缩放，调节至合适大小，分布在ppt四角<strong>确定留白区域</strong>，随后在非留白区域确定标题位置和正文位置，标题位置和正文位置之间<strong>相隔一个标题高度</strong><br><img src=\"/image/ppt_1.png\" alt=\"统一版心\"><br>②内容分块：利用<strong>色块、形状</strong>等根据文案信息对正文位置进行分块<br>#注意色块、形状等<strong>修饰内容可以占用留白区域</strong>，只要正文内容按照格式排版即可<br><img src=\"/image/ppt_2.png\" alt=\"内容分块\"><br><strong>2.3内容可视化</strong><br>①图标：给小标题增加合适的图标<br>#素材网站:<a href=\"https://www.flaticon.com/\">https://www.flaticon.com/</a> <a href=\"https://iconpark.oceanengine.com/official\">https://iconpark.oceanengine.com/official</a> <a href=\"http://www.iconfont.cn/\">www.iconfont.cn</a><br>#可以将图标截图，并将<strong>位图转化为矢量图</strong>，这样就可以在ppt中修改格式了<br>②图片：给<strong>文本块</strong>增加对应的图片背景等<br>③逻辑图示：流程图、带有<strong>关系暗示</strong>的图形等等<br>#并列、包含、流程、循环和层级<br>#素材网站：<a href=\"https://www.freepik.com/\">https://www.freepik.com/</a><br><strong>2.4实例</strong><br><img src=\"/image/ppt_3.png\" alt=\"实例一\"><br><img src=\"/image/ppt_4.png\" alt=\"实例二\"></p>\n<h3 id=\"3-多点排版\"><a href=\"#3-多点排版\" class=\"headerlink\" title=\"3.多点排版\"></a>3.多点排版</h3><p><strong>3.1中心环绕式布局</strong><br>①全圆式布局：段落数量为<strong>偶数</strong><br><img src=\"/image/ppt_5.png\" alt=\"全圆式布局\"><br>②半圆式布局：段落数量为<strong>奇数</strong><br><img src=\"/image/ppt_6.png\" alt=\"半圆式布局\"><br>#可以利用等比例缩放绘制圆辅助线，并<strong>利用对齐</strong>将段落点贴近辅助线<br><strong>3.2确定中心点样式</strong><br>①基本形状：并不一定要局限于圆形，还可以是其他多边形<br><img src=\"/image/ppt_7.png\" alt=\"基本图形\"><br>②图片素材：选取符合主题的图片<br><strong>3.3丰富层次</strong><br>①文本层次<br><img src=\"/image/ppt_9.png\" alt=\"文本层次\"><br>②图形层次<br><img src=\"/image/ppt_8.png\" alt=\"图形层次\"></p>\n<h3 id=\"4-多图排版\"><a href=\"#4-多图排版\" class=\"headerlink\" title=\"4.多图排版\"></a>4.多图排版</h3><p><strong>4.1尺寸</strong>：图片格式→裁剪→纵横比，将图片裁剪为比例一致的图片，然后再调整大小<br><strong>4.2间距</strong>：利用<strong>对齐</strong>，注意<strong>图片之间</strong>的间距要小于<strong>图片和页面之间</strong>的间距<br><strong>4.3效果</strong><br>①形状：将图片裁剪为特定形状，图片格式→裁剪→形状<br>②轮廓：给图片加上边框<br>③阴影：ctrl拖动复制图片→图片格式→艺术效果→虚化→调整虚化半径（调整为90）→柔化边缘→将该图片拖动到原图片底部<br>④映像：ctrl拖动复制图片→图片格式→映像效果→选择第一个预设→调整映像大小→增加模糊度<br>#可以设置好一张图片效果，然后采用<strong>格式</strong>刷快速复制<br><strong>4.4创意排版</strong><br>①瀑布流<br><img src=\"/image/ppt_10.png\" alt=\"瀑布流\"><br>②三维旋转<br><img src=\"/image/ppt_11.png\" alt=\"平行预设\"><br><img src=\"/image/ppt_12.png\" alt=\"角度预设\"><br><strong>#要将光源改为对比</strong>，防止过曝</p>\n<p><strong>5.创意排版</strong><br><strong>5.1分栏排版</strong>：利用<strong>色块、图片等</strong>将不同维度内容分隔开<br><img src=\"/image/ppt_34.png\" alt=\"分栏排版\"><br><img src=\"/image/ppt_35.png\" alt=\"示例\"><br><strong>5.2拦腰排版</strong>：用于需要突出重点内容的<strong>总分关系</strong><br><img src=\"/image/ppt_36.png\" alt=\"拦腰排版\"><br><img src=\"/image/ppt_37.png\" alt=\"示例\"><br><strong>5.3卡片排版</strong>：变种的分栏排版，注意卡片组合起来要是一个规整的矩形（可以有无内容色块），<strong>形状和间距相同</strong><br><img src=\"/image/ppt_38.png\" alt=\"拦腰排版\"><br><img src=\"/image/ppt_39.png\" alt=\"示例\"></p>\n<p>#配色可以采用主色+<strong>黑白灰</strong>&#x2F;主色的梯度色<br>#当内容不够饱满时，可以插入<strong>图片</strong></p>\n<h2 id=\"三、特殊要素\"><a href=\"#三、特殊要素\" class=\"headerlink\" title=\"三、特殊要素\"></a>三、特殊要素</h2><h3 id=\"1-表格\"><a href=\"#1-表格\" class=\"headerlink\" title=\"1.表格\"></a>1.表格</h3><p><strong>1.1大小</strong><br>①整体大小：要<strong>占满版心</strong><br>②单元格大小：全选表格→<strong>布局选项卡</strong>调整单元格高度→然后双击单元格的<strong>竖边</strong>，使得<strong>单元格宽度匹配文本宽度</strong><br><strong>1.2样式</strong><br><img src=\"/image/ppt_13.png\" alt=\"表格样式\"><br>①选择<strong>无样式</strong>的表格样式，随后自己编辑<br>②线条型表格的<strong>内部框线不宜太粗</strong>，防止喧宾夺主，<strong>表头</strong>、<strong>表尾</strong>和<strong>分割表格</strong>的框线可以适当增粗<br>③色块型表格，可以在表格<strong>底部</strong>添加<strong>对应大小颜色</strong>的色块，也可以对表格进行颜色填充，但是后者是对<strong>每个单元格</strong>进行对应填充且<strong>不能改变形状</strong>，在使用渐变色时还是使用前者<br><strong>1.3对齐</strong>：文本左对齐，数据右对齐<br>①如果遇到小数，位数要统一<br>②文本内容过多，可以分点介绍<br><strong>1.4突出重点</strong>：粗细、颜色、衬底<br><strong>1.5可视化</strong><br>①文本可视化：利用图标、图片代替文字或者作为背景<br>②数据可视化：比如百分比可以利用对应的进度条和饼状图代替<br><strong>1.6实例</strong><br><img src=\"/image/ppt_14.png\" alt=\"实例一\"><br><img src=\"/image/ppt_15.png\" alt=\"实例二\"><br><img src=\"/image/ppt_16.png\" alt=\"实例三\"><br><img src=\"/image/ppt_17.png\" alt=\"实例四\"></p>\n<h3 id=\"2-时间轴\"><a href=\"#2-时间轴\" class=\"headerlink\" title=\"2.时间轴\"></a>2.时间轴</h3><p><strong>2.1时间轴线</strong><br>①直线：渐变、箭头<br><img src=\"/image/ppt_18.png\" alt=\"直线\"><br><img src=\"/image/ppt_21.png\" alt=\"示例\"><br>②不规则线条：曲线、折线<br><img src=\"/image/ppt_19.png\" alt=\"曲线绘制\"><br><img src=\"/image/ppt_20.png\" alt=\"示例\"><br>#注意其中的技巧三，可以在<strong>ppt画面之外</strong>使其形成一个封闭图形，并进行<strong>颜色填充</strong>，如示例所示<br>③实物元素<br><img src=\"/image/ppt_22.png\" alt=\"实物元素\"><br><img src=\"/image/ppt_23.png\" alt=\"示例\"><br><strong>2.2节点</strong><br><img src=\"/image/ppt_24.png\" alt=\"节点\"><br>①还可以使用图标<br>②节点<strong>外发光</strong>效果：去除线条→<strong>偏移为中</strong>的<strong>阴影</strong>预设→透明度将为0→调整<strong>大小</strong>从而调节发光范围<br>③节点<strong>内发光</strong>效果：<strong>射线</strong>渐变→方向改为<strong>从中心</strong>→<strong>左侧</strong>光圈改为<strong>背景色</strong>，调整为<strong>完全透明</strong>→调整光圈位置即可<br><strong>2.3文案排版</strong><br>①文本层次<br><img src=\"/image/ppt_9.png\" alt=\"文本层次\"><br>②文本修饰：在节点和文案之间添加<strong>直线</strong>等元素进行<strong>联系</strong></p>\n<h3 id=\"3-架构图\"><a href=\"#3-架构图\" class=\"headerlink\" title=\"3.架构图\"></a>3.架构图</h3><p><strong>3.1确定走向</strong><br>①自上而下：适合分支较<strong>少</strong>的架构图<br><img src=\"/image/ppt_25.png\" alt=\"示例\"><br>②自左向右：适合分支较<strong>多</strong>的架构图<br><img src=\"/image/ppt_26.png\" alt=\"示例\"><br>③中心扩散：适合分支较<strong>多</strong>的架构图<br><img src=\"/image/ppt_27.png\" alt=\"示例\"><br><strong>3.2元素形状</strong><br>①衬底图形<br><img src=\"/image/ppt_28.png\" alt=\"衬底图形\"><br>#还可以将这些基本图形<strong>结合</strong>到一起形成新的衬底<br>②连接线条<br><img src=\"/image/ppt_29.png\" alt=\"连接线条\"><br>#其中曲线型连接可以采用<strong>花括号</strong>和箭头等组合而来<br>#可以在形状格式中修改箭头、花括号的<strong>末端形状</strong><br><strong>3.3区分层级</strong><br>①颜色对比：不同层级采用不同的颜色（最好<strong>梯度色</strong>），其中衬底颜色和文字颜色<strong>色调要相反</strong>，即衬底为深色，文字就要为浅色<br>②虚实对比：当层级过多，颜色对比不够用时，末端可以采用<strong>无填充、虚线框</strong>的形式<br>③形状对比<br><img src=\"/image/ppt_30.png\" alt=\"示例\"></p>\n<h3 id=\"4-图表\"><a href=\"#4-图表\" class=\"headerlink\" title=\"4.图表\"></a>4.图表</h3><p><strong>4.1确定样式</strong><br>①柱形图：大小比较，项目名较短<br>②条形图：大小比较，项目名较长<br>③饼状图：占比关系<br>④环形图表：占比关系，可以使用弧形和圆组合而成，调<strong>粗</strong>其线宽，改变其<strong>线端类型</strong>，将弧形置于顶层即可<br>⑤折线图：变化趋势</p>\n<p>#直接<strong>插入图表</strong>即可<br><strong>4.2图标优化</strong><br>①柱&#x2F;条形图</p>\n<ul>\n<li>弱化或者删除<strong>网格</strong>、<strong>图例</strong>和<strong>坐标轴</strong>元素</li>\n<li>间隙宽度<strong>50%-100%</strong></li>\n<li>突出重点，利用<strong>颜色</strong>和<strong>色块衬底</strong>即可</li>\n</ul>\n<p>②饼状图</p>\n<ul>\n<li>扇面<strong>从大到小顺时针排序</strong></li>\n<li>扇面配色避免花哨，使用<strong>梯度色</strong>即可</li>\n</ul>\n<p>③折线图</p>\n<ul>\n<li>弱化或者删除<strong>网格</strong>、<strong>图例</strong>和<strong>坐标轴</strong>元素</li>\n<li>如果无需精确呈现数据时，可使用<strong>平滑线</strong>（右击→设计数据系列格式→填充与线条→勾选平滑线选项）</li>\n<li>可以将其改变为<strong>面积图</strong>，对其进行<strong>渐变填充</strong>，但是如果要使用<strong>平滑线</strong>的话，不能将其改变为面积图，应该先将其改变为<strong>平滑线</strong>→新建一页，将图表<strong>选择性粘贴</strong>为<strong>图片（增强型图元文件）</strong>→取消组合，提取曲线→利用曲线和目标颜色色块进行<strong>组合拆分</strong>，将对应颜色色块裁剪为目标形状<strong>填充回原幻灯片</strong>即可</li>\n</ul>\n<p>#图表不仅仅局限于ppt图表自带的修饰，还可以自己利用<strong>线条、形状</strong>等素材对图表进行修饰，比如说用<strong>文本框</strong>代替图表原本的<strong>标题</strong>，用色块和文本框代替图例等<br>#可以使用<strong>数据标签</strong>代替纵轴</p>\n<p><strong>4.3布局</strong><br>①单个图表：占满版心即可<br>②多个图表：利用<strong>色块</strong>对页面进行分区，将图表放在对应的色块中</p>\n<p><strong>4.4实例</strong><br><img src=\"/image/ppt_31.png\" alt=\"实例一\"><br><img src=\"/image/ppt_32.png\" alt=\"实例二\"><br><img src=\"/image/ppt_33.png\" alt=\"实例三\"></p>\n"},{"title":"Hexo个人博客搭建","seo_title":"seo名称","toc":true,"indent":true,"top":false,"comments":1,"archive":true,"cover":false,"mathjax":false,"pin":false,"top_meta":false,"bottom_meta":false,"sidebar":["toc"],"keywords":"文章关键词","updated":"2023-11-07T14:10:58.014Z","img":"/medias/featureimages/18.webp","date":"2023-11-07T14:10:58.014Z","summary":"Hexo博客框架搭建、个性化和文章写法","_content":"\n# Hexo\n## Hexo个人博客搭建\n### 1.博客部署\n#### 1.1环境配置\n{%list%}\n安装hexo的依赖\n{%endlist%}\n**①windows环境**\n>安装`Node.js`和`Git`，并通过`xx -v`检测其是否在**环境变量**中\n{%list%}\n如果不在，则需要手动将其bin文件夹路径添加到系统变量中的path变量中\n{%endlist%}\n>设置`npm`的**镜像源**\n```\n# 查看npm的配置\nnpm config list\n# 默认源\nnpm config set registry https://registry.npmjs.org\n# 临时改变镜像源\nnpm --registry=https://registry.npm.taobao.org\n# 永久设置为淘宝镜像源\nnpm config set registry https://registry.npm.taobao.org\n```\n**②Linux环境**\n>安装`Node.js`和`Git`，若使用**源码安装**，则需要添加**软链接**\n{%list%}\n类似于windows的环境变量，Linux在指定位置找对应的命令\n{%endlist%}\n>设置`npm`的**镜像源**，**同上**\n#### 1.2Hexo配置\n**①Hexo安装**\n>在`git bash/shell`中输入`npm install -g hexo-cli`\n\n**②博客初始化**\n>选择一个**位置**用于存放**博客文件夹**\n```\n#新建文件夹\nmkdir <新建文件夹的名称> \n#初始化文件夹\nhexo init <新建文件夹的名称>\n#在该文件夹中安装博客所需要的依赖文件\ncd <新建文件夹的名称>\nnpm install \n```\n#### 1.3GitHub设置\n**①创建仓库**\n>**名字**必须是`<用户名>.github.io`\n\n**②配置Git用户名和邮箱**\n>如果**之前配置过**则**不用配置**，否则需要配置\n\n#### 1.4本地文件夹与GitHub建立连接\n**①插件安装**\n>在**博客目录**下的`git bash/shell`中输入命令`npm install hexo-deployer-git --save`\n\n**②SSH密钥设置**\n>并在`git bash/shell`中输入`ssh -T git@github.com`测试是否连接成功\n\n**③修改Hexo配置文件**\n>打开`_config.yml`，滑到**文件最底部**，填入**如下代码**\n```\ntype: git\nrepo: git@github.com:Github用户名/github用户名.github.io.git  \n//也可使用https地址，如：https://github.com/Github用户名/Github用户名.github.io.git            \nbranch: master\n```\n**④上传博客**\n>在**博客目录**下的`git bash/shell`中输入**命令**`hexo d`\n{%list%}\n上传成功后，在浏览器中打开https://<用户名>.github.io，即可查看上传的网页\n{%endlist%}\n***\n### 2.博客个性化\n#### 2.1主题设置\n**①主题安装**\n>在**博客目录**下的`git bash/shell`中输入如下**命令**\n{%list%}\n这里选择的是matery主题，有两个版本，稳定版本和最新版本 (不定期更新优化)，自主选择版本\n{%endlist%}\n```\ngit clone https://github.com/blinkfox/hexo-theme-matery themes/matery     # 稳定版\ngit clone -b develop https://github.com/blinkfox/hexo-theme-matery themes/matery   #最新版(不定期进行优化更新)\n```\n**②修改博客主题**\n>将**博客配置文件**`_config`中的`theme`值修改为**下载主题**的**文件夹名**\n{%list%}\n其他博客配置文件修改可见官网\n{%endlist%}\n{%right%}\n修改博客配置文件后要运行执行hexo clean && hexo g，重新生成博客文件\n{%endright%}\n{%warning%}\n注意博客配置文件在博客根目录下，对应主题也有相应配置文件在主题文件夹中\n{%endwarning%}\n#### 2.2插件配置\n**①代码高亮**\n>**安装**：在**博客文件夹**下`git bash/shell`中运行`npm i -S hexo-prism-plugin`\n{%list%}\n单行代码使用`包围，多行代码使用```包围\n{%endlist%}\n>**配置**：修改**博客配置文件**下`_config.yml`文件中`highlight.enable`的值为`false`，并新增以下**配置项**\n```\nprism_plugin:\n  mode: 'preprocess'    # realtime/preprocess\n  theme: 'tomorrow'\n  line_number: false    # default false\n  custom_css:\n```\n**②搜索**\n>**下载**：`npm install hexo-generator-search --save`\n\n>**配置**：在**博客配置文件**中，新增以下的**配置项**\n```\nsearch:\n  path: search.xml\n  field: post\n```\n**③中文链接转拼音**\n>**下载**：`npm i hexo-permalink-pinyin --save`\n\n>**配置**：在**博客配置文件**中，新增以下的**配置项**\n```\npermalink_pinyin:\n  enable: true\n  separator: '-' # default: '-'\n```\n**④文章字数统计插件**\n>**下载**：`npm i --save hexo-wordcount`\n\n>**配置**：在**博客配置文件**中，新增以下的**配置项**\n```\nwordCount:\n  enable: false # 将这个值设置为 true 即可.\n  postWordCount: true\n  min2read: true\n  totalCount: true\n```\n#### 2.3自定义标签设置\n**①步骤**\n>在**主题目录下**新建`scripts`目录，并**此目录下**新建`block.js`文件，填入**以下代码**\n```\nhexo.extend.tag.register('wrong', function(args, content){\n    var className =  args.join(' ');\n    var formattedContent = content.replace(/\\n/g, '<br>');  // 将换行符替换为 <br> 标签\n    return '<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> ' + formattedContent + '</div>';\n  }, {ends: true});\n  \n  hexo.extend.tag.register('right', function(args, content){\n    var className =  args.join(' ');\n    var formattedContent = content.replace(/\\n/g, '<br>');  // 将换行符替换为 <br> 标签\n    return '<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> ' + formattedContent + '</div>';\n  }, {ends: true});\n  \n  hexo.extend.tag.register('warning', function(args, content){\n    var className =  args.join(' ');\n    var formattedContent = content.replace(/\\n/g, '<br>');  // 将换行符替换为 <br> 标签\n    return '<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> ' + formattedContent + '</div>';\n  }, {ends: true});\n\n  hexo.extend.tag.register('list', function(args, content){\n    var className =  args.join(' ');\n    var formattedContent = content.replace(/\\n/g, '<br>');  // 将换行符替换为 <br> 标签\n    return '<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> ' +'<br>'+formattedContent + '</div>';\n  }, {ends: true});\n```\n>在`head.ejs`文件**添加**以下`css`样式：\n```\n    <style type=\"text/css\">\n        .uk-alert {\n            margin-bottom: 5px;\n            padding: 5px;\n            background: #ebf7fd;\n            color: #2d7091;\n            border: 0px solid #ffffff;\n            border-radius: 4px;\n            text-shadow: 0 1px 0 #ffffff;\n        }\n        .uk-alert-success {\n            background: rgba(120, 199, 9, 0.1);\n            color: rgba(120, 199, 9);\n            border-left: 6px solid rgba(120, 199, 9);\n            font-weight: 600;\n        }\n        .uk-alert-warning {\n            background: #FFF8E9;\n            color: #FFB91F;\n            border-left: 6px solid #FFB91F;\n            font-weight: 600;\n        }\n        .uk-alert-danger {\n            background: #FFE6E6;\n            color: #FF7979;\n            border-left: 6px solid#FF7979;\n            font-weight: 600;\n        }\n        .uk-alert-list {\n            background: #ECF7FE;\n            color: #3CACF4;\n            border-left: 6px solid#3CACF4;\n            font-weight: 600;\n        }\n </style>\n```\n**②解析**\n{%list%}\n以warning部分作为例子\n{%endlist%}\n>**`block.js`文件**：其中`warning`决定了**正文中的书写格式**；`div class`决定了**容器（背景）的名字**；`i class`决定了**图标的样式**\n\n>**`head.ejs`文件**：主要决定**网页表现**出的**具体样式**\n{%right%}\n详细可询问ChatGPT\n{%endright%}\n**③示例**\n```\n{%wrong%}\n错误\n{%endwrong%}\n{%right%}\n正确\n{%endright%}\n{%warning%}\n警告\n{%endwarning%}\n{%list%}\n列表项\n{%endlist%}\n```\n{%wrong%}\n错误\n{%endwrong%}\n{%right%}\n正确\n{%endright%}\n{%warning%}\n警告\n{%endwarning%}\n{%list%}\n列表项\n{%endlist%}\n***\n### 3.博客书写\n#### 3.1Front-matter\n>在**博客根目录**下`scaffolds`文件夹下新增/修改`post.md`文件，即可修改**默认样式**，**详细样式**如下\n```\ntitle: 文章名称\nseo_title: seo名称\ntoc: true            # 是否生成目录\nindent: true         # 是否首行缩进\ncomments: true       # 是否允许评论\narchive: true        # 是否显示在归档\ncover: false         # 是否显示封面\nmathjax: false       # 是否渲染公式\npin: false           # 是否首页置顶\ntop_meta: false      # 是否显示顶部信息\nbottom_meta: false   # 是否显示尾部信息\nsidebar: [toc]\ntag:\n  - 标签一\n  - 标签二\ncategories: 分组\nkeywords: 文章关键词\ndate: 2021-13-13 00:00\nupdated: 2021-13-13 00:00\ndescription: 文章摘要\nicons: [fas fa-fire red, fas fa-star green]\nreferences:\n  - title: 参考资料名称\n    url: https://参考资料地址\nheadimg: https://文章头图\nthumbnail: https://右侧缩略图\n```\n#### 3.2正文修饰\n**①标题**\n>`#`为**一级标题**，`##`为**二级标题**,以此类推\n{%list%}\n最多六级，且#和文字之间要有空格\n{%endlist%}\n\n**②加粗与倾斜**\n```\n*[文本]* #倾斜\n**[文本]** #加粗\n***[文本]*** #加粗倾斜\n```\n**③引用**\n>`>`后添加**空格**和**引用内容**\n{%list%}\n不同的引用以及正文使用换行隔开\n{%endlist%}\n```\n> 树1\n\n> 树2\n```\n\n> 树1\n\n> 树2\n\n**④超链接**\n>**格式**：`[Link Text](link-address)`\n\n[参考文章](http://106.15.109.213/2020/07/25/markdown%E8%AF%AD%E6%B3%95%E4%BB%8B%E7%BB%8D/#6-%E5%BC%95%E7%94%A8%E6%AE%B5%E8%90%BD)\n\n**⑤插入图片**\n```\n#单张图片\n！[Figure](URL www.xxx.com)\n#figure此处的文字有时作为图片标题显示，有时不显示，optional，可留空\n#URL处也可以不填写url，也可以选择上传本地图片，此时只需填写相对路径即可，\n#相对路径指的是在与此markdown文档同路径下的相对路径，可在此md文档同路径下新建img文件夹，\n#在此处填/img/xx.png 具体情况具体分析，或许在主题配置文件中亦有提及*\n\n#多张图片\n{% gi total n1-n2-... %}\n  ![](url)\n  ![](url)\n  ![](url)\n  ![](url)\n  ![](url)\n{% endgi %}\n#total为图片总的数量,n1为第一行的图片数量,n2为第二行的图片数量\n```\n**⑥锚点**\n>**格式**：`[显示内容](#标题)`\n{%list%}\n锚点与链接基本相同，区别在于锚点是在文章内部相互传送，但只能传送到n级标题的位置\n{%endlist%}\n{%right%}\n注意此处#代表的是‘标题’这一性质，而非标题的级别，因此不必加n个#来体现标题等级\n{%endright%}\n\n","source":"_posts/hexo博客框架搭建以及个性化.md","raw":"---\ntitle: Hexo个人博客搭建\nseo_title: seo名称\ntoc: true\nindent: true\ntop: false\ncomments: true\narchive: true\ncover: false\nmathjax: false\npin: false\ntop_meta: false\nbottom_meta: false\nsidebar:\n  - toc\ntag:\n  - Hexo\n  - 静态博客框架\ncategories: 软技能\nkeywords: 文章关键词\nupdated: ''\nimg: /medias/featureimages/18.webp\ndate:\nsummary: Hexo博客框架搭建、个性化和文章写法\n---\n\n# Hexo\n## Hexo个人博客搭建\n### 1.博客部署\n#### 1.1环境配置\n{%list%}\n安装hexo的依赖\n{%endlist%}\n**①windows环境**\n>安装`Node.js`和`Git`，并通过`xx -v`检测其是否在**环境变量**中\n{%list%}\n如果不在，则需要手动将其bin文件夹路径添加到系统变量中的path变量中\n{%endlist%}\n>设置`npm`的**镜像源**\n```\n# 查看npm的配置\nnpm config list\n# 默认源\nnpm config set registry https://registry.npmjs.org\n# 临时改变镜像源\nnpm --registry=https://registry.npm.taobao.org\n# 永久设置为淘宝镜像源\nnpm config set registry https://registry.npm.taobao.org\n```\n**②Linux环境**\n>安装`Node.js`和`Git`，若使用**源码安装**，则需要添加**软链接**\n{%list%}\n类似于windows的环境变量，Linux在指定位置找对应的命令\n{%endlist%}\n>设置`npm`的**镜像源**，**同上**\n#### 1.2Hexo配置\n**①Hexo安装**\n>在`git bash/shell`中输入`npm install -g hexo-cli`\n\n**②博客初始化**\n>选择一个**位置**用于存放**博客文件夹**\n```\n#新建文件夹\nmkdir <新建文件夹的名称> \n#初始化文件夹\nhexo init <新建文件夹的名称>\n#在该文件夹中安装博客所需要的依赖文件\ncd <新建文件夹的名称>\nnpm install \n```\n#### 1.3GitHub设置\n**①创建仓库**\n>**名字**必须是`<用户名>.github.io`\n\n**②配置Git用户名和邮箱**\n>如果**之前配置过**则**不用配置**，否则需要配置\n\n#### 1.4本地文件夹与GitHub建立连接\n**①插件安装**\n>在**博客目录**下的`git bash/shell`中输入命令`npm install hexo-deployer-git --save`\n\n**②SSH密钥设置**\n>并在`git bash/shell`中输入`ssh -T git@github.com`测试是否连接成功\n\n**③修改Hexo配置文件**\n>打开`_config.yml`，滑到**文件最底部**，填入**如下代码**\n```\ntype: git\nrepo: git@github.com:Github用户名/github用户名.github.io.git  \n//也可使用https地址，如：https://github.com/Github用户名/Github用户名.github.io.git            \nbranch: master\n```\n**④上传博客**\n>在**博客目录**下的`git bash/shell`中输入**命令**`hexo d`\n{%list%}\n上传成功后，在浏览器中打开https://<用户名>.github.io，即可查看上传的网页\n{%endlist%}\n***\n### 2.博客个性化\n#### 2.1主题设置\n**①主题安装**\n>在**博客目录**下的`git bash/shell`中输入如下**命令**\n{%list%}\n这里选择的是matery主题，有两个版本，稳定版本和最新版本 (不定期更新优化)，自主选择版本\n{%endlist%}\n```\ngit clone https://github.com/blinkfox/hexo-theme-matery themes/matery     # 稳定版\ngit clone -b develop https://github.com/blinkfox/hexo-theme-matery themes/matery   #最新版(不定期进行优化更新)\n```\n**②修改博客主题**\n>将**博客配置文件**`_config`中的`theme`值修改为**下载主题**的**文件夹名**\n{%list%}\n其他博客配置文件修改可见官网\n{%endlist%}\n{%right%}\n修改博客配置文件后要运行执行hexo clean && hexo g，重新生成博客文件\n{%endright%}\n{%warning%}\n注意博客配置文件在博客根目录下，对应主题也有相应配置文件在主题文件夹中\n{%endwarning%}\n#### 2.2插件配置\n**①代码高亮**\n>**安装**：在**博客文件夹**下`git bash/shell`中运行`npm i -S hexo-prism-plugin`\n{%list%}\n单行代码使用`包围，多行代码使用```包围\n{%endlist%}\n>**配置**：修改**博客配置文件**下`_config.yml`文件中`highlight.enable`的值为`false`，并新增以下**配置项**\n```\nprism_plugin:\n  mode: 'preprocess'    # realtime/preprocess\n  theme: 'tomorrow'\n  line_number: false    # default false\n  custom_css:\n```\n**②搜索**\n>**下载**：`npm install hexo-generator-search --save`\n\n>**配置**：在**博客配置文件**中，新增以下的**配置项**\n```\nsearch:\n  path: search.xml\n  field: post\n```\n**③中文链接转拼音**\n>**下载**：`npm i hexo-permalink-pinyin --save`\n\n>**配置**：在**博客配置文件**中，新增以下的**配置项**\n```\npermalink_pinyin:\n  enable: true\n  separator: '-' # default: '-'\n```\n**④文章字数统计插件**\n>**下载**：`npm i --save hexo-wordcount`\n\n>**配置**：在**博客配置文件**中，新增以下的**配置项**\n```\nwordCount:\n  enable: false # 将这个值设置为 true 即可.\n  postWordCount: true\n  min2read: true\n  totalCount: true\n```\n#### 2.3自定义标签设置\n**①步骤**\n>在**主题目录下**新建`scripts`目录，并**此目录下**新建`block.js`文件，填入**以下代码**\n```\nhexo.extend.tag.register('wrong', function(args, content){\n    var className =  args.join(' ');\n    var formattedContent = content.replace(/\\n/g, '<br>');  // 将换行符替换为 <br> 标签\n    return '<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> ' + formattedContent + '</div>';\n  }, {ends: true});\n  \n  hexo.extend.tag.register('right', function(args, content){\n    var className =  args.join(' ');\n    var formattedContent = content.replace(/\\n/g, '<br>');  // 将换行符替换为 <br> 标签\n    return '<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> ' + formattedContent + '</div>';\n  }, {ends: true});\n  \n  hexo.extend.tag.register('warning', function(args, content){\n    var className =  args.join(' ');\n    var formattedContent = content.replace(/\\n/g, '<br>');  // 将换行符替换为 <br> 标签\n    return '<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> ' + formattedContent + '</div>';\n  }, {ends: true});\n\n  hexo.extend.tag.register('list', function(args, content){\n    var className =  args.join(' ');\n    var formattedContent = content.replace(/\\n/g, '<br>');  // 将换行符替换为 <br> 标签\n    return '<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> ' +'<br>'+formattedContent + '</div>';\n  }, {ends: true});\n```\n>在`head.ejs`文件**添加**以下`css`样式：\n```\n    <style type=\"text/css\">\n        .uk-alert {\n            margin-bottom: 5px;\n            padding: 5px;\n            background: #ebf7fd;\n            color: #2d7091;\n            border: 0px solid #ffffff;\n            border-radius: 4px;\n            text-shadow: 0 1px 0 #ffffff;\n        }\n        .uk-alert-success {\n            background: rgba(120, 199, 9, 0.1);\n            color: rgba(120, 199, 9);\n            border-left: 6px solid rgba(120, 199, 9);\n            font-weight: 600;\n        }\n        .uk-alert-warning {\n            background: #FFF8E9;\n            color: #FFB91F;\n            border-left: 6px solid #FFB91F;\n            font-weight: 600;\n        }\n        .uk-alert-danger {\n            background: #FFE6E6;\n            color: #FF7979;\n            border-left: 6px solid#FF7979;\n            font-weight: 600;\n        }\n        .uk-alert-list {\n            background: #ECF7FE;\n            color: #3CACF4;\n            border-left: 6px solid#3CACF4;\n            font-weight: 600;\n        }\n </style>\n```\n**②解析**\n{%list%}\n以warning部分作为例子\n{%endlist%}\n>**`block.js`文件**：其中`warning`决定了**正文中的书写格式**；`div class`决定了**容器（背景）的名字**；`i class`决定了**图标的样式**\n\n>**`head.ejs`文件**：主要决定**网页表现**出的**具体样式**\n{%right%}\n详细可询问ChatGPT\n{%endright%}\n**③示例**\n```\n{%wrong%}\n错误\n{%endwrong%}\n{%right%}\n正确\n{%endright%}\n{%warning%}\n警告\n{%endwarning%}\n{%list%}\n列表项\n{%endlist%}\n```\n{%wrong%}\n错误\n{%endwrong%}\n{%right%}\n正确\n{%endright%}\n{%warning%}\n警告\n{%endwarning%}\n{%list%}\n列表项\n{%endlist%}\n***\n### 3.博客书写\n#### 3.1Front-matter\n>在**博客根目录**下`scaffolds`文件夹下新增/修改`post.md`文件，即可修改**默认样式**，**详细样式**如下\n```\ntitle: 文章名称\nseo_title: seo名称\ntoc: true            # 是否生成目录\nindent: true         # 是否首行缩进\ncomments: true       # 是否允许评论\narchive: true        # 是否显示在归档\ncover: false         # 是否显示封面\nmathjax: false       # 是否渲染公式\npin: false           # 是否首页置顶\ntop_meta: false      # 是否显示顶部信息\nbottom_meta: false   # 是否显示尾部信息\nsidebar: [toc]\ntag:\n  - 标签一\n  - 标签二\ncategories: 分组\nkeywords: 文章关键词\ndate: 2021-13-13 00:00\nupdated: 2021-13-13 00:00\ndescription: 文章摘要\nicons: [fas fa-fire red, fas fa-star green]\nreferences:\n  - title: 参考资料名称\n    url: https://参考资料地址\nheadimg: https://文章头图\nthumbnail: https://右侧缩略图\n```\n#### 3.2正文修饰\n**①标题**\n>`#`为**一级标题**，`##`为**二级标题**,以此类推\n{%list%}\n最多六级，且#和文字之间要有空格\n{%endlist%}\n\n**②加粗与倾斜**\n```\n*[文本]* #倾斜\n**[文本]** #加粗\n***[文本]*** #加粗倾斜\n```\n**③引用**\n>`>`后添加**空格**和**引用内容**\n{%list%}\n不同的引用以及正文使用换行隔开\n{%endlist%}\n```\n> 树1\n\n> 树2\n```\n\n> 树1\n\n> 树2\n\n**④超链接**\n>**格式**：`[Link Text](link-address)`\n\n[参考文章](http://106.15.109.213/2020/07/25/markdown%E8%AF%AD%E6%B3%95%E4%BB%8B%E7%BB%8D/#6-%E5%BC%95%E7%94%A8%E6%AE%B5%E8%90%BD)\n\n**⑤插入图片**\n```\n#单张图片\n！[Figure](URL www.xxx.com)\n#figure此处的文字有时作为图片标题显示，有时不显示，optional，可留空\n#URL处也可以不填写url，也可以选择上传本地图片，此时只需填写相对路径即可，\n#相对路径指的是在与此markdown文档同路径下的相对路径，可在此md文档同路径下新建img文件夹，\n#在此处填/img/xx.png 具体情况具体分析，或许在主题配置文件中亦有提及*\n\n#多张图片\n{% gi total n1-n2-... %}\n  ![](url)\n  ![](url)\n  ![](url)\n  ![](url)\n  ![](url)\n{% endgi %}\n#total为图片总的数量,n1为第一行的图片数量,n2为第二行的图片数量\n```\n**⑥锚点**\n>**格式**：`[显示内容](#标题)`\n{%list%}\n锚点与链接基本相同，区别在于锚点是在文章内部相互传送，但只能传送到n级标题的位置\n{%endlist%}\n{%right%}\n注意此处#代表的是‘标题’这一性质，而非标题的级别，因此不必加n个#来体现标题等级\n{%endright%}\n\n","slug":"hexo博客框架搭建以及个性化","published":1,"_id":"clmkphbf9001b9gvdbje5a3wf","layout":"post","photos":[],"link":"","content":"<h1 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h1><h2 id=\"Hexo个人博客搭建\"><a href=\"#Hexo个人博客搭建\" class=\"headerlink\" title=\"Hexo个人博客搭建\"></a>Hexo个人博客搭建</h2><h3 id=\"1-博客部署\"><a href=\"#1-博客部署\" class=\"headerlink\" title=\"1.博客部署\"></a>1.博客部署</h3><h4 id=\"1-1环境配置\"><a href=\"#1-1环境配置\" class=\"headerlink\" title=\"1.1环境配置\"></a>1.1环境配置</h4><div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 安装hexo的依赖</div>\n<p><strong>①windows环境</strong></p>\n<blockquote>\n<p>安装<code>Node.js</code>和<code>Git</code>，并通过<code>xx -v</code>检测其是否在<strong>环境变量</strong>中</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 如果不在，则需要手动将其bin文件夹路径添加到系统变量中的path变量中</div>\n<blockquote>\n<p>设置<code>npm</code>的<strong>镜像源</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 查看npm的配置\nnpm config list\n# 默认源\nnpm config set registry https://registry.npmjs.org\n# 临时改变镜像源\nnpm --registry=https://registry.npm.taobao.org\n# 永久设置为淘宝镜像源\nnpm config set registry https://registry.npm.taobao.org<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>②Linux环境</strong></p>\n<blockquote>\n<p>安装<code>Node.js</code>和<code>Git</code>，若使用<strong>源码安装</strong>，则需要添加<strong>软链接</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 类似于windows的环境变量，Linux在指定位置找对应的命令</div>\n<blockquote>\n<p>设置<code>npm</code>的<strong>镜像源</strong>，<strong>同上</strong></p>\n</blockquote>\n<h4 id=\"1-2Hexo配置\"><a href=\"#1-2Hexo配置\" class=\"headerlink\" title=\"1.2Hexo配置\"></a>1.2Hexo配置</h4><p><strong>①Hexo安装</strong></p>\n<blockquote>\n<p>在<code>git bash/shell</code>中输入<code>npm install -g hexo-cli</code></p>\n</blockquote>\n<p><strong>②博客初始化</strong></p>\n<blockquote>\n<p>选择一个<strong>位置</strong>用于存放<strong>博客文件夹</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#新建文件夹\nmkdir &lt;新建文件夹的名称&gt; \n#初始化文件夹\nhexo init &lt;新建文件夹的名称&gt;\n#在该文件夹中安装博客所需要的依赖文件\ncd &lt;新建文件夹的名称&gt;\nnpm install <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"1-3GitHub设置\"><a href=\"#1-3GitHub设置\" class=\"headerlink\" title=\"1.3GitHub设置\"></a>1.3GitHub设置</h4><p><strong>①创建仓库</strong></p>\n<blockquote>\n<p><strong>名字</strong>必须是<code>&lt;用户名&gt;.github.io</code></p>\n</blockquote>\n<p><strong>②配置Git用户名和邮箱</strong></p>\n<blockquote>\n<p>如果<strong>之前配置过</strong>则<strong>不用配置</strong>，否则需要配置</p>\n</blockquote>\n<h4 id=\"1-4本地文件夹与GitHub建立连接\"><a href=\"#1-4本地文件夹与GitHub建立连接\" class=\"headerlink\" title=\"1.4本地文件夹与GitHub建立连接\"></a>1.4本地文件夹与GitHub建立连接</h4><p><strong>①插件安装</strong></p>\n<blockquote>\n<p>在<strong>博客目录</strong>下的<code>git bash/shell</code>中输入命令<code>npm install hexo-deployer-git --save</code></p>\n</blockquote>\n<p><strong>②SSH密钥设置</strong></p>\n<blockquote>\n<p>并在<code>git bash/shell</code>中输入<code>ssh -T git@github.com</code>测试是否连接成功</p>\n</blockquote>\n<p><strong>③修改Hexo配置文件</strong></p>\n<blockquote>\n<p>打开<code>_config.yml</code>，滑到<strong>文件最底部</strong>，填入<strong>如下代码</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">type: git\nrepo: git@github.com:Github用户名/github用户名.github.io.git  \n//也可使用https地址，如：https://github.com/Github用户名/Github用户名.github.io.git            \nbranch: master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>④上传博客</strong></p>\n<blockquote>\n<p>在<strong>博客目录</strong>下的<code>git bash/shell</code>中输入<strong>命令</strong><code>hexo d</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 上传成功后，在浏览器中打开https://&lt;用户名&gt;.github.io，即可查看上传的网页</div>\n<hr>\n<h3 id=\"2-博客个性化\"><a href=\"#2-博客个性化\" class=\"headerlink\" title=\"2.博客个性化\"></a>2.博客个性化</h3><h4 id=\"2-1主题设置\"><a href=\"#2-1主题设置\" class=\"headerlink\" title=\"2.1主题设置\"></a>2.1主题设置</h4><p><strong>①主题安装</strong></p>\n<blockquote>\n<p>在<strong>博客目录</strong>下的<code>git bash/shell</code>中输入如下<strong>命令</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 这里选择的是matery主题，有两个版本，稳定版本和最新版本 (不定期更新优化)，自主选择版本</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">git clone https://github.com/blinkfox/hexo-theme-matery themes/matery     # 稳定版\ngit clone -b develop https://github.com/blinkfox/hexo-theme-matery themes/matery   #最新版(不定期进行优化更新)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><strong>②修改博客主题</strong></p>\n<blockquote>\n<p>将<strong>博客配置文件</strong><code>_config</code>中的<code>theme</code>值修改为<strong>下载主题</strong>的<strong>文件夹名</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 其他博客配置文件修改可见官网</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 修改博客配置文件后要运行执行hexo clean &amp;&amp; hexo g，重新生成博客文件</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 注意博客配置文件在博客根目录下，对应主题也有相应配置文件在主题文件夹中</div>\n<h4 id=\"2-2插件配置\"><a href=\"#2-2插件配置\" class=\"headerlink\" title=\"2.2插件配置\"></a>2.2插件配置</h4><p><strong>①代码高亮</strong></p>\n<blockquote>\n<p><strong>安装</strong>：在<strong>博客文件夹</strong>下<code>git bash/shell</code>中运行<code>npm i -S hexo-prism-plugin</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 单行代码使用`包围，多行代码使用```包围</div>\n<blockquote>\n<p><strong>配置</strong>：修改<strong>博客配置文件</strong>下<code>_config.yml</code>文件中<code>highlight.enable</code>的值为<code>false</code>，并新增以下<strong>配置项</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">prism_plugin:\n  mode: 'preprocess'    # realtime/preprocess\n  theme: 'tomorrow'\n  line_number: false    # default false\n  custom_css:<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>②搜索</strong></p>\n<blockquote>\n<p><strong>下载</strong>：<code>npm install hexo-generator-search --save</code></p>\n</blockquote>\n<blockquote>\n<p><strong>配置</strong>：在<strong>博客配置文件</strong>中，新增以下的<strong>配置项</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">search:\n  path: search.xml\n  field: post<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><strong>③中文链接转拼音</strong></p>\n<blockquote>\n<p><strong>下载</strong>：<code>npm i hexo-permalink-pinyin --save</code></p>\n</blockquote>\n<blockquote>\n<p><strong>配置</strong>：在<strong>博客配置文件</strong>中，新增以下的<strong>配置项</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">permalink_pinyin:\n  enable: true\n  separator: '-' # default: '-'<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><strong>④文章字数统计插件</strong></p>\n<blockquote>\n<p><strong>下载</strong>：<code>npm i --save hexo-wordcount</code></p>\n</blockquote>\n<blockquote>\n<p><strong>配置</strong>：在<strong>博客配置文件</strong>中，新增以下的<strong>配置项</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">wordCount:\n  enable: false # 将这个值设置为 true 即可.\n  postWordCount: true\n  min2read: true\n  totalCount: true<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"2-3自定义标签设置\"><a href=\"#2-3自定义标签设置\" class=\"headerlink\" title=\"2.3自定义标签设置\"></a>2.3自定义标签设置</h4><p><strong>①步骤</strong></p>\n<blockquote>\n<p>在<strong>主题目录下</strong>新建<code>scripts</code>目录，并<strong>此目录下</strong>新建<code>block.js</code>文件，填入<strong>以下代码</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">hexo.extend.tag.register('wrong', function(args, content){\n    var className =  args.join(' ');\n    var formattedContent = content.replace(/\\n/g, '&lt;br&gt;');  // 将换行符替换为 &lt;br&gt; 标签\n    return '&lt;div class=\"uk-alert uk-alert-danger\"&gt;&lt;i class=\"fas fa-exclamation-triangle\"&gt;&lt;/i&gt; ' + formattedContent + '&lt;/div&gt;';\n  }, {ends: true});\n  \n  hexo.extend.tag.register('right', function(args, content){\n    var className =  args.join(' ');\n    var formattedContent = content.replace(/\\n/g, '&lt;br&gt;');  // 将换行符替换为 &lt;br&gt; 标签\n    return '&lt;div class=\"uk-alert uk-alert-success\"&gt;&lt;i class=\"fa fa-check-circle\"&gt;&lt;/i&gt; ' + formattedContent + '&lt;/div&gt;';\n  }, {ends: true});\n  \n  hexo.extend.tag.register('warning', function(args, content){\n    var className =  args.join(' ');\n    var formattedContent = content.replace(/\\n/g, '&lt;br&gt;');  // 将换行符替换为 &lt;br&gt; 标签\n    return '&lt;div class=\"uk-alert uk-alert-warning\"&gt;&lt;i class=\"fa fa-exclamation-circle\"&gt;&lt;/i&gt; ' + formattedContent + '&lt;/div&gt;';\n  }, {ends: true});\n\n  hexo.extend.tag.register('list', function(args, content){\n    var className =  args.join(' ');\n    var formattedContent = content.replace(/\\n/g, '&lt;br&gt;');  // 将换行符替换为 &lt;br&gt; 标签\n    return '&lt;div class=\"uk-alert uk-alert-list\"&gt;&lt;i class=\"fas fa-list-ul\"&gt;&lt;/i&gt; ' +'&lt;br&gt;'+formattedContent + '&lt;/div&gt;';\n  }, {ends: true});<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>在<code>head.ejs</code>文件<strong>添加</strong>以下<code>css</code>样式：</p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">   &lt;style type=\"text/css\"&gt;\n       .uk-alert {\n           margin-bottom: 5px;\n           padding: 5px;\n           background: #ebf7fd;\n           color: #2d7091;\n           border: 0px solid #ffffff;\n           border-radius: 4px;\n           text-shadow: 0 1px 0 #ffffff;\n       }\n       .uk-alert-success {\n           background: rgba(120, 199, 9, 0.1);\n           color: rgba(120, 199, 9);\n           border-left: 6px solid rgba(120, 199, 9);\n           font-weight: 600;\n       }\n       .uk-alert-warning {\n           background: #FFF8E9;\n           color: #FFB91F;\n           border-left: 6px solid #FFB91F;\n           font-weight: 600;\n       }\n       .uk-alert-danger {\n           background: #FFE6E6;\n           color: #FF7979;\n           border-left: 6px solid#FF7979;\n           font-weight: 600;\n       }\n       .uk-alert-list {\n           background: #ECF7FE;\n           color: #3CACF4;\n           border-left: 6px solid#3CACF4;\n           font-weight: 600;\n       }\n&lt;/style&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>②解析</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 以warning部分作为例子</div>\n<blockquote>\n<p><strong><code>block.js</code>文件</strong>：其中<code>warning</code>决定了<strong>正文中的书写格式</strong>；<code>div class</code>决定了<strong>容器（背景）的名字</strong>；<code>i class</code>决定了<strong>图标的样式</strong></p>\n</blockquote>\n<blockquote>\n<p><strong><code>head.ejs</code>文件</strong>：主要决定<strong>网页表现</strong>出的<strong>具体样式</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 详细可询问ChatGPT</div>\n<p><strong>③示例</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">{%wrong%}\n错误\n{%endwrong%}\n{%right%}\n正确\n{%endright%}\n{%warning%}\n警告\n{%endwarning%}\n{%list%}\n列表项\n{%endlist%}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 错误</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 正确</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 警告</div>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 列表项</div>\n<hr>\n<h3 id=\"3-博客书写\"><a href=\"#3-博客书写\" class=\"headerlink\" title=\"3.博客书写\"></a>3.博客书写</h3><h4 id=\"3-1Front-matter\"><a href=\"#3-1Front-matter\" class=\"headerlink\" title=\"3.1Front-matter\"></a>3.1Front-matter</h4><blockquote>\n<p>在<strong>博客根目录</strong>下<code>scaffolds</code>文件夹下新增/修改<code>post.md</code>文件，即可修改<strong>默认样式</strong>，<strong>详细样式</strong>如下</p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">title: 文章名称\nseo_title: seo名称\ntoc: true            # 是否生成目录\nindent: true         # 是否首行缩进\ncomments: true       # 是否允许评论\narchive: true        # 是否显示在归档\ncover: false         # 是否显示封面\nmathjax: false       # 是否渲染公式\npin: false           # 是否首页置顶\ntop_meta: false      # 是否显示顶部信息\nbottom_meta: false   # 是否显示尾部信息\nsidebar: [toc]\ntag:\n  - 标签一\n  - 标签二\ncategories: 分组\nkeywords: 文章关键词\ndate: 2021-13-13 00:00\nupdated: 2021-13-13 00:00\ndescription: 文章摘要\nicons: [fas fa-fire red, fas fa-star green]\nreferences:\n  - title: 参考资料名称\n    url: https://参考资料地址\nheadimg: https://文章头图\nthumbnail: https://右侧缩略图<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"3-2正文修饰\"><a href=\"#3-2正文修饰\" class=\"headerlink\" title=\"3.2正文修饰\"></a>3.2正文修饰</h4><p><strong>①标题</strong></p>\n<blockquote>\n<p><code>#</code>为<strong>一级标题</strong>，<code>##</code>为<strong>二级标题</strong>,以此类推</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 最多六级，且#和文字之间要有空格</div>\n\n<p><strong>②加粗与倾斜</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">*[文本]* #倾斜\n**[文本]** #加粗\n***[文本]*** #加粗倾斜<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><strong>③引用</strong></p>\n<blockquote>\n<p><code>&gt;</code>后添加<strong>空格</strong>和<strong>引用内容</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 不同的引用以及正文使用换行隔开</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&gt; 树1\n\n&gt; 树2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>树1</p>\n</blockquote>\n<blockquote>\n<p>树2</p>\n</blockquote>\n<p><strong>④超链接</strong></p>\n<blockquote>\n<p><strong>格式</strong>：<code>[Link Text](link-address)</code></p>\n</blockquote>\n<p><a href=\"http://106.15.109.213/2020/07/25/markdown%E8%AF%AD%E6%B3%95%E4%BB%8B%E7%BB%8D/#6-%E5%BC%95%E7%94%A8%E6%AE%B5%E8%90%BD\">参考文章</a></p>\n<p><strong>⑤插入图片</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#单张图片\n！[Figure](URL www.xxx.com)\n#figure此处的文字有时作为图片标题显示，有时不显示，optional，可留空\n#URL处也可以不填写url，也可以选择上传本地图片，此时只需填写相对路径即可，\n#相对路径指的是在与此markdown文档同路径下的相对路径，可在此md文档同路径下新建img文件夹，\n#在此处填/img/xx.png 具体情况具体分析，或许在主题配置文件中亦有提及*\n\n#多张图片\n{% gi total n1-n2-... %}\n  ![](url)\n  ![](url)\n  ![](url)\n  ![](url)\n  ![](url)\n{% endgi %}\n#total为图片总的数量,n1为第一行的图片数量,n2为第二行的图片数量<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>⑥锚点</strong></p>\n<blockquote>\n<p><strong>格式</strong>：<code>[显示内容](#标题)</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 锚点与链接基本相同，区别在于锚点是在文章内部相互传送，但只能传送到n级标题的位置</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 注意此处#代表的是‘标题’这一性质，而非标题的级别，因此不必加n个#来体现标题等级</div>\n\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h1><h2 id=\"Hexo个人博客搭建\"><a href=\"#Hexo个人博客搭建\" class=\"headerlink\" title=\"Hexo个人博客搭建\"></a>Hexo个人博客搭建</h2><h3 id=\"1-博客部署\"><a href=\"#1-博客部署\" class=\"headerlink\" title=\"1.博客部署\"></a>1.博客部署</h3><h4 id=\"1-1环境配置\"><a href=\"#1-1环境配置\" class=\"headerlink\" title=\"1.1环境配置\"></a>1.1环境配置</h4><div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 安装hexo的依赖</div>\n<p><strong>①windows环境</strong></p>\n<blockquote>\n<p>安装<code>Node.js</code>和<code>Git</code>，并通过<code>xx -v</code>检测其是否在<strong>环境变量</strong>中</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 如果不在，则需要手动将其bin文件夹路径添加到系统变量中的path变量中</div>\n<blockquote>\n<p>设置<code>npm</code>的<strong>镜像源</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 查看npm的配置\nnpm config list\n# 默认源\nnpm config set registry https:&#x2F;&#x2F;registry.npmjs.org\n# 临时改变镜像源\nnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org\n# 永久设置为淘宝镜像源\nnpm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>②Linux环境</strong></p>\n<blockquote>\n<p>安装<code>Node.js</code>和<code>Git</code>，若使用<strong>源码安装</strong>，则需要添加<strong>软链接</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 类似于windows的环境变量，Linux在指定位置找对应的命令</div>\n<blockquote>\n<p>设置<code>npm</code>的<strong>镜像源</strong>，<strong>同上</strong></p>\n</blockquote>\n<h4 id=\"1-2Hexo配置\"><a href=\"#1-2Hexo配置\" class=\"headerlink\" title=\"1.2Hexo配置\"></a>1.2Hexo配置</h4><p><strong>①Hexo安装</strong></p>\n<blockquote>\n<p>在<code>git bash/shell</code>中输入<code>npm install -g hexo-cli</code></p>\n</blockquote>\n<p><strong>②博客初始化</strong></p>\n<blockquote>\n<p>选择一个<strong>位置</strong>用于存放<strong>博客文件夹</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#新建文件夹\nmkdir &lt;新建文件夹的名称&gt; \n#初始化文件夹\nhexo init &lt;新建文件夹的名称&gt;\n#在该文件夹中安装博客所需要的依赖文件\ncd &lt;新建文件夹的名称&gt;\nnpm install <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"1-3GitHub设置\"><a href=\"#1-3GitHub设置\" class=\"headerlink\" title=\"1.3GitHub设置\"></a>1.3GitHub设置</h4><p><strong>①创建仓库</strong></p>\n<blockquote>\n<p><strong>名字</strong>必须是<code>&lt;用户名&gt;.github.io</code></p>\n</blockquote>\n<p><strong>②配置Git用户名和邮箱</strong></p>\n<blockquote>\n<p>如果<strong>之前配置过</strong>则<strong>不用配置</strong>，否则需要配置</p>\n</blockquote>\n<h4 id=\"1-4本地文件夹与GitHub建立连接\"><a href=\"#1-4本地文件夹与GitHub建立连接\" class=\"headerlink\" title=\"1.4本地文件夹与GitHub建立连接\"></a>1.4本地文件夹与GitHub建立连接</h4><p><strong>①插件安装</strong></p>\n<blockquote>\n<p>在<strong>博客目录</strong>下的<code>git bash/shell</code>中输入命令<code>npm install hexo-deployer-git --save</code></p>\n</blockquote>\n<p><strong>②SSH密钥设置</strong></p>\n<blockquote>\n<p>并在<code>git bash/shell</code>中输入<code>ssh -T git@github.com</code>测试是否连接成功</p>\n</blockquote>\n<p><strong>③修改Hexo配置文件</strong></p>\n<blockquote>\n<p>打开<code>_config.yml</code>，滑到<strong>文件最底部</strong>，填入<strong>如下代码</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">type: git\nrepo: git@github.com:Github用户名&#x2F;github用户名.github.io.git  \n&#x2F;&#x2F;也可使用https地址，如：https:&#x2F;&#x2F;github.com&#x2F;Github用户名&#x2F;Github用户名.github.io.git            \nbranch: master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>④上传博客</strong></p>\n<blockquote>\n<p>在<strong>博客目录</strong>下的<code>git bash/shell</code>中输入<strong>命令</strong><code>hexo d</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 上传成功后，在浏览器中打开https://<用户名>.github.io，即可查看上传的网页</div>\n<hr>\n<h3 id=\"2-博客个性化\"><a href=\"#2-博客个性化\" class=\"headerlink\" title=\"2.博客个性化\"></a>2.博客个性化</h3><h4 id=\"2-1主题设置\"><a href=\"#2-1主题设置\" class=\"headerlink\" title=\"2.1主题设置\"></a>2.1主题设置</h4><p><strong>①主题安装</strong></p>\n<blockquote>\n<p>在<strong>博客目录</strong>下的<code>git bash/shell</code>中输入如下<strong>命令</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 这里选择的是matery主题，有两个版本，稳定版本和最新版本 (不定期更新优化)，自主选择版本</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">git clone https:&#x2F;&#x2F;github.com&#x2F;blinkfox&#x2F;hexo-theme-matery themes&#x2F;matery     # 稳定版\ngit clone -b develop https:&#x2F;&#x2F;github.com&#x2F;blinkfox&#x2F;hexo-theme-matery themes&#x2F;matery   #最新版(不定期进行优化更新)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><strong>②修改博客主题</strong></p>\n<blockquote>\n<p>将<strong>博客配置文件</strong><code>_config</code>中的<code>theme</code>值修改为<strong>下载主题</strong>的<strong>文件夹名</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 其他博客配置文件修改可见官网</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 修改博客配置文件后要运行执行hexo clean && hexo g，重新生成博客文件</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 注意博客配置文件在博客根目录下，对应主题也有相应配置文件在主题文件夹中</div>\n<h4 id=\"2-2插件配置\"><a href=\"#2-2插件配置\" class=\"headerlink\" title=\"2.2插件配置\"></a>2.2插件配置</h4><p><strong>①代码高亮</strong></p>\n<blockquote>\n<p><strong>安装</strong>：在<strong>博客文件夹</strong>下<code>git bash/shell</code>中运行<code>npm i -S hexo-prism-plugin</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 单行代码使用`包围，多行代码使用```包围</div>\n<blockquote>\n<p><strong>配置</strong>：修改<strong>博客配置文件</strong>下<code>_config.yml</code>文件中<code>highlight.enable</code>的值为<code>false</code>，并新增以下<strong>配置项</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">prism_plugin:\n  mode: &#39;preprocess&#39;    # realtime&#x2F;preprocess\n  theme: &#39;tomorrow&#39;\n  line_number: false    # default false\n  custom_css:<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>②搜索</strong></p>\n<blockquote>\n<p><strong>下载</strong>：<code>npm install hexo-generator-search --save</code></p>\n</blockquote>\n<blockquote>\n<p><strong>配置</strong>：在<strong>博客配置文件</strong>中，新增以下的<strong>配置项</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">search:\n  path: search.xml\n  field: post<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><strong>③中文链接转拼音</strong></p>\n<blockquote>\n<p><strong>下载</strong>：<code>npm i hexo-permalink-pinyin --save</code></p>\n</blockquote>\n<blockquote>\n<p><strong>配置</strong>：在<strong>博客配置文件</strong>中，新增以下的<strong>配置项</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">permalink_pinyin:\n  enable: true\n  separator: &#39;-&#39; # default: &#39;-&#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><strong>④文章字数统计插件</strong></p>\n<blockquote>\n<p><strong>下载</strong>：<code>npm i --save hexo-wordcount</code></p>\n</blockquote>\n<blockquote>\n<p><strong>配置</strong>：在<strong>博客配置文件</strong>中，新增以下的<strong>配置项</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">wordCount:\n  enable: false # 将这个值设置为 true 即可.\n  postWordCount: true\n  min2read: true\n  totalCount: true<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"2-3自定义标签设置\"><a href=\"#2-3自定义标签设置\" class=\"headerlink\" title=\"2.3自定义标签设置\"></a>2.3自定义标签设置</h4><p><strong>①步骤</strong></p>\n<blockquote>\n<p>在<strong>主题目录下</strong>新建<code>scripts</code>目录，并<strong>此目录下</strong>新建<code>block.js</code>文件，填入<strong>以下代码</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">hexo.extend.tag.register(&#39;wrong&#39;, function(args, content)&#123;\n    var className &#x3D;  args.join(&#39; &#39;);\n    var formattedContent &#x3D; content.replace(&#x2F;\\n&#x2F;g, &#39;&lt;br&gt;&#39;);  &#x2F;&#x2F; 将换行符替换为 &lt;br&gt; 标签\n    return &#39;&lt;div class&#x3D;&quot;uk-alert uk-alert-danger&quot;&gt;&lt;i class&#x3D;&quot;fas fa-exclamation-triangle&quot;&gt;&lt;&#x2F;i&gt; &#39; + formattedContent + &#39;&lt;&#x2F;div&gt;&#39;;\n  &#125;, &#123;ends: true&#125;);\n  \n  hexo.extend.tag.register(&#39;right&#39;, function(args, content)&#123;\n    var className &#x3D;  args.join(&#39; &#39;);\n    var formattedContent &#x3D; content.replace(&#x2F;\\n&#x2F;g, &#39;&lt;br&gt;&#39;);  &#x2F;&#x2F; 将换行符替换为 &lt;br&gt; 标签\n    return &#39;&lt;div class&#x3D;&quot;uk-alert uk-alert-success&quot;&gt;&lt;i class&#x3D;&quot;fa fa-check-circle&quot;&gt;&lt;&#x2F;i&gt; &#39; + formattedContent + &#39;&lt;&#x2F;div&gt;&#39;;\n  &#125;, &#123;ends: true&#125;);\n  \n  hexo.extend.tag.register(&#39;warning&#39;, function(args, content)&#123;\n    var className &#x3D;  args.join(&#39; &#39;);\n    var formattedContent &#x3D; content.replace(&#x2F;\\n&#x2F;g, &#39;&lt;br&gt;&#39;);  &#x2F;&#x2F; 将换行符替换为 &lt;br&gt; 标签\n    return &#39;&lt;div class&#x3D;&quot;uk-alert uk-alert-warning&quot;&gt;&lt;i class&#x3D;&quot;fa fa-exclamation-circle&quot;&gt;&lt;&#x2F;i&gt; &#39; + formattedContent + &#39;&lt;&#x2F;div&gt;&#39;;\n  &#125;, &#123;ends: true&#125;);\n\n  hexo.extend.tag.register(&#39;list&#39;, function(args, content)&#123;\n    var className &#x3D;  args.join(&#39; &#39;);\n    var formattedContent &#x3D; content.replace(&#x2F;\\n&#x2F;g, &#39;&lt;br&gt;&#39;);  &#x2F;&#x2F; 将换行符替换为 &lt;br&gt; 标签\n    return &#39;&lt;div class&#x3D;&quot;uk-alert uk-alert-list&quot;&gt;&lt;i class&#x3D;&quot;fas fa-list-ul&quot;&gt;&lt;&#x2F;i&gt; &#39; +&#39;&lt;br&gt;&#39;+formattedContent + &#39;&lt;&#x2F;div&gt;&#39;;\n  &#125;, &#123;ends: true&#125;);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>在<code>head.ejs</code>文件<strong>添加</strong>以下<code>css</code>样式：</p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">   &lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;\n       .uk-alert &#123;\n           margin-bottom: 5px;\n           padding: 5px;\n           background: #ebf7fd;\n           color: #2d7091;\n           border: 0px solid #ffffff;\n           border-radius: 4px;\n           text-shadow: 0 1px 0 #ffffff;\n       &#125;\n       .uk-alert-success &#123;\n           background: rgba(120, 199, 9, 0.1);\n           color: rgba(120, 199, 9);\n           border-left: 6px solid rgba(120, 199, 9);\n           font-weight: 600;\n       &#125;\n       .uk-alert-warning &#123;\n           background: #FFF8E9;\n           color: #FFB91F;\n           border-left: 6px solid #FFB91F;\n           font-weight: 600;\n       &#125;\n       .uk-alert-danger &#123;\n           background: #FFE6E6;\n           color: #FF7979;\n           border-left: 6px solid#FF7979;\n           font-weight: 600;\n       &#125;\n       .uk-alert-list &#123;\n           background: #ECF7FE;\n           color: #3CACF4;\n           border-left: 6px solid#3CACF4;\n           font-weight: 600;\n       &#125;\n&lt;&#x2F;style&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>②解析</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 以warning部分作为例子</div>\n<blockquote>\n<p><strong><code>block.js</code>文件</strong>：其中<code>warning</code>决定了<strong>正文中的书写格式</strong>；<code>div class</code>决定了<strong>容器（背景）的名字</strong>；<code>i class</code>决定了<strong>图标的样式</strong></p>\n</blockquote>\n<blockquote>\n<p><strong><code>head.ejs</code>文件</strong>：主要决定<strong>网页表现</strong>出的<strong>具体样式</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 详细可询问ChatGPT</div>\n<p><strong>③示例</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#123;%wrong%&#125;\n错误\n&#123;%endwrong%&#125;\n&#123;%right%&#125;\n正确\n&#123;%endright%&#125;\n&#123;%warning%&#125;\n警告\n&#123;%endwarning%&#125;\n&#123;%list%&#125;\n列表项\n&#123;%endlist%&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 错误</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 正确</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 警告</div>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 列表项</div>\n<hr>\n<h3 id=\"3-博客书写\"><a href=\"#3-博客书写\" class=\"headerlink\" title=\"3.博客书写\"></a>3.博客书写</h3><h4 id=\"3-1Front-matter\"><a href=\"#3-1Front-matter\" class=\"headerlink\" title=\"3.1Front-matter\"></a>3.1Front-matter</h4><blockquote>\n<p>在<strong>博客根目录</strong>下<code>scaffolds</code>文件夹下新增&#x2F;修改<code>post.md</code>文件，即可修改<strong>默认样式</strong>，<strong>详细样式</strong>如下</p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">title: 文章名称\nseo_title: seo名称\ntoc: true            # 是否生成目录\nindent: true         # 是否首行缩进\ncomments: true       # 是否允许评论\narchive: true        # 是否显示在归档\ncover: false         # 是否显示封面\nmathjax: false       # 是否渲染公式\npin: false           # 是否首页置顶\ntop_meta: false      # 是否显示顶部信息\nbottom_meta: false   # 是否显示尾部信息\nsidebar: [toc]\ntag:\n  - 标签一\n  - 标签二\ncategories: 分组\nkeywords: 文章关键词\ndate: 2021-13-13 00:00\nupdated: 2021-13-13 00:00\ndescription: 文章摘要\nicons: [fas fa-fire red, fas fa-star green]\nreferences:\n  - title: 参考资料名称\n    url: https:&#x2F;&#x2F;参考资料地址\nheadimg: https:&#x2F;&#x2F;文章头图\nthumbnail: https:&#x2F;&#x2F;右侧缩略图<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"3-2正文修饰\"><a href=\"#3-2正文修饰\" class=\"headerlink\" title=\"3.2正文修饰\"></a>3.2正文修饰</h4><p><strong>①标题</strong></p>\n<blockquote>\n<p><code>#</code>为<strong>一级标题</strong>，<code>##</code>为<strong>二级标题</strong>,以此类推</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 最多六级，且#和文字之间要有空格</div>\n\n<p><strong>②加粗与倾斜</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">*[文本]* #倾斜\n**[文本]** #加粗\n***[文本]*** #加粗倾斜<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><strong>③引用</strong></p>\n<blockquote>\n<p><code>&gt;</code>后添加<strong>空格</strong>和<strong>引用内容</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 不同的引用以及正文使用换行隔开</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&gt; 树1\n\n&gt; 树2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>树1</p>\n</blockquote>\n<blockquote>\n<p>树2</p>\n</blockquote>\n<p><strong>④超链接</strong></p>\n<blockquote>\n<p><strong>格式</strong>：<code>[Link Text](link-address)</code></p>\n</blockquote>\n<p><a href=\"http://106.15.109.213/2020/07/25/markdown%E8%AF%AD%E6%B3%95%E4%BB%8B%E7%BB%8D/#6-%E5%BC%95%E7%94%A8%E6%AE%B5%E8%90%BD\">参考文章</a></p>\n<p><strong>⑤插入图片</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#单张图片\n！[Figure](URL www.xxx.com)\n#figure此处的文字有时作为图片标题显示，有时不显示，optional，可留空\n#URL处也可以不填写url，也可以选择上传本地图片，此时只需填写相对路径即可，\n#相对路径指的是在与此markdown文档同路径下的相对路径，可在此md文档同路径下新建img文件夹，\n#在此处填&#x2F;img&#x2F;xx.png 具体情况具体分析，或许在主题配置文件中亦有提及*\n\n#多张图片\n&#123;% gi total n1-n2-... %&#125;\n  ![](url)\n  ![](url)\n  ![](url)\n  ![](url)\n  ![](url)\n&#123;% endgi %&#125;\n#total为图片总的数量,n1为第一行的图片数量,n2为第二行的图片数量<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>⑥锚点</strong></p>\n<blockquote>\n<p><strong>格式</strong>：<code>[显示内容](#标题)</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 锚点与链接基本相同，区别在于锚点是在文章内部相互传送，但只能传送到n级标题的位置</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 注意此处#代表的是‘标题’这一性质，而非标题的级别，因此不必加n个#来体现标题等级</div>\n\n"},{"title":"python学习笔记（三）","seo_title":"seo名称","toc":true,"indent":true,"top":false,"comments":1,"archive":true,"cover":false,"mathjax":false,"pin":false,"top_meta":false,"bottom_meta":false,"sidebar":["toc"],"keywords":"文章关键词","updated":"2023-11-07T14:10:58.014Z","img":"/medias/featureimages/4.webp","date":"2023-11-07T14:10:58.014Z","summary":"python下文件管理","_content":"# python学习笔记（三）\n## 文件管理\n\n### 1.文件路径\n**1.1定义：**指明了文件在计算机上的**位置**，可分为**绝对路径**和**相对路径**\n①绝对路径：从**根文件夹**开始的完整路径\n②相对路径：相对于程序的**当前工作目录**的路径\n>windows上采用`\\`作为文件夹之间的分隔符，Linux上和OS X上采用`/`作为文件夹之间的分隔符\n{%right%}\n为了程序的可移植性，采用python中os模块中的方法获取文件路径\n{%endright%}\n**1.2获取**\n①通过`os`模块获取\n>`os.path.join()`：将单个文件和路径上的文件夹名称的字符串传递给它，`os.path.join()`就会返回一个文件路径的字符串\n`os.getcwd()`：可以取得**当前工作路径**的**字符串**，并可以利用`os.chdir()`改变它\n`os.path.abspath(path)`：将返回参数（相对路径的**字符串**）的绝对路径的**字符串**\n`os.path.dirname()`：获取文件绝对路径的目录部分\n{%right%}\n如果要获得路径的每一个文件夹的名称，可以使用'[路径]'.split(os.path.sep)\n{%endright%}\n②使用`sys`模块\n>`sys.argv[0]`：获取当前脚本的路径（包括文件名）。\n`sys.path[0]`：获取当前脚本所在的目录路径。\n\n③使用`__file__`变量：包含了**当前模块**（脚本）的路径（包括文件名）\n{%warning%}\n该变量只在一个独立的模块（脚本）中才有定义\n{%endwarning%}\n\n```\nimport os\nimport sys\n\n# 获取当前工作目录\ncurrent_directory = os.getcwd()\nprint(\"当前工作目录:\", current_directory)\n\n# 获取文件的绝对路径\nabsolute_path = os.path.abspath('file.txt')\nprint(\"文件的绝对路径:\", absolute_path)\n\n# 拼接目录和文件名，返回完整路径\nfull_path = os.path.join('dir', 'file.txt')\nprint(\"完整路径:\", full_path)\n\n# 获取当前脚本的路径\nscript_path = sys.argv[0]\nprint(\"当前脚本的路径:\", script_path)\n\n# 获取当前脚本所在的目录路径\nscript_directory = os.path.dirname(os.path.abspath(__file__))\nprint(\"当前脚本所在的目录路径:\", script_directory)\n```\n**1.3有效性检查**\n>`os.path.exists(path)`：如果path参数所指的文件或文件夹存在，返回True\n`os.path.isfile(path)`：如果path参数存在，并且是一个文件，返回 True\n`os.path.isdir(path)`：如果path参数存在，并且是一个文件夹，返回Ture\n\n### 2.文件处理\n**2.1打开文件**\n①`open()`： 向它传递一个**字符串**路径，返回一个`File`对象，还可传入对应参数指定**操作模式**和**编码方式**，默认是**读模式**和**操作系统默认的编码**\n②操作模式：不同的操作模式有不同的规则\n>`'r'`：以只读模式打开文件（默认模式），文件指针位于文件的开头，如果文件不存在，则会引发FileNotFoundError。\n`'w'`：以写入模式打开文件，如果文件已存在，则会被清空。如果文件不存在，则会创建一个新文件。\n`'a'`：以追加模式打开文件，文件指针位于文件的末尾。如果文件不存在，则会创建一个新文件。\n`'x'`：以独占写入模式打开文件，如果文件已存在，则会引发FileExistsError。\n`'b'`：以二进制模式打开文件，可以与其他模式一起使用，例如'rb'或'wb'。\n`'t'`：以文本模式打开文件（默认模式），可以与其他模式一起使用，例如'rt'或'wt'。\n`'+'`：以读写模式打开文件，可以与其他模式一起使用，例如'r+'、'w+'或'a+'。\n\n③编码方式：通过`encoding`参数指定编码，常见的编码方式有`ASCII`、`UTF-8`等，选择编码方式时，应根据需求考虑文件中包含的**字符范围、语言以及平台兼容性**等因素\n{%warning%}\n如果文件使用的编码方式与指定的编码方式不匹配，可能会导致读取或写入的数据出现错误\n{%endwarning%}\n④如果`open`函数指定的文件并**不存在或者无法打开**，那么将引发异常状况导致程序崩溃，需要对其进行检查，此外，执行完业务逻辑后，需要**及时对目标文件进行释放**，可以使用python中的异常机制\n>文件找不到会引发`FileNotFoundError`，指定了未知的编码会引发`LookupError`，而如果读取文件时无法按指定方式解码会引发`UnicodeDecodeError`\n\n```\ndef main():\n    f = None\n    try:\n        f = open('致橡树.txt', 'r', encoding='utf-8')\n        print(f.read())\n    except FileNotFoundError:\n        print('无法打开指定的文件!')\n    except LookupError:\n        print('指定了未知的编码!')\n    except UnicodeDecodeError:\n        print('读取文件时解码错误!')\n    finally:\n        if f:\n            f.close()\n\n\nif __name__ == '__main__':\n    main()\n```\n\n**2.2文件读写**\n①文件读取\n>`read()`：将整个文件的内容读取为一个**字符串值**\n`for-in`循环：还可以使用`for-in`循环逐行读取文件\n`readlines`：将文件按行读取到一个列表容器中\n```\nimport time\n\n\ndef main():\n    # 一次性读取整个文件内容\n    with open('致橡树.txt', 'r', encoding='utf-8') as f:\n        print(f.read())\n\n    # 通过for-in循环逐行读取\n    with open('致橡树.txt', mode='r') as f:\n        for line in f:\n            print(line, end='')\n            time.sleep(0.5)\n    print()\n\n    # 读取文件按行读取到列表中\n    with open('致橡树.txt') as f:\n        lines = f.readlines()\n    print(lines)\n    \n\nif __name__ == '__main__':\n    main()\n```\n②文件写入：采用`write()`方法，该方法接收**字符串**，并将其写入到文件对象中\n```\nfile = open(\"example.txt\", \"w\")\nfile.write(\"Hello, World!\")\nfile.close()\n```\n**2.3文件信息查询**\n①`os.path.getsize(path)`将返回path参数中文件的**字节数**\n②`os.listdir(path)`将返回**文件名字符串的列表**，包含path参数中的每个文件\n**2.4文件管理器**\n①定义\n>上下文：任务本身会对其环境进行保存，做到哪里了，做了多少，各种状态都会标识记录，从而形成了上下文环境，在切换时根据每个任务的上下文环境，继续执行，从而达到多任务\n\n>上下文管理器对象：即任何实现了`__enter__()`和 `__exit__()` 方法的类的对象实例\n\n②使用：`with 上下文表达式 as 对象`\n>其中**上下文表达式**是一个返回上下文管理器对象的函数调用\n在进入语句块之前，上下文管理器的`__enter__`方法会被调用，可以在这个方法中执行资源的获取操作\n在离开语句块时，无论是正常的退出还是发生异常，上下文管理器的`__exit__`方法都会被调用，可以在这个方法中执行资源的释放操作\n\n```\nwith open('example.txt', 'r') as file:\n    data = file.read()\n    print(data)\n```\n③with关键字的实现原理\n```\nclass File(object):\n\n    def __init__(self, filename, mode):\n        self.filename = filename\n        self.mode = mode\n        self.file = None\n\n    def __enter__(self):\n        \"\"\"\n        进入with as 语句的时候被with调用\n        返回值作为 as 后面的变量\n        \"\"\"\n        print(\"__enter__ called\")\n        self.file = open(self.filename, self.mode)\n        return self.file\n\n    def __exit__(self, exc_type, exc_value, exc_traceback):\n        \"\"\"\n        离开with语句的时候被with调用\n        \"\"\"\n        print(\"__exit__ called\")\n        print(\"exc_type: \", exc_type)\n        print(\"exc_value: \", exc_value)\n        print(\"exc_traceback: \", exc_traceback)\n        self.file.close()\n        print(\"文件关闭操作\")\n\n\ndef main():\n\n    with File(\"test.txt\", \"w\") as f:\n        print(\"with 代码块\")\n        f.write(\"hello python1\")\n        f.write(\"hello python2\")\n        # a = 1 / 0\n        f.write(\"hello python3\")\n\n    print(\"with 语句结束\")\n\n\nif __name__ == '__main__':\n    main()\n```\n\n>进入上下文管理器会自动调用`__enter__(self)`，该方法的返回值会被赋值给`as`子句后的对象，该方法可以返回多个值，因此在`as`子句后面也可以指定多个变量（括起来组成元组）\n>退出上下文管理器自动调用`__exit__(self, exc_type, exc_value, exc_traceback)`，前三个参数在调用`__exit__()`方法时由Python解释器自动传递，并提供与异常相关的信息\n\n④`with`关键字和`try-except`联合调用\n```\ndef main():\n    try:\n        with open('guido.jpg', 'rb') as fs1:\n            data = fs1.read()\n            print(type(data))  # <class 'bytes'>\n        with open('吉多.jpg', 'wb') as fs2:\n            fs2.write(data)\n    except FileNotFoundError as e:\n        print('指定的文件无法打开.')\n    except IOError as e:\n        print('读写文件时出现错误.')\n    print('程序执行结束.')\n\n\nif __name__ == '__main__':\n    main()\n```\n>`with`语句的主要目的是确保上下文管理器的资源**被正确释放**，即使在发生异常的情况下也能保证资源的释放，而`try-except`语句主要用于处理异常，提供错误处理和容错机制\n\n### 3.变量保存\n**3.1json模块**\n①简介：是JavaScript语言中创建对象的一种字面量语法，现在已经被广泛的应用于**跨平台跨语言**的数据交换\n>因为JSON是**纯文本**，任何系统任何编程语言处理纯文本都是没有问题的\n\n②JSON的数据类型和Python的数据类型对应关系\n\n| Python | JSON |\n| ------ | ------ | \n| dict | object | \n| list, tuple | array |\n| str | string |\n| int, float, int- & float-derived Enums | number |\n| True/False | true/false |\n| None | null |\n\n③实例\n```\nimport json\n\n\ndef main():\n    mydict = {\n        'name': '骆昊',\n        'age': 38,\n        'qq': 957658,\n        'friends': ['王大锤', '白元芳'],\n        'cars': [\n            {'brand': 'BYD', 'max_speed': 180},\n            {'brand': 'Audi', 'max_speed': 280},\n            {'brand': 'Benz', 'max_speed': 320}\n        ]\n    }\n    try:\n        with open('data.json', 'w', encoding='utf-8') as fs:\n            json.dump(mydict, fs)\n    except IOError as e:\n        print(e)\n    print('保存数据完成!')\n\n\nif __name__ == '__main__':\n    main()\n```\n>`json`模块常用方法\n`dump()`：将Python对象按照JSON格式序列化到文件中\n`dumps()`：将Python对象处理成JSON格式的字符串\n`load()`：将文件中的JSON数据反序列化成对象\n`loads()`：将字符串的内容反序列化成Python对象\n\n**3.2shelve模块：**可以将Python程序中的变量保存到**二进制的shelf文件**中，这样，程序就可以从硬盘中恢复变量的数据\n```\n#保存变量\nimport shelve\nshelfFile = shelve.open('mydata') #初始化一个shelf变量，类似于file变量，其中mydata为保存变量的文件\ncats = ['Zophie', 'Pooka', 'Simon']\nshelfFile['cats'] = cats #变量以类似于字典的形式存储\nshelfFile.close() #结束\n#访问变量\nshelfFile = shelve.open('mydata')\nshelfFile['cats'] #访问cats变量\nshelfFile.close()\n```\n\n","source":"_posts/python学习笔记（三）.md","raw":"---\ntitle: python学习笔记（三）\nseo_title: seo名称\ntoc: true\nindent: true\ntop: false\ncomments: true\narchive: true\ncover: false\nmathjax: false\npin: false\ntop_meta: false\nbottom_meta: false\nsidebar:\n  - toc\ntag:\n  - python\n  - 编程语言\ncategories: 编程语言\nkeywords: 文章关键词\nupdated: ''\nimg: /medias/featureimages/4.webp\ndate:\nsummary: python下文件管理\n---\n# python学习笔记（三）\n## 文件管理\n\n### 1.文件路径\n**1.1定义：**指明了文件在计算机上的**位置**，可分为**绝对路径**和**相对路径**\n①绝对路径：从**根文件夹**开始的完整路径\n②相对路径：相对于程序的**当前工作目录**的路径\n>windows上采用`\\`作为文件夹之间的分隔符，Linux上和OS X上采用`/`作为文件夹之间的分隔符\n{%right%}\n为了程序的可移植性，采用python中os模块中的方法获取文件路径\n{%endright%}\n**1.2获取**\n①通过`os`模块获取\n>`os.path.join()`：将单个文件和路径上的文件夹名称的字符串传递给它，`os.path.join()`就会返回一个文件路径的字符串\n`os.getcwd()`：可以取得**当前工作路径**的**字符串**，并可以利用`os.chdir()`改变它\n`os.path.abspath(path)`：将返回参数（相对路径的**字符串**）的绝对路径的**字符串**\n`os.path.dirname()`：获取文件绝对路径的目录部分\n{%right%}\n如果要获得路径的每一个文件夹的名称，可以使用'[路径]'.split(os.path.sep)\n{%endright%}\n②使用`sys`模块\n>`sys.argv[0]`：获取当前脚本的路径（包括文件名）。\n`sys.path[0]`：获取当前脚本所在的目录路径。\n\n③使用`__file__`变量：包含了**当前模块**（脚本）的路径（包括文件名）\n{%warning%}\n该变量只在一个独立的模块（脚本）中才有定义\n{%endwarning%}\n\n```\nimport os\nimport sys\n\n# 获取当前工作目录\ncurrent_directory = os.getcwd()\nprint(\"当前工作目录:\", current_directory)\n\n# 获取文件的绝对路径\nabsolute_path = os.path.abspath('file.txt')\nprint(\"文件的绝对路径:\", absolute_path)\n\n# 拼接目录和文件名，返回完整路径\nfull_path = os.path.join('dir', 'file.txt')\nprint(\"完整路径:\", full_path)\n\n# 获取当前脚本的路径\nscript_path = sys.argv[0]\nprint(\"当前脚本的路径:\", script_path)\n\n# 获取当前脚本所在的目录路径\nscript_directory = os.path.dirname(os.path.abspath(__file__))\nprint(\"当前脚本所在的目录路径:\", script_directory)\n```\n**1.3有效性检查**\n>`os.path.exists(path)`：如果path参数所指的文件或文件夹存在，返回True\n`os.path.isfile(path)`：如果path参数存在，并且是一个文件，返回 True\n`os.path.isdir(path)`：如果path参数存在，并且是一个文件夹，返回Ture\n\n### 2.文件处理\n**2.1打开文件**\n①`open()`： 向它传递一个**字符串**路径，返回一个`File`对象，还可传入对应参数指定**操作模式**和**编码方式**，默认是**读模式**和**操作系统默认的编码**\n②操作模式：不同的操作模式有不同的规则\n>`'r'`：以只读模式打开文件（默认模式），文件指针位于文件的开头，如果文件不存在，则会引发FileNotFoundError。\n`'w'`：以写入模式打开文件，如果文件已存在，则会被清空。如果文件不存在，则会创建一个新文件。\n`'a'`：以追加模式打开文件，文件指针位于文件的末尾。如果文件不存在，则会创建一个新文件。\n`'x'`：以独占写入模式打开文件，如果文件已存在，则会引发FileExistsError。\n`'b'`：以二进制模式打开文件，可以与其他模式一起使用，例如'rb'或'wb'。\n`'t'`：以文本模式打开文件（默认模式），可以与其他模式一起使用，例如'rt'或'wt'。\n`'+'`：以读写模式打开文件，可以与其他模式一起使用，例如'r+'、'w+'或'a+'。\n\n③编码方式：通过`encoding`参数指定编码，常见的编码方式有`ASCII`、`UTF-8`等，选择编码方式时，应根据需求考虑文件中包含的**字符范围、语言以及平台兼容性**等因素\n{%warning%}\n如果文件使用的编码方式与指定的编码方式不匹配，可能会导致读取或写入的数据出现错误\n{%endwarning%}\n④如果`open`函数指定的文件并**不存在或者无法打开**，那么将引发异常状况导致程序崩溃，需要对其进行检查，此外，执行完业务逻辑后，需要**及时对目标文件进行释放**，可以使用python中的异常机制\n>文件找不到会引发`FileNotFoundError`，指定了未知的编码会引发`LookupError`，而如果读取文件时无法按指定方式解码会引发`UnicodeDecodeError`\n\n```\ndef main():\n    f = None\n    try:\n        f = open('致橡树.txt', 'r', encoding='utf-8')\n        print(f.read())\n    except FileNotFoundError:\n        print('无法打开指定的文件!')\n    except LookupError:\n        print('指定了未知的编码!')\n    except UnicodeDecodeError:\n        print('读取文件时解码错误!')\n    finally:\n        if f:\n            f.close()\n\n\nif __name__ == '__main__':\n    main()\n```\n\n**2.2文件读写**\n①文件读取\n>`read()`：将整个文件的内容读取为一个**字符串值**\n`for-in`循环：还可以使用`for-in`循环逐行读取文件\n`readlines`：将文件按行读取到一个列表容器中\n```\nimport time\n\n\ndef main():\n    # 一次性读取整个文件内容\n    with open('致橡树.txt', 'r', encoding='utf-8') as f:\n        print(f.read())\n\n    # 通过for-in循环逐行读取\n    with open('致橡树.txt', mode='r') as f:\n        for line in f:\n            print(line, end='')\n            time.sleep(0.5)\n    print()\n\n    # 读取文件按行读取到列表中\n    with open('致橡树.txt') as f:\n        lines = f.readlines()\n    print(lines)\n    \n\nif __name__ == '__main__':\n    main()\n```\n②文件写入：采用`write()`方法，该方法接收**字符串**，并将其写入到文件对象中\n```\nfile = open(\"example.txt\", \"w\")\nfile.write(\"Hello, World!\")\nfile.close()\n```\n**2.3文件信息查询**\n①`os.path.getsize(path)`将返回path参数中文件的**字节数**\n②`os.listdir(path)`将返回**文件名字符串的列表**，包含path参数中的每个文件\n**2.4文件管理器**\n①定义\n>上下文：任务本身会对其环境进行保存，做到哪里了，做了多少，各种状态都会标识记录，从而形成了上下文环境，在切换时根据每个任务的上下文环境，继续执行，从而达到多任务\n\n>上下文管理器对象：即任何实现了`__enter__()`和 `__exit__()` 方法的类的对象实例\n\n②使用：`with 上下文表达式 as 对象`\n>其中**上下文表达式**是一个返回上下文管理器对象的函数调用\n在进入语句块之前，上下文管理器的`__enter__`方法会被调用，可以在这个方法中执行资源的获取操作\n在离开语句块时，无论是正常的退出还是发生异常，上下文管理器的`__exit__`方法都会被调用，可以在这个方法中执行资源的释放操作\n\n```\nwith open('example.txt', 'r') as file:\n    data = file.read()\n    print(data)\n```\n③with关键字的实现原理\n```\nclass File(object):\n\n    def __init__(self, filename, mode):\n        self.filename = filename\n        self.mode = mode\n        self.file = None\n\n    def __enter__(self):\n        \"\"\"\n        进入with as 语句的时候被with调用\n        返回值作为 as 后面的变量\n        \"\"\"\n        print(\"__enter__ called\")\n        self.file = open(self.filename, self.mode)\n        return self.file\n\n    def __exit__(self, exc_type, exc_value, exc_traceback):\n        \"\"\"\n        离开with语句的时候被with调用\n        \"\"\"\n        print(\"__exit__ called\")\n        print(\"exc_type: \", exc_type)\n        print(\"exc_value: \", exc_value)\n        print(\"exc_traceback: \", exc_traceback)\n        self.file.close()\n        print(\"文件关闭操作\")\n\n\ndef main():\n\n    with File(\"test.txt\", \"w\") as f:\n        print(\"with 代码块\")\n        f.write(\"hello python1\")\n        f.write(\"hello python2\")\n        # a = 1 / 0\n        f.write(\"hello python3\")\n\n    print(\"with 语句结束\")\n\n\nif __name__ == '__main__':\n    main()\n```\n\n>进入上下文管理器会自动调用`__enter__(self)`，该方法的返回值会被赋值给`as`子句后的对象，该方法可以返回多个值，因此在`as`子句后面也可以指定多个变量（括起来组成元组）\n>退出上下文管理器自动调用`__exit__(self, exc_type, exc_value, exc_traceback)`，前三个参数在调用`__exit__()`方法时由Python解释器自动传递，并提供与异常相关的信息\n\n④`with`关键字和`try-except`联合调用\n```\ndef main():\n    try:\n        with open('guido.jpg', 'rb') as fs1:\n            data = fs1.read()\n            print(type(data))  # <class 'bytes'>\n        with open('吉多.jpg', 'wb') as fs2:\n            fs2.write(data)\n    except FileNotFoundError as e:\n        print('指定的文件无法打开.')\n    except IOError as e:\n        print('读写文件时出现错误.')\n    print('程序执行结束.')\n\n\nif __name__ == '__main__':\n    main()\n```\n>`with`语句的主要目的是确保上下文管理器的资源**被正确释放**，即使在发生异常的情况下也能保证资源的释放，而`try-except`语句主要用于处理异常，提供错误处理和容错机制\n\n### 3.变量保存\n**3.1json模块**\n①简介：是JavaScript语言中创建对象的一种字面量语法，现在已经被广泛的应用于**跨平台跨语言**的数据交换\n>因为JSON是**纯文本**，任何系统任何编程语言处理纯文本都是没有问题的\n\n②JSON的数据类型和Python的数据类型对应关系\n\n| Python | JSON |\n| ------ | ------ | \n| dict | object | \n| list, tuple | array |\n| str | string |\n| int, float, int- & float-derived Enums | number |\n| True/False | true/false |\n| None | null |\n\n③实例\n```\nimport json\n\n\ndef main():\n    mydict = {\n        'name': '骆昊',\n        'age': 38,\n        'qq': 957658,\n        'friends': ['王大锤', '白元芳'],\n        'cars': [\n            {'brand': 'BYD', 'max_speed': 180},\n            {'brand': 'Audi', 'max_speed': 280},\n            {'brand': 'Benz', 'max_speed': 320}\n        ]\n    }\n    try:\n        with open('data.json', 'w', encoding='utf-8') as fs:\n            json.dump(mydict, fs)\n    except IOError as e:\n        print(e)\n    print('保存数据完成!')\n\n\nif __name__ == '__main__':\n    main()\n```\n>`json`模块常用方法\n`dump()`：将Python对象按照JSON格式序列化到文件中\n`dumps()`：将Python对象处理成JSON格式的字符串\n`load()`：将文件中的JSON数据反序列化成对象\n`loads()`：将字符串的内容反序列化成Python对象\n\n**3.2shelve模块：**可以将Python程序中的变量保存到**二进制的shelf文件**中，这样，程序就可以从硬盘中恢复变量的数据\n```\n#保存变量\nimport shelve\nshelfFile = shelve.open('mydata') #初始化一个shelf变量，类似于file变量，其中mydata为保存变量的文件\ncats = ['Zophie', 'Pooka', 'Simon']\nshelfFile['cats'] = cats #变量以类似于字典的形式存储\nshelfFile.close() #结束\n#访问变量\nshelfFile = shelve.open('mydata')\nshelfFile['cats'] #访问cats变量\nshelfFile.close()\n```\n\n","slug":"python学习笔记（三）","published":1,"_id":"clmkphbfa001e9gvdbdrh2mss","layout":"post","photos":[],"link":"","content":"<h1 id=\"python学习笔记（三）\"><a href=\"#python学习笔记（三）\" class=\"headerlink\" title=\"python学习笔记（三）\"></a>python学习笔记（三）</h1><h2 id=\"文件管理\"><a href=\"#文件管理\" class=\"headerlink\" title=\"文件管理\"></a>文件管理</h2><h3 id=\"1-文件路径\"><a href=\"#1-文件路径\" class=\"headerlink\" title=\"1.文件路径\"></a>1.文件路径</h3><p><strong>1.1定义：</strong>指明了文件在计算机上的<strong>位置</strong>，可分为<strong>绝对路径</strong>和<strong>相对路径</strong><br>①绝对路径：从<strong>根文件夹</strong>开始的完整路径<br>②相对路径：相对于程序的<strong>当前工作目录</strong>的路径</p>\n<blockquote>\n<p>windows上采用<code>\\</code>作为文件夹之间的分隔符，Linux上和OS X上采用<code>/</code>作为文件夹之间的分隔符</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 为了程序的可移植性，采用python中os模块中的方法获取文件路径</div>\n<p><strong>1.2获取</strong><br>①通过<code>os</code>模块获取</p>\n<blockquote>\n<p><code>os.path.join()</code>：将单个文件和路径上的文件夹名称的字符串传递给它，<code>os.path.join()</code>就会返回一个文件路径的字符串<br><code>os.getcwd()</code>：可以取得<strong>当前工作路径</strong>的<strong>字符串</strong>，并可以利用<code>os.chdir()</code>改变它<br><code>os.path.abspath(path)</code>：将返回参数（相对路径的<strong>字符串</strong>）的绝对路径的<strong>字符串</strong><br><code>os.path.dirname()</code>：获取文件绝对路径的目录部分</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 如果要获得路径的每一个文件夹的名称，可以使用'[路径]'.split(os.path.sep)</div>\n<p>②使用<code>sys</code>模块</p>\n<blockquote>\n<p><code>sys.argv[0]</code>：获取当前脚本的路径（包括文件名）。<br><code>sys.path[0]</code>：获取当前脚本所在的目录路径。</p>\n</blockquote>\n<p>③使用<code>__file__</code>变量：包含了<strong>当前模块</strong>（脚本）的路径（包括文件名）</p>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 该变量只在一个独立的模块（脚本）中才有定义</div>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">import os\nimport sys\n\n# 获取当前工作目录\ncurrent_directory = os.getcwd()\nprint(\"当前工作目录:\", current_directory)\n\n# 获取文件的绝对路径\nabsolute_path = os.path.abspath('file.txt')\nprint(\"文件的绝对路径:\", absolute_path)\n\n# 拼接目录和文件名，返回完整路径\nfull_path = os.path.join('dir', 'file.txt')\nprint(\"完整路径:\", full_path)\n\n# 获取当前脚本的路径\nscript_path = sys.argv[0]\nprint(\"当前脚本的路径:\", script_path)\n\n# 获取当前脚本所在的目录路径\nscript_directory = os.path.dirname(os.path.abspath(__file__))\nprint(\"当前脚本所在的目录路径:\", script_directory)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>1.3有效性检查</strong></p>\n<blockquote>\n<p><code>os.path.exists(path)</code>：如果path参数所指的文件或文件夹存在，返回True<br><code>os.path.isfile(path)</code>：如果path参数存在，并且是一个文件，返回 True<br><code>os.path.isdir(path)</code>：如果path参数存在，并且是一个文件夹，返回Ture</p>\n</blockquote>\n<h3 id=\"2-文件处理\"><a href=\"#2-文件处理\" class=\"headerlink\" title=\"2.文件处理\"></a>2.文件处理</h3><p><strong>2.1打开文件</strong><br>①<code>open()</code>： 向它传递一个<strong>字符串</strong>路径，返回一个<code>File</code>对象，还可传入对应参数指定<strong>操作模式</strong>和<strong>编码方式</strong>，默认是<strong>读模式</strong>和<strong>操作系统默认的编码</strong><br>②操作模式：不同的操作模式有不同的规则</p>\n<blockquote>\n<p><code>'r'</code>：以只读模式打开文件（默认模式），文件指针位于文件的开头，如果文件不存在，则会引发FileNotFoundError。<br><code>'w'</code>：以写入模式打开文件，如果文件已存在，则会被清空。如果文件不存在，则会创建一个新文件。<br><code>'a'</code>：以追加模式打开文件，文件指针位于文件的末尾。如果文件不存在，则会创建一个新文件。<br><code>'x'</code>：以独占写入模式打开文件，如果文件已存在，则会引发FileExistsError。<br><code>'b'</code>：以二进制模式打开文件，可以与其他模式一起使用，例如’rb’或’wb’。<br><code>'t'</code>：以文本模式打开文件（默认模式），可以与其他模式一起使用，例如’rt’或’wt’。<br><code>'+'</code>：以读写模式打开文件，可以与其他模式一起使用，例如’r+’、’w+’或’a+’。</p>\n</blockquote>\n<p>③编码方式：通过<code>encoding</code>参数指定编码，常见的编码方式有<code>ASCII</code>、<code>UTF-8</code>等，选择编码方式时，应根据需求考虑文件中包含的<strong>字符范围、语言以及平台兼容性</strong>等因素</p>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 如果文件使用的编码方式与指定的编码方式不匹配，可能会导致读取或写入的数据出现错误</div>\n<p>④如果<code>open</code>函数指定的文件并<strong>不存在或者无法打开</strong>，那么将引发异常状况导致程序崩溃，需要对其进行检查，此外，执行完业务逻辑后，需要<strong>及时对目标文件进行释放</strong>，可以使用python中的异常机制</p>\n<blockquote>\n<p>文件找不到会引发<code>FileNotFoundError</code>，指定了未知的编码会引发<code>LookupError</code>，而如果读取文件时无法按指定方式解码会引发<code>UnicodeDecodeError</code></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">def main():\n    f = None\n    try:\n        f = open('致橡树.txt', 'r', encoding='utf-8')\n        print(f.read())\n    except FileNotFoundError:\n        print('无法打开指定的文件!')\n    except LookupError:\n        print('指定了未知的编码!')\n    except UnicodeDecodeError:\n        print('读取文件时解码错误!')\n    finally:\n        if f:\n            f.close()\n\n\nif __name__ == '__main__':\n    main()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>2.2文件读写</strong><br>①文件读取</p>\n<blockquote>\n<p><code>read()</code>：将整个文件的内容读取为一个<strong>字符串值</strong><br><code>for-in</code>循环：还可以使用<code>for-in</code>循环逐行读取文件<br><code>readlines</code>：将文件按行读取到一个列表容器中</p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">import time\n\n\ndef main():\n    # 一次性读取整个文件内容\n    with open('致橡树.txt', 'r', encoding='utf-8') as f:\n        print(f.read())\n\n    # 通过for-in循环逐行读取\n    with open('致橡树.txt', mode='r') as f:\n        for line in f:\n            print(line, end='')\n            time.sleep(0.5)\n    print()\n\n    # 读取文件按行读取到列表中\n    with open('致橡树.txt') as f:\n        lines = f.readlines()\n    print(lines)\n    \n\nif __name__ == '__main__':\n    main()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>②文件写入：采用<code>write()</code>方法，该方法接收<strong>字符串</strong>，并将其写入到文件对象中</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">file = open(\"example.txt\", \"w\")\nfile.write(\"Hello, World!\")\nfile.close()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><strong>2.3文件信息查询</strong><br>①<code>os.path.getsize(path)</code>将返回path参数中文件的<strong>字节数</strong><br>②<code>os.listdir(path)</code>将返回<strong>文件名字符串的列表</strong>，包含path参数中的每个文件<br><strong>2.4文件管理器</strong><br>①定义</p>\n<blockquote>\n<p>上下文：任务本身会对其环境进行保存，做到哪里了，做了多少，各种状态都会标识记录，从而形成了上下文环境，在切换时根据每个任务的上下文环境，继续执行，从而达到多任务</p>\n</blockquote>\n<blockquote>\n<p>上下文管理器对象：即任何实现了<code>__enter__()</code>和 <code>__exit__()</code> 方法的类的对象实例</p>\n</blockquote>\n<p>②使用：<code>with 上下文表达式 as 对象</code></p>\n<blockquote>\n<p>其中<strong>上下文表达式</strong>是一个返回上下文管理器对象的函数调用<br>在进入语句块之前，上下文管理器的<code>__enter__</code>方法会被调用，可以在这个方法中执行资源的获取操作<br>在离开语句块时，无论是正常的退出还是发生异常，上下文管理器的<code>__exit__</code>方法都会被调用，可以在这个方法中执行资源的释放操作</p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">with open('example.txt', 'r') as file:\n    data = file.read()\n    print(data)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>③with关键字的实现原理</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">class File(object):\n\n    def __init__(self, filename, mode):\n        self.filename = filename\n        self.mode = mode\n        self.file = None\n\n    def __enter__(self):\n        \"\"\"\n        进入with as 语句的时候被with调用\n        返回值作为 as 后面的变量\n        \"\"\"\n        print(\"__enter__ called\")\n        self.file = open(self.filename, self.mode)\n        return self.file\n\n    def __exit__(self, exc_type, exc_value, exc_traceback):\n        \"\"\"\n        离开with语句的时候被with调用\n        \"\"\"\n        print(\"__exit__ called\")\n        print(\"exc_type: \", exc_type)\n        print(\"exc_value: \", exc_value)\n        print(\"exc_traceback: \", exc_traceback)\n        self.file.close()\n        print(\"文件关闭操作\")\n\n\ndef main():\n\n    with File(\"test.txt\", \"w\") as f:\n        print(\"with 代码块\")\n        f.write(\"hello python1\")\n        f.write(\"hello python2\")\n        # a = 1 / 0\n        f.write(\"hello python3\")\n\n    print(\"with 语句结束\")\n\n\nif __name__ == '__main__':\n    main()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>进入上下文管理器会自动调用<code>__enter__(self)</code>，该方法的返回值会被赋值给<code>as</code>子句后的对象，该方法可以返回多个值，因此在<code>as</code>子句后面也可以指定多个变量（括起来组成元组）<br>退出上下文管理器自动调用<code>__exit__(self, exc_type, exc_value, exc_traceback)</code>，前三个参数在调用<code>__exit__()</code>方法时由Python解释器自动传递，并提供与异常相关的信息</p>\n</blockquote>\n<p>④<code>with</code>关键字和<code>try-except</code>联合调用</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">def main():\n    try:\n        with open('guido.jpg', 'rb') as fs1:\n            data = fs1.read()\n            print(type(data))  # &lt;class 'bytes'&gt;\n        with open('吉多.jpg', 'wb') as fs2:\n            fs2.write(data)\n    except FileNotFoundError as e:\n        print('指定的文件无法打开.')\n    except IOError as e:\n        print('读写文件时出现错误.')\n    print('程序执行结束.')\n\n\nif __name__ == '__main__':\n    main()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><code>with</code>语句的主要目的是确保上下文管理器的资源<strong>被正确释放</strong>，即使在发生异常的情况下也能保证资源的释放，而<code>try-except</code>语句主要用于处理异常，提供错误处理和容错机制</p>\n</blockquote>\n<h3 id=\"3-变量保存\"><a href=\"#3-变量保存\" class=\"headerlink\" title=\"3.变量保存\"></a>3.变量保存</h3><p><strong>3.1json模块</strong><br>①简介：是JavaScript语言中创建对象的一种字面量语法，现在已经被广泛的应用于<strong>跨平台跨语言</strong>的数据交换</p>\n<blockquote>\n<p>因为JSON是<strong>纯文本</strong>，任何系统任何编程语言处理纯文本都是没有问题的</p>\n</blockquote>\n<p>②JSON的数据类型和Python的数据类型对应关系</p>\n<table>\n<thead>\n<tr>\n<th>Python</th>\n<th>JSON</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>dict</td>\n<td>object</td>\n</tr>\n<tr>\n<td>list, tuple</td>\n<td>array</td>\n</tr>\n<tr>\n<td>str</td>\n<td>string</td>\n</tr>\n<tr>\n<td>int, float, int- &amp; float-derived Enums</td>\n<td>number</td>\n</tr>\n<tr>\n<td>True/False</td>\n<td>true/false</td>\n</tr>\n<tr>\n<td>None</td>\n<td>null</td>\n</tr>\n</tbody></table>\n<p>③实例</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">import json\n\n\ndef main():\n    mydict = {\n        'name': '骆昊',\n        'age': 38,\n        'qq': 957658,\n        'friends': ['王大锤', '白元芳'],\n        'cars': [\n            {'brand': 'BYD', 'max_speed': 180},\n            {'brand': 'Audi', 'max_speed': 280},\n            {'brand': 'Benz', 'max_speed': 320}\n        ]\n    }\n    try:\n        with open('data.json', 'w', encoding='utf-8') as fs:\n            json.dump(mydict, fs)\n    except IOError as e:\n        print(e)\n    print('保存数据完成!')\n\n\nif __name__ == '__main__':\n    main()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><code>json</code>模块常用方法<br><code>dump()</code>：将Python对象按照JSON格式序列化到文件中<br><code>dumps()</code>：将Python对象处理成JSON格式的字符串<br><code>load()</code>：将文件中的JSON数据反序列化成对象<br><code>loads()</code>：将字符串的内容反序列化成Python对象</p>\n</blockquote>\n<p><strong>3.2shelve模块：</strong>可以将Python程序中的变量保存到<strong>二进制的shelf文件</strong>中，这样，程序就可以从硬盘中恢复变量的数据</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#保存变量\nimport shelve\nshelfFile = shelve.open('mydata') #初始化一个shelf变量，类似于file变量，其中mydata为保存变量的文件\ncats = ['Zophie', 'Pooka', 'Simon']\nshelfFile['cats'] = cats #变量以类似于字典的形式存储\nshelfFile.close() #结束\n#访问变量\nshelfFile = shelve.open('mydata')\nshelfFile['cats'] #访问cats变量\nshelfFile.close()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"python学习笔记（三）\"><a href=\"#python学习笔记（三）\" class=\"headerlink\" title=\"python学习笔记（三）\"></a>python学习笔记（三）</h1><h2 id=\"文件管理\"><a href=\"#文件管理\" class=\"headerlink\" title=\"文件管理\"></a>文件管理</h2><h3 id=\"1-文件路径\"><a href=\"#1-文件路径\" class=\"headerlink\" title=\"1.文件路径\"></a>1.文件路径</h3><p><strong>1.1定义：</strong>指明了文件在计算机上的<strong>位置</strong>，可分为<strong>绝对路径</strong>和<strong>相对路径</strong><br>①绝对路径：从<strong>根文件夹</strong>开始的完整路径<br>②相对路径：相对于程序的<strong>当前工作目录</strong>的路径</p>\n<blockquote>\n<p>windows上采用<code>\\</code>作为文件夹之间的分隔符，Linux上和OS X上采用<code>/</code>作为文件夹之间的分隔符</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 为了程序的可移植性，采用python中os模块中的方法获取文件路径</div>\n<p><strong>1.2获取</strong><br>①通过<code>os</code>模块获取</p>\n<blockquote>\n<p><code>os.path.join()</code>：将单个文件和路径上的文件夹名称的字符串传递给它，<code>os.path.join()</code>就会返回一个文件路径的字符串<br><code>os.getcwd()</code>：可以取得<strong>当前工作路径</strong>的<strong>字符串</strong>，并可以利用<code>os.chdir()</code>改变它<br><code>os.path.abspath(path)</code>：将返回参数（相对路径的<strong>字符串</strong>）的绝对路径的<strong>字符串</strong><br><code>os.path.dirname()</code>：获取文件绝对路径的目录部分</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 如果要获得路径的每一个文件夹的名称，可以使用'[路径]'.split(os.path.sep)</div>\n<p>②使用<code>sys</code>模块</p>\n<blockquote>\n<p><code>sys.argv[0]</code>：获取当前脚本的路径（包括文件名）。<br><code>sys.path[0]</code>：获取当前脚本所在的目录路径。</p>\n</blockquote>\n<p>③使用<code>__file__</code>变量：包含了<strong>当前模块</strong>（脚本）的路径（包括文件名）</p>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 该变量只在一个独立的模块（脚本）中才有定义</div>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">import os\nimport sys\n\n# 获取当前工作目录\ncurrent_directory &#x3D; os.getcwd()\nprint(&quot;当前工作目录:&quot;, current_directory)\n\n# 获取文件的绝对路径\nabsolute_path &#x3D; os.path.abspath(&#39;file.txt&#39;)\nprint(&quot;文件的绝对路径:&quot;, absolute_path)\n\n# 拼接目录和文件名，返回完整路径\nfull_path &#x3D; os.path.join(&#39;dir&#39;, &#39;file.txt&#39;)\nprint(&quot;完整路径:&quot;, full_path)\n\n# 获取当前脚本的路径\nscript_path &#x3D; sys.argv[0]\nprint(&quot;当前脚本的路径:&quot;, script_path)\n\n# 获取当前脚本所在的目录路径\nscript_directory &#x3D; os.path.dirname(os.path.abspath(__file__))\nprint(&quot;当前脚本所在的目录路径:&quot;, script_directory)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>1.3有效性检查</strong></p>\n<blockquote>\n<p><code>os.path.exists(path)</code>：如果path参数所指的文件或文件夹存在，返回True<br><code>os.path.isfile(path)</code>：如果path参数存在，并且是一个文件，返回 True<br><code>os.path.isdir(path)</code>：如果path参数存在，并且是一个文件夹，返回Ture</p>\n</blockquote>\n<h3 id=\"2-文件处理\"><a href=\"#2-文件处理\" class=\"headerlink\" title=\"2.文件处理\"></a>2.文件处理</h3><p><strong>2.1打开文件</strong><br>①<code>open()</code>： 向它传递一个<strong>字符串</strong>路径，返回一个<code>File</code>对象，还可传入对应参数指定<strong>操作模式</strong>和<strong>编码方式</strong>，默认是<strong>读模式</strong>和<strong>操作系统默认的编码</strong><br>②操作模式：不同的操作模式有不同的规则</p>\n<blockquote>\n<p><code>&#39;r&#39;</code>：以只读模式打开文件（默认模式），文件指针位于文件的开头，如果文件不存在，则会引发FileNotFoundError。<br><code>&#39;w&#39;</code>：以写入模式打开文件，如果文件已存在，则会被清空。如果文件不存在，则会创建一个新文件。<br><code>&#39;a&#39;</code>：以追加模式打开文件，文件指针位于文件的末尾。如果文件不存在，则会创建一个新文件。<br><code>&#39;x&#39;</code>：以独占写入模式打开文件，如果文件已存在，则会引发FileExistsError。<br><code>&#39;b&#39;</code>：以二进制模式打开文件，可以与其他模式一起使用，例如’rb’或’wb’。<br><code>&#39;t&#39;</code>：以文本模式打开文件（默认模式），可以与其他模式一起使用，例如’rt’或’wt’。<br><code>&#39;+&#39;</code>：以读写模式打开文件，可以与其他模式一起使用，例如’r+’、’w+’或’a+’。</p>\n</blockquote>\n<p>③编码方式：通过<code>encoding</code>参数指定编码，常见的编码方式有<code>ASCII</code>、<code>UTF-8</code>等，选择编码方式时，应根据需求考虑文件中包含的<strong>字符范围、语言以及平台兼容性</strong>等因素</p>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 如果文件使用的编码方式与指定的编码方式不匹配，可能会导致读取或写入的数据出现错误</div>\n<p>④如果<code>open</code>函数指定的文件并<strong>不存在或者无法打开</strong>，那么将引发异常状况导致程序崩溃，需要对其进行检查，此外，执行完业务逻辑后，需要<strong>及时对目标文件进行释放</strong>，可以使用python中的异常机制</p>\n<blockquote>\n<p>文件找不到会引发<code>FileNotFoundError</code>，指定了未知的编码会引发<code>LookupError</code>，而如果读取文件时无法按指定方式解码会引发<code>UnicodeDecodeError</code></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">def main():\n    f &#x3D; None\n    try:\n        f &#x3D; open(&#39;致橡树.txt&#39;, &#39;r&#39;, encoding&#x3D;&#39;utf-8&#39;)\n        print(f.read())\n    except FileNotFoundError:\n        print(&#39;无法打开指定的文件!&#39;)\n    except LookupError:\n        print(&#39;指定了未知的编码!&#39;)\n    except UnicodeDecodeError:\n        print(&#39;读取文件时解码错误!&#39;)\n    finally:\n        if f:\n            f.close()\n\n\nif __name__ &#x3D;&#x3D; &#39;__main__&#39;:\n    main()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>2.2文件读写</strong><br>①文件读取</p>\n<blockquote>\n<p><code>read()</code>：将整个文件的内容读取为一个<strong>字符串值</strong><br><code>for-in</code>循环：还可以使用<code>for-in</code>循环逐行读取文件<br><code>readlines</code>：将文件按行读取到一个列表容器中</p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">import time\n\n\ndef main():\n    # 一次性读取整个文件内容\n    with open(&#39;致橡树.txt&#39;, &#39;r&#39;, encoding&#x3D;&#39;utf-8&#39;) as f:\n        print(f.read())\n\n    # 通过for-in循环逐行读取\n    with open(&#39;致橡树.txt&#39;, mode&#x3D;&#39;r&#39;) as f:\n        for line in f:\n            print(line, end&#x3D;&#39;&#39;)\n            time.sleep(0.5)\n    print()\n\n    # 读取文件按行读取到列表中\n    with open(&#39;致橡树.txt&#39;) as f:\n        lines &#x3D; f.readlines()\n    print(lines)\n    \n\nif __name__ &#x3D;&#x3D; &#39;__main__&#39;:\n    main()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>②文件写入：采用<code>write()</code>方法，该方法接收<strong>字符串</strong>，并将其写入到文件对象中</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">file &#x3D; open(&quot;example.txt&quot;, &quot;w&quot;)\nfile.write(&quot;Hello, World!&quot;)\nfile.close()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><strong>2.3文件信息查询</strong><br>①<code>os.path.getsize(path)</code>将返回path参数中文件的<strong>字节数</strong><br>②<code>os.listdir(path)</code>将返回<strong>文件名字符串的列表</strong>，包含path参数中的每个文件<br><strong>2.4文件管理器</strong><br>①定义</p>\n<blockquote>\n<p>上下文：任务本身会对其环境进行保存，做到哪里了，做了多少，各种状态都会标识记录，从而形成了上下文环境，在切换时根据每个任务的上下文环境，继续执行，从而达到多任务</p>\n</blockquote>\n<blockquote>\n<p>上下文管理器对象：即任何实现了<code>__enter__()</code>和 <code>__exit__()</code> 方法的类的对象实例</p>\n</blockquote>\n<p>②使用：<code>with 上下文表达式 as 对象</code></p>\n<blockquote>\n<p>其中<strong>上下文表达式</strong>是一个返回上下文管理器对象的函数调用<br>在进入语句块之前，上下文管理器的<code>__enter__</code>方法会被调用，可以在这个方法中执行资源的获取操作<br>在离开语句块时，无论是正常的退出还是发生异常，上下文管理器的<code>__exit__</code>方法都会被调用，可以在这个方法中执行资源的释放操作</p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">with open(&#39;example.txt&#39;, &#39;r&#39;) as file:\n    data &#x3D; file.read()\n    print(data)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>③with关键字的实现原理</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">class File(object):\n\n    def __init__(self, filename, mode):\n        self.filename &#x3D; filename\n        self.mode &#x3D; mode\n        self.file &#x3D; None\n\n    def __enter__(self):\n        &quot;&quot;&quot;\n        进入with as 语句的时候被with调用\n        返回值作为 as 后面的变量\n        &quot;&quot;&quot;\n        print(&quot;__enter__ called&quot;)\n        self.file &#x3D; open(self.filename, self.mode)\n        return self.file\n\n    def __exit__(self, exc_type, exc_value, exc_traceback):\n        &quot;&quot;&quot;\n        离开with语句的时候被with调用\n        &quot;&quot;&quot;\n        print(&quot;__exit__ called&quot;)\n        print(&quot;exc_type: &quot;, exc_type)\n        print(&quot;exc_value: &quot;, exc_value)\n        print(&quot;exc_traceback: &quot;, exc_traceback)\n        self.file.close()\n        print(&quot;文件关闭操作&quot;)\n\n\ndef main():\n\n    with File(&quot;test.txt&quot;, &quot;w&quot;) as f:\n        print(&quot;with 代码块&quot;)\n        f.write(&quot;hello python1&quot;)\n        f.write(&quot;hello python2&quot;)\n        # a &#x3D; 1 &#x2F; 0\n        f.write(&quot;hello python3&quot;)\n\n    print(&quot;with 语句结束&quot;)\n\n\nif __name__ &#x3D;&#x3D; &#39;__main__&#39;:\n    main()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>进入上下文管理器会自动调用<code>__enter__(self)</code>，该方法的返回值会被赋值给<code>as</code>子句后的对象，该方法可以返回多个值，因此在<code>as</code>子句后面也可以指定多个变量（括起来组成元组）<br>退出上下文管理器自动调用<code>__exit__(self, exc_type, exc_value, exc_traceback)</code>，前三个参数在调用<code>__exit__()</code>方法时由Python解释器自动传递，并提供与异常相关的信息</p>\n</blockquote>\n<p>④<code>with</code>关键字和<code>try-except</code>联合调用</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">def main():\n    try:\n        with open(&#39;guido.jpg&#39;, &#39;rb&#39;) as fs1:\n            data &#x3D; fs1.read()\n            print(type(data))  # &lt;class &#39;bytes&#39;&gt;\n        with open(&#39;吉多.jpg&#39;, &#39;wb&#39;) as fs2:\n            fs2.write(data)\n    except FileNotFoundError as e:\n        print(&#39;指定的文件无法打开.&#39;)\n    except IOError as e:\n        print(&#39;读写文件时出现错误.&#39;)\n    print(&#39;程序执行结束.&#39;)\n\n\nif __name__ &#x3D;&#x3D; &#39;__main__&#39;:\n    main()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><code>with</code>语句的主要目的是确保上下文管理器的资源<strong>被正确释放</strong>，即使在发生异常的情况下也能保证资源的释放，而<code>try-except</code>语句主要用于处理异常，提供错误处理和容错机制</p>\n</blockquote>\n<h3 id=\"3-变量保存\"><a href=\"#3-变量保存\" class=\"headerlink\" title=\"3.变量保存\"></a>3.变量保存</h3><p><strong>3.1json模块</strong><br>①简介：是JavaScript语言中创建对象的一种字面量语法，现在已经被广泛的应用于<strong>跨平台跨语言</strong>的数据交换</p>\n<blockquote>\n<p>因为JSON是<strong>纯文本</strong>，任何系统任何编程语言处理纯文本都是没有问题的</p>\n</blockquote>\n<p>②JSON的数据类型和Python的数据类型对应关系</p>\n<table>\n<thead>\n<tr>\n<th>Python</th>\n<th>JSON</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>dict</td>\n<td>object</td>\n</tr>\n<tr>\n<td>list, tuple</td>\n<td>array</td>\n</tr>\n<tr>\n<td>str</td>\n<td>string</td>\n</tr>\n<tr>\n<td>int, float, int- &amp; float-derived Enums</td>\n<td>number</td>\n</tr>\n<tr>\n<td>True&#x2F;False</td>\n<td>true&#x2F;false</td>\n</tr>\n<tr>\n<td>None</td>\n<td>null</td>\n</tr>\n</tbody></table>\n<p>③实例</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">import json\n\n\ndef main():\n    mydict &#x3D; &#123;\n        &#39;name&#39;: &#39;骆昊&#39;,\n        &#39;age&#39;: 38,\n        &#39;qq&#39;: 957658,\n        &#39;friends&#39;: [&#39;王大锤&#39;, &#39;白元芳&#39;],\n        &#39;cars&#39;: [\n            &#123;&#39;brand&#39;: &#39;BYD&#39;, &#39;max_speed&#39;: 180&#125;,\n            &#123;&#39;brand&#39;: &#39;Audi&#39;, &#39;max_speed&#39;: 280&#125;,\n            &#123;&#39;brand&#39;: &#39;Benz&#39;, &#39;max_speed&#39;: 320&#125;\n        ]\n    &#125;\n    try:\n        with open(&#39;data.json&#39;, &#39;w&#39;, encoding&#x3D;&#39;utf-8&#39;) as fs:\n            json.dump(mydict, fs)\n    except IOError as e:\n        print(e)\n    print(&#39;保存数据完成!&#39;)\n\n\nif __name__ &#x3D;&#x3D; &#39;__main__&#39;:\n    main()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><code>json</code>模块常用方法<br><code>dump()</code>：将Python对象按照JSON格式序列化到文件中<br><code>dumps()</code>：将Python对象处理成JSON格式的字符串<br><code>load()</code>：将文件中的JSON数据反序列化成对象<br><code>loads()</code>：将字符串的内容反序列化成Python对象</p>\n</blockquote>\n<p><strong>3.2shelve模块：</strong>可以将Python程序中的变量保存到<strong>二进制的shelf文件</strong>中，这样，程序就可以从硬盘中恢复变量的数据</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#保存变量\nimport shelve\nshelfFile &#x3D; shelve.open(&#39;mydata&#39;) #初始化一个shelf变量，类似于file变量，其中mydata为保存变量的文件\ncats &#x3D; [&#39;Zophie&#39;, &#39;Pooka&#39;, &#39;Simon&#39;]\nshelfFile[&#39;cats&#39;] &#x3D; cats #变量以类似于字典的形式存储\nshelfFile.close() #结束\n#访问变量\nshelfFile &#x3D; shelve.open(&#39;mydata&#39;)\nshelfFile[&#39;cats&#39;] #访问cats变量\nshelfFile.close()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n"},{"title":"python学习笔记（二）","seo_title":"seo名称","toc":true,"indent":true,"top":false,"comments":1,"archive":true,"cover":false,"mathjax":false,"pin":false,"top_meta":false,"bottom_meta":false,"sidebar":["toc"],"keywords":"文章关键词","updated":"2023-11-07T14:10:58.014Z","img":"/medias/featureimages/4.webp","date":"2023-11-07T14:10:58.014Z","summary":"python编程进阶","_content":"# python学习笔记（二）\n## python进阶\n\n### 1.正则表达式（Regex）\n**1.1定义**：一种**只描述文本特征**文本描述方法\n>与正则表达式有关的函数在**re模块**中\n\n**1.2字符分类**\n①默认字符\n![默认字符](/image/python_8.png)\n②自定义:[ijk]\n>可以使用`-`表示字母或数字的范围，如[0-57-8]表示[012345678]\n\n**一般的**正则表达式符号不会被解释，不需要使用转义字符\n在的左方括号后加上一个插入字符`^`，就可以得到**非字符类**，即匹配不在这个字符类中的所有字符\n**1.3步骤**\n①`import re`导入re模块\n②用`re.compile()`函数创建一个**Regex对象**（记得使用**原始字符串**）\n③向Regex对象的`search()`方法传入想查找的字符串，它返回一个**Match对象**\n④调用Match对象的`group()`方法，返回实际匹配文本的**字符串**\n```\nphoneNumRegex = re.compile(r'\\d\\d\\d-\\d\\d\\d-\\d\\d\\d\\d') #phoneNumRegex是一个Regex对象\nmo = phoneNumRegex.search('My number is 415-555-4242.') #mo是一个Match对象\nprint('Phone number found: ' + mo.group())\n```\n**1.4修饰符号**:在**初始化Regex对象**时使用，如果想要匹配这这些字符，需要使用对应的**转义字符**\n①`()`：对Regex对象进行**分组**\n>group()函数可以提取对象的**某一组内容**，默认是0，即不考虑分组\n\n```\nphoneNumRegex = re.compile(r'(\\d\\d\\d)-(\\d\\d\\d-\\d\\d\\d\\d)')\nmo = phoneNumRegex.search('My number is 415-555-4242.')\nmo.group(1) #得到的结果是'415'\n```\n>如果想要一次就获取**所有的分组**，使用`groups()`方法，返回多个组对应的**字符串元组**\n\n②`|`：表示匹配许多表达式**中的一个**即可\n```\nheroRegex = re.compile (r'Batman|Tina Fey')\nmo1 = heroRegex.search('Batman and Tina Fey.')\nmo1.group() #结果是'Batman'，即第一次匹配到的\n```\n>可以利用`()`和`|`实现某部分确定，某部分可选的正则表达式，如`batRegex = re.compile(r'Bat(man|mobile|copter|bat)')`\n\n③`?`:表明它**前面的分组**在这个模式中是**可选的**\n>`batRegex = re.compile(r'Bat(wo)?man')`既匹配'Batwoman'，又匹配'Batman'\n\n④`*`：意味着“匹配零次或多次”，即星号之前的分组，可以在文本中出现**任意次**，包括0次\n>`batRegex = re.compile(r'Bat(wo)*man')`可以匹配'Batwowowowoman'和'Batman'\n\n⑤`+`：类似于`*`，但是**至少要一次**\n⑥`{}`：类似于`*`，用于指定**特定次数**，`{n}`表示匹配n次，`{i，j}`代表i-j次\n>贪心和非贪心匹配:Python 的正则表达式**默认是“贪心”**的，这表示在有二义的情况下，它们会**尽可能匹配最长的字符串**，花括号的“非贪心”版本匹配尽可能最短的字符串，即在**结束的花括号后跟着一个问号**\n\n```\ngreedyHaRegex = re.compile(r'(Ha){3,5}')\nmo1 = greedyHaRegex.search('HaHaHaHaHa')\nmo1.group() #结果是'HaHaHaHaHa'\nnongreedyHaRegex = re.compile(r'(Ha){3,5}?')\nmo2 = nongreedyHaRegex.search('HaHaHaHaHa')\nmo2.group() #结果是'HaHaHa'\n```\n⑦`^`/`$`：被搜索字符串必须以正则表达式对应的字符串**开始/结束**\n⑧`.`：匹配一个**除了换行之外**的所有字符\n>传入`re.DOTALL`作为`re.compile()`的第二个参数，可以让句点字符匹配`所有字符`，包括换行字符\n\n**1.5拓展方法**\n①`findall()`：不同于`search()`返回的Match对象只包含`第一次出现的匹配文本`，`findall()`将返回一**字符串列表**，包含被查找字符串中的**所有匹配**\n```\nphoneNumRegex = re.compile(r'\\d\\d\\d-\\d\\d\\d-\\d\\d\\d\\d') # has no groups\nphoneNumRegex.findall('Cell: 415-555-9999 Work: 212-555-0000')\n['415-555-9999', '212-555-0000']\n```\n>如果在正则表达式中有分组，那么findall将返回**元组的列表**，每个元组表示一个找到的匹配，其中的项就是正则表达式中每个分组的匹配字符串\n\n```\nphoneNumRegex = re.compile(r'(\\d\\d\\d)-(\\d\\d\\d)-(\\d\\d\\d\\d)') # has groups\nphoneNumRegex.findall('Cell: 415-555-9999 Work: 212-555-0000')\n[('415', '555', '1122'), ('212', '555', '0000')]\n```\n②`sub()`：传入两个参数，第一个参数是一个字符串，用于取代发现和正则表达式匹配的部分，第二个参数是一个正则表达式，返回替换完成后的字符串\n```\nnamesRegex = re.compile(r'Agent \\w+')\nnamesRegex.sub('CENSORED', 'Agent Alice gave the secret documents to Agent Bob.')#返回'CENSORED gave the secret documents to CENSORED.'\n```\n>如果只想改变和对应正则表达式相匹配的**一部分**，可以给正则表达式参数**分组**，并在第一个参数开头加上`\\n`，代表该字符串只替代第n组\n\n```\nagentNamesRegex = re.compile(r'Agent (\\w)\\w*')\nagentNamesRegex.sub(r'\\1****', 'Agent Alice told Agent Carol that Agent Eve knew Agent Bob was a double agent.')\n#返回结果是'A**** told C**** that E**** knew B**** was a double agent.'\n\n```\n③复杂的正则表达式\n>可以可以向`re.compile()`传入变量`re.VERBOSE`，作为第二个参数，忽略正则表达式字符串中的空白符和注释\n使用三重引号，可以将正则表达式定义放在多行中\n\n详细可见[参考文章](https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/12.%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.md)\n\n### 2.并发编程\n**2.1相关概念**\n①并发编程：让程序同时执行多个任务\n②进程：操作系统中**正在执行**的程序\n>操作系统以进程为单位分配存储空间，每个进程都有自己的**地址空间**、**数据栈**以及其他用于跟踪进程执行的**辅助数据**\n不同进程通过**进程间通信机制**（IPC）来实现数据共享，具体的方式包括**管道**、**信号**、**套接字**、**共享内存区**等\n\n③线程：进程中可以获得CPU调度的执行单元\n>某个时刻能够获得CPU的只有唯一的一个**线程**\n\n**2.2多进程**\n[参考文章](https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/13.%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B.md)\n\n\n\n\n","source":"_posts/python学习笔记（二）.md","raw":"---\ntitle: python学习笔记（二）\nseo_title: seo名称\ntoc: true\nindent: true\ntop: false\ncomments: true\narchive: true\ncover: false\nmathjax: false\npin: false\ntop_meta: false\nbottom_meta: false\nsidebar:\n  - toc\ntag:\n  - 编程语言\n  - python\ncategories: 编程语言\nkeywords: 文章关键词\nupdated: ''\nimg: /medias/featureimages/4.webp\ndate:\nsummary: python编程进阶\n---\n# python学习笔记（二）\n## python进阶\n\n### 1.正则表达式（Regex）\n**1.1定义**：一种**只描述文本特征**文本描述方法\n>与正则表达式有关的函数在**re模块**中\n\n**1.2字符分类**\n①默认字符\n![默认字符](/image/python_8.png)\n②自定义:[ijk]\n>可以使用`-`表示字母或数字的范围，如[0-57-8]表示[012345678]\n\n**一般的**正则表达式符号不会被解释，不需要使用转义字符\n在的左方括号后加上一个插入字符`^`，就可以得到**非字符类**，即匹配不在这个字符类中的所有字符\n**1.3步骤**\n①`import re`导入re模块\n②用`re.compile()`函数创建一个**Regex对象**（记得使用**原始字符串**）\n③向Regex对象的`search()`方法传入想查找的字符串，它返回一个**Match对象**\n④调用Match对象的`group()`方法，返回实际匹配文本的**字符串**\n```\nphoneNumRegex = re.compile(r'\\d\\d\\d-\\d\\d\\d-\\d\\d\\d\\d') #phoneNumRegex是一个Regex对象\nmo = phoneNumRegex.search('My number is 415-555-4242.') #mo是一个Match对象\nprint('Phone number found: ' + mo.group())\n```\n**1.4修饰符号**:在**初始化Regex对象**时使用，如果想要匹配这这些字符，需要使用对应的**转义字符**\n①`()`：对Regex对象进行**分组**\n>group()函数可以提取对象的**某一组内容**，默认是0，即不考虑分组\n\n```\nphoneNumRegex = re.compile(r'(\\d\\d\\d)-(\\d\\d\\d-\\d\\d\\d\\d)')\nmo = phoneNumRegex.search('My number is 415-555-4242.')\nmo.group(1) #得到的结果是'415'\n```\n>如果想要一次就获取**所有的分组**，使用`groups()`方法，返回多个组对应的**字符串元组**\n\n②`|`：表示匹配许多表达式**中的一个**即可\n```\nheroRegex = re.compile (r'Batman|Tina Fey')\nmo1 = heroRegex.search('Batman and Tina Fey.')\nmo1.group() #结果是'Batman'，即第一次匹配到的\n```\n>可以利用`()`和`|`实现某部分确定，某部分可选的正则表达式，如`batRegex = re.compile(r'Bat(man|mobile|copter|bat)')`\n\n③`?`:表明它**前面的分组**在这个模式中是**可选的**\n>`batRegex = re.compile(r'Bat(wo)?man')`既匹配'Batwoman'，又匹配'Batman'\n\n④`*`：意味着“匹配零次或多次”，即星号之前的分组，可以在文本中出现**任意次**，包括0次\n>`batRegex = re.compile(r'Bat(wo)*man')`可以匹配'Batwowowowoman'和'Batman'\n\n⑤`+`：类似于`*`，但是**至少要一次**\n⑥`{}`：类似于`*`，用于指定**特定次数**，`{n}`表示匹配n次，`{i，j}`代表i-j次\n>贪心和非贪心匹配:Python 的正则表达式**默认是“贪心”**的，这表示在有二义的情况下，它们会**尽可能匹配最长的字符串**，花括号的“非贪心”版本匹配尽可能最短的字符串，即在**结束的花括号后跟着一个问号**\n\n```\ngreedyHaRegex = re.compile(r'(Ha){3,5}')\nmo1 = greedyHaRegex.search('HaHaHaHaHa')\nmo1.group() #结果是'HaHaHaHaHa'\nnongreedyHaRegex = re.compile(r'(Ha){3,5}?')\nmo2 = nongreedyHaRegex.search('HaHaHaHaHa')\nmo2.group() #结果是'HaHaHa'\n```\n⑦`^`/`$`：被搜索字符串必须以正则表达式对应的字符串**开始/结束**\n⑧`.`：匹配一个**除了换行之外**的所有字符\n>传入`re.DOTALL`作为`re.compile()`的第二个参数，可以让句点字符匹配`所有字符`，包括换行字符\n\n**1.5拓展方法**\n①`findall()`：不同于`search()`返回的Match对象只包含`第一次出现的匹配文本`，`findall()`将返回一**字符串列表**，包含被查找字符串中的**所有匹配**\n```\nphoneNumRegex = re.compile(r'\\d\\d\\d-\\d\\d\\d-\\d\\d\\d\\d') # has no groups\nphoneNumRegex.findall('Cell: 415-555-9999 Work: 212-555-0000')\n['415-555-9999', '212-555-0000']\n```\n>如果在正则表达式中有分组，那么findall将返回**元组的列表**，每个元组表示一个找到的匹配，其中的项就是正则表达式中每个分组的匹配字符串\n\n```\nphoneNumRegex = re.compile(r'(\\d\\d\\d)-(\\d\\d\\d)-(\\d\\d\\d\\d)') # has groups\nphoneNumRegex.findall('Cell: 415-555-9999 Work: 212-555-0000')\n[('415', '555', '1122'), ('212', '555', '0000')]\n```\n②`sub()`：传入两个参数，第一个参数是一个字符串，用于取代发现和正则表达式匹配的部分，第二个参数是一个正则表达式，返回替换完成后的字符串\n```\nnamesRegex = re.compile(r'Agent \\w+')\nnamesRegex.sub('CENSORED', 'Agent Alice gave the secret documents to Agent Bob.')#返回'CENSORED gave the secret documents to CENSORED.'\n```\n>如果只想改变和对应正则表达式相匹配的**一部分**，可以给正则表达式参数**分组**，并在第一个参数开头加上`\\n`，代表该字符串只替代第n组\n\n```\nagentNamesRegex = re.compile(r'Agent (\\w)\\w*')\nagentNamesRegex.sub(r'\\1****', 'Agent Alice told Agent Carol that Agent Eve knew Agent Bob was a double agent.')\n#返回结果是'A**** told C**** that E**** knew B**** was a double agent.'\n\n```\n③复杂的正则表达式\n>可以可以向`re.compile()`传入变量`re.VERBOSE`，作为第二个参数，忽略正则表达式字符串中的空白符和注释\n使用三重引号，可以将正则表达式定义放在多行中\n\n详细可见[参考文章](https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/12.%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.md)\n\n### 2.并发编程\n**2.1相关概念**\n①并发编程：让程序同时执行多个任务\n②进程：操作系统中**正在执行**的程序\n>操作系统以进程为单位分配存储空间，每个进程都有自己的**地址空间**、**数据栈**以及其他用于跟踪进程执行的**辅助数据**\n不同进程通过**进程间通信机制**（IPC）来实现数据共享，具体的方式包括**管道**、**信号**、**套接字**、**共享内存区**等\n\n③线程：进程中可以获得CPU调度的执行单元\n>某个时刻能够获得CPU的只有唯一的一个**线程**\n\n**2.2多进程**\n[参考文章](https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/13.%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B.md)\n\n\n\n\n","slug":"python学习笔记（二）","published":1,"_id":"clmkphbfa001h9gvd5wrr5jvs","layout":"post","photos":[],"link":"","content":"<h1 id=\"python学习笔记（二）\"><a href=\"#python学习笔记（二）\" class=\"headerlink\" title=\"python学习笔记（二）\"></a>python学习笔记（二）</h1><h2 id=\"python进阶\"><a href=\"#python进阶\" class=\"headerlink\" title=\"python进阶\"></a>python进阶</h2><h3 id=\"1-正则表达式（Regex）\"><a href=\"#1-正则表达式（Regex）\" class=\"headerlink\" title=\"1.正则表达式（Regex）\"></a>1.正则表达式（Regex）</h3><p><strong>1.1定义</strong>：一种<strong>只描述文本特征</strong>文本描述方法</p>\n<blockquote>\n<p>与正则表达式有关的函数在<strong>re模块</strong>中</p>\n</blockquote>\n<p><strong>1.2字符分类</strong><br>①默认字符<br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/python_8.png\" alt=\"默认字符\"><br>②自定义:[ijk]</p>\n<blockquote>\n<p>可以使用<code>-</code>表示字母或数字的范围，如[0-57-8]表示[012345678]</p>\n</blockquote>\n<p><strong>一般的</strong>正则表达式符号不会被解释，不需要使用转义字符<br>在的左方括号后加上一个插入字符<code>^</code>，就可以得到<strong>非字符类</strong>，即匹配不在这个字符类中的所有字符<br><strong>1.3步骤</strong><br>①<code>import re</code>导入re模块<br>②用<code>re.compile()</code>函数创建一个<strong>Regex对象</strong>（记得使用<strong>原始字符串</strong>）<br>③向Regex对象的<code>search()</code>方法传入想查找的字符串，它返回一个<strong>Match对象</strong><br>④调用Match对象的<code>group()</code>方法，返回实际匹配文本的<strong>字符串</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">phoneNumRegex = re.compile(r'\\d\\d\\d-\\d\\d\\d-\\d\\d\\d\\d') #phoneNumRegex是一个Regex对象\nmo = phoneNumRegex.search('My number is 415-555-4242.') #mo是一个Match对象\nprint('Phone number found: ' + mo.group())<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><strong>1.4修饰符号</strong>:在<strong>初始化Regex对象</strong>时使用，如果想要匹配这这些字符，需要使用对应的<strong>转义字符</strong><br>①<code>()</code>：对Regex对象进行<strong>分组</strong></p>\n<blockquote>\n<p>group()函数可以提取对象的<strong>某一组内容</strong>，默认是0，即不考虑分组</p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">phoneNumRegex = re.compile(r'(\\d\\d\\d)-(\\d\\d\\d-\\d\\d\\d\\d)')\nmo = phoneNumRegex.search('My number is 415-555-4242.')\nmo.group(1) #得到的结果是'415'<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>如果想要一次就获取<strong>所有的分组</strong>，使用<code>groups()</code>方法，返回多个组对应的<strong>字符串元组</strong></p>\n</blockquote>\n<p>②<code>|</code>：表示匹配许多表达式<strong>中的一个</strong>即可</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">heroRegex = re.compile (r'Batman|Tina Fey')\nmo1 = heroRegex.search('Batman and Tina Fey.')\nmo1.group() #结果是'Batman'，即第一次匹配到的<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>可以利用<code>()</code>和<code>|</code>实现某部分确定，某部分可选的正则表达式，如<code>batRegex = re.compile(r'Bat(man|mobile|copter|bat)')</code></p>\n</blockquote>\n<p>③<code>?</code>:表明它<strong>前面的分组</strong>在这个模式中是<strong>可选的</strong></p>\n<blockquote>\n<p><code>batRegex = re.compile(r'Bat(wo)?man')</code>既匹配’Batwoman’，又匹配’Batman’</p>\n</blockquote>\n<p>④<code>*</code>：意味着“匹配零次或多次”，即星号之前的分组，可以在文本中出现<strong>任意次</strong>，包括0次</p>\n<blockquote>\n<p><code>batRegex = re.compile(r'Bat(wo)*man')</code>可以匹配’Batwowowowoman’和’Batman’</p>\n</blockquote>\n<p>⑤<code>+</code>：类似于<code>*</code>，但是<strong>至少要一次</strong><br>⑥<code>{}</code>：类似于<code>*</code>，用于指定<strong>特定次数</strong>，<code>{n}</code>表示匹配n次，<code>{i，j}</code>代表i-j次</p>\n<blockquote>\n<p>贪心和非贪心匹配:Python 的正则表达式<strong>默认是“贪心”</strong>的，这表示在有二义的情况下，它们会<strong>尽可能匹配最长的字符串</strong>，花括号的“非贪心”版本匹配尽可能最短的字符串，即在<strong>结束的花括号后跟着一个问号</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">greedyHaRegex = re.compile(r'(Ha){3,5}')\nmo1 = greedyHaRegex.search('HaHaHaHaHa')\nmo1.group() #结果是'HaHaHaHaHa'\nnongreedyHaRegex = re.compile(r'(Ha){3,5}?')\nmo2 = nongreedyHaRegex.search('HaHaHaHaHa')\nmo2.group() #结果是'HaHaHa'<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>⑦<code>^</code>/<code>$</code>：被搜索字符串必须以正则表达式对应的字符串<strong>开始/结束</strong><br>⑧<code>.</code>：匹配一个<strong>除了换行之外</strong>的所有字符</p>\n<blockquote>\n<p>传入<code>re.DOTALL</code>作为<code>re.compile()</code>的第二个参数，可以让句点字符匹配<code>所有字符</code>，包括换行字符</p>\n</blockquote>\n<p><strong>1.5拓展方法</strong><br>①<code>findall()</code>：不同于<code>search()</code>返回的Match对象只包含<code>第一次出现的匹配文本</code>，<code>findall()</code>将返回一<strong>字符串列表</strong>，包含被查找字符串中的<strong>所有匹配</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">phoneNumRegex = re.compile(r'\\d\\d\\d-\\d\\d\\d-\\d\\d\\d\\d') # has no groups\nphoneNumRegex.findall('Cell: 415-555-9999 Work: 212-555-0000')\n['415-555-9999', '212-555-0000']<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>如果在正则表达式中有分组，那么findall将返回<strong>元组的列表</strong>，每个元组表示一个找到的匹配，其中的项就是正则表达式中每个分组的匹配字符串</p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">phoneNumRegex = re.compile(r'(\\d\\d\\d)-(\\d\\d\\d)-(\\d\\d\\d\\d)') # has groups\nphoneNumRegex.findall('Cell: 415-555-9999 Work: 212-555-0000')\n[('415', '555', '1122'), ('212', '555', '0000')]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>②<code>sub()</code>：传入两个参数，第一个参数是一个字符串，用于取代发现和正则表达式匹配的部分，第二个参数是一个正则表达式，返回替换完成后的字符串</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">namesRegex = re.compile(r'Agent \\w+')\nnamesRegex.sub('CENSORED', 'Agent Alice gave the secret documents to Agent Bob.')#返回'CENSORED gave the secret documents to CENSORED.'<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<blockquote>\n<p>如果只想改变和对应正则表达式相匹配的<strong>一部分</strong>，可以给正则表达式参数<strong>分组</strong>，并在第一个参数开头加上<code>\\n</code>，代表该字符串只替代第n组</p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">agentNamesRegex = re.compile(r'Agent (\\w)\\w*')\nagentNamesRegex.sub(r'\\1****', 'Agent Alice told Agent Carol that Agent Eve knew Agent Bob was a double agent.')\n#返回结果是'A**** told C**** that E**** knew B**** was a double agent.'\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>③复杂的正则表达式</p>\n<blockquote>\n<p>可以可以向<code>re.compile()</code>传入变量<code>re.VERBOSE</code>，作为第二个参数，忽略正则表达式字符串中的空白符和注释<br>使用三重引号，可以将正则表达式定义放在多行中</p>\n</blockquote>\n<p>详细可见<a href=\"https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/12.%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.md\">参考文章</a></p>\n<h3 id=\"2-并发编程\"><a href=\"#2-并发编程\" class=\"headerlink\" title=\"2.并发编程\"></a>2.并发编程</h3><p><strong>2.1相关概念</strong><br>①并发编程：让程序同时执行多个任务<br>②进程：操作系统中<strong>正在执行</strong>的程序</p>\n<blockquote>\n<p>操作系统以进程为单位分配存储空间，每个进程都有自己的<strong>地址空间</strong>、<strong>数据栈</strong>以及其他用于跟踪进程执行的<strong>辅助数据</strong><br>不同进程通过<strong>进程间通信机制</strong>（IPC）来实现数据共享，具体的方式包括<strong>管道</strong>、<strong>信号</strong>、<strong>套接字</strong>、<strong>共享内存区</strong>等</p>\n</blockquote>\n<p>③线程：进程中可以获得CPU调度的执行单元</p>\n<blockquote>\n<p>某个时刻能够获得CPU的只有唯一的一个<strong>线程</strong></p>\n</blockquote>\n<p><strong>2.2多进程</strong><br><a href=\"https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/13.%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B.md\">参考文章</a></p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"python学习笔记（二）\"><a href=\"#python学习笔记（二）\" class=\"headerlink\" title=\"python学习笔记（二）\"></a>python学习笔记（二）</h1><h2 id=\"python进阶\"><a href=\"#python进阶\" class=\"headerlink\" title=\"python进阶\"></a>python进阶</h2><h3 id=\"1-正则表达式（Regex）\"><a href=\"#1-正则表达式（Regex）\" class=\"headerlink\" title=\"1.正则表达式（Regex）\"></a>1.正则表达式（Regex）</h3><p><strong>1.1定义</strong>：一种<strong>只描述文本特征</strong>文本描述方法</p>\n<blockquote>\n<p>与正则表达式有关的函数在<strong>re模块</strong>中</p>\n</blockquote>\n<p><strong>1.2字符分类</strong><br>①默认字符<br><img src=\"/image/python_8.png\" alt=\"默认字符\"><br>②自定义:[ijk]</p>\n<blockquote>\n<p>可以使用<code>-</code>表示字母或数字的范围，如[0-57-8]表示[012345678]</p>\n</blockquote>\n<p><strong>一般的</strong>正则表达式符号不会被解释，不需要使用转义字符<br>在的左方括号后加上一个插入字符<code>^</code>，就可以得到<strong>非字符类</strong>，即匹配不在这个字符类中的所有字符<br><strong>1.3步骤</strong><br>①<code>import re</code>导入re模块<br>②用<code>re.compile()</code>函数创建一个<strong>Regex对象</strong>（记得使用<strong>原始字符串</strong>）<br>③向Regex对象的<code>search()</code>方法传入想查找的字符串，它返回一个<strong>Match对象</strong><br>④调用Match对象的<code>group()</code>方法，返回实际匹配文本的<strong>字符串</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">phoneNumRegex &#x3D; re.compile(r&#39;\\d\\d\\d-\\d\\d\\d-\\d\\d\\d\\d&#39;) #phoneNumRegex是一个Regex对象\nmo &#x3D; phoneNumRegex.search(&#39;My number is 415-555-4242.&#39;) #mo是一个Match对象\nprint(&#39;Phone number found: &#39; + mo.group())<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><strong>1.4修饰符号</strong>:在<strong>初始化Regex对象</strong>时使用，如果想要匹配这这些字符，需要使用对应的<strong>转义字符</strong><br>①<code>()</code>：对Regex对象进行<strong>分组</strong></p>\n<blockquote>\n<p>group()函数可以提取对象的<strong>某一组内容</strong>，默认是0，即不考虑分组</p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">phoneNumRegex &#x3D; re.compile(r&#39;(\\d\\d\\d)-(\\d\\d\\d-\\d\\d\\d\\d)&#39;)\nmo &#x3D; phoneNumRegex.search(&#39;My number is 415-555-4242.&#39;)\nmo.group(1) #得到的结果是&#39;415&#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>如果想要一次就获取<strong>所有的分组</strong>，使用<code>groups()</code>方法，返回多个组对应的<strong>字符串元组</strong></p>\n</blockquote>\n<p>②<code>|</code>：表示匹配许多表达式<strong>中的一个</strong>即可</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">heroRegex &#x3D; re.compile (r&#39;Batman|Tina Fey&#39;)\nmo1 &#x3D; heroRegex.search(&#39;Batman and Tina Fey.&#39;)\nmo1.group() #结果是&#39;Batman&#39;，即第一次匹配到的<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>可以利用<code>()</code>和<code>|</code>实现某部分确定，某部分可选的正则表达式，如<code>batRegex = re.compile(r&#39;Bat(man|mobile|copter|bat)&#39;)</code></p>\n</blockquote>\n<p>③<code>?</code>:表明它<strong>前面的分组</strong>在这个模式中是<strong>可选的</strong></p>\n<blockquote>\n<p><code>batRegex = re.compile(r&#39;Bat(wo)?man&#39;)</code>既匹配’Batwoman’，又匹配’Batman’</p>\n</blockquote>\n<p>④<code>*</code>：意味着“匹配零次或多次”，即星号之前的分组，可以在文本中出现<strong>任意次</strong>，包括0次</p>\n<blockquote>\n<p><code>batRegex = re.compile(r&#39;Bat(wo)*man&#39;)</code>可以匹配’Batwowowowoman’和’Batman’</p>\n</blockquote>\n<p>⑤<code>+</code>：类似于<code>*</code>，但是<strong>至少要一次</strong><br>⑥<code>&#123;&#125;</code>：类似于<code>*</code>，用于指定<strong>特定次数</strong>，<code>&#123;n&#125;</code>表示匹配n次，<code>&#123;i，j&#125;</code>代表i-j次</p>\n<blockquote>\n<p>贪心和非贪心匹配:Python 的正则表达式<strong>默认是“贪心”</strong>的，这表示在有二义的情况下，它们会<strong>尽可能匹配最长的字符串</strong>，花括号的“非贪心”版本匹配尽可能最短的字符串，即在<strong>结束的花括号后跟着一个问号</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">greedyHaRegex &#x3D; re.compile(r&#39;(Ha)&#123;3,5&#125;&#39;)\nmo1 &#x3D; greedyHaRegex.search(&#39;HaHaHaHaHa&#39;)\nmo1.group() #结果是&#39;HaHaHaHaHa&#39;\nnongreedyHaRegex &#x3D; re.compile(r&#39;(Ha)&#123;3,5&#125;?&#39;)\nmo2 &#x3D; nongreedyHaRegex.search(&#39;HaHaHaHaHa&#39;)\nmo2.group() #结果是&#39;HaHaHa&#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>⑦<code>^</code>&#x2F;<code>$</code>：被搜索字符串必须以正则表达式对应的字符串<strong>开始&#x2F;结束</strong><br>⑧<code>.</code>：匹配一个<strong>除了换行之外</strong>的所有字符</p>\n<blockquote>\n<p>传入<code>re.DOTALL</code>作为<code>re.compile()</code>的第二个参数，可以让句点字符匹配<code>所有字符</code>，包括换行字符</p>\n</blockquote>\n<p><strong>1.5拓展方法</strong><br>①<code>findall()</code>：不同于<code>search()</code>返回的Match对象只包含<code>第一次出现的匹配文本</code>，<code>findall()</code>将返回一<strong>字符串列表</strong>，包含被查找字符串中的<strong>所有匹配</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">phoneNumRegex &#x3D; re.compile(r&#39;\\d\\d\\d-\\d\\d\\d-\\d\\d\\d\\d&#39;) # has no groups\nphoneNumRegex.findall(&#39;Cell: 415-555-9999 Work: 212-555-0000&#39;)\n[&#39;415-555-9999&#39;, &#39;212-555-0000&#39;]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>如果在正则表达式中有分组，那么findall将返回<strong>元组的列表</strong>，每个元组表示一个找到的匹配，其中的项就是正则表达式中每个分组的匹配字符串</p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">phoneNumRegex &#x3D; re.compile(r&#39;(\\d\\d\\d)-(\\d\\d\\d)-(\\d\\d\\d\\d)&#39;) # has groups\nphoneNumRegex.findall(&#39;Cell: 415-555-9999 Work: 212-555-0000&#39;)\n[(&#39;415&#39;, &#39;555&#39;, &#39;1122&#39;), (&#39;212&#39;, &#39;555&#39;, &#39;0000&#39;)]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>②<code>sub()</code>：传入两个参数，第一个参数是一个字符串，用于取代发现和正则表达式匹配的部分，第二个参数是一个正则表达式，返回替换完成后的字符串</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">namesRegex &#x3D; re.compile(r&#39;Agent \\w+&#39;)\nnamesRegex.sub(&#39;CENSORED&#39;, &#39;Agent Alice gave the secret documents to Agent Bob.&#39;)#返回&#39;CENSORED gave the secret documents to CENSORED.&#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<blockquote>\n<p>如果只想改变和对应正则表达式相匹配的<strong>一部分</strong>，可以给正则表达式参数<strong>分组</strong>，并在第一个参数开头加上<code>\\n</code>，代表该字符串只替代第n组</p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">agentNamesRegex &#x3D; re.compile(r&#39;Agent (\\w)\\w*&#39;)\nagentNamesRegex.sub(r&#39;\\1****&#39;, &#39;Agent Alice told Agent Carol that Agent Eve knew Agent Bob was a double agent.&#39;)\n#返回结果是&#39;A**** told C**** that E**** knew B**** was a double agent.&#39;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>③复杂的正则表达式</p>\n<blockquote>\n<p>可以可以向<code>re.compile()</code>传入变量<code>re.VERBOSE</code>，作为第二个参数，忽略正则表达式字符串中的空白符和注释<br>使用三重引号，可以将正则表达式定义放在多行中</p>\n</blockquote>\n<p>详细可见<a href=\"https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/12.%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.md\">参考文章</a></p>\n<h3 id=\"2-并发编程\"><a href=\"#2-并发编程\" class=\"headerlink\" title=\"2.并发编程\"></a>2.并发编程</h3><p><strong>2.1相关概念</strong><br>①并发编程：让程序同时执行多个任务<br>②进程：操作系统中<strong>正在执行</strong>的程序</p>\n<blockquote>\n<p>操作系统以进程为单位分配存储空间，每个进程都有自己的<strong>地址空间</strong>、<strong>数据栈</strong>以及其他用于跟踪进程执行的<strong>辅助数据</strong><br>不同进程通过<strong>进程间通信机制</strong>（IPC）来实现数据共享，具体的方式包括<strong>管道</strong>、<strong>信号</strong>、<strong>套接字</strong>、<strong>共享内存区</strong>等</p>\n</blockquote>\n<p>③线程：进程中可以获得CPU调度的执行单元</p>\n<blockquote>\n<p>某个时刻能够获得CPU的只有唯一的一个<strong>线程</strong></p>\n</blockquote>\n<p><strong>2.2多进程</strong><br><a href=\"https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/13.%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B.md\">参考文章</a></p>\n"},{"title":"操作系统（一）","seo_title":"seo名称","toc":true,"indent":true,"top":false,"comments":1,"archive":true,"cover":false,"mathjax":false,"pin":false,"top_meta":false,"bottom_meta":false,"sidebar":["toc"],"keywords":"文章关键词","updated":"2023-11-09T04:23:02.447Z","img":"/medias/featureimages/2.webp","date":"2023-11-07T14:10:58.014Z","summary":"操作系统概述","_content":"# 操作系统（一）\n## 操作系统概述\n### 1.操作系统的启动\n#### 1.1引导扇区的读入\n{%list%}\n以X86 PC为例（使用16位寄存器）\n{%endlist%}\n>开机时，PC处于**实模式**，`CS:IP`被**初始化**为`FFFFH:0000H`\n{%list%}\nCPU的工作模式影响CPU的寻址方式、寄存器大小等\n{%endlist%}\n>CPU寻址`FFFFH:0000H`，即**ROM BIOS映射区**，并**检查硬件**\n\n>将磁盘**0磁道0扇区**读入`7C00H处`，并设置`CS:IP`为`07c0H:0000H`\n{%list%}\n0磁道0扇区即操作系统的引导扇区（bootsect.s），一个扇区512个字节\n{%endlist%}\n\n#### 1.2`bootsect.s`概述\n>将`07C0H:0000`处的引导程序**移动**到`9000H:0000H`处，并跳转到**下一条指令移动后的位置（因为还要继续执行`bootsect.s`）**\n{%list%}\n将07C0H:0000到9000H:0000H这段地址空间腾出来，给操作系统使用\n{%endlist%}\n>利用**13号中断**读取`setup.s`**所在扇区**，以及**操作系统所在扇区**（都按顺序放在`bootsect.s`之后），并完成一些**辅助工作（如显示开机画面）**，最后跳转到`setup.s`地址入口\n\n#### 1.3`setup.s`程序概述\n>获得相关**硬件信息**，如**扩展内存大小、显卡参数**等，并存放在**某段地址中**，以便之后**操作系统的初始化**\n{%list%}\n实模式下寻址大小只有1M，所以要扩展内存\n{%endlist%}\n>将**操作系统**读入到**0地址处**（之前在`setup.s`程序后），并完成一些**准备工作**，并进入**保护模式（32位模式）**，最后跳转到**0地址处**执行**操作系统的第一个模 块**`head.s`\n{%list%}\n这里的准备工作包括gdt表和idt表的初始化，进入保护模式后CS根据其值查询gdt表获得32位段地址，与32位IP进行相加，获得32位地址\n{%endlist%}\n\n#### 1.4`head.s`概述\n>完成一些**准备工作**（如**重新建立gdt表**和**idt表**），并进入操作系统的**main函数（通过内嵌汇编）**，进行内存等对象的**初始化并开始工作**\n{%list%}\nhead.s变为32位汇编（GNU as汇编），内嵌汇编\n{%endlist%}\n***\n### 2.系统调用\n#### 2.1引言\n>**shell实现概述**\n`shell`读取**用户输入**并调用`fork()`和`exec()`这两个**系统调用**执行用户输入 \n{%list%}\n系统调用即由系统提供的函数接口\n{%endlist%}\n>**POSIX标准**：由**IEEE**制定，每个操作系统**都应该提供**类似功能的**系统调用**（如`fork()`和`open()`） \n\n#### 2.2内核态和用户态\n{%list%}\n内核态和用户态本质上是内存的不同部分，拥有不同的权限，由硬件实现\n{%endlist%}\n>**CPL**：**当前执行指令的特权级**，用**CS的最低两位**来表示\n{%list%}\n操作系统启动后即进入用户态，CPL被初始化为3，系统调用可以将其变为0\n{%endlist%}\n>**DPL**：当前指令**访问的目标段的特权级**，放在**GDT表**中\n{%list%}\nGDT表的每一个表项用于描述一个地址，机器启动时初始化\n{%endlist%}\n{%right%}\n0是内核态，3是用户态，当CPL≤DPL时，可以访问\n{%endright%}\n\n#### 2.3陷入内核态概述\n{%right%}\n通过特定中断进入内核，如Linux是int 80H\n{%endright%}\n{%list%}\n以Linux系统下调用printf函数为例\n{%endlist%}\n>**用户程序**调用`printf`**库函数**，`printf`**库函数**调用`write`**库函数**\n\n>`write`通过**宏**`_syscall3`调用了`int 80H`**中断**，并根据**宏的参数**将**系统调用号等信息**传递给`int 80H`**中断**\n{%list%}\n给int 80H传递数据本质上是给对应的寄存器赋值\n{%endlist%}\n>调用中断后，读取对应的**idt表项**，并获得**对应中断处理函数**`system_call`的**起始地址**\n{%right%}\n80H中断idt表项的DPL为3，以便用户程序访问，system_call的CPL为0（对应CS为8），当调用system_call函数时，即已经陷入内核\n{%endright%}\n>`system_call`函数首先**跳转到内核的数据段和代码段**，并根据**系统调用号**在`_sys_call_table`表（**一个函数指针数组**）中查找**对应系统调用处理函数入口**，并调用该函数\n***\n### 3.进程和线程\n#### 3.1基本概念\n**①并发**\n>CPU是**取指执行**，但是有些指令，如**I/O指令**，执行**非常慢**，且执行过程**不使用CPU**，可以在**等待时执行别的指令**，这就是**并发**\n{%list%}\n一条I/O指令执行时间为简单指令的10的六次方倍\n{%endlist%}\n\n**②进程和线程**\n>**进程**：**运行中的程序**，除了**对应的程序**之外，还有**记录其信息（如各个寄存器的值、运行状态等）的结构（PCB）**以及**对应资源**\n{%list%}\nPCB保留了进程运行时的信息，以便于进程之间的切换，当进程1切换到进程2时，更新并保存进程1的PCB，随后读取进程2的PCB，为进程2运行布置好环境\n{%endlist%}\n{%right%}\n不同的进程解决不同的任务，可以通过管理PCB管理进程\n{%endright%}\n>**线程**：一个进程可能有**多个指令执行序列**，**每个指令执行序列**就是**线程**，每个线程也有对应的**记录其信息的结构（TCB）**\n{%list%}\n以一个网页为例，一个线程用于从服务器接收数据，一个线程用于显示文本，一个线程用于处理图片\n{%endlist%}\n{%right%}\n同一个进程的线程共享进程资源，故线程切换的代价较小，又保留了并发的优点\n{%endright%}\n**③运行状态**\n![运行状态](/image/OS_1.png)\n\n#### 3.2线程切换\n{%right%}\n进程的切换和线程的切换类似，只是多了内存映射的切换而已\n{%endright%}\n**①引言**\n>**函数调用**：C语言中，当**一个函数调用另一个函数**`func(p1,p2,p3)`时，会先**向栈内压入返回地址**、`p1`、`p2`和`p3`，随后**跳转到对应函数的入口**，当函数**结束时**，**将栈内参数弹出**，返回到原来的函数继续执行\n{%list%}\n函数以}结束，}相当于iret指令\n{%endlist%}\n{%right%}\n线程和进程的切换也类似于函数的调用，需要一个栈保存相关信息\n{%endright%}\n**②用户级线程**\n{%list%}\n用户级线程不需要陷入内核，没有用户级进程这一说法，因为进程必须访问计算机资源\n{%endlist%}\n>**线程栈**：每个线程都有**自己的线程栈**，用于实现**当前线程的函数调用**\n{%warning%}\n线程之间不能共用栈，因为iret只是简单的弹栈，可能会导致线程1调用的函数返回时返回到线程2中\n{%endwarning%}\n>**切换概述**：**切换TCB**，并**根据TCB切换线程栈**\n\n>**创建概述**：为线程**申请内存**，创建**TCB和线程栈**，建立**线程栈和TCB的联系**\n\n**③核心级线程**\n{%list%}\n有些线程需要调用计算机资源，则必须陷入内核\n{%endlist%}\n\n>**线程栈**：核心级线程除了**用户态有一个栈（用户栈）**，**内核态还有一个栈（内核栈）**，因为其**在内核态也需要调用函数**\n\n**④核心级线程切换概述**\n>当**线程1**接收到中断，**陷入内核**，**从用户栈转移到内核栈**\n{%list%}\nsystem_call将相关信息压入内核栈，如用户栈的指针，返回地址和标志寄存器，以及一段包含iret的代码\n{%endlist%}\n>当**线程1在内核中堵塞**，切换到**线程2的TCB和内核栈**\n{%list%}\n线程2即陷入内核但是因为某种原因未执行完的线程\n{%endlist%}\n>**线程2**在内核中完成一些**收尾工作（当然也可能再次阻塞）**，通过**内核栈的iret指令返回用户栈**\n\n**④核心级线程创建概述**\n>申请**TCB、内核栈和用户栈**的**内存空间**\n\n>**关联TCB**和**内核栈**以及**用户栈**，**初始化内核栈**和**用户栈**\n{%list%}\n其中内核栈需要包含用户栈的指针以及初始返回地址\n{%endlist%}\n\n#### 3.3子进程\n**①`fork()`**\n{%list%}\n父进程调用该系统调用创建子进程\n{%endlist%}\n>`fork()`调用`_copy_process`，为子进程**申请内存空间**，**创建并初始化子进程的内核栈和TCB**，**和父进程共用用户栈**，并将其`eax`值设置为`0`\n{%list%}\n_copy_process的参数是父进程陷入内核时压入内核栈的参数\n{%endlist%}\n{%right%}\nfork()的返回值是eax值，为0表示其是子进程，用于和父进程区分\n{%endright%}\n**②子进程的运行**\n{%list%}\n以shell为例，假设执行ls\n{%endlist%}\n>`shell`**主体代码**如下\n```\nint main(int argc,char* argv[])\n{\n  while(1)\n  {\n    scanf(\"%s\",cmd);\n    if(!fork())\n    {\n      exec(cmd);\n    }\n    wait(0);\n  }\n}\n```\n>`shell`通过**读取用户输入创建对应子进程**，\n\n>通过`fork()`的**返回值判断是子进程还是父进程**\n\n>如果是**子进程**，`exec()`通过中断**进入内核**，修改**子进程的内核栈**，**中断返回后**执行的就是`ls`\n{%list%}\n主要是将对应pc指向ls代码初始地址，并创建子进程自己的用户栈并修改对应寄存器\n{%endlist%}\n\n#### 3.4进程调度\n**①调度指标**\n>**周转时间**：任务**开始**到任务**结束**\n\n>**响应时间**：从**给出操作**到**发出响应**\n\n>**吞吐量**：**任务时间占比**，因为系统有**内耗**，如**进程切换**也需要时间\n{%list%}\n进程调度的目标就是使得每个程序的指标都尽可能高，也有矛盾，如要求响应时间则表示进程切换频繁，导致系统内耗增加\n{%endlist%}\n\n**②基本调度算法**\n>**SJF**：**短作业优先**\n{%list%}\n可以保证周转，但是无法保证响应时间\n{%endlist%}\n>**RR**：**按照时间片轮转调度**\n{%list%}\n可以保证响应时间，但是无法保证周转时间\n{%endlist%}\n>**优先级算法**：**动态调整优先级**\n{%right%}\n任务主要可分为I/O约束型（前台）和CPU约束型（后台），一般要求先满足前台的要求\n{%endright%}\n**③例子**\n>**linux0.11**的`schedule()`函数\n>找到**任务列表**中，处于**运行状态且时间片大于0的最大**的任务，如果能找到则**调度该任务**\n>如果所有处于**运行状态的任务时间片都为0**，则将**所有任务**的时间片变为`（当前时间片/2）+（时间片初值）`\n{%list%}\n这样保证正在阻塞的程序的时间片会变得更高，使得被阻塞的程序优先级更高\n{%endlist%}\n{%right%}\n假设一个进程的初始时间片为p，且一开始就一直阻塞，他的时间片最长也不会超过2p（p+p/2+p/4...）\n{%endright%}\n```\nwoid Schedule(void)\n{\n  while(1)\n  {\n    c = -1;\n    next = 0;\n    i = NR_TASKS;\n    p = &task[NR_TASKS];\n    while(--i)\n    {\n      //找到任务列表中，处于运行状态且时间片最大的任务\n      if((*p->state == TASK_RUNNING)&&(*p)->COUNTER > c)\n      {\n        C = (*p)->counter;\n        next = i;\n      }\n      //如果找到则调度该程序\n      if(c) break;\n    }\n    //如果所有处于运行状态的任务时间片都为0，则将所有任务的时间片变为（当前时间片/2）+（时间片初值）\n    for(p = &LAST_TASK;p > &FIRST_TASK;--p)\n    (*p)->counter = ((*p)->counter>>1)+(*p)->priotity;\n  }\n  switch_to(next);\n}\n```\n\n计算机取指执行\n系统调用也被称为程序的一个标准库\n虚拟化CPU：将单个CPU转化为多个虚拟CPU\n虚拟化内存：每个进程都有自己的虚拟地址空间，操作系统将其映射到物理内存上\n时分共享技术：让一个进程只运行一个时间片，然后切换到其他进程\n进程的重要组成部分：自己的内存即地址空间，寄存器状态\n进程创建：将代码和静态数据（初始化变量）加载到进程的地址空间中（从磁盘中读入）只加载需要执行的部分，为程序的运行时栈（存放返局部变量、函数参数和返回地址）和堆（动态分配）分配内存，完成一些初始化任务，跳转到main函数，然后开始执行\n每个进程都有对应的进程描述符\n\n程序是一种状态机，执行一条语句就是从一个状态转移到下一个状态\ngdb vim\nC语言函数调用，每次调用会产生一个新的栈帧，每个栈中含有变量和pc指针等，返回就是弹栈，C程序的状态就是堆栈的状态\n\n递归转化为非递归？汉诺塔\n\n对于二进制程序，状态就是内存、寄存器等的值\n计算机系统基础\n程序本身只是计算，需要使用系统调用syscall请求操作系统调用硬件资源退出程序等","source":"_posts/操作系统（一）.md","raw":"---\ntitle: 操作系统（一）\nseo_title: seo名称\ntoc: true\nindent: true\ntop: false\ncomments: true\narchive: true\ncover: false\nmathjax: false\npin: false\ntop_meta: false\nbottom_meta: false\nsidebar:\n  - toc\ntag:\n  - 计算机基础\n  - 操作系统\n  - 《操作系统导论》\ncategories: 计算机基础\nkeywords: 文章关键词\nupdated: ''\nimg: /medias/featureimages/2.webp\ndate:\nsummary: 操作系统概述\n---\n# 操作系统（一）\n## 操作系统概述\n### 1.操作系统的启动\n#### 1.1引导扇区的读入\n{%list%}\n以X86 PC为例（使用16位寄存器）\n{%endlist%}\n>开机时，PC处于**实模式**，`CS:IP`被**初始化**为`FFFFH:0000H`\n{%list%}\nCPU的工作模式影响CPU的寻址方式、寄存器大小等\n{%endlist%}\n>CPU寻址`FFFFH:0000H`，即**ROM BIOS映射区**，并**检查硬件**\n\n>将磁盘**0磁道0扇区**读入`7C00H处`，并设置`CS:IP`为`07c0H:0000H`\n{%list%}\n0磁道0扇区即操作系统的引导扇区（bootsect.s），一个扇区512个字节\n{%endlist%}\n\n#### 1.2`bootsect.s`概述\n>将`07C0H:0000`处的引导程序**移动**到`9000H:0000H`处，并跳转到**下一条指令移动后的位置（因为还要继续执行`bootsect.s`）**\n{%list%}\n将07C0H:0000到9000H:0000H这段地址空间腾出来，给操作系统使用\n{%endlist%}\n>利用**13号中断**读取`setup.s`**所在扇区**，以及**操作系统所在扇区**（都按顺序放在`bootsect.s`之后），并完成一些**辅助工作（如显示开机画面）**，最后跳转到`setup.s`地址入口\n\n#### 1.3`setup.s`程序概述\n>获得相关**硬件信息**，如**扩展内存大小、显卡参数**等，并存放在**某段地址中**，以便之后**操作系统的初始化**\n{%list%}\n实模式下寻址大小只有1M，所以要扩展内存\n{%endlist%}\n>将**操作系统**读入到**0地址处**（之前在`setup.s`程序后），并完成一些**准备工作**，并进入**保护模式（32位模式）**，最后跳转到**0地址处**执行**操作系统的第一个模 块**`head.s`\n{%list%}\n这里的准备工作包括gdt表和idt表的初始化，进入保护模式后CS根据其值查询gdt表获得32位段地址，与32位IP进行相加，获得32位地址\n{%endlist%}\n\n#### 1.4`head.s`概述\n>完成一些**准备工作**（如**重新建立gdt表**和**idt表**），并进入操作系统的**main函数（通过内嵌汇编）**，进行内存等对象的**初始化并开始工作**\n{%list%}\nhead.s变为32位汇编（GNU as汇编），内嵌汇编\n{%endlist%}\n***\n### 2.系统调用\n#### 2.1引言\n>**shell实现概述**\n`shell`读取**用户输入**并调用`fork()`和`exec()`这两个**系统调用**执行用户输入 \n{%list%}\n系统调用即由系统提供的函数接口\n{%endlist%}\n>**POSIX标准**：由**IEEE**制定，每个操作系统**都应该提供**类似功能的**系统调用**（如`fork()`和`open()`） \n\n#### 2.2内核态和用户态\n{%list%}\n内核态和用户态本质上是内存的不同部分，拥有不同的权限，由硬件实现\n{%endlist%}\n>**CPL**：**当前执行指令的特权级**，用**CS的最低两位**来表示\n{%list%}\n操作系统启动后即进入用户态，CPL被初始化为3，系统调用可以将其变为0\n{%endlist%}\n>**DPL**：当前指令**访问的目标段的特权级**，放在**GDT表**中\n{%list%}\nGDT表的每一个表项用于描述一个地址，机器启动时初始化\n{%endlist%}\n{%right%}\n0是内核态，3是用户态，当CPL≤DPL时，可以访问\n{%endright%}\n\n#### 2.3陷入内核态概述\n{%right%}\n通过特定中断进入内核，如Linux是int 80H\n{%endright%}\n{%list%}\n以Linux系统下调用printf函数为例\n{%endlist%}\n>**用户程序**调用`printf`**库函数**，`printf`**库函数**调用`write`**库函数**\n\n>`write`通过**宏**`_syscall3`调用了`int 80H`**中断**，并根据**宏的参数**将**系统调用号等信息**传递给`int 80H`**中断**\n{%list%}\n给int 80H传递数据本质上是给对应的寄存器赋值\n{%endlist%}\n>调用中断后，读取对应的**idt表项**，并获得**对应中断处理函数**`system_call`的**起始地址**\n{%right%}\n80H中断idt表项的DPL为3，以便用户程序访问，system_call的CPL为0（对应CS为8），当调用system_call函数时，即已经陷入内核\n{%endright%}\n>`system_call`函数首先**跳转到内核的数据段和代码段**，并根据**系统调用号**在`_sys_call_table`表（**一个函数指针数组**）中查找**对应系统调用处理函数入口**，并调用该函数\n***\n### 3.进程和线程\n#### 3.1基本概念\n**①并发**\n>CPU是**取指执行**，但是有些指令，如**I/O指令**，执行**非常慢**，且执行过程**不使用CPU**，可以在**等待时执行别的指令**，这就是**并发**\n{%list%}\n一条I/O指令执行时间为简单指令的10的六次方倍\n{%endlist%}\n\n**②进程和线程**\n>**进程**：**运行中的程序**，除了**对应的程序**之外，还有**记录其信息（如各个寄存器的值、运行状态等）的结构（PCB）**以及**对应资源**\n{%list%}\nPCB保留了进程运行时的信息，以便于进程之间的切换，当进程1切换到进程2时，更新并保存进程1的PCB，随后读取进程2的PCB，为进程2运行布置好环境\n{%endlist%}\n{%right%}\n不同的进程解决不同的任务，可以通过管理PCB管理进程\n{%endright%}\n>**线程**：一个进程可能有**多个指令执行序列**，**每个指令执行序列**就是**线程**，每个线程也有对应的**记录其信息的结构（TCB）**\n{%list%}\n以一个网页为例，一个线程用于从服务器接收数据，一个线程用于显示文本，一个线程用于处理图片\n{%endlist%}\n{%right%}\n同一个进程的线程共享进程资源，故线程切换的代价较小，又保留了并发的优点\n{%endright%}\n**③运行状态**\n![运行状态](/image/OS_1.png)\n\n#### 3.2线程切换\n{%right%}\n进程的切换和线程的切换类似，只是多了内存映射的切换而已\n{%endright%}\n**①引言**\n>**函数调用**：C语言中，当**一个函数调用另一个函数**`func(p1,p2,p3)`时，会先**向栈内压入返回地址**、`p1`、`p2`和`p3`，随后**跳转到对应函数的入口**，当函数**结束时**，**将栈内参数弹出**，返回到原来的函数继续执行\n{%list%}\n函数以}结束，}相当于iret指令\n{%endlist%}\n{%right%}\n线程和进程的切换也类似于函数的调用，需要一个栈保存相关信息\n{%endright%}\n**②用户级线程**\n{%list%}\n用户级线程不需要陷入内核，没有用户级进程这一说法，因为进程必须访问计算机资源\n{%endlist%}\n>**线程栈**：每个线程都有**自己的线程栈**，用于实现**当前线程的函数调用**\n{%warning%}\n线程之间不能共用栈，因为iret只是简单的弹栈，可能会导致线程1调用的函数返回时返回到线程2中\n{%endwarning%}\n>**切换概述**：**切换TCB**，并**根据TCB切换线程栈**\n\n>**创建概述**：为线程**申请内存**，创建**TCB和线程栈**，建立**线程栈和TCB的联系**\n\n**③核心级线程**\n{%list%}\n有些线程需要调用计算机资源，则必须陷入内核\n{%endlist%}\n\n>**线程栈**：核心级线程除了**用户态有一个栈（用户栈）**，**内核态还有一个栈（内核栈）**，因为其**在内核态也需要调用函数**\n\n**④核心级线程切换概述**\n>当**线程1**接收到中断，**陷入内核**，**从用户栈转移到内核栈**\n{%list%}\nsystem_call将相关信息压入内核栈，如用户栈的指针，返回地址和标志寄存器，以及一段包含iret的代码\n{%endlist%}\n>当**线程1在内核中堵塞**，切换到**线程2的TCB和内核栈**\n{%list%}\n线程2即陷入内核但是因为某种原因未执行完的线程\n{%endlist%}\n>**线程2**在内核中完成一些**收尾工作（当然也可能再次阻塞）**，通过**内核栈的iret指令返回用户栈**\n\n**④核心级线程创建概述**\n>申请**TCB、内核栈和用户栈**的**内存空间**\n\n>**关联TCB**和**内核栈**以及**用户栈**，**初始化内核栈**和**用户栈**\n{%list%}\n其中内核栈需要包含用户栈的指针以及初始返回地址\n{%endlist%}\n\n#### 3.3子进程\n**①`fork()`**\n{%list%}\n父进程调用该系统调用创建子进程\n{%endlist%}\n>`fork()`调用`_copy_process`，为子进程**申请内存空间**，**创建并初始化子进程的内核栈和TCB**，**和父进程共用用户栈**，并将其`eax`值设置为`0`\n{%list%}\n_copy_process的参数是父进程陷入内核时压入内核栈的参数\n{%endlist%}\n{%right%}\nfork()的返回值是eax值，为0表示其是子进程，用于和父进程区分\n{%endright%}\n**②子进程的运行**\n{%list%}\n以shell为例，假设执行ls\n{%endlist%}\n>`shell`**主体代码**如下\n```\nint main(int argc,char* argv[])\n{\n  while(1)\n  {\n    scanf(\"%s\",cmd);\n    if(!fork())\n    {\n      exec(cmd);\n    }\n    wait(0);\n  }\n}\n```\n>`shell`通过**读取用户输入创建对应子进程**，\n\n>通过`fork()`的**返回值判断是子进程还是父进程**\n\n>如果是**子进程**，`exec()`通过中断**进入内核**，修改**子进程的内核栈**，**中断返回后**执行的就是`ls`\n{%list%}\n主要是将对应pc指向ls代码初始地址，并创建子进程自己的用户栈并修改对应寄存器\n{%endlist%}\n\n#### 3.4进程调度\n**①调度指标**\n>**周转时间**：任务**开始**到任务**结束**\n\n>**响应时间**：从**给出操作**到**发出响应**\n\n>**吞吐量**：**任务时间占比**，因为系统有**内耗**，如**进程切换**也需要时间\n{%list%}\n进程调度的目标就是使得每个程序的指标都尽可能高，也有矛盾，如要求响应时间则表示进程切换频繁，导致系统内耗增加\n{%endlist%}\n\n**②基本调度算法**\n>**SJF**：**短作业优先**\n{%list%}\n可以保证周转，但是无法保证响应时间\n{%endlist%}\n>**RR**：**按照时间片轮转调度**\n{%list%}\n可以保证响应时间，但是无法保证周转时间\n{%endlist%}\n>**优先级算法**：**动态调整优先级**\n{%right%}\n任务主要可分为I/O约束型（前台）和CPU约束型（后台），一般要求先满足前台的要求\n{%endright%}\n**③例子**\n>**linux0.11**的`schedule()`函数\n>找到**任务列表**中，处于**运行状态且时间片大于0的最大**的任务，如果能找到则**调度该任务**\n>如果所有处于**运行状态的任务时间片都为0**，则将**所有任务**的时间片变为`（当前时间片/2）+（时间片初值）`\n{%list%}\n这样保证正在阻塞的程序的时间片会变得更高，使得被阻塞的程序优先级更高\n{%endlist%}\n{%right%}\n假设一个进程的初始时间片为p，且一开始就一直阻塞，他的时间片最长也不会超过2p（p+p/2+p/4...）\n{%endright%}\n```\nwoid Schedule(void)\n{\n  while(1)\n  {\n    c = -1;\n    next = 0;\n    i = NR_TASKS;\n    p = &task[NR_TASKS];\n    while(--i)\n    {\n      //找到任务列表中，处于运行状态且时间片最大的任务\n      if((*p->state == TASK_RUNNING)&&(*p)->COUNTER > c)\n      {\n        C = (*p)->counter;\n        next = i;\n      }\n      //如果找到则调度该程序\n      if(c) break;\n    }\n    //如果所有处于运行状态的任务时间片都为0，则将所有任务的时间片变为（当前时间片/2）+（时间片初值）\n    for(p = &LAST_TASK;p > &FIRST_TASK;--p)\n    (*p)->counter = ((*p)->counter>>1)+(*p)->priotity;\n  }\n  switch_to(next);\n}\n```\n\n计算机取指执行\n系统调用也被称为程序的一个标准库\n虚拟化CPU：将单个CPU转化为多个虚拟CPU\n虚拟化内存：每个进程都有自己的虚拟地址空间，操作系统将其映射到物理内存上\n时分共享技术：让一个进程只运行一个时间片，然后切换到其他进程\n进程的重要组成部分：自己的内存即地址空间，寄存器状态\n进程创建：将代码和静态数据（初始化变量）加载到进程的地址空间中（从磁盘中读入）只加载需要执行的部分，为程序的运行时栈（存放返局部变量、函数参数和返回地址）和堆（动态分配）分配内存，完成一些初始化任务，跳转到main函数，然后开始执行\n每个进程都有对应的进程描述符\n\n程序是一种状态机，执行一条语句就是从一个状态转移到下一个状态\ngdb vim\nC语言函数调用，每次调用会产生一个新的栈帧，每个栈中含有变量和pc指针等，返回就是弹栈，C程序的状态就是堆栈的状态\n\n递归转化为非递归？汉诺塔\n\n对于二进制程序，状态就是内存、寄存器等的值\n计算机系统基础\n程序本身只是计算，需要使用系统调用syscall请求操作系统调用硬件资源退出程序等","slug":"操作系统（一）","published":1,"_id":"clmkphbfb001l9gvd2lx4fdxi","layout":"post","photos":[],"link":"","content":"<h1 id=\"操作系统（一）\"><a href=\"#操作系统（一）\" class=\"headerlink\" title=\"操作系统（一）\"></a>操作系统（一）</h1><h2 id=\"操作系统概述\"><a href=\"#操作系统概述\" class=\"headerlink\" title=\"操作系统概述\"></a>操作系统概述</h2><h3 id=\"1-操作系统的启动\"><a href=\"#1-操作系统的启动\" class=\"headerlink\" title=\"1.操作系统的启动\"></a>1.操作系统的启动</h3><h4 id=\"1-1引导扇区的读入\"><a href=\"#1-1引导扇区的读入\" class=\"headerlink\" title=\"1.1引导扇区的读入\"></a>1.1引导扇区的读入</h4><div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 以X86 PC为例（使用16位寄存器）</div>\n<blockquote>\n<p>开机时，PC处于<strong>实模式</strong>，<code>CS:IP</code>被<strong>初始化</strong>为<code>FFFFH:0000H</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> CPU的工作模式影响CPU的寻址方式、寄存器大小等</div>\n<blockquote>\n<p>CPU寻址<code>FFFFH:0000H</code>，即<strong>ROM BIOS映射区</strong>，并<strong>检查硬件</strong></p>\n</blockquote>\n<blockquote>\n<p>将磁盘<strong>0磁道0扇区</strong>读入<code>7C00H处</code>，并设置<code>CS:IP</code>为<code>07c0H:0000H</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 0磁道0扇区即操作系统的引导扇区（bootsect.s），一个扇区512个字节</div>\n\n<h4 id=\"1-2bootsect-s概述\"><a href=\"#1-2bootsect-s概述\" class=\"headerlink\" title=\"1.2bootsect.s概述\"></a>1.2<code>bootsect.s</code>概述</h4><blockquote>\n<p>将<code>07C0H:0000</code>处的引导程序<strong>移动</strong>到<code>9000H:0000H</code>处，并跳转到<strong>下一条指令移动后的位置（因为还要继续执行<code>bootsect.s</code>）</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 将07C0H:0000到9000H:0000H这段地址空间腾出来，给操作系统使用</div>\n<blockquote>\n<p>利用<strong>13号中断</strong>读取<code>setup.s</code><strong>所在扇区</strong>，以及<strong>操作系统所在扇区</strong>（都按顺序放在<code>bootsect.s</code>之后），并完成一些<strong>辅助工作（如显示开机画面）</strong>，最后跳转到<code>setup.s</code>地址入口</p>\n</blockquote>\n<h4 id=\"1-3setup-s程序概述\"><a href=\"#1-3setup-s程序概述\" class=\"headerlink\" title=\"1.3setup.s程序概述\"></a>1.3<code>setup.s</code>程序概述</h4><blockquote>\n<p>获得相关<strong>硬件信息</strong>，如<strong>扩展内存大小、显卡参数</strong>等，并存放在<strong>某段地址中</strong>，以便之后<strong>操作系统的初始化</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 实模式下寻址大小只有1M，所以要扩展内存</div>\n<blockquote>\n<p>将<strong>操作系统</strong>读入到<strong>0地址处</strong>（之前在<code>setup.s</code>程序后），并完成一些<strong>准备工作</strong>，并进入<strong>保护模式（32位模式）</strong>，最后跳转到<strong>0地址处</strong>执行<strong>操作系统的第一个模 块</strong><code>head.s</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 这里的准备工作包括gdt表和idt表的初始化，进入保护模式后CS根据其值查询gdt表获得32位段地址，与32位IP进行相加，获得32位地址</div>\n\n<h4 id=\"1-4head-s概述\"><a href=\"#1-4head-s概述\" class=\"headerlink\" title=\"1.4head.s概述\"></a>1.4<code>head.s</code>概述</h4><blockquote>\n<p>完成一些<strong>准备工作</strong>（如<strong>重新建立gdt表</strong>和<strong>idt表</strong>），并进入操作系统的<strong>main函数（通过内嵌汇编）</strong>，进行内存等对象的<strong>初始化并开始工作</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> head.s变为32位汇编（GNU as汇编），内嵌汇编</div>\n<hr>\n<h3 id=\"2-系统调用\"><a href=\"#2-系统调用\" class=\"headerlink\" title=\"2.系统调用\"></a>2.系统调用</h3><h4 id=\"2-1引言\"><a href=\"#2-1引言\" class=\"headerlink\" title=\"2.1引言\"></a>2.1引言</h4><blockquote>\n<p><strong>shell实现概述</strong><br><code>shell</code>读取<strong>用户输入</strong>并调用<code>fork()</code>和<code>exec()</code>这两个<strong>系统调用</strong>执行用户输入 </p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 系统调用即由系统提供的函数接口</div>\n<blockquote>\n<p><strong>POSIX标准</strong>：由<strong>IEEE</strong>制定，每个操作系统<strong>都应该提供</strong>类似功能的<strong>系统调用</strong>（如<code>fork()</code>和<code>open()</code>） </p>\n</blockquote>\n<h4 id=\"2-2内核态和用户态\"><a href=\"#2-2内核态和用户态\" class=\"headerlink\" title=\"2.2内核态和用户态\"></a>2.2内核态和用户态</h4><div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 内核态和用户态本质上是内存的不同部分，拥有不同的权限，由硬件实现</div>\n<blockquote>\n<p><strong>CPL</strong>：<strong>当前执行指令的特权级</strong>，用<strong>CS的最低两位</strong>来表示</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 操作系统启动后即进入用户态，CPL被初始化为3，系统调用可以将其变为0</div>\n<blockquote>\n<p><strong>DPL</strong>：当前指令<strong>访问的目标段的特权级</strong>，放在<strong>GDT表</strong>中</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> GDT表的每一个表项用于描述一个地址，机器启动时初始化</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 0是内核态，3是用户态，当CPL≤DPL时，可以访问</div>\n\n<h4 id=\"2-3陷入内核态概述\"><a href=\"#2-3陷入内核态概述\" class=\"headerlink\" title=\"2.3陷入内核态概述\"></a>2.3陷入内核态概述</h4><div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 通过特定中断进入内核，如Linux是int 80H</div>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 以Linux系统下调用printf函数为例</div>\n<blockquote>\n<p><strong>用户程序</strong>调用<code>printf</code><strong>库函数</strong>，<code>printf</code><strong>库函数</strong>调用<code>write</code><strong>库函数</strong></p>\n</blockquote>\n<blockquote>\n<p><code>write</code>通过<strong>宏</strong><code>_syscall3</code>调用了<code>int 80H</code><strong>中断</strong>，并根据<strong>宏的参数</strong>将<strong>系统调用号等信息</strong>传递给<code>int 80H</code><strong>中断</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 给int 80H传递数据本质上是给对应的寄存器赋值</div>\n<blockquote>\n<p>调用中断后，读取对应的<strong>idt表项</strong>，并获得<strong>对应中断处理函数</strong><code>system_call</code>的<strong>起始地址</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 80H中断idt表项的DPL为3，以便用户程序访问，system_call的CPL为0（对应CS为8），当调用system_call函数时，即已经陷入内核</div>\n<blockquote>\n<p><code>system_call</code>函数首先<strong>跳转到内核的数据段和代码段</strong>，并根据<strong>系统调用号</strong>在<code>_sys_call_table</code>表（<strong>一个函数指针数组</strong>）中查找<strong>对应系统调用处理函数入口</strong>，并调用该函数</p>\n</blockquote>\n<hr>\n<h3 id=\"3-进程和线程\"><a href=\"#3-进程和线程\" class=\"headerlink\" title=\"3.进程和线程\"></a>3.进程和线程</h3><h4 id=\"3-1基本概念\"><a href=\"#3-1基本概念\" class=\"headerlink\" title=\"3.1基本概念\"></a>3.1基本概念</h4><p><strong>①并发</strong></p>\n<blockquote>\n<p>CPU是<strong>取指执行</strong>，但是有些指令，如<strong>I/O指令</strong>，执行<strong>非常慢</strong>，且执行过程<strong>不使用CPU</strong>，可以在<strong>等待时执行别的指令</strong>，这就是<strong>并发</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 一条I/O指令执行时间为简单指令的10的六次方倍</div>\n\n<p><strong>②进程和线程</strong></p>\n<blockquote>\n<p><strong>进程</strong>：<strong>运行中的程序</strong>，除了<strong>对应的程序</strong>之外，还有<strong>记录其信息（如各个寄存器的值、运行状态等）的结构（PCB）</strong>以及<strong>对应资源</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> PCB保留了进程运行时的信息，以便于进程之间的切换，当进程1切换到进程2时，更新并保存进程1的PCB，随后读取进程2的PCB，为进程2运行布置好环境</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 不同的进程解决不同的任务，可以通过管理PCB管理进程</div>\n<blockquote>\n<p><strong>线程</strong>：一个进程可能有<strong>多个指令执行序列</strong>，<strong>每个指令执行序列</strong>就是<strong>线程</strong>，每个线程也有对应的<strong>记录其信息的结构（TCB）</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 以一个网页为例，一个线程用于从服务器接收数据，一个线程用于显示文本，一个线程用于处理图片</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 同一个进程的线程共享进程资源，故线程切换的代价较小，又保留了并发的优点</div>\n<p><strong>③运行状态</strong><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/OS_1.png\" alt=\"运行状态\"></p>\n<h4 id=\"3-2线程切换\"><a href=\"#3-2线程切换\" class=\"headerlink\" title=\"3.2线程切换\"></a>3.2线程切换</h4><div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 进程的切换和线程的切换类似，只是多了内存映射的切换而已</div>\n<p><strong>①引言</strong></p>\n<blockquote>\n<p><strong>函数调用</strong>：C语言中，当<strong>一个函数调用另一个函数</strong><code>func(p1,p2,p3)</code>时，会先<strong>向栈内压入返回地址</strong>、<code>p1</code>、<code>p2</code>和<code>p3</code>，随后<strong>跳转到对应函数的入口</strong>，当函数<strong>结束时</strong>，<strong>将栈内参数弹出</strong>，返回到原来的函数继续执行</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 函数以}结束，}相当于iret指令</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 线程和进程的切换也类似于函数的调用，需要一个栈保存相关信息</div>\n<p><strong>②用户级线程</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 用户级线程不需要陷入内核，没有用户级进程这一说法，因为进程必须访问计算机资源</div>\n<blockquote>\n<p><strong>线程栈</strong>：每个线程都有<strong>自己的线程栈</strong>，用于实现<strong>当前线程的函数调用</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 线程之间不能共用栈，因为iret只是简单的弹栈，可能会导致线程1调用的函数返回时返回到线程2中</div>\n<blockquote>\n<p><strong>切换概述</strong>：<strong>切换TCB</strong>，并<strong>根据TCB切换线程栈</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>创建概述</strong>：为线程<strong>申请内存</strong>，创建<strong>TCB和线程栈</strong>，建立<strong>线程栈和TCB的联系</strong></p>\n</blockquote>\n<p><strong>③核心级线程</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 有些线程需要调用计算机资源，则必须陷入内核</div>\n\n<blockquote>\n<p><strong>线程栈</strong>：核心级线程除了<strong>用户态有一个栈（用户栈）</strong>，<strong>内核态还有一个栈（内核栈）</strong>，因为其<strong>在内核态也需要调用函数</strong></p>\n</blockquote>\n<p><strong>④核心级线程切换概述</strong></p>\n<blockquote>\n<p>当<strong>线程1</strong>接收到中断，<strong>陷入内核</strong>，<strong>从用户栈转移到内核栈</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> system_call将相关信息压入内核栈，如用户栈的指针，返回地址和标志寄存器，以及一段包含iret的代码</div>\n<blockquote>\n<p>当<strong>线程1在内核中堵塞</strong>，切换到<strong>线程2的TCB和内核栈</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 线程2即陷入内核但是因为某种原因未执行完的线程</div>\n<blockquote>\n<p><strong>线程2</strong>在内核中完成一些<strong>收尾工作（当然也可能再次阻塞）</strong>，通过<strong>内核栈的iret指令返回用户栈</strong></p>\n</blockquote>\n<p><strong>④核心级线程创建概述</strong></p>\n<blockquote>\n<p>申请<strong>TCB、内核栈和用户栈</strong>的<strong>内存空间</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>关联TCB</strong>和<strong>内核栈</strong>以及<strong>用户栈</strong>，<strong>初始化内核栈</strong>和<strong>用户栈</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 其中内核栈需要包含用户栈的指针以及初始返回地址</div>\n\n<h4 id=\"3-3子进程\"><a href=\"#3-3子进程\" class=\"headerlink\" title=\"3.3子进程\"></a>3.3子进程</h4><p><strong>①<code>fork()</code></strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 父进程调用该系统调用创建子进程</div>\n<blockquote>\n<p><code>fork()</code>调用<code>_copy_process</code>，为子进程<strong>申请内存空间</strong>，<strong>创建并初始化子进程的内核栈和TCB</strong>，<strong>和父进程共用用户栈</strong>，并将其<code>eax</code>值设置为<code>0</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> _copy_process的参数是父进程陷入内核时压入内核栈的参数</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> fork()的返回值是eax值，为0表示其是子进程，用于和父进程区分</div>\n<p><strong>②子进程的运行</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 以shell为例，假设执行ls</div>\n<blockquote>\n<p><code>shell</code><strong>主体代码</strong>如下</p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">int main(int argc,char* argv[])\n{\n  while(1)\n  {\n    scanf(\"%s\",cmd);\n    if(!fork())\n    {\n      exec(cmd);\n    }\n    wait(0);\n  }\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><code>shell</code>通过<strong>读取用户输入创建对应子进程</strong>，</p>\n</blockquote>\n<blockquote>\n<p>通过<code>fork()</code>的<strong>返回值判断是子进程还是父进程</strong></p>\n</blockquote>\n<blockquote>\n<p>如果是<strong>子进程</strong>，<code>exec()</code>通过中断<strong>进入内核</strong>，修改<strong>子进程的内核栈</strong>，<strong>中断返回后</strong>执行的就是<code>ls</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 主要是将对应pc指向ls代码初始地址，并创建子进程自己的用户栈并修改对应寄存器</div>\n\n<h4 id=\"3-4进程调度\"><a href=\"#3-4进程调度\" class=\"headerlink\" title=\"3.4进程调度\"></a>3.4进程调度</h4><p><strong>①调度指标</strong></p>\n<blockquote>\n<p><strong>周转时间</strong>：任务<strong>开始</strong>到任务<strong>结束</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>响应时间</strong>：从<strong>给出操作</strong>到<strong>发出响应</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>吞吐量</strong>：<strong>任务时间占比</strong>，因为系统有<strong>内耗</strong>，如<strong>进程切换</strong>也需要时间</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 进程调度的目标就是使得每个程序的指标都尽可能高，也有矛盾，如要求响应时间则表示进程切换频繁，导致系统内耗增加</div>\n\n<p><strong>②基本调度算法</strong></p>\n<blockquote>\n<p><strong>SJF</strong>：<strong>短作业优先</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 可以保证周转，但是无法保证响应时间</div>\n<blockquote>\n<p><strong>RR</strong>：<strong>按照时间片轮转调度</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 可以保证响应时间，但是无法保证周转时间</div>\n<blockquote>\n<p><strong>优先级算法</strong>：<strong>动态调整优先级</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 任务主要可分为I/O约束型（前台）和CPU约束型（后台），一般要求先满足前台的要求</div>\n<p><strong>③例子</strong></p>\n<blockquote>\n<p><strong>linux0.11</strong>的<code>schedule()</code>函数<br>找到<strong>任务列表</strong>中，处于<strong>运行状态且时间片大于0的最大</strong>的任务，如果能找到则<strong>调度该任务</strong><br>如果所有处于<strong>运行状态的任务时间片都为0</strong>，则将<strong>所有任务</strong>的时间片变为<code>（当前时间片/2）+（时间片初值）</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 这样保证正在阻塞的程序的时间片会变得更高，使得被阻塞的程序优先级更高</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 假设一个进程的初始时间片为p，且一开始就一直阻塞，他的时间片最长也不会超过2p（p+p/2+p/4...）</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">woid Schedule(void)\n{\n  while(1)\n  {\n    c = -1;\n    next = 0;\n    i = NR_TASKS;\n    p = &amp;task[NR_TASKS];\n    while(--i)\n    {\n      //找到任务列表中，处于运行状态且时间片最大的任务\n      if((*p-&gt;state == TASK_RUNNING)&amp;&amp;(*p)-&gt;COUNTER &gt; c)\n      {\n        C = (*p)-&gt;counter;\n        next = i;\n      }\n      //如果找到则调度该程序\n      if(c) break;\n    }\n    //如果所有处于运行状态的任务时间片都为0，则将所有任务的时间片变为（当前时间片/2）+（时间片初值）\n    for(p = &amp;LAST_TASK;p &gt; &amp;FIRST_TASK;--p)\n    (*p)-&gt;counter = ((*p)-&gt;counter&gt;&gt;1)+(*p)-&gt;priotity;\n  }\n  switch_to(next);\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>计算机取指执行<br>系统调用也被称为程序的一个标准库<br>虚拟化CPU：将单个CPU转化为多个虚拟CPU<br>虚拟化内存：每个进程都有自己的虚拟地址空间，操作系统将其映射到物理内存上<br>时分共享技术：让一个进程只运行一个时间片，然后切换到其他进程<br>进程的重要组成部分：自己的内存即地址空间，寄存器状态<br>进程创建：将代码和静态数据（初始化变量）加载到进程的地址空间中（从磁盘中读入）只加载需要执行的部分，为程序的运行时栈（存放返局部变量、函数参数和返回地址）和堆（动态分配）分配内存，完成一些初始化任务，跳转到main函数，然后开始执行<br>每个进程都有对应的进程描述符</p>\n<p>程序是一种状态机，执行一条语句就是从一个状态转移到下一个状态<br>gdb vim<br>C语言函数调用，每次调用会产生一个新的栈帧，每个栈中含有变量和pc指针等，返回就是弹栈，C程序的状态就是堆栈的状态</p>\n<p>递归转化为非递归？汉诺塔</p>\n<p>对于二进制程序，状态就是内存、寄存器等的值<br>计算机系统基础<br>程序本身只是计算，需要使用系统调用syscall请求操作系统调用硬件资源退出程序等</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"操作系统（一）\"><a href=\"#操作系统（一）\" class=\"headerlink\" title=\"操作系统（一）\"></a>操作系统（一）</h1><h2 id=\"操作系统概述\"><a href=\"#操作系统概述\" class=\"headerlink\" title=\"操作系统概述\"></a>操作系统概述</h2><h3 id=\"1-操作系统的启动\"><a href=\"#1-操作系统的启动\" class=\"headerlink\" title=\"1.操作系统的启动\"></a>1.操作系统的启动</h3><h4 id=\"1-1引导扇区的读入\"><a href=\"#1-1引导扇区的读入\" class=\"headerlink\" title=\"1.1引导扇区的读入\"></a>1.1引导扇区的读入</h4><div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 以X86 PC为例（使用16位寄存器）</div>\n<blockquote>\n<p>开机时，PC处于<strong>实模式</strong>，<code>CS:IP</code>被<strong>初始化</strong>为<code>FFFFH:0000H</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> CPU的工作模式影响CPU的寻址方式、寄存器大小等</div>\n<blockquote>\n<p>CPU寻址<code>FFFFH:0000H</code>，即<strong>ROM BIOS映射区</strong>，并<strong>检查硬件</strong></p>\n</blockquote>\n<blockquote>\n<p>将磁盘<strong>0磁道0扇区</strong>读入<code>7C00H处</code>，并设置<code>CS:IP</code>为<code>07c0H:0000H</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 0磁道0扇区即操作系统的引导扇区（bootsect.s），一个扇区512个字节</div>\n\n<h4 id=\"1-2bootsect-s概述\"><a href=\"#1-2bootsect-s概述\" class=\"headerlink\" title=\"1.2bootsect.s概述\"></a>1.2<code>bootsect.s</code>概述</h4><blockquote>\n<p>将<code>07C0H:0000</code>处的引导程序<strong>移动</strong>到<code>9000H:0000H</code>处，并跳转到<strong>下一条指令移动后的位置（因为还要继续执行<code>bootsect.s</code>）</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 将07C0H:0000到9000H:0000H这段地址空间腾出来，给操作系统使用</div>\n<blockquote>\n<p>利用<strong>13号中断</strong>读取<code>setup.s</code><strong>所在扇区</strong>，以及<strong>操作系统所在扇区</strong>（都按顺序放在<code>bootsect.s</code>之后），并完成一些<strong>辅助工作（如显示开机画面）</strong>，最后跳转到<code>setup.s</code>地址入口</p>\n</blockquote>\n<h4 id=\"1-3setup-s程序概述\"><a href=\"#1-3setup-s程序概述\" class=\"headerlink\" title=\"1.3setup.s程序概述\"></a>1.3<code>setup.s</code>程序概述</h4><blockquote>\n<p>获得相关<strong>硬件信息</strong>，如<strong>扩展内存大小、显卡参数</strong>等，并存放在<strong>某段地址中</strong>，以便之后<strong>操作系统的初始化</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 实模式下寻址大小只有1M，所以要扩展内存</div>\n<blockquote>\n<p>将<strong>操作系统</strong>读入到<strong>0地址处</strong>（之前在<code>setup.s</code>程序后），并完成一些<strong>准备工作</strong>，并进入<strong>保护模式（32位模式）</strong>，最后跳转到<strong>0地址处</strong>执行<strong>操作系统的第一个模 块</strong><code>head.s</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 这里的准备工作包括gdt表和idt表的初始化，进入保护模式后CS根据其值查询gdt表获得32位段地址，与32位IP进行相加，获得32位地址</div>\n\n<h4 id=\"1-4head-s概述\"><a href=\"#1-4head-s概述\" class=\"headerlink\" title=\"1.4head.s概述\"></a>1.4<code>head.s</code>概述</h4><blockquote>\n<p>完成一些<strong>准备工作</strong>（如<strong>重新建立gdt表</strong>和<strong>idt表</strong>），并进入操作系统的<strong>main函数（通过内嵌汇编）</strong>，进行内存等对象的<strong>初始化并开始工作</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> head.s变为32位汇编（GNU as汇编），内嵌汇编</div>\n<hr>\n<h3 id=\"2-系统调用\"><a href=\"#2-系统调用\" class=\"headerlink\" title=\"2.系统调用\"></a>2.系统调用</h3><h4 id=\"2-1引言\"><a href=\"#2-1引言\" class=\"headerlink\" title=\"2.1引言\"></a>2.1引言</h4><blockquote>\n<p><strong>shell实现概述</strong><br><code>shell</code>读取<strong>用户输入</strong>并调用<code>fork()</code>和<code>exec()</code>这两个<strong>系统调用</strong>执行用户输入 </p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 系统调用即由系统提供的函数接口</div>\n<blockquote>\n<p><strong>POSIX标准</strong>：由<strong>IEEE</strong>制定，每个操作系统<strong>都应该提供</strong>类似功能的<strong>系统调用</strong>（如<code>fork()</code>和<code>open()</code>） </p>\n</blockquote>\n<h4 id=\"2-2内核态和用户态\"><a href=\"#2-2内核态和用户态\" class=\"headerlink\" title=\"2.2内核态和用户态\"></a>2.2内核态和用户态</h4><div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 内核态和用户态本质上是内存的不同部分，拥有不同的权限，由硬件实现</div>\n<blockquote>\n<p><strong>CPL</strong>：<strong>当前执行指令的特权级</strong>，用<strong>CS的最低两位</strong>来表示</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 操作系统启动后即进入用户态，CPL被初始化为3，系统调用可以将其变为0</div>\n<blockquote>\n<p><strong>DPL</strong>：当前指令<strong>访问的目标段的特权级</strong>，放在<strong>GDT表</strong>中</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> GDT表的每一个表项用于描述一个地址，机器启动时初始化</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 0是内核态，3是用户态，当CPL≤DPL时，可以访问</div>\n\n<h4 id=\"2-3陷入内核态概述\"><a href=\"#2-3陷入内核态概述\" class=\"headerlink\" title=\"2.3陷入内核态概述\"></a>2.3陷入内核态概述</h4><div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 通过特定中断进入内核，如Linux是int 80H</div>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 以Linux系统下调用printf函数为例</div>\n<blockquote>\n<p><strong>用户程序</strong>调用<code>printf</code><strong>库函数</strong>，<code>printf</code><strong>库函数</strong>调用<code>write</code><strong>库函数</strong></p>\n</blockquote>\n<blockquote>\n<p><code>write</code>通过<strong>宏</strong><code>_syscall3</code>调用了<code>int 80H</code><strong>中断</strong>，并根据<strong>宏的参数</strong>将<strong>系统调用号等信息</strong>传递给<code>int 80H</code><strong>中断</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 给int 80H传递数据本质上是给对应的寄存器赋值</div>\n<blockquote>\n<p>调用中断后，读取对应的<strong>idt表项</strong>，并获得<strong>对应中断处理函数</strong><code>system_call</code>的<strong>起始地址</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 80H中断idt表项的DPL为3，以便用户程序访问，system_call的CPL为0（对应CS为8），当调用system_call函数时，即已经陷入内核</div>\n<blockquote>\n<p><code>system_call</code>函数首先<strong>跳转到内核的数据段和代码段</strong>，并根据<strong>系统调用号</strong>在<code>_sys_call_table</code>表（<strong>一个函数指针数组</strong>）中查找<strong>对应系统调用处理函数入口</strong>，并调用该函数</p>\n</blockquote>\n<hr>\n<h3 id=\"3-进程和线程\"><a href=\"#3-进程和线程\" class=\"headerlink\" title=\"3.进程和线程\"></a>3.进程和线程</h3><h4 id=\"3-1基本概念\"><a href=\"#3-1基本概念\" class=\"headerlink\" title=\"3.1基本概念\"></a>3.1基本概念</h4><p><strong>①并发</strong></p>\n<blockquote>\n<p>CPU是<strong>取指执行</strong>，但是有些指令，如<strong>I&#x2F;O指令</strong>，执行<strong>非常慢</strong>，且执行过程<strong>不使用CPU</strong>，可以在<strong>等待时执行别的指令</strong>，这就是<strong>并发</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 一条I/O指令执行时间为简单指令的10的六次方倍</div>\n\n<p><strong>②进程和线程</strong></p>\n<blockquote>\n<p><strong>进程</strong>：<strong>运行中的程序</strong>，除了<strong>对应的程序</strong>之外，还有<strong>记录其信息（如各个寄存器的值、运行状态等）的结构（PCB）</strong>以及<strong>对应资源</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> PCB保留了进程运行时的信息，以便于进程之间的切换，当进程1切换到进程2时，更新并保存进程1的PCB，随后读取进程2的PCB，为进程2运行布置好环境</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 不同的进程解决不同的任务，可以通过管理PCB管理进程</div>\n<blockquote>\n<p><strong>线程</strong>：一个进程可能有<strong>多个指令执行序列</strong>，<strong>每个指令执行序列</strong>就是<strong>线程</strong>，每个线程也有对应的<strong>记录其信息的结构（TCB）</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 以一个网页为例，一个线程用于从服务器接收数据，一个线程用于显示文本，一个线程用于处理图片</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 同一个进程的线程共享进程资源，故线程切换的代价较小，又保留了并发的优点</div>\n<p><strong>③运行状态</strong><br><img src=\"/image/OS_1.png\" alt=\"运行状态\"></p>\n<h4 id=\"3-2线程切换\"><a href=\"#3-2线程切换\" class=\"headerlink\" title=\"3.2线程切换\"></a>3.2线程切换</h4><div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 进程的切换和线程的切换类似，只是多了内存映射的切换而已</div>\n<p><strong>①引言</strong></p>\n<blockquote>\n<p><strong>函数调用</strong>：C语言中，当<strong>一个函数调用另一个函数</strong><code>func(p1,p2,p3)</code>时，会先<strong>向栈内压入返回地址</strong>、<code>p1</code>、<code>p2</code>和<code>p3</code>，随后<strong>跳转到对应函数的入口</strong>，当函数<strong>结束时</strong>，<strong>将栈内参数弹出</strong>，返回到原来的函数继续执行</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 函数以}结束，}相当于iret指令</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 线程和进程的切换也类似于函数的调用，需要一个栈保存相关信息</div>\n<p><strong>②用户级线程</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 用户级线程不需要陷入内核，没有用户级进程这一说法，因为进程必须访问计算机资源</div>\n<blockquote>\n<p><strong>线程栈</strong>：每个线程都有<strong>自己的线程栈</strong>，用于实现<strong>当前线程的函数调用</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 线程之间不能共用栈，因为iret只是简单的弹栈，可能会导致线程1调用的函数返回时返回到线程2中</div>\n<blockquote>\n<p><strong>切换概述</strong>：<strong>切换TCB</strong>，并<strong>根据TCB切换线程栈</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>创建概述</strong>：为线程<strong>申请内存</strong>，创建<strong>TCB和线程栈</strong>，建立<strong>线程栈和TCB的联系</strong></p>\n</blockquote>\n<p><strong>③核心级线程</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 有些线程需要调用计算机资源，则必须陷入内核</div>\n\n<blockquote>\n<p><strong>线程栈</strong>：核心级线程除了<strong>用户态有一个栈（用户栈）</strong>，<strong>内核态还有一个栈（内核栈）</strong>，因为其<strong>在内核态也需要调用函数</strong></p>\n</blockquote>\n<p><strong>④核心级线程切换概述</strong></p>\n<blockquote>\n<p>当<strong>线程1</strong>接收到中断，<strong>陷入内核</strong>，<strong>从用户栈转移到内核栈</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> system_call将相关信息压入内核栈，如用户栈的指针，返回地址和标志寄存器，以及一段包含iret的代码</div>\n<blockquote>\n<p>当<strong>线程1在内核中堵塞</strong>，切换到<strong>线程2的TCB和内核栈</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 线程2即陷入内核但是因为某种原因未执行完的线程</div>\n<blockquote>\n<p><strong>线程2</strong>在内核中完成一些<strong>收尾工作（当然也可能再次阻塞）</strong>，通过<strong>内核栈的iret指令返回用户栈</strong></p>\n</blockquote>\n<p><strong>④核心级线程创建概述</strong></p>\n<blockquote>\n<p>申请<strong>TCB、内核栈和用户栈</strong>的<strong>内存空间</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>关联TCB</strong>和<strong>内核栈</strong>以及<strong>用户栈</strong>，<strong>初始化内核栈</strong>和<strong>用户栈</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 其中内核栈需要包含用户栈的指针以及初始返回地址</div>\n\n<h4 id=\"3-3子进程\"><a href=\"#3-3子进程\" class=\"headerlink\" title=\"3.3子进程\"></a>3.3子进程</h4><p><strong>①<code>fork()</code></strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 父进程调用该系统调用创建子进程</div>\n<blockquote>\n<p><code>fork()</code>调用<code>_copy_process</code>，为子进程<strong>申请内存空间</strong>，<strong>创建并初始化子进程的内核栈和TCB</strong>，<strong>和父进程共用用户栈</strong>，并将其<code>eax</code>值设置为<code>0</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> _copy_process的参数是父进程陷入内核时压入内核栈的参数</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> fork()的返回值是eax值，为0表示其是子进程，用于和父进程区分</div>\n<p><strong>②子进程的运行</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 以shell为例，假设执行ls</div>\n<blockquote>\n<p><code>shell</code><strong>主体代码</strong>如下</p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">int main(int argc,char* argv[])\n&#123;\n  while(1)\n  &#123;\n    scanf(&quot;%s&quot;,cmd);\n    if(!fork())\n    &#123;\n      exec(cmd);\n    &#125;\n    wait(0);\n  &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><code>shell</code>通过<strong>读取用户输入创建对应子进程</strong>，</p>\n</blockquote>\n<blockquote>\n<p>通过<code>fork()</code>的<strong>返回值判断是子进程还是父进程</strong></p>\n</blockquote>\n<blockquote>\n<p>如果是<strong>子进程</strong>，<code>exec()</code>通过中断<strong>进入内核</strong>，修改<strong>子进程的内核栈</strong>，<strong>中断返回后</strong>执行的就是<code>ls</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 主要是将对应pc指向ls代码初始地址，并创建子进程自己的用户栈并修改对应寄存器</div>\n\n<h4 id=\"3-4进程调度\"><a href=\"#3-4进程调度\" class=\"headerlink\" title=\"3.4进程调度\"></a>3.4进程调度</h4><p><strong>①调度指标</strong></p>\n<blockquote>\n<p><strong>周转时间</strong>：任务<strong>开始</strong>到任务<strong>结束</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>响应时间</strong>：从<strong>给出操作</strong>到<strong>发出响应</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>吞吐量</strong>：<strong>任务时间占比</strong>，因为系统有<strong>内耗</strong>，如<strong>进程切换</strong>也需要时间</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 进程调度的目标就是使得每个程序的指标都尽可能高，也有矛盾，如要求响应时间则表示进程切换频繁，导致系统内耗增加</div>\n\n<p><strong>②基本调度算法</strong></p>\n<blockquote>\n<p><strong>SJF</strong>：<strong>短作业优先</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 可以保证周转，但是无法保证响应时间</div>\n<blockquote>\n<p><strong>RR</strong>：<strong>按照时间片轮转调度</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 可以保证响应时间，但是无法保证周转时间</div>\n<blockquote>\n<p><strong>优先级算法</strong>：<strong>动态调整优先级</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 任务主要可分为I/O约束型（前台）和CPU约束型（后台），一般要求先满足前台的要求</div>\n<p><strong>③例子</strong></p>\n<blockquote>\n<p><strong>linux0.11</strong>的<code>schedule()</code>函数<br>找到<strong>任务列表</strong>中，处于<strong>运行状态且时间片大于0的最大</strong>的任务，如果能找到则<strong>调度该任务</strong><br>如果所有处于<strong>运行状态的任务时间片都为0</strong>，则将<strong>所有任务</strong>的时间片变为<code>（当前时间片/2）+（时间片初值）</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 这样保证正在阻塞的程序的时间片会变得更高，使得被阻塞的程序优先级更高</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 假设一个进程的初始时间片为p，且一开始就一直阻塞，他的时间片最长也不会超过2p（p+p/2+p/4...）</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">woid Schedule(void)\n&#123;\n  while(1)\n  &#123;\n    c &#x3D; -1;\n    next &#x3D; 0;\n    i &#x3D; NR_TASKS;\n    p &#x3D; &amp;task[NR_TASKS];\n    while(--i)\n    &#123;\n      &#x2F;&#x2F;找到任务列表中，处于运行状态且时间片最大的任务\n      if((*p-&gt;state &#x3D;&#x3D; TASK_RUNNING)&amp;&amp;(*p)-&gt;COUNTER &gt; c)\n      &#123;\n        C &#x3D; (*p)-&gt;counter;\n        next &#x3D; i;\n      &#125;\n      &#x2F;&#x2F;如果找到则调度该程序\n      if(c) break;\n    &#125;\n    &#x2F;&#x2F;如果所有处于运行状态的任务时间片都为0，则将所有任务的时间片变为（当前时间片&#x2F;2）+（时间片初值）\n    for(p &#x3D; &amp;LAST_TASK;p &gt; &amp;FIRST_TASK;--p)\n    (*p)-&gt;counter &#x3D; ((*p)-&gt;counter&gt;&gt;1)+(*p)-&gt;priotity;\n  &#125;\n  switch_to(next);\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>计算机取指执行<br>系统调用也被称为程序的一个标准库<br>虚拟化CPU：将单个CPU转化为多个虚拟CPU<br>虚拟化内存：每个进程都有自己的虚拟地址空间，操作系统将其映射到物理内存上<br>时分共享技术：让一个进程只运行一个时间片，然后切换到其他进程<br>进程的重要组成部分：自己的内存即地址空间，寄存器状态<br>进程创建：将代码和静态数据（初始化变量）加载到进程的地址空间中（从磁盘中读入）只加载需要执行的部分，为程序的运行时栈（存放返局部变量、函数参数和返回地址）和堆（动态分配）分配内存，完成一些初始化任务，跳转到main函数，然后开始执行<br>每个进程都有对应的进程描述符</p>\n<p>程序是一种状态机，执行一条语句就是从一个状态转移到下一个状态<br>gdb vim<br>C语言函数调用，每次调用会产生一个新的栈帧，每个栈中含有变量和pc指针等，返回就是弹栈，C程序的状态就是堆栈的状态</p>\n<p>递归转化为非递归？汉诺塔</p>\n<p>对于二进制程序，状态就是内存、寄存器等的值<br>计算机系统基础<br>程序本身只是计算，需要使用系统调用syscall请求操作系统调用硬件资源退出程序等</p>\n"},{"title":"python（深度学习篇）","seo_title":"seo名称","toc":true,"indent":true,"top":false,"comments":1,"archive":true,"cover":false,"mathjax":false,"pin":false,"top_meta":false,"bottom_meta":false,"sidebar":["toc"],"keywords":"文章关键词","updated":"2023-11-07T14:10:58.014Z","img":"/medias/featureimages/30.webp","date":"2023-11-07T14:10:58.014Z","summary":"利用python搭建深度学习框架","_content":"# python（深度学习篇）\n### 1.环境配置（Ubuntu22.04）\n**1.1安装Anaconda**：Anaconda就是可以便捷获取包且对包能够进行管理，同时对环境可以统一管理的发行版本；Anaconda包含了conda、Python在内的超过180个科学包及其依赖项。\n①到官网下载安装包：`wget https://repo.anaconda.com/archive/Anaconda3-2023.03-1-Linux-x86_64.sh`\n②到**对应目录**下安装：`bash Anaconda3-2023.03-1-Linux-x86_64.sh`\n③打开conda基础环境：`conda activate base`\n#`conda list`查看Anaconda环境情况\n**1.2环境管理**\n```\n# 1.查看conda的版本号\nconda --version\n# 2.查看虚拟环境列表\nconda info --envs\n# 3.创建虚拟环境并指定python的版本号为3.8\nconda create -n virtualname pip python=3.9\n# 4.激活虚拟环境\nconda activate virtualname\n# 5.退出虚拟环境\nconda deactivate\n# 6.删除虚拟环境\nconda remove --name virtualname --all\n```\n**1.3包管理**\n\n```\n# 1.安装包\nconda install PackageName\n# 2.安装多个包\nconda install name1 name2 ...\n# 3.安装包并指定版本号\nconda install PackageName=版本号\n# 4.卸载包\nconda remove PackageName\n# 5.更新包\nconda update PackageName\n# 6.更新环境中的所有包\nconda update --all\n# 7.列出已安装的包\nconda list\n# 8.搜寻包\nconda search PackageName\n```\n**1.4在pycharm中使用Anaconda环境**\n①创建新环境：`conda create --name env_name package_names`\n#env_name为环境名；package_names为环境下使用的包的名称，可以在后面加`=版本号`确定版本，也可以使用多个包（空格隔开）\n#创建新环境后会进行安装\n②激活虚拟环境：`conda activate pytorch`\n③设置pycharm：[Add new Interpreter]→[conda environment]→[Interpreter]→填写环境所在路径\n#环境路径通常为：`/home/xxxx/anaconda3/env/bin/[环境名]`\n\n\n\n\n","source":"_posts/python（深度学习篇）.md","raw":"---\ntitle: python（深度学习篇）\nseo_title: seo名称\ntoc: true\nindent: true\ntop: false\ncomments: true\narchive: true\ncover: false\nmathjax: false\npin: false\ntop_meta: false\nbottom_meta: false\nsidebar:\n  - toc\ntag:\n  - 深度学习\n  - python\ncategories: 机器学习\nkeywords: 文章关键词\nupdated: ''\nimg: /medias/featureimages/30.webp\ndate:\nsummary: 利用python搭建深度学习框架\n\n---\n# python（深度学习篇）\n### 1.环境配置（Ubuntu22.04）\n**1.1安装Anaconda**：Anaconda就是可以便捷获取包且对包能够进行管理，同时对环境可以统一管理的发行版本；Anaconda包含了conda、Python在内的超过180个科学包及其依赖项。\n①到官网下载安装包：`wget https://repo.anaconda.com/archive/Anaconda3-2023.03-1-Linux-x86_64.sh`\n②到**对应目录**下安装：`bash Anaconda3-2023.03-1-Linux-x86_64.sh`\n③打开conda基础环境：`conda activate base`\n#`conda list`查看Anaconda环境情况\n**1.2环境管理**\n```\n# 1.查看conda的版本号\nconda --version\n# 2.查看虚拟环境列表\nconda info --envs\n# 3.创建虚拟环境并指定python的版本号为3.8\nconda create -n virtualname pip python=3.9\n# 4.激活虚拟环境\nconda activate virtualname\n# 5.退出虚拟环境\nconda deactivate\n# 6.删除虚拟环境\nconda remove --name virtualname --all\n```\n**1.3包管理**\n\n```\n# 1.安装包\nconda install PackageName\n# 2.安装多个包\nconda install name1 name2 ...\n# 3.安装包并指定版本号\nconda install PackageName=版本号\n# 4.卸载包\nconda remove PackageName\n# 5.更新包\nconda update PackageName\n# 6.更新环境中的所有包\nconda update --all\n# 7.列出已安装的包\nconda list\n# 8.搜寻包\nconda search PackageName\n```\n**1.4在pycharm中使用Anaconda环境**\n①创建新环境：`conda create --name env_name package_names`\n#env_name为环境名；package_names为环境下使用的包的名称，可以在后面加`=版本号`确定版本，也可以使用多个包（空格隔开）\n#创建新环境后会进行安装\n②激活虚拟环境：`conda activate pytorch`\n③设置pycharm：[Add new Interpreter]→[conda environment]→[Interpreter]→填写环境所在路径\n#环境路径通常为：`/home/xxxx/anaconda3/env/bin/[环境名]`\n\n\n\n\n","slug":"python（深度学习篇）","published":1,"_id":"clmkphbfb001n9gvd7gnm9ab1","layout":"post","photos":[],"link":"","content":"<h1 id=\"python（深度学习篇）\"><a href=\"#python（深度学习篇）\" class=\"headerlink\" title=\"python（深度学习篇）\"></a>python（深度学习篇）</h1><h3 id=\"1-环境配置（Ubuntu22-04）\"><a href=\"#1-环境配置（Ubuntu22-04）\" class=\"headerlink\" title=\"1.环境配置（Ubuntu22.04）\"></a>1.环境配置（Ubuntu22.04）</h3><p><strong>1.1安装Anaconda</strong>：Anaconda就是可以便捷获取包且对包能够进行管理，同时对环境可以统一管理的发行版本；Anaconda包含了conda、Python在内的超过180个科学包及其依赖项。<br>①到官网下载安装包：<code>wget https://repo.anaconda.com/archive/Anaconda3-2023.03-1-Linux-x86_64.sh</code><br>②到<strong>对应目录</strong>下安装：<code>bash Anaconda3-2023.03-1-Linux-x86_64.sh</code><br>③打开conda基础环境：<code>conda activate base</code><br>#<code>conda list</code>查看Anaconda环境情况<br><strong>1.2环境管理</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 1.查看conda的版本号\nconda --version\n# 2.查看虚拟环境列表\nconda info --envs\n# 3.创建虚拟环境并指定python的版本号为3.8\nconda create -n virtualname pip python=3.9\n# 4.激活虚拟环境\nconda activate virtualname\n# 5.退出虚拟环境\nconda deactivate\n# 6.删除虚拟环境\nconda remove --name virtualname --all<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>1.3包管理</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 1.安装包\nconda install PackageName\n# 2.安装多个包\nconda install name1 name2 ...\n# 3.安装包并指定版本号\nconda install PackageName=版本号\n# 4.卸载包\nconda remove PackageName\n# 5.更新包\nconda update PackageName\n# 6.更新环境中的所有包\nconda update --all\n# 7.列出已安装的包\nconda list\n# 8.搜寻包\nconda search PackageName<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>1.4在pycharm中使用Anaconda环境</strong><br>①创建新环境：<code>conda create --name env_name package_names</code><br>#env_name为环境名；package_names为环境下使用的包的名称，可以在后面加<code>=版本号</code>确定版本，也可以使用多个包（空格隔开）<br>#创建新环境后会进行安装<br>②激活虚拟环境：<code>conda activate pytorch</code><br>③设置pycharm：[Add new Interpreter]→[conda environment]→[Interpreter]→填写环境所在路径<br>#环境路径通常为：<code>/home/xxxx/anaconda3/env/bin/[环境名]</code></p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"python（深度学习篇）\"><a href=\"#python（深度学习篇）\" class=\"headerlink\" title=\"python（深度学习篇）\"></a>python（深度学习篇）</h1><h3 id=\"1-环境配置（Ubuntu22-04）\"><a href=\"#1-环境配置（Ubuntu22-04）\" class=\"headerlink\" title=\"1.环境配置（Ubuntu22.04）\"></a>1.环境配置（Ubuntu22.04）</h3><p><strong>1.1安装Anaconda</strong>：Anaconda就是可以便捷获取包且对包能够进行管理，同时对环境可以统一管理的发行版本；Anaconda包含了conda、Python在内的超过180个科学包及其依赖项。<br>①到官网下载安装包：<code>wget https://repo.anaconda.com/archive/Anaconda3-2023.03-1-Linux-x86_64.sh</code><br>②到<strong>对应目录</strong>下安装：<code>bash Anaconda3-2023.03-1-Linux-x86_64.sh</code><br>③打开conda基础环境：<code>conda activate base</code><br>#<code>conda list</code>查看Anaconda环境情况<br><strong>1.2环境管理</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 1.查看conda的版本号\nconda --version\n# 2.查看虚拟环境列表\nconda info --envs\n# 3.创建虚拟环境并指定python的版本号为3.8\nconda create -n virtualname pip python&#x3D;3.9\n# 4.激活虚拟环境\nconda activate virtualname\n# 5.退出虚拟环境\nconda deactivate\n# 6.删除虚拟环境\nconda remove --name virtualname --all<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>1.3包管理</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 1.安装包\nconda install PackageName\n# 2.安装多个包\nconda install name1 name2 ...\n# 3.安装包并指定版本号\nconda install PackageName&#x3D;版本号\n# 4.卸载包\nconda remove PackageName\n# 5.更新包\nconda update PackageName\n# 6.更新环境中的所有包\nconda update --all\n# 7.列出已安装的包\nconda list\n# 8.搜寻包\nconda search PackageName<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>1.4在pycharm中使用Anaconda环境</strong><br>①创建新环境：<code>conda create --name env_name package_names</code><br>#env_name为环境名；package_names为环境下使用的包的名称，可以在后面加<code>=版本号</code>确定版本，也可以使用多个包（空格隔开）<br>#创建新环境后会进行安装<br>②激活虚拟环境：<code>conda activate pytorch</code><br>③设置pycharm：[Add new Interpreter]→[conda environment]→[Interpreter]→填写环境所在路径<br>#环境路径通常为：<code>/home/xxxx/anaconda3/env/bin/[环境名]</code></p>\n"},{"title":"数据结构与算法（一）","seo_title":"seo名称","toc":true,"indent":true,"top":false,"comments":1,"archive":true,"cover":false,"mathjax":false,"pin":false,"top_meta":false,"bottom_meta":false,"sidebar":["toc"],"keywords":"文章关键词","updated":"2023-11-07T14:10:58.014Z","date":"2023-11-07T14:10:58.014Z","img":"/medias/featureimages/10.webp","summary":"数据结构与算法基础","_content":"# 数据结构与算法（一）\n## 数据结构与算法基础\n### 1.基本概念\n#### 1.1引言\n{%list%}\n同样的问题，不同的方法效率不同，对于计算机的处理方法，主要有以下三个影响因素\n{%endlist%}\n**①数据的组织方式**\n>如**书架**上**书**可以**随便放**，也可以**分类放**\n{%right%}\n前者方便存放，后者方便查找\n{%endright%}\n**②空间利用率**\n>如**循环**和**递归**\n{%list%}\n递归需要保存结束前所有函数调用的上下文\n{%endlist%}\n**③算法的巧妙程度**\n>详情见**实例**\n#### 1.2算法\n**①定义**\n>一个**有限指令集**，在接受一些**输入**后（**也可能不接受输入**），经过**有限的步骤**后，得到一定的**输出**，且能**处理不合理输入**\n{%warning%}\n每条指令不能有歧义，且在计算机处理范围内，不依赖任何具体实现手段\n{%endwarning%}\n**②指标**\n>**空间复杂度**`S(n)`：执行时**占用存储单元的长度**\n\n>**时间复杂度**`T(n)`：执行时**耗费的时长**\n{%list%}\nn为问题的规模，即需要处理的数据的个数\n{%endlist%}\n{%right%}\n通常时间复杂度和空间复杂度并不能兼得，需要做出取舍\n{%endright%}\n#### 1.3数据结构\n**①定义**\n>**数据对象**在计算机中的**组织方式**\n\n**②逻辑结构**\n>**对象之间**的相互关系\n{%list%}\n主要有集合结构、线性结构、树形结构和图结构\n{%endlist%}\n\n**③物理存储结构**\n>在**计算机中的存储方式**\n{%list%}\n主要有连续存储和链式存储（地址不连续）\n{%endlist%}\n\n#### 1.4递归\n**①定义**\n>**递**：程序不断**调用自身**，并设置一个**终止条件**，**每次调用**都更加**靠近这个终止条件**\n{%right%}\n通常终止条件是传入的参数为某一值，然后每次调用都靠近这个值\n{%endright%}\n>**归**：当**触发终止条件**，便从**根据终止条件对应的值**开始**逐层返回**，计算最终结果\n{%warning%}\n终止条件对应的结果是一个确切的结果，否则无法完成递归\n{%endwarning%}\n**②举例**\n>计算从`1`到`n`的**总和**\n{%right%}\n递归的本质就是将问题分解为更小的子问题，天然适合处理分分治问题\n{%endright%}\n{%warning%}\n每次调用函数，都需要向栈中压入返回地址、参数等信息，直到返回才被释放，且由一定时间开销。所以递归的复杂度都较高\n{%endwarning%}\n```\nint sum(int n)\n{\n  //终止条件\n  if (n==1)\n      return 1;\n  //递\n  int jmp = sum(n-1);\n  //归\n  return n+jmp;\n}\n```\n![递归过程](/image/SF_0.png)\n\n### 2.复杂度分析\n#### 2.1引言\n**①复杂度估算**\n{%right%}\n复杂度计算的是其随问题规模增大时的变化趋势，即T(n)/S(n)的函数渐进上界\n{%endright%}\n>**函数渐进上界**：对于**函数**`T(n)`，若存在**正实数**`c`和**实数**`n0`，当`n > n0`时，均有`T(n) <= cf(n)`，则`f(n)`为其**渐进上界**\n{%list%}\n由定义可知，渐进上界通常为函数的最高阶\n{%endlist%}\n**②算法相关空间**\n>**输入空间**：存储算法的**输入数据**\n\n>**暂存空间**：存储算法在**运行过程**中的**变量**、**函数上下文**等数据\n{%list%}\n还可分为存储变量等数据的数据空间，保存调用函数上下文的的栈帧数据，以及保存编译后程序指令的指令空间\n{%endlist%}\n>**输出空间**：存储算法的**输出数据**\n```\n/* 调用的函数 */\nint func() \n{\n    // 执行某些操作...\n    return 0;\n}\n\nint algorithm(int n) // 输入空间\n{ \n    const int a = 0;   // 数据空间（常量）\n    int b = 0;         // 数据空间（变量）\n    int c = func();    // 栈帧空间（调用函数）\n    return a + b + c;  // 输出空间\n}\n\n```\n#### 2.2时间复杂度\n**①估算思路**\n>所有**与n无关**的部分看作`1`，因为其最后为`T(n)`的**常数部分**\n\n>**与n有关**的部分，将其分为**多个独立部分**，**分别计算**其复杂度，取其中**最大的**\n{%right%}\n每种部分的复杂度不尽相同，需要自己分析，本质上是算其中基本语句的执行次数，如单层循环的复杂度为n\n{%endright%}\n>如果有**嵌套类型**，先从**最里层嵌套**计算，**每一层嵌套的复杂度相乘**得到**嵌套部分的复杂度**\n\n**②常见类型**\n{%right%}\n以最差时间复杂度为例\n{%endright%}\n>`O(n^2)`：**两层嵌套循环**\n```\nint quadratic(int n)\n{\n    int count = 0;\n    // 循环次数与数组长度成平方关系\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            count++;\n        }\n    }\n    return count;\n}\n```\n>`O(2^n)`：以下**递归次数为n**，每次递归都将**一分为二**\n```\n/* 指数阶（递归实现） */\nint expRecur(int n)\n{\n    if (n == 1)\n        return 1;\n    return expRecur(n - 1) + expRecur(n - 1) + 1;\n}\n```\n>`O(logn)`：以下只需要**迭代logn次**\n```\nint logarithmic(float n)\n{\n    int count = 0;\n    while (n > 1) {\n        n = n / 2;\n        count++;\n    }\n    return count;\n}\n```\n>`O(n!)`：以下**循环n次**，**第一次**循环**分裂出n个**，**第二次**循环**每个都分裂出n-1个**，依次类推\n```\n/* 阶乘阶（递归实现） */\nint factorialRecur(int n) \n{\n    if (n == 0)\n        return 1;\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        count += factorialRecur(n - 1);\n    }\n    return count;\n}\n```\n#### 2.3空间复杂度\n**①估算思路**\n{%list%}\n通常只关心最差空间复杂度，其中最差指最差输入数据和峰值内存占用\n{%endlist%}\n>分别计算**各个空间**的**空间复杂度**，取**最大值**\n{%right%}\n空间复杂度的计算主要计算占用的内存数量\n{%endright%}\n{%warning%}\n其中递归函数需要注意栈帧空间的大小\n{%endwarning%}\n>如下，**迭代**过程**每次调用**完就**释放了栈帧空间**，空间复杂度为`O(1)`，**递归**过程每次调用**没有释放栈帧空间**，故空间复杂度为`O(n)`\n```\nint func() {\n    // 执行某些操作\n    return 0;\n}\n/* 循环 O(1) */\nvoid loop(int n) {\n    for (int i = 0; i < n; i++) {\n        func();\n    }\n}\n/* 递归 O(n) */\nvoid recur(int n) {\n    if (n == 1) return;\n    return recur(n - 1);\n}\n```\n**②常见类型**\n>`O(n^2)`：构建`n*n`的**矩阵**\n\n>`O(2^n)`：构建`n`层的**二叉树**\n\n***\n### 3.经典算法实例\n>**最大子列和问题**：给定**N个整数**的序列，求出其中**连续n个子列和**的**最大值**，其中`n≤N`\n\n#### 3.1.暴力穷举法\n**①基本思想**\n>求出**所有连续子列和**，从中找出**最大**的子列和，**时间复杂度**为`O(n^3)`\n\n**②代码实现**\n```\nint MaxSubseqSum1(int A[],int N)\n{\n  int ThisSum,MaxSum = 0;\n  int i,j,k;\n  for (i=0;i<=N;i++) #确定起点\n  {\n    for(j=i;j<=N;j++) #确定终点\n    {\n      ThisSum=0;\n      for(k=i;k<=j,k++) #将第i到第j个叠加到一起\n      {\n        ThisSum=ThisSum+A[k];\n      }\n      if(ThisSum>MaxSum)\n      MaxSum=ThisSum;\n    }\n  }\n\n  return MaxSum;\n}\n```\n\n#### 3.2改进的暴力穷举法\n**①思想**\n>基于上述算法做出了一定**改进**。计算子列和是在**已经计算完成**的子列和**加上最新项**更新获得，可以**省去k循环**，**时间复杂度**为`O(n^2)`\n\n**②代码实现**\n```\nint MaxSubseqSum2(int A[],int N)\n{\n  int ThisSum,MaxSum = 0;\n  int i,j;\n  for (i=0;i<=N;i++)/*i是子列左端*/\n  {\n    ThisSum=0;\n    for(j=i;j<=N;j++)/*j是子列右端*/\n    {\n      ThisSum=ThisSum+A[j];/*对于相同的i和不同的j，只需要在j-1的基础上累加最新项即可*/\n      if(ThisSum>MaxSum)\n      MaxSum=ThisSum;\n    }\n  }\n\n  return MaxSum;\n}\n```\n#### 3.3分而治之\n**①思想**：？\n**②代码实现**\n```\n#include <stdio.h>\n#include <stdlib.h>\n\n#define MAXN 100000\n\nint MaxofThreeNum (int a, int b, int c)  \\\\ 求三个数中得最大值\n{   int maxSum;\n    maxSum = a > b ? a : b;\n    maxSum = maxSum > c ? maxSum : c;\n    return maxSum;\n}\n\nint DivideConquer(int data[], int left, int right)\n{\n    int mid;\n    int leftMaxSum, rightMaxSum;\n    int leftBoardSum, rightBoardSum;\n    int leftMaxBoardSum, rightMaxBoardSum;\n   /* 退出条件 */\n    if (left == right) \n        return data[left];\n\n\t/* “分的过程” */\n    mid = (left + right) / 2; //找到中分点\n    \n    /* 递归求两边的最大值 */\n    leftMaxSum = DivideConquer(data, left, mid);  // 左边最大值\n    rightMaxSum = DivideConquer(data, mid + 1, right);  // 右边最大值\n    \n\t /* 跨越边界的最大值 := leftMaxBoardSum + rightMaxBoardSum  */\n     leftMaxBoardSum = data[mid];\n     leftBoardSum = 0;\n     for (int i = mid; i >= left; i--) {\n        leftBoardSum += data[i];\n        if (leftBoardSum > leftMaxBoardSum)\n            leftMaxBoardSum = leftBoardSum;\n     }   //左边界扫描\n\n    rightMaxBoardSum = data[mid + 1];\n    rightBoardSum = 0;\n    for(int i = mid + 1; i <= right; i++) {\n        rightBoardSum += data[i];\n        if(rightBoardSum > rightMaxBoardSum)\n            rightMaxBoardSum = rightBoardSum;\n    }  //有边界扫描 \n    \n\t/* 治的过程，最大值为左边的最大值、右边最大值，跨越边界最大值之中的最大值 */\n    return MaxofThreeNum(leftMaxSum, rightMaxSum, leftMaxBoardSum + rightMaxBoardSum);\n}\n\nint MaxSubSeqSum(int data[], int num)  // 改变函数接口\n{\n    return DivideConquer(data, 0, num - 1);\n}\n\nint main()\n{\n    int num;\n    int data[MAXN] = {0};\n\n    scanf(\"%d\",&num);\n\n    for (int i = 0; i < num; i++) {\n        scanf(\"%d\", &data[i]);\n    }\n\n    printf(\"%d\", MaxSubSeqSum(data, num));\n    return 0;\n}\n```\n#### 5.在线处理\n**①思想**\n>一开始**子列左端为A[0]**，逐个**向右累加**，若当前子列和**为负数则舍去**，因为一个**负的子列和部分只会使得子列和变小**,算法时间复杂度为`O(n)`\n\n**②代码实现**\n```\nint MaxSubseqSum4(int A[],int N)\n{\n  int ThisSum,MaxSum = 0;\n  int i;\n  for (i=0;i<=N;i++)/*i是子列左端*/\n  {\n    ThisSum=ThisSum+A[i];\n    if(ThisSum>=MaxSum)\n    MaxSum=ThisSum;\n    else\n    ThisSum=0;\n  }\n\n  return MaxSum;\n}\n```\n\n","source":"_posts/数据结构与算法（一）.md","raw":"---\ntitle: 数据结构与算法（一）\nseo_title: seo名称\ntoc: true\nindent: true\ntop: false\ncomments: true\narchive: true\ncover: false\nmathjax: false\npin: false\ntop_meta: false\nbottom_meta: false\nsidebar:\n  - toc\ntag:\n  - 计算机基础\n  - 数据结构与算法\n  - 《hello算法》\ncategories: 计算机基础\nkeywords: 文章关键词\nupdated: ''\ndate:\nimg: /medias/featureimages/10.webp\nsummary: 数据结构与算法基础\n---\n# 数据结构与算法（一）\n## 数据结构与算法基础\n### 1.基本概念\n#### 1.1引言\n{%list%}\n同样的问题，不同的方法效率不同，对于计算机的处理方法，主要有以下三个影响因素\n{%endlist%}\n**①数据的组织方式**\n>如**书架**上**书**可以**随便放**，也可以**分类放**\n{%right%}\n前者方便存放，后者方便查找\n{%endright%}\n**②空间利用率**\n>如**循环**和**递归**\n{%list%}\n递归需要保存结束前所有函数调用的上下文\n{%endlist%}\n**③算法的巧妙程度**\n>详情见**实例**\n#### 1.2算法\n**①定义**\n>一个**有限指令集**，在接受一些**输入**后（**也可能不接受输入**），经过**有限的步骤**后，得到一定的**输出**，且能**处理不合理输入**\n{%warning%}\n每条指令不能有歧义，且在计算机处理范围内，不依赖任何具体实现手段\n{%endwarning%}\n**②指标**\n>**空间复杂度**`S(n)`：执行时**占用存储单元的长度**\n\n>**时间复杂度**`T(n)`：执行时**耗费的时长**\n{%list%}\nn为问题的规模，即需要处理的数据的个数\n{%endlist%}\n{%right%}\n通常时间复杂度和空间复杂度并不能兼得，需要做出取舍\n{%endright%}\n#### 1.3数据结构\n**①定义**\n>**数据对象**在计算机中的**组织方式**\n\n**②逻辑结构**\n>**对象之间**的相互关系\n{%list%}\n主要有集合结构、线性结构、树形结构和图结构\n{%endlist%}\n\n**③物理存储结构**\n>在**计算机中的存储方式**\n{%list%}\n主要有连续存储和链式存储（地址不连续）\n{%endlist%}\n\n#### 1.4递归\n**①定义**\n>**递**：程序不断**调用自身**，并设置一个**终止条件**，**每次调用**都更加**靠近这个终止条件**\n{%right%}\n通常终止条件是传入的参数为某一值，然后每次调用都靠近这个值\n{%endright%}\n>**归**：当**触发终止条件**，便从**根据终止条件对应的值**开始**逐层返回**，计算最终结果\n{%warning%}\n终止条件对应的结果是一个确切的结果，否则无法完成递归\n{%endwarning%}\n**②举例**\n>计算从`1`到`n`的**总和**\n{%right%}\n递归的本质就是将问题分解为更小的子问题，天然适合处理分分治问题\n{%endright%}\n{%warning%}\n每次调用函数，都需要向栈中压入返回地址、参数等信息，直到返回才被释放，且由一定时间开销。所以递归的复杂度都较高\n{%endwarning%}\n```\nint sum(int n)\n{\n  //终止条件\n  if (n==1)\n      return 1;\n  //递\n  int jmp = sum(n-1);\n  //归\n  return n+jmp;\n}\n```\n![递归过程](/image/SF_0.png)\n\n### 2.复杂度分析\n#### 2.1引言\n**①复杂度估算**\n{%right%}\n复杂度计算的是其随问题规模增大时的变化趋势，即T(n)/S(n)的函数渐进上界\n{%endright%}\n>**函数渐进上界**：对于**函数**`T(n)`，若存在**正实数**`c`和**实数**`n0`，当`n > n0`时，均有`T(n) <= cf(n)`，则`f(n)`为其**渐进上界**\n{%list%}\n由定义可知，渐进上界通常为函数的最高阶\n{%endlist%}\n**②算法相关空间**\n>**输入空间**：存储算法的**输入数据**\n\n>**暂存空间**：存储算法在**运行过程**中的**变量**、**函数上下文**等数据\n{%list%}\n还可分为存储变量等数据的数据空间，保存调用函数上下文的的栈帧数据，以及保存编译后程序指令的指令空间\n{%endlist%}\n>**输出空间**：存储算法的**输出数据**\n```\n/* 调用的函数 */\nint func() \n{\n    // 执行某些操作...\n    return 0;\n}\n\nint algorithm(int n) // 输入空间\n{ \n    const int a = 0;   // 数据空间（常量）\n    int b = 0;         // 数据空间（变量）\n    int c = func();    // 栈帧空间（调用函数）\n    return a + b + c;  // 输出空间\n}\n\n```\n#### 2.2时间复杂度\n**①估算思路**\n>所有**与n无关**的部分看作`1`，因为其最后为`T(n)`的**常数部分**\n\n>**与n有关**的部分，将其分为**多个独立部分**，**分别计算**其复杂度，取其中**最大的**\n{%right%}\n每种部分的复杂度不尽相同，需要自己分析，本质上是算其中基本语句的执行次数，如单层循环的复杂度为n\n{%endright%}\n>如果有**嵌套类型**，先从**最里层嵌套**计算，**每一层嵌套的复杂度相乘**得到**嵌套部分的复杂度**\n\n**②常见类型**\n{%right%}\n以最差时间复杂度为例\n{%endright%}\n>`O(n^2)`：**两层嵌套循环**\n```\nint quadratic(int n)\n{\n    int count = 0;\n    // 循环次数与数组长度成平方关系\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            count++;\n        }\n    }\n    return count;\n}\n```\n>`O(2^n)`：以下**递归次数为n**，每次递归都将**一分为二**\n```\n/* 指数阶（递归实现） */\nint expRecur(int n)\n{\n    if (n == 1)\n        return 1;\n    return expRecur(n - 1) + expRecur(n - 1) + 1;\n}\n```\n>`O(logn)`：以下只需要**迭代logn次**\n```\nint logarithmic(float n)\n{\n    int count = 0;\n    while (n > 1) {\n        n = n / 2;\n        count++;\n    }\n    return count;\n}\n```\n>`O(n!)`：以下**循环n次**，**第一次**循环**分裂出n个**，**第二次**循环**每个都分裂出n-1个**，依次类推\n```\n/* 阶乘阶（递归实现） */\nint factorialRecur(int n) \n{\n    if (n == 0)\n        return 1;\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        count += factorialRecur(n - 1);\n    }\n    return count;\n}\n```\n#### 2.3空间复杂度\n**①估算思路**\n{%list%}\n通常只关心最差空间复杂度，其中最差指最差输入数据和峰值内存占用\n{%endlist%}\n>分别计算**各个空间**的**空间复杂度**，取**最大值**\n{%right%}\n空间复杂度的计算主要计算占用的内存数量\n{%endright%}\n{%warning%}\n其中递归函数需要注意栈帧空间的大小\n{%endwarning%}\n>如下，**迭代**过程**每次调用**完就**释放了栈帧空间**，空间复杂度为`O(1)`，**递归**过程每次调用**没有释放栈帧空间**，故空间复杂度为`O(n)`\n```\nint func() {\n    // 执行某些操作\n    return 0;\n}\n/* 循环 O(1) */\nvoid loop(int n) {\n    for (int i = 0; i < n; i++) {\n        func();\n    }\n}\n/* 递归 O(n) */\nvoid recur(int n) {\n    if (n == 1) return;\n    return recur(n - 1);\n}\n```\n**②常见类型**\n>`O(n^2)`：构建`n*n`的**矩阵**\n\n>`O(2^n)`：构建`n`层的**二叉树**\n\n***\n### 3.经典算法实例\n>**最大子列和问题**：给定**N个整数**的序列，求出其中**连续n个子列和**的**最大值**，其中`n≤N`\n\n#### 3.1.暴力穷举法\n**①基本思想**\n>求出**所有连续子列和**，从中找出**最大**的子列和，**时间复杂度**为`O(n^3)`\n\n**②代码实现**\n```\nint MaxSubseqSum1(int A[],int N)\n{\n  int ThisSum,MaxSum = 0;\n  int i,j,k;\n  for (i=0;i<=N;i++) #确定起点\n  {\n    for(j=i;j<=N;j++) #确定终点\n    {\n      ThisSum=0;\n      for(k=i;k<=j,k++) #将第i到第j个叠加到一起\n      {\n        ThisSum=ThisSum+A[k];\n      }\n      if(ThisSum>MaxSum)\n      MaxSum=ThisSum;\n    }\n  }\n\n  return MaxSum;\n}\n```\n\n#### 3.2改进的暴力穷举法\n**①思想**\n>基于上述算法做出了一定**改进**。计算子列和是在**已经计算完成**的子列和**加上最新项**更新获得，可以**省去k循环**，**时间复杂度**为`O(n^2)`\n\n**②代码实现**\n```\nint MaxSubseqSum2(int A[],int N)\n{\n  int ThisSum,MaxSum = 0;\n  int i,j;\n  for (i=0;i<=N;i++)/*i是子列左端*/\n  {\n    ThisSum=0;\n    for(j=i;j<=N;j++)/*j是子列右端*/\n    {\n      ThisSum=ThisSum+A[j];/*对于相同的i和不同的j，只需要在j-1的基础上累加最新项即可*/\n      if(ThisSum>MaxSum)\n      MaxSum=ThisSum;\n    }\n  }\n\n  return MaxSum;\n}\n```\n#### 3.3分而治之\n**①思想**：？\n**②代码实现**\n```\n#include <stdio.h>\n#include <stdlib.h>\n\n#define MAXN 100000\n\nint MaxofThreeNum (int a, int b, int c)  \\\\ 求三个数中得最大值\n{   int maxSum;\n    maxSum = a > b ? a : b;\n    maxSum = maxSum > c ? maxSum : c;\n    return maxSum;\n}\n\nint DivideConquer(int data[], int left, int right)\n{\n    int mid;\n    int leftMaxSum, rightMaxSum;\n    int leftBoardSum, rightBoardSum;\n    int leftMaxBoardSum, rightMaxBoardSum;\n   /* 退出条件 */\n    if (left == right) \n        return data[left];\n\n\t/* “分的过程” */\n    mid = (left + right) / 2; //找到中分点\n    \n    /* 递归求两边的最大值 */\n    leftMaxSum = DivideConquer(data, left, mid);  // 左边最大值\n    rightMaxSum = DivideConquer(data, mid + 1, right);  // 右边最大值\n    \n\t /* 跨越边界的最大值 := leftMaxBoardSum + rightMaxBoardSum  */\n     leftMaxBoardSum = data[mid];\n     leftBoardSum = 0;\n     for (int i = mid; i >= left; i--) {\n        leftBoardSum += data[i];\n        if (leftBoardSum > leftMaxBoardSum)\n            leftMaxBoardSum = leftBoardSum;\n     }   //左边界扫描\n\n    rightMaxBoardSum = data[mid + 1];\n    rightBoardSum = 0;\n    for(int i = mid + 1; i <= right; i++) {\n        rightBoardSum += data[i];\n        if(rightBoardSum > rightMaxBoardSum)\n            rightMaxBoardSum = rightBoardSum;\n    }  //有边界扫描 \n    \n\t/* 治的过程，最大值为左边的最大值、右边最大值，跨越边界最大值之中的最大值 */\n    return MaxofThreeNum(leftMaxSum, rightMaxSum, leftMaxBoardSum + rightMaxBoardSum);\n}\n\nint MaxSubSeqSum(int data[], int num)  // 改变函数接口\n{\n    return DivideConquer(data, 0, num - 1);\n}\n\nint main()\n{\n    int num;\n    int data[MAXN] = {0};\n\n    scanf(\"%d\",&num);\n\n    for (int i = 0; i < num; i++) {\n        scanf(\"%d\", &data[i]);\n    }\n\n    printf(\"%d\", MaxSubSeqSum(data, num));\n    return 0;\n}\n```\n#### 5.在线处理\n**①思想**\n>一开始**子列左端为A[0]**，逐个**向右累加**，若当前子列和**为负数则舍去**，因为一个**负的子列和部分只会使得子列和变小**,算法时间复杂度为`O(n)`\n\n**②代码实现**\n```\nint MaxSubseqSum4(int A[],int N)\n{\n  int ThisSum,MaxSum = 0;\n  int i;\n  for (i=0;i<=N;i++)/*i是子列左端*/\n  {\n    ThisSum=ThisSum+A[i];\n    if(ThisSum>=MaxSum)\n    MaxSum=ThisSum;\n    else\n    ThisSum=0;\n  }\n\n  return MaxSum;\n}\n```\n\n","slug":"数据结构与算法（一）","published":1,"_id":"clmkphbfc001r9gvdbnjw4h5c","layout":"post","photos":[],"link":"","content":"<h1 id=\"数据结构与算法（一）\"><a href=\"#数据结构与算法（一）\" class=\"headerlink\" title=\"数据结构与算法（一）\"></a>数据结构与算法（一）</h1><h2 id=\"数据结构与算法基础\"><a href=\"#数据结构与算法基础\" class=\"headerlink\" title=\"数据结构与算法基础\"></a>数据结构与算法基础</h2><h3 id=\"1-基本概念\"><a href=\"#1-基本概念\" class=\"headerlink\" title=\"1.基本概念\"></a>1.基本概念</h3><h4 id=\"1-1引言\"><a href=\"#1-1引言\" class=\"headerlink\" title=\"1.1引言\"></a>1.1引言</h4><div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 同样的问题，不同的方法效率不同，对于计算机的处理方法，主要有以下三个影响因素</div>\n<p><strong>①数据的组织方式</strong></p>\n<blockquote>\n<p>如<strong>书架</strong>上<strong>书</strong>可以<strong>随便放</strong>，也可以<strong>分类放</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 前者方便存放，后者方便查找</div>\n<p><strong>②空间利用率</strong></p>\n<blockquote>\n<p>如<strong>循环</strong>和<strong>递归</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 递归需要保存结束前所有函数调用的上下文</div>\n<p><strong>③算法的巧妙程度</strong></p>\n<blockquote>\n<p>详情见<strong>实例</strong></p>\n</blockquote>\n<h4 id=\"1-2算法\"><a href=\"#1-2算法\" class=\"headerlink\" title=\"1.2算法\"></a>1.2算法</h4><p><strong>①定义</strong></p>\n<blockquote>\n<p>一个<strong>有限指令集</strong>，在接受一些<strong>输入</strong>后（<strong>也可能不接受输入</strong>），经过<strong>有限的步骤</strong>后，得到一定的<strong>输出</strong>，且能<strong>处理不合理输入</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 每条指令不能有歧义，且在计算机处理范围内，不依赖任何具体实现手段</div>\n<p><strong>②指标</strong></p>\n<blockquote>\n<p><strong>空间复杂度</strong><code>S(n)</code>：执行时<strong>占用存储单元的长度</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>时间复杂度</strong><code>T(n)</code>：执行时<strong>耗费的时长</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> n为问题的规模，即需要处理的数据的个数</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 通常时间复杂度和空间复杂度并不能兼得，需要做出取舍</div>\n<h4 id=\"1-3数据结构\"><a href=\"#1-3数据结构\" class=\"headerlink\" title=\"1.3数据结构\"></a>1.3数据结构</h4><p><strong>①定义</strong></p>\n<blockquote>\n<p><strong>数据对象</strong>在计算机中的<strong>组织方式</strong></p>\n</blockquote>\n<p><strong>②逻辑结构</strong></p>\n<blockquote>\n<p><strong>对象之间</strong>的相互关系</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 主要有集合结构、线性结构、树形结构和图结构</div>\n\n<p><strong>③物理存储结构</strong></p>\n<blockquote>\n<p>在<strong>计算机中的存储方式</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 主要有连续存储和链式存储（地址不连续）</div>\n\n<h4 id=\"1-4递归\"><a href=\"#1-4递归\" class=\"headerlink\" title=\"1.4递归\"></a>1.4递归</h4><p><strong>①定义</strong></p>\n<blockquote>\n<p><strong>递</strong>：程序不断<strong>调用自身</strong>，并设置一个<strong>终止条件</strong>，<strong>每次调用</strong>都更加<strong>靠近这个终止条件</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 通常终止条件是传入的参数为某一值，然后每次调用都靠近这个值</div>\n<blockquote>\n<p><strong>归</strong>：当<strong>触发终止条件</strong>，便从<strong>根据终止条件对应的值</strong>开始<strong>逐层返回</strong>，计算最终结果</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 终止条件对应的结果是一个确切的结果，否则无法完成递归</div>\n<p><strong>②举例</strong></p>\n<blockquote>\n<p>计算从<code>1</code>到<code>n</code>的<strong>总和</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 递归的本质就是将问题分解为更小的子问题，天然适合处理分分治问题</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 每次调用函数，都需要向栈中压入返回地址、参数等信息，直到返回才被释放，且由一定时间开销。所以递归的复杂度都较高</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">int sum(int n)\n{\n  //终止条件\n  if (n==1)\n      return 1;\n  //递\n  int jmp = sum(n-1);\n  //归\n  return n+jmp;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/SF_0.png\" alt=\"递归过程\"></p>\n<h3 id=\"2-复杂度分析\"><a href=\"#2-复杂度分析\" class=\"headerlink\" title=\"2.复杂度分析\"></a>2.复杂度分析</h3><h4 id=\"2-1引言\"><a href=\"#2-1引言\" class=\"headerlink\" title=\"2.1引言\"></a>2.1引言</h4><p><strong>①复杂度估算</strong></p>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 复杂度计算的是其随问题规模增大时的变化趋势，即T(n)/S(n)的函数渐进上界</div>\n<blockquote>\n<p><strong>函数渐进上界</strong>：对于<strong>函数</strong><code>T(n)</code>，若存在<strong>正实数</strong><code>c</code>和<strong>实数</strong><code>n0</code>，当<code>n &gt; n0</code>时，均有<code>T(n) &lt;= cf(n)</code>，则<code>f(n)</code>为其<strong>渐进上界</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 由定义可知，渐进上界通常为函数的最高阶</div>\n<p><strong>②算法相关空间</strong></p>\n<blockquote>\n<p><strong>输入空间</strong>：存储算法的<strong>输入数据</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>暂存空间</strong>：存储算法在<strong>运行过程</strong>中的<strong>变量</strong>、<strong>函数上下文</strong>等数据</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 还可分为存储变量等数据的数据空间，保存调用函数上下文的的栈帧数据，以及保存编译后程序指令的指令空间</div>\n<blockquote>\n<p><strong>输出空间</strong>：存储算法的<strong>输出数据</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">/* 调用的函数 */\nint func() \n{\n    // 执行某些操作...\n    return 0;\n}\n\nint algorithm(int n) // 输入空间\n{ \n    const int a = 0;   // 数据空间（常量）\n    int b = 0;         // 数据空间（变量）\n    int c = func();    // 栈帧空间（调用函数）\n    return a + b + c;  // 输出空间\n}\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"2-2时间复杂度\"><a href=\"#2-2时间复杂度\" class=\"headerlink\" title=\"2.2时间复杂度\"></a>2.2时间复杂度</h4><p><strong>①估算思路</strong></p>\n<blockquote>\n<p>所有<strong>与n无关</strong>的部分看作<code>1</code>，因为其最后为<code>T(n)</code>的<strong>常数部分</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>与n有关</strong>的部分，将其分为<strong>多个独立部分</strong>，<strong>分别计算</strong>其复杂度，取其中<strong>最大的</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 每种部分的复杂度不尽相同，需要自己分析，本质上是算其中基本语句的执行次数，如单层循环的复杂度为n</div>\n<blockquote>\n<p>如果有<strong>嵌套类型</strong>，先从<strong>最里层嵌套</strong>计算，<strong>每一层嵌套的复杂度相乘</strong>得到<strong>嵌套部分的复杂度</strong></p>\n</blockquote>\n<p><strong>②常见类型</strong></p>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 以最差时间复杂度为例</div>\n<blockquote>\n<p><code>O(n^2)</code>：<strong>两层嵌套循环</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">int quadratic(int n)\n{\n    int count = 0;\n    // 循环次数与数组长度成平方关系\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = 0; j &lt; n; j++) {\n            count++;\n        }\n    }\n    return count;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><code>O(2^n)</code>：以下<strong>递归次数为n</strong>，每次递归都将<strong>一分为二</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">/* 指数阶（递归实现） */\nint expRecur(int n)\n{\n    if (n == 1)\n        return 1;\n    return expRecur(n - 1) + expRecur(n - 1) + 1;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><code>O(logn)</code>：以下只需要<strong>迭代logn次</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">int logarithmic(float n)\n{\n    int count = 0;\n    while (n &gt; 1) {\n        n = n / 2;\n        count++;\n    }\n    return count;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><code>O(n!)</code>：以下<strong>循环n次</strong>，<strong>第一次</strong>循环<strong>分裂出n个</strong>，<strong>第二次</strong>循环<strong>每个都分裂出n-1个</strong>，依次类推</p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">/* 阶乘阶（递归实现） */\nint factorialRecur(int n) \n{\n    if (n == 0)\n        return 1;\n    int count = 0;\n    for (int i = 0; i &lt; n; i++) {\n        count += factorialRecur(n - 1);\n    }\n    return count;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"2-3空间复杂度\"><a href=\"#2-3空间复杂度\" class=\"headerlink\" title=\"2.3空间复杂度\"></a>2.3空间复杂度</h4><p><strong>①估算思路</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 通常只关心最差空间复杂度，其中最差指最差输入数据和峰值内存占用</div>\n<blockquote>\n<p>分别计算<strong>各个空间</strong>的<strong>空间复杂度</strong>，取<strong>最大值</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 空间复杂度的计算主要计算占用的内存数量</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 其中递归函数需要注意栈帧空间的大小</div>\n<blockquote>\n<p>如下，<strong>迭代</strong>过程<strong>每次调用</strong>完就<strong>释放了栈帧空间</strong>，空间复杂度为<code>O(1)</code>，<strong>递归</strong>过程每次调用<strong>没有释放栈帧空间</strong>，故空间复杂度为<code>O(n)</code></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">int func() {\n    // 执行某些操作\n    return 0;\n}\n/* 循环 O(1) */\nvoid loop(int n) {\n    for (int i = 0; i &lt; n; i++) {\n        func();\n    }\n}\n/* 递归 O(n) */\nvoid recur(int n) {\n    if (n == 1) return;\n    return recur(n - 1);\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>②常见类型</strong></p>\n<blockquote>\n<p><code>O(n^2)</code>：构建<code>n*n</code>的<strong>矩阵</strong></p>\n</blockquote>\n<blockquote>\n<p><code>O(2^n)</code>：构建<code>n</code>层的<strong>二叉树</strong></p>\n</blockquote>\n<hr>\n<h3 id=\"3-经典算法实例\"><a href=\"#3-经典算法实例\" class=\"headerlink\" title=\"3.经典算法实例\"></a>3.经典算法实例</h3><blockquote>\n<p><strong>最大子列和问题</strong>：给定<strong>N个整数</strong>的序列，求出其中<strong>连续n个子列和</strong>的<strong>最大值</strong>，其中<code>n≤N</code></p>\n</blockquote>\n<h4 id=\"3-1-暴力穷举法\"><a href=\"#3-1-暴力穷举法\" class=\"headerlink\" title=\"3.1.暴力穷举法\"></a>3.1.暴力穷举法</h4><p><strong>①基本思想</strong></p>\n<blockquote>\n<p>求出<strong>所有连续子列和</strong>，从中找出<strong>最大</strong>的子列和，<strong>时间复杂度</strong>为<code>O(n^3)</code></p>\n</blockquote>\n<p><strong>②代码实现</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">int MaxSubseqSum1(int A[],int N)\n{\n  int ThisSum,MaxSum = 0;\n  int i,j,k;\n  for (i=0;i&lt;=N;i++) #确定起点\n  {\n    for(j=i;j&lt;=N;j++) #确定终点\n    {\n      ThisSum=0;\n      for(k=i;k&lt;=j,k++) #将第i到第j个叠加到一起\n      {\n        ThisSum=ThisSum+A[k];\n      }\n      if(ThisSum&gt;MaxSum)\n      MaxSum=ThisSum;\n    }\n  }\n\n  return MaxSum;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"3-2改进的暴力穷举法\"><a href=\"#3-2改进的暴力穷举法\" class=\"headerlink\" title=\"3.2改进的暴力穷举法\"></a>3.2改进的暴力穷举法</h4><p><strong>①思想</strong></p>\n<blockquote>\n<p>基于上述算法做出了一定<strong>改进</strong>。计算子列和是在<strong>已经计算完成</strong>的子列和<strong>加上最新项</strong>更新获得，可以<strong>省去k循环</strong>，<strong>时间复杂度</strong>为<code>O(n^2)</code></p>\n</blockquote>\n<p><strong>②代码实现</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">int MaxSubseqSum2(int A[],int N)\n{\n  int ThisSum,MaxSum = 0;\n  int i,j;\n  for (i=0;i&lt;=N;i++)/*i是子列左端*/\n  {\n    ThisSum=0;\n    for(j=i;j&lt;=N;j++)/*j是子列右端*/\n    {\n      ThisSum=ThisSum+A[j];/*对于相同的i和不同的j，只需要在j-1的基础上累加最新项即可*/\n      if(ThisSum&gt;MaxSum)\n      MaxSum=ThisSum;\n    }\n  }\n\n  return MaxSum;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"3-3分而治之\"><a href=\"#3-3分而治之\" class=\"headerlink\" title=\"3.3分而治之\"></a>3.3分而治之</h4><p><strong>①思想</strong>：？<br><strong>②代码实现</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n#define MAXN 100000\n\nint MaxofThreeNum (int a, int b, int c)  \\\\ 求三个数中得最大值\n{   int maxSum;\n    maxSum = a &gt; b ? a : b;\n    maxSum = maxSum &gt; c ? maxSum : c;\n    return maxSum;\n}\n\nint DivideConquer(int data[], int left, int right)\n{\n    int mid;\n    int leftMaxSum, rightMaxSum;\n    int leftBoardSum, rightBoardSum;\n    int leftMaxBoardSum, rightMaxBoardSum;\n   /* 退出条件 */\n    if (left == right) \n        return data[left];\n\n\t/* “分的过程” */\n    mid = (left + right) / 2; //找到中分点\n    \n    /* 递归求两边的最大值 */\n    leftMaxSum = DivideConquer(data, left, mid);  // 左边最大值\n    rightMaxSum = DivideConquer(data, mid + 1, right);  // 右边最大值\n    \n\t /* 跨越边界的最大值 := leftMaxBoardSum + rightMaxBoardSum  */\n     leftMaxBoardSum = data[mid];\n     leftBoardSum = 0;\n     for (int i = mid; i &gt;= left; i--) {\n        leftBoardSum += data[i];\n        if (leftBoardSum &gt; leftMaxBoardSum)\n            leftMaxBoardSum = leftBoardSum;\n     }   //左边界扫描\n\n    rightMaxBoardSum = data[mid + 1];\n    rightBoardSum = 0;\n    for(int i = mid + 1; i &lt;= right; i++) {\n        rightBoardSum += data[i];\n        if(rightBoardSum &gt; rightMaxBoardSum)\n            rightMaxBoardSum = rightBoardSum;\n    }  //有边界扫描 \n    \n\t/* 治的过程，最大值为左边的最大值、右边最大值，跨越边界最大值之中的最大值 */\n    return MaxofThreeNum(leftMaxSum, rightMaxSum, leftMaxBoardSum + rightMaxBoardSum);\n}\n\nint MaxSubSeqSum(int data[], int num)  // 改变函数接口\n{\n    return DivideConquer(data, 0, num - 1);\n}\n\nint main()\n{\n    int num;\n    int data[MAXN] = {0};\n\n    scanf(\"%d\",&amp;num);\n\n    for (int i = 0; i &lt; num; i++) {\n        scanf(\"%d\", &amp;data[i]);\n    }\n\n    printf(\"%d\", MaxSubSeqSum(data, num));\n    return 0;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"5-在线处理\"><a href=\"#5-在线处理\" class=\"headerlink\" title=\"5.在线处理\"></a>5.在线处理</h4><p><strong>①思想</strong></p>\n<blockquote>\n<p>一开始<strong>子列左端为A[0]<strong>，逐个</strong>向右累加</strong>，若当前子列和<strong>为负数则舍去</strong>，因为一个<strong>负的子列和部分只会使得子列和变小</strong>,算法时间复杂度为<code>O(n)</code></p>\n</blockquote>\n<p><strong>②代码实现</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">int MaxSubseqSum4(int A[],int N)\n{\n  int ThisSum,MaxSum = 0;\n  int i;\n  for (i=0;i&lt;=N;i++)/*i是子列左端*/\n  {\n    ThisSum=ThisSum+A[i];\n    if(ThisSum&gt;=MaxSum)\n    MaxSum=ThisSum;\n    else\n    ThisSum=0;\n  }\n\n  return MaxSum;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"数据结构与算法（一）\"><a href=\"#数据结构与算法（一）\" class=\"headerlink\" title=\"数据结构与算法（一）\"></a>数据结构与算法（一）</h1><h2 id=\"数据结构与算法基础\"><a href=\"#数据结构与算法基础\" class=\"headerlink\" title=\"数据结构与算法基础\"></a>数据结构与算法基础</h2><h3 id=\"1-基本概念\"><a href=\"#1-基本概念\" class=\"headerlink\" title=\"1.基本概念\"></a>1.基本概念</h3><h4 id=\"1-1引言\"><a href=\"#1-1引言\" class=\"headerlink\" title=\"1.1引言\"></a>1.1引言</h4><div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 同样的问题，不同的方法效率不同，对于计算机的处理方法，主要有以下三个影响因素</div>\n<p><strong>①数据的组织方式</strong></p>\n<blockquote>\n<p>如<strong>书架</strong>上<strong>书</strong>可以<strong>随便放</strong>，也可以<strong>分类放</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 前者方便存放，后者方便查找</div>\n<p><strong>②空间利用率</strong></p>\n<blockquote>\n<p>如<strong>循环</strong>和<strong>递归</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 递归需要保存结束前所有函数调用的上下文</div>\n<p><strong>③算法的巧妙程度</strong></p>\n<blockquote>\n<p>详情见<strong>实例</strong></p>\n</blockquote>\n<h4 id=\"1-2算法\"><a href=\"#1-2算法\" class=\"headerlink\" title=\"1.2算法\"></a>1.2算法</h4><p><strong>①定义</strong></p>\n<blockquote>\n<p>一个<strong>有限指令集</strong>，在接受一些<strong>输入</strong>后（<strong>也可能不接受输入</strong>），经过<strong>有限的步骤</strong>后，得到一定的<strong>输出</strong>，且能<strong>处理不合理输入</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 每条指令不能有歧义，且在计算机处理范围内，不依赖任何具体实现手段</div>\n<p><strong>②指标</strong></p>\n<blockquote>\n<p><strong>空间复杂度</strong><code>S(n)</code>：执行时<strong>占用存储单元的长度</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>时间复杂度</strong><code>T(n)</code>：执行时<strong>耗费的时长</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> n为问题的规模，即需要处理的数据的个数</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 通常时间复杂度和空间复杂度并不能兼得，需要做出取舍</div>\n<h4 id=\"1-3数据结构\"><a href=\"#1-3数据结构\" class=\"headerlink\" title=\"1.3数据结构\"></a>1.3数据结构</h4><p><strong>①定义</strong></p>\n<blockquote>\n<p><strong>数据对象</strong>在计算机中的<strong>组织方式</strong></p>\n</blockquote>\n<p><strong>②逻辑结构</strong></p>\n<blockquote>\n<p><strong>对象之间</strong>的相互关系</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 主要有集合结构、线性结构、树形结构和图结构</div>\n\n<p><strong>③物理存储结构</strong></p>\n<blockquote>\n<p>在<strong>计算机中的存储方式</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 主要有连续存储和链式存储（地址不连续）</div>\n\n<h4 id=\"1-4递归\"><a href=\"#1-4递归\" class=\"headerlink\" title=\"1.4递归\"></a>1.4递归</h4><p><strong>①定义</strong></p>\n<blockquote>\n<p><strong>递</strong>：程序不断<strong>调用自身</strong>，并设置一个<strong>终止条件</strong>，<strong>每次调用</strong>都更加<strong>靠近这个终止条件</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 通常终止条件是传入的参数为某一值，然后每次调用都靠近这个值</div>\n<blockquote>\n<p><strong>归</strong>：当<strong>触发终止条件</strong>，便从<strong>根据终止条件对应的值</strong>开始<strong>逐层返回</strong>，计算最终结果</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 终止条件对应的结果是一个确切的结果，否则无法完成递归</div>\n<p><strong>②举例</strong></p>\n<blockquote>\n<p>计算从<code>1</code>到<code>n</code>的<strong>总和</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 递归的本质就是将问题分解为更小的子问题，天然适合处理分分治问题</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 每次调用函数，都需要向栈中压入返回地址、参数等信息，直到返回才被释放，且由一定时间开销。所以递归的复杂度都较高</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">int sum(int n)\n&#123;\n  &#x2F;&#x2F;终止条件\n  if (n&#x3D;&#x3D;1)\n      return 1;\n  &#x2F;&#x2F;递\n  int jmp &#x3D; sum(n-1);\n  &#x2F;&#x2F;归\n  return n+jmp;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"/image/SF_0.png\" alt=\"递归过程\"></p>\n<h3 id=\"2-复杂度分析\"><a href=\"#2-复杂度分析\" class=\"headerlink\" title=\"2.复杂度分析\"></a>2.复杂度分析</h3><h4 id=\"2-1引言\"><a href=\"#2-1引言\" class=\"headerlink\" title=\"2.1引言\"></a>2.1引言</h4><p><strong>①复杂度估算</strong></p>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 复杂度计算的是其随问题规模增大时的变化趋势，即T(n)/S(n)的函数渐进上界</div>\n<blockquote>\n<p><strong>函数渐进上界</strong>：对于<strong>函数</strong><code>T(n)</code>，若存在<strong>正实数</strong><code>c</code>和<strong>实数</strong><code>n0</code>，当<code>n &gt; n0</code>时，均有<code>T(n) &lt;= cf(n)</code>，则<code>f(n)</code>为其<strong>渐进上界</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 由定义可知，渐进上界通常为函数的最高阶</div>\n<p><strong>②算法相关空间</strong></p>\n<blockquote>\n<p><strong>输入空间</strong>：存储算法的<strong>输入数据</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>暂存空间</strong>：存储算法在<strong>运行过程</strong>中的<strong>变量</strong>、<strong>函数上下文</strong>等数据</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 还可分为存储变量等数据的数据空间，保存调用函数上下文的的栈帧数据，以及保存编译后程序指令的指令空间</div>\n<blockquote>\n<p><strong>输出空间</strong>：存储算法的<strong>输出数据</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;* 调用的函数 *&#x2F;\nint func() \n&#123;\n    &#x2F;&#x2F; 执行某些操作...\n    return 0;\n&#125;\n\nint algorithm(int n) &#x2F;&#x2F; 输入空间\n&#123; \n    const int a &#x3D; 0;   &#x2F;&#x2F; 数据空间（常量）\n    int b &#x3D; 0;         &#x2F;&#x2F; 数据空间（变量）\n    int c &#x3D; func();    &#x2F;&#x2F; 栈帧空间（调用函数）\n    return a + b + c;  &#x2F;&#x2F; 输出空间\n&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"2-2时间复杂度\"><a href=\"#2-2时间复杂度\" class=\"headerlink\" title=\"2.2时间复杂度\"></a>2.2时间复杂度</h4><p><strong>①估算思路</strong></p>\n<blockquote>\n<p>所有<strong>与n无关</strong>的部分看作<code>1</code>，因为其最后为<code>T(n)</code>的<strong>常数部分</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>与n有关</strong>的部分，将其分为<strong>多个独立部分</strong>，<strong>分别计算</strong>其复杂度，取其中<strong>最大的</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 每种部分的复杂度不尽相同，需要自己分析，本质上是算其中基本语句的执行次数，如单层循环的复杂度为n</div>\n<blockquote>\n<p>如果有<strong>嵌套类型</strong>，先从<strong>最里层嵌套</strong>计算，<strong>每一层嵌套的复杂度相乘</strong>得到<strong>嵌套部分的复杂度</strong></p>\n</blockquote>\n<p><strong>②常见类型</strong></p>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 以最差时间复杂度为例</div>\n<blockquote>\n<p><code>O(n^2)</code>：<strong>两层嵌套循环</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">int quadratic(int n)\n&#123;\n    int count &#x3D; 0;\n    &#x2F;&#x2F; 循环次数与数组长度成平方关系\n    for (int i &#x3D; 0; i &lt; n; i++) &#123;\n        for (int j &#x3D; 0; j &lt; n; j++) &#123;\n            count++;\n        &#125;\n    &#125;\n    return count;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><code>O(2^n)</code>：以下<strong>递归次数为n</strong>，每次递归都将<strong>一分为二</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;* 指数阶（递归实现） *&#x2F;\nint expRecur(int n)\n&#123;\n    if (n &#x3D;&#x3D; 1)\n        return 1;\n    return expRecur(n - 1) + expRecur(n - 1) + 1;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><code>O(logn)</code>：以下只需要<strong>迭代logn次</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">int logarithmic(float n)\n&#123;\n    int count &#x3D; 0;\n    while (n &gt; 1) &#123;\n        n &#x3D; n &#x2F; 2;\n        count++;\n    &#125;\n    return count;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><code>O(n!)</code>：以下<strong>循环n次</strong>，<strong>第一次</strong>循环<strong>分裂出n个</strong>，<strong>第二次</strong>循环<strong>每个都分裂出n-1个</strong>，依次类推</p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;* 阶乘阶（递归实现） *&#x2F;\nint factorialRecur(int n) \n&#123;\n    if (n &#x3D;&#x3D; 0)\n        return 1;\n    int count &#x3D; 0;\n    for (int i &#x3D; 0; i &lt; n; i++) &#123;\n        count +&#x3D; factorialRecur(n - 1);\n    &#125;\n    return count;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"2-3空间复杂度\"><a href=\"#2-3空间复杂度\" class=\"headerlink\" title=\"2.3空间复杂度\"></a>2.3空间复杂度</h4><p><strong>①估算思路</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 通常只关心最差空间复杂度，其中最差指最差输入数据和峰值内存占用</div>\n<blockquote>\n<p>分别计算<strong>各个空间</strong>的<strong>空间复杂度</strong>，取<strong>最大值</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 空间复杂度的计算主要计算占用的内存数量</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 其中递归函数需要注意栈帧空间的大小</div>\n<blockquote>\n<p>如下，<strong>迭代</strong>过程<strong>每次调用</strong>完就<strong>释放了栈帧空间</strong>，空间复杂度为<code>O(1)</code>，<strong>递归</strong>过程每次调用<strong>没有释放栈帧空间</strong>，故空间复杂度为<code>O(n)</code></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">int func() &#123;\n    &#x2F;&#x2F; 执行某些操作\n    return 0;\n&#125;\n&#x2F;* 循环 O(1) *&#x2F;\nvoid loop(int n) &#123;\n    for (int i &#x3D; 0; i &lt; n; i++) &#123;\n        func();\n    &#125;\n&#125;\n&#x2F;* 递归 O(n) *&#x2F;\nvoid recur(int n) &#123;\n    if (n &#x3D;&#x3D; 1) return;\n    return recur(n - 1);\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>②常见类型</strong></p>\n<blockquote>\n<p><code>O(n^2)</code>：构建<code>n*n</code>的<strong>矩阵</strong></p>\n</blockquote>\n<blockquote>\n<p><code>O(2^n)</code>：构建<code>n</code>层的<strong>二叉树</strong></p>\n</blockquote>\n<hr>\n<h3 id=\"3-经典算法实例\"><a href=\"#3-经典算法实例\" class=\"headerlink\" title=\"3.经典算法实例\"></a>3.经典算法实例</h3><blockquote>\n<p><strong>最大子列和问题</strong>：给定<strong>N个整数</strong>的序列，求出其中<strong>连续n个子列和</strong>的<strong>最大值</strong>，其中<code>n≤N</code></p>\n</blockquote>\n<h4 id=\"3-1-暴力穷举法\"><a href=\"#3-1-暴力穷举法\" class=\"headerlink\" title=\"3.1.暴力穷举法\"></a>3.1.暴力穷举法</h4><p><strong>①基本思想</strong></p>\n<blockquote>\n<p>求出<strong>所有连续子列和</strong>，从中找出<strong>最大</strong>的子列和，<strong>时间复杂度</strong>为<code>O(n^3)</code></p>\n</blockquote>\n<p><strong>②代码实现</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">int MaxSubseqSum1(int A[],int N)\n&#123;\n  int ThisSum,MaxSum &#x3D; 0;\n  int i,j,k;\n  for (i&#x3D;0;i&lt;&#x3D;N;i++) #确定起点\n  &#123;\n    for(j&#x3D;i;j&lt;&#x3D;N;j++) #确定终点\n    &#123;\n      ThisSum&#x3D;0;\n      for(k&#x3D;i;k&lt;&#x3D;j,k++) #将第i到第j个叠加到一起\n      &#123;\n        ThisSum&#x3D;ThisSum+A[k];\n      &#125;\n      if(ThisSum&gt;MaxSum)\n      MaxSum&#x3D;ThisSum;\n    &#125;\n  &#125;\n\n  return MaxSum;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"3-2改进的暴力穷举法\"><a href=\"#3-2改进的暴力穷举法\" class=\"headerlink\" title=\"3.2改进的暴力穷举法\"></a>3.2改进的暴力穷举法</h4><p><strong>①思想</strong></p>\n<blockquote>\n<p>基于上述算法做出了一定<strong>改进</strong>。计算子列和是在<strong>已经计算完成</strong>的子列和<strong>加上最新项</strong>更新获得，可以<strong>省去k循环</strong>，<strong>时间复杂度</strong>为<code>O(n^2)</code></p>\n</blockquote>\n<p><strong>②代码实现</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">int MaxSubseqSum2(int A[],int N)\n&#123;\n  int ThisSum,MaxSum &#x3D; 0;\n  int i,j;\n  for (i&#x3D;0;i&lt;&#x3D;N;i++)&#x2F;*i是子列左端*&#x2F;\n  &#123;\n    ThisSum&#x3D;0;\n    for(j&#x3D;i;j&lt;&#x3D;N;j++)&#x2F;*j是子列右端*&#x2F;\n    &#123;\n      ThisSum&#x3D;ThisSum+A[j];&#x2F;*对于相同的i和不同的j，只需要在j-1的基础上累加最新项即可*&#x2F;\n      if(ThisSum&gt;MaxSum)\n      MaxSum&#x3D;ThisSum;\n    &#125;\n  &#125;\n\n  return MaxSum;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"3-3分而治之\"><a href=\"#3-3分而治之\" class=\"headerlink\" title=\"3.3分而治之\"></a>3.3分而治之</h4><p><strong>①思想</strong>：？<br><strong>②代码实现</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n#define MAXN 100000\n\nint MaxofThreeNum (int a, int b, int c)  \\\\ 求三个数中得最大值\n&#123;   int maxSum;\n    maxSum &#x3D; a &gt; b ? a : b;\n    maxSum &#x3D; maxSum &gt; c ? maxSum : c;\n    return maxSum;\n&#125;\n\nint DivideConquer(int data[], int left, int right)\n&#123;\n    int mid;\n    int leftMaxSum, rightMaxSum;\n    int leftBoardSum, rightBoardSum;\n    int leftMaxBoardSum, rightMaxBoardSum;\n   &#x2F;* 退出条件 *&#x2F;\n    if (left &#x3D;&#x3D; right) \n        return data[left];\n\n\t&#x2F;* “分的过程” *&#x2F;\n    mid &#x3D; (left + right) &#x2F; 2; &#x2F;&#x2F;找到中分点\n    \n    &#x2F;* 递归求两边的最大值 *&#x2F;\n    leftMaxSum &#x3D; DivideConquer(data, left, mid);  &#x2F;&#x2F; 左边最大值\n    rightMaxSum &#x3D; DivideConquer(data, mid + 1, right);  &#x2F;&#x2F; 右边最大值\n    \n\t &#x2F;* 跨越边界的最大值 :&#x3D; leftMaxBoardSum + rightMaxBoardSum  *&#x2F;\n     leftMaxBoardSum &#x3D; data[mid];\n     leftBoardSum &#x3D; 0;\n     for (int i &#x3D; mid; i &gt;&#x3D; left; i--) &#123;\n        leftBoardSum +&#x3D; data[i];\n        if (leftBoardSum &gt; leftMaxBoardSum)\n            leftMaxBoardSum &#x3D; leftBoardSum;\n     &#125;   &#x2F;&#x2F;左边界扫描\n\n    rightMaxBoardSum &#x3D; data[mid + 1];\n    rightBoardSum &#x3D; 0;\n    for(int i &#x3D; mid + 1; i &lt;&#x3D; right; i++) &#123;\n        rightBoardSum +&#x3D; data[i];\n        if(rightBoardSum &gt; rightMaxBoardSum)\n            rightMaxBoardSum &#x3D; rightBoardSum;\n    &#125;  &#x2F;&#x2F;有边界扫描 \n    \n\t&#x2F;* 治的过程，最大值为左边的最大值、右边最大值，跨越边界最大值之中的最大值 *&#x2F;\n    return MaxofThreeNum(leftMaxSum, rightMaxSum, leftMaxBoardSum + rightMaxBoardSum);\n&#125;\n\nint MaxSubSeqSum(int data[], int num)  &#x2F;&#x2F; 改变函数接口\n&#123;\n    return DivideConquer(data, 0, num - 1);\n&#125;\n\nint main()\n&#123;\n    int num;\n    int data[MAXN] &#x3D; &#123;0&#125;;\n\n    scanf(&quot;%d&quot;,&amp;num);\n\n    for (int i &#x3D; 0; i &lt; num; i++) &#123;\n        scanf(&quot;%d&quot;, &amp;data[i]);\n    &#125;\n\n    printf(&quot;%d&quot;, MaxSubSeqSum(data, num));\n    return 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"5-在线处理\"><a href=\"#5-在线处理\" class=\"headerlink\" title=\"5.在线处理\"></a>5.在线处理</h4><p><strong>①思想</strong></p>\n<blockquote>\n<p>一开始<strong>子列左端为A[0]<strong>，逐个</strong>向右累加</strong>，若当前子列和<strong>为负数则舍去</strong>，因为一个<strong>负的子列和部分只会使得子列和变小</strong>,算法时间复杂度为<code>O(n)</code></p>\n</blockquote>\n<p><strong>②代码实现</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">int MaxSubseqSum4(int A[],int N)\n&#123;\n  int ThisSum,MaxSum &#x3D; 0;\n  int i;\n  for (i&#x3D;0;i&lt;&#x3D;N;i++)&#x2F;*i是子列左端*&#x2F;\n  &#123;\n    ThisSum&#x3D;ThisSum+A[i];\n    if(ThisSum&gt;&#x3D;MaxSum)\n    MaxSum&#x3D;ThisSum;\n    else\n    ThisSum&#x3D;0;\n  &#125;\n\n  return MaxSum;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n"},{"title":"数据结构与算法（三）","seo_title":"seo名称","toc":true,"indent":true,"top":false,"comments":1,"archive":true,"cover":false,"mathjax":false,"pin":false,"top_meta":false,"bottom_meta":false,"sidebar":["toc"],"keywords":"文章关键词","updated":"2023-11-07T14:10:58.029Z","img":"/medias/featureimages/10.webp","date":"2023-11-07T14:10:58.014Z","summary":"哈希表","_content":"# 数据结构与算法（三）\n## 哈希表\n### 1.引言\n#### 1.1定义\n>建立**键**`key`与**值**`value`的**映射**，根据**映射关系**快速**根据键找到值**\n{%list%}\n哈希表的增删查改操作的时间复杂度都是O(1)\n{%endlist%}\n{%right%}\n哈希表本质上是利用空间换时间\n{%endright%}\n#### 1.2哈希算法\n**①定义**\n>即**键与值的映射关系**，构造**散列函数**`h`，通过`h(key)`找到**对应值的位置**\n{%right%}\n本质上是将一个较大的输入空间映射到一个较小的输出空间\n{%endright%}\n**②构造**\n>将`key`转化为**哈希值**，如将`key`的**每个字符的ASCALL码相加**\n\n>对**哈希值**进行**二次操作**，如**对容器大小取模**，从而**缩小范围**\n{%list%}\n哈希算法的构造准则就是计算简单和减少冲突，有专业的哈希算法，如SHA系列，一些编程语言也有内置哈希算法\n{%endlist%}\n{%right%}\n使用大质数作为模数时，可以最大化地保证哈希值的均匀分布，因为质数不会与其他数字存在公约数\n{%endright%}\n{%warning%}\n只有不可变对象是可哈希的\n{%endwarning%}\n***\n### 2.冲突处理\n{%warning%}\n通常情况下，哈希表的输入空间远远大于输出空间，冲突无法避免，需要一定的方法处理冲突\n{%endwarning%}\n#### 2.1开放定址\n**①定义**\n>若发生了**第`i`次冲突**，试探性地将**其地址增加**`di`，即`hi(key)=h(key)+di`\n{%list%}\n这里的冲突不是总计的冲突，而是当前元素发生冲突的次数，即对于每个元素，i都是从0开始计数\n{%endlist%}\n{%right%}\n查找元素时，倘若不匹配，试探性地假设其发生冲突，使用哈希函数向后遍历，直到找到该元素或者遇到空元素\n{%endright%}\n{%warning%}\n不能在开放寻址哈希表中直接删除元素，若删除了某个元素，与其发生冲突且存储时间晚于该元素的元素无法被查询\n{%endwarning%}\n>通常采用**懒删除**，即**不直接删除该元素**，使用**标记**表示该元素被删除\n{%right%}\n查找元素时，可以记录遇到的首个标记元素，将查找到的元素与其交换位置，从而释放空间\n{%endright%}\n\n\n**②分类**\n>**线性探测法**：`di=i`\n{%warning%}\n线性探测会产生聚集现象，即冲突数据集中在某一块，从而导致那里更容易发生冲突\n{%endwarning%}\n\n>**平方探测法**：`di`序列为`1、-1、4、-4....i^2、-i^2`\n{%list%}\n只要散列表的长度是某个4k+1形式的素数时，平方探测法可以探查到整个散列表空间\n{%endlist%}\n>**双散列探测法**：`di=i*h2(key)`，其中**h2为另一个非0散列函数**\n{%list%}\nh2应该保证尽量多的哈希存储单元能被探测到，如h2 = p-h1\n{%endlist%}\n\n\n#### 2.2分离链接\n>**原始哈希表**中，**每个地址**对应的只是**一个值**，**分离链接法**采用的是**链表**，先**找到对应链表**再**遍历该链表**\n{%list%}\n分离链接的本质是扩容，此处不采用数组，因为数组一开始就要有一定的长度，会造成空间浪费\n{%endlist%}\n{%right%}\n当链表很长时，可以将其转化为红黑树或者AVL树，优化查找时间\n{%endright%}\n***\n### 3.哈希表的实现\n{%list%}\n因为哈希表的特性就是快速查找，所以其主体采用结构数组实现\n{%endlist%}\n#### 3.1分离链接哈希表\n**①结构代码**\n```\n/* 链表节点 */\ntypedef struct Node {\n    Pair *pair;\n    struct Node *next;\n} Node;\n\n/* 分离链接哈希表 */\ntypedef struct {\n    int size;         // 键值对数量\n    int capacity;     // 哈希表容量\n    double loadThres; // 触发扩容的负载因子阈值\n    int extendRatio;  // 扩容倍数\n    Node **buckets;   // 桶数组\n} HashMapChaining;\n```\n**②构造和析构**\n```\n/* 构造函数 */\nHashMapChaining *newHashMapChaining() {\n    HashMapChaining *hashMap = (HashMapChaining *)malloc(sizeof(HashMapChaining));\n    hashMap->size = 0;\n    hashMap->capacity = 4;\n    hashMap->loadThres = 2.0 / 3.0;\n    hashMap->extendRatio = 2;\n    hashMap->buckets = (Node **)malloc(hashMap->capacity * sizeof(Node *));\n    for (int i = 0; i < hashMap->capacity; i++) {\n        hashMap->buckets[i] = NULL;\n    }\n    return hashMap;\n}\n\n/* 析构函数 */\nvoid delHashMapChaining(HashMapChaining *hashMap) {\n    for (int i = 0; i < hashMap->capacity; i++) {\n        Node *cur = hashMap->buckets[i];\n        while (cur) {\n            Node *tmp = cur;\n            cur = cur->next;\n            free(tmp->pair);\n            free(tmp);\n        }\n    }\n    free(hashMap->buckets);\n    free(hashMap);\n}\n```\n**③增删查改**\n```\n/* 查询操作 */\nchar *get(HashMapChaining *hashMap, int key) {\n    int index = hashFunc(hashMap, key);\n    // 遍历桶，若找到 key 则返回对应 val\n    Node *cur = hashMap->buckets[index];\n    while (cur) {\n        if (cur->pair->key == key) {\n            return cur->pair->val;\n        }\n        cur = cur->next;\n    }\n    return \"\"; // 若未找到 key 则返回空字符串\n}\n\n/* 添加操作 */\nvoid put(HashMapChaining *hashMap, int key, const char *val) {\n    // 当负载因子超过阈值时，执行扩容\n    if (loadFactor(hashMap) > hashMap->loadThres) {\n        extend(hashMap);\n    }\n    int index = hashFunc(hashMap, key);\n    // 遍历桶，若遇到指定 key ，则更新对应 val 并返回\n    Node *cur = hashMap->buckets[index];\n    while (cur) {\n        if (cur->pair->key == key) {\n            strcpy(cur->pair->val, val); // 若遇到指定 key ，则更新对应 val 并返回\n            return;\n        }\n        cur = cur->next;\n    }\n    // 若无该 key ，则将键值对添加至尾部\n    Pair *newPair = (Pair *)malloc(sizeof(Pair));\n    newPair->key = key;\n    strcpy(newPair->val, val);\n    Node *newNode = (Node *)malloc(sizeof(Node));\n    newNode->pair = newPair;\n    newNode->next = hashMap->buckets[index];\n    hashMap->buckets[index] = newNode;\n    hashMap->size++;\n}\n\n/* 扩容哈希表 */\nvoid extend(HashMapChaining *hashMap) {\n    // 暂存原哈希表\n    int oldCapacity = hashMap->capacity;\n    Node **oldBuckets = hashMap->buckets;\n    // 初始化扩容后的新哈希表\n    hashMap->capacity *= hashMap->extendRatio;\n    hashMap->buckets = (Node **)malloc(hashMap->capacity * sizeof(Node *));\n    for (int i = 0; i < hashMap->capacity; i++) {\n        hashMap->buckets[i] = NULL;\n    }\n    hashMap->size = 0;\n    // 将键值对从原哈希表搬运至新哈希表\n    for (int i = 0; i < oldCapacity; i++) {\n        Node *cur = oldBuckets[i];\n        while (cur) {\n            put(hashMap, cur->pair->key, cur->pair->val);\n            Node *temp = cur;\n            cur = cur->next;\n            // 释放内存\n            free(temp->pair);\n            free(temp);\n        }\n    }\n\n    free(oldBuckets);\n}\n\n/* 删除操作 */\nvoid removeItem(HashMapChaining *hashMap, int key) {\n    int index = hashFunc(hashMap, key);\n    Node *cur = hashMap->buckets[index];\n    Node *pre = NULL;\n    while (cur) {\n        if (cur->pair->key == key) {\n            // 从中删除键值对\n            if (pre) {\n                pre->next = cur->next;\n            } else {\n                hashMap->buckets[index] = cur->next;\n            }\n            // 释放内存\n            free(cur->pair);\n            free(cur);\n            hashMap->size--;\n            return;\n        }\n        pre = cur;\n        cur = cur->next;\n    }\n}\n\n```\n**④其他**\n```\n/* 哈希函数 */\nint hashFunc(HashMapChaining *hashMap, int key) {\n    return key % hashMap->capacity;\n}\n\n/* 负载因子 */\ndouble loadFactor(HashMapChaining *hashMap) {\n    return (double)hashMap->size / (double)hashMap->capacity;\n}\n/* 打印哈希表 */\nvoid print(HashMapChaining *hashMap) {\n    for (int i = 0; i < hashMap->capacity; i++) {\n        Node *cur = hashMap->buckets[i];\n        printf(\"[\");\n        while (cur) {\n            printf(\"%d -> %s, \", cur->pair->key, cur->pair->val);\n            cur = cur->next;\n        }\n        printf(\"]\\n\");\n    }\n}\n```\n#### 3.2开放寻址哈希表\n**①结构**\n```\n/* 开放寻址哈希表 */\ntypedef struct {\n    int size;         // 键值对数量\n    int capacity;     // 哈希表容量\n    double loadThres; // 触发扩容的负载因子阈值\n    int extendRatio;  // 扩容倍数\n    Pair **buckets;   // 桶数组\n    Pair *TOMBSTONE;  // 删除标记\n} HashMapOpenAddressing;\n```\n**②构造与析构**\n```\n/* 构造函数 */\nHashMapOpenAddressing *newHashMapOpenAddressing() {\n    HashMapOpenAddressing *hashMap = (HashMapOpenAddressing *)malloc(sizeof(HashMapOpenAddressing));\n    hashMap->size = 0;\n    hashMap->capacity = 4;\n    hashMap->loadThres = 2.0 / 3.0;\n    hashMap->extendRatio = 2;\n    hashMap->buckets = (Pair **)malloc(sizeof(Pair *) * hashMap->capacity);\n    hashMap->TOMBSTONE = (Pair *)malloc(sizeof(Pair));\n    hashMap->TOMBSTONE->key = -1;\n    hashMap->TOMBSTONE->val = \"-1\";\n\n    return hashMap;\n}\n\n/* 析构函数 */\nvoid delHashMapOpenAddressing(HashMapOpenAddressing *hashMap) {\n    for (int i = 0; i < hashMap->capacity; i++) {\n        Pair *pair = hashMap->buckets[i];\n        if (pair != NULL && pair != hashMap->TOMBSTONE) {\n            free(pair->val);\n            free(pair);\n        }\n    }\n}\n```\n**③增删查改**\n```\n/* 搜索 key 对应的桶索引 */\nint findBucket(HashMapOpenAddressing *hashMap, int key) {\n    int index = hashFunc(hashMap, key);\n    int firstTombstone = -1;\n    // 线性探测，当遇到空桶时跳出\n    while (hashMap->buckets[index] != NULL) {\n        // 若遇到 key ，返回对应桶索引\n        if (hashMap->buckets[index]->key == key) {\n            // 若之前遇到了删除标记，则将键值对移动至该索引\n            if (firstTombstone != -1) {\n                hashMap->buckets[firstTombstone] = hashMap->buckets[index];\n                hashMap->buckets[index] = hashMap->TOMBSTONE;\n                return firstTombstone; // 返回移动后的桶索引\n            }\n            return index; // 返回桶索引\n        }\n        // 记录遇到的首个删除标记\n        if (firstTombstone == -1 && hashMap->buckets[index] == hashMap->TOMBSTONE) {\n            firstTombstone = index;\n        }\n        // 计算桶索引，越过尾部返回头部\n        index = (index + 1) % hashMap->capacity;\n    }\n    // 若 key 不存在，则返回添加点的索引\n    return firstTombstone == -1 ? index : firstTombstone;\n}\n\n/* 查询操作 */\nchar *get(HashMapOpenAddressing *hashMap, int key) {\n    // 搜索 key 对应的桶索引\n    int index = findBucket(hashMap, key);\n    // 若找到键值对，则返回对应 val\n    if (hashMap->buckets[index] != NULL && hashMap->buckets[index] != hashMap->TOMBSTONE) {\n        return hashMap->buckets[index]->val;\n    }\n    // 若键值对不存在，则返回空字符串\n    return \"\";\n}\n\n/* 添加操作 */\nvoid put(HashMapOpenAddressing *hashMap, int key, char *val) {\n    // 当负载因子超过阈值时，执行扩容\n    if (loadFactor(hashMap) > hashMap->loadThres) {\n        extend(hashMap);\n    }\n    // 搜索 key 对应的桶索引\n    int index = findBucket(hashMap, key);\n    // 若找到键值对，则覆盖 val 并返回\n    if (hashMap->buckets[index] != NULL && hashMap->buckets[index] != hashMap->TOMBSTONE) {\n        free(hashMap->buckets[index]->val);\n        hashMap->buckets[index]->val = (char *)malloc(sizeof(strlen(val + 1)));\n        strcpy(hashMap->buckets[index]->val, val);\n        hashMap->buckets[index]->val[strlen(val)] = '\\0';\n        return;\n    }\n    // 若键值对不存在，则添加该键值对\n    Pair *pair = (Pair *)malloc(sizeof(Pair));\n    pair->key = key;\n    pair->val = (char *)malloc(sizeof(strlen(val + 1)));\n    strcpy(pair->val, val);\n    pair->val[strlen(val)] = '\\0';\n\n    hashMap->buckets[index] = pair;\n    hashMap->size++;\n}\n\n/* 删除操作 */\nvoid removeItem(HashMapOpenAddressing *hashMap, int key) {\n    // 搜索 key 对应的桶索引\n    int index = findBucket(hashMap, key);\n    // 若找到键值对，则用删除标记覆盖它\n    if (hashMap->buckets[index] != NULL && hashMap->buckets[index] != hashMap->TOMBSTONE) {\n        Pair *pair = hashMap->buckets[index];\n        free(pair->val);\n        free(pair);\n        hashMap->buckets[index] = hashMap->TOMBSTONE;\n        hashMap->size--;\n    }\n}\n```\n**④其他**\n```\n/* 哈希函数 */\nint hashFunc(HashMapOpenAddressing *hashMap, int key) {\n    return key % hashMap->capacity;\n}\n\n/* 负载因子 */\ndouble loadFactor(HashMapOpenAddressing *hashMap) {\n    return (double)hashMap->size / (double)hashMap->capacity;\n}\n/* 扩容哈希表 */\nvoid extend(HashMapOpenAddressing *hashMap) {\n    // 暂存原哈希表\n    Pair **bucketsTmp = hashMap->buckets;\n    int oldCapacity = hashMap->capacity;\n    // 初始化扩容后的新哈希表\n    hashMap->capacity *= hashMap->extendRatio;\n    hashMap->buckets = (Pair **)malloc(sizeof(Pair *) * hashMap->capacity);\n    hashMap->size = 0;\n    // 将键值对从原哈希表搬运至新哈希表\n    for (int i = 0; i < oldCapacity; i++) {\n        Pair *pair = bucketsTmp[i];\n        if (pair != NULL && pair != hashMap->TOMBSTONE) {\n            put(hashMap, pair->key, pair->val);\n            free(pair->val);\n            free(pair);\n        }\n    }\n    free(bucketsTmp);\n}\n\n/* 打印哈希表 */\nvoid print(HashMapOpenAddressing *hashMap) {\n    for (int i = 0; i < hashMap->capacity; i++) {\n        Pair *pair = hashMap->buckets[i];\n        if (pair == NULL) {\n            printf(\"NULL\\n\");\n        } else if (pair == hashMap->TOMBSTONE) {\n            printf(\"TOMBSTONE\\n\");\n        } else {\n            printf(\"%d -> %s\\n\", pair->key, pair->val);\n        }\n    }\n}\n```\n","source":"_posts/数据结构与算法（三）.md","raw":"---\ntitle: 数据结构与算法（三）\nseo_title: seo名称\ntoc: true\nindent: true\ntop: false\ncomments: true\narchive: true\ncover: false\nmathjax: false\npin: false\ntop_meta: false\nbottom_meta: false\nsidebar:\n  - toc\ntag:\n  - 计算机基础\n  - 数据结构与算法\n  - 《hello 算法》\ncategories: 计算机基础\nkeywords: 文章关键词\nupdated: ''\nimg: /medias/featureimages/10.webp\ndate:\nsummary: 哈希表\n---\n# 数据结构与算法（三）\n## 哈希表\n### 1.引言\n#### 1.1定义\n>建立**键**`key`与**值**`value`的**映射**，根据**映射关系**快速**根据键找到值**\n{%list%}\n哈希表的增删查改操作的时间复杂度都是O(1)\n{%endlist%}\n{%right%}\n哈希表本质上是利用空间换时间\n{%endright%}\n#### 1.2哈希算法\n**①定义**\n>即**键与值的映射关系**，构造**散列函数**`h`，通过`h(key)`找到**对应值的位置**\n{%right%}\n本质上是将一个较大的输入空间映射到一个较小的输出空间\n{%endright%}\n**②构造**\n>将`key`转化为**哈希值**，如将`key`的**每个字符的ASCALL码相加**\n\n>对**哈希值**进行**二次操作**，如**对容器大小取模**，从而**缩小范围**\n{%list%}\n哈希算法的构造准则就是计算简单和减少冲突，有专业的哈希算法，如SHA系列，一些编程语言也有内置哈希算法\n{%endlist%}\n{%right%}\n使用大质数作为模数时，可以最大化地保证哈希值的均匀分布，因为质数不会与其他数字存在公约数\n{%endright%}\n{%warning%}\n只有不可变对象是可哈希的\n{%endwarning%}\n***\n### 2.冲突处理\n{%warning%}\n通常情况下，哈希表的输入空间远远大于输出空间，冲突无法避免，需要一定的方法处理冲突\n{%endwarning%}\n#### 2.1开放定址\n**①定义**\n>若发生了**第`i`次冲突**，试探性地将**其地址增加**`di`，即`hi(key)=h(key)+di`\n{%list%}\n这里的冲突不是总计的冲突，而是当前元素发生冲突的次数，即对于每个元素，i都是从0开始计数\n{%endlist%}\n{%right%}\n查找元素时，倘若不匹配，试探性地假设其发生冲突，使用哈希函数向后遍历，直到找到该元素或者遇到空元素\n{%endright%}\n{%warning%}\n不能在开放寻址哈希表中直接删除元素，若删除了某个元素，与其发生冲突且存储时间晚于该元素的元素无法被查询\n{%endwarning%}\n>通常采用**懒删除**，即**不直接删除该元素**，使用**标记**表示该元素被删除\n{%right%}\n查找元素时，可以记录遇到的首个标记元素，将查找到的元素与其交换位置，从而释放空间\n{%endright%}\n\n\n**②分类**\n>**线性探测法**：`di=i`\n{%warning%}\n线性探测会产生聚集现象，即冲突数据集中在某一块，从而导致那里更容易发生冲突\n{%endwarning%}\n\n>**平方探测法**：`di`序列为`1、-1、4、-4....i^2、-i^2`\n{%list%}\n只要散列表的长度是某个4k+1形式的素数时，平方探测法可以探查到整个散列表空间\n{%endlist%}\n>**双散列探测法**：`di=i*h2(key)`，其中**h2为另一个非0散列函数**\n{%list%}\nh2应该保证尽量多的哈希存储单元能被探测到，如h2 = p-h1\n{%endlist%}\n\n\n#### 2.2分离链接\n>**原始哈希表**中，**每个地址**对应的只是**一个值**，**分离链接法**采用的是**链表**，先**找到对应链表**再**遍历该链表**\n{%list%}\n分离链接的本质是扩容，此处不采用数组，因为数组一开始就要有一定的长度，会造成空间浪费\n{%endlist%}\n{%right%}\n当链表很长时，可以将其转化为红黑树或者AVL树，优化查找时间\n{%endright%}\n***\n### 3.哈希表的实现\n{%list%}\n因为哈希表的特性就是快速查找，所以其主体采用结构数组实现\n{%endlist%}\n#### 3.1分离链接哈希表\n**①结构代码**\n```\n/* 链表节点 */\ntypedef struct Node {\n    Pair *pair;\n    struct Node *next;\n} Node;\n\n/* 分离链接哈希表 */\ntypedef struct {\n    int size;         // 键值对数量\n    int capacity;     // 哈希表容量\n    double loadThres; // 触发扩容的负载因子阈值\n    int extendRatio;  // 扩容倍数\n    Node **buckets;   // 桶数组\n} HashMapChaining;\n```\n**②构造和析构**\n```\n/* 构造函数 */\nHashMapChaining *newHashMapChaining() {\n    HashMapChaining *hashMap = (HashMapChaining *)malloc(sizeof(HashMapChaining));\n    hashMap->size = 0;\n    hashMap->capacity = 4;\n    hashMap->loadThres = 2.0 / 3.0;\n    hashMap->extendRatio = 2;\n    hashMap->buckets = (Node **)malloc(hashMap->capacity * sizeof(Node *));\n    for (int i = 0; i < hashMap->capacity; i++) {\n        hashMap->buckets[i] = NULL;\n    }\n    return hashMap;\n}\n\n/* 析构函数 */\nvoid delHashMapChaining(HashMapChaining *hashMap) {\n    for (int i = 0; i < hashMap->capacity; i++) {\n        Node *cur = hashMap->buckets[i];\n        while (cur) {\n            Node *tmp = cur;\n            cur = cur->next;\n            free(tmp->pair);\n            free(tmp);\n        }\n    }\n    free(hashMap->buckets);\n    free(hashMap);\n}\n```\n**③增删查改**\n```\n/* 查询操作 */\nchar *get(HashMapChaining *hashMap, int key) {\n    int index = hashFunc(hashMap, key);\n    // 遍历桶，若找到 key 则返回对应 val\n    Node *cur = hashMap->buckets[index];\n    while (cur) {\n        if (cur->pair->key == key) {\n            return cur->pair->val;\n        }\n        cur = cur->next;\n    }\n    return \"\"; // 若未找到 key 则返回空字符串\n}\n\n/* 添加操作 */\nvoid put(HashMapChaining *hashMap, int key, const char *val) {\n    // 当负载因子超过阈值时，执行扩容\n    if (loadFactor(hashMap) > hashMap->loadThres) {\n        extend(hashMap);\n    }\n    int index = hashFunc(hashMap, key);\n    // 遍历桶，若遇到指定 key ，则更新对应 val 并返回\n    Node *cur = hashMap->buckets[index];\n    while (cur) {\n        if (cur->pair->key == key) {\n            strcpy(cur->pair->val, val); // 若遇到指定 key ，则更新对应 val 并返回\n            return;\n        }\n        cur = cur->next;\n    }\n    // 若无该 key ，则将键值对添加至尾部\n    Pair *newPair = (Pair *)malloc(sizeof(Pair));\n    newPair->key = key;\n    strcpy(newPair->val, val);\n    Node *newNode = (Node *)malloc(sizeof(Node));\n    newNode->pair = newPair;\n    newNode->next = hashMap->buckets[index];\n    hashMap->buckets[index] = newNode;\n    hashMap->size++;\n}\n\n/* 扩容哈希表 */\nvoid extend(HashMapChaining *hashMap) {\n    // 暂存原哈希表\n    int oldCapacity = hashMap->capacity;\n    Node **oldBuckets = hashMap->buckets;\n    // 初始化扩容后的新哈希表\n    hashMap->capacity *= hashMap->extendRatio;\n    hashMap->buckets = (Node **)malloc(hashMap->capacity * sizeof(Node *));\n    for (int i = 0; i < hashMap->capacity; i++) {\n        hashMap->buckets[i] = NULL;\n    }\n    hashMap->size = 0;\n    // 将键值对从原哈希表搬运至新哈希表\n    for (int i = 0; i < oldCapacity; i++) {\n        Node *cur = oldBuckets[i];\n        while (cur) {\n            put(hashMap, cur->pair->key, cur->pair->val);\n            Node *temp = cur;\n            cur = cur->next;\n            // 释放内存\n            free(temp->pair);\n            free(temp);\n        }\n    }\n\n    free(oldBuckets);\n}\n\n/* 删除操作 */\nvoid removeItem(HashMapChaining *hashMap, int key) {\n    int index = hashFunc(hashMap, key);\n    Node *cur = hashMap->buckets[index];\n    Node *pre = NULL;\n    while (cur) {\n        if (cur->pair->key == key) {\n            // 从中删除键值对\n            if (pre) {\n                pre->next = cur->next;\n            } else {\n                hashMap->buckets[index] = cur->next;\n            }\n            // 释放内存\n            free(cur->pair);\n            free(cur);\n            hashMap->size--;\n            return;\n        }\n        pre = cur;\n        cur = cur->next;\n    }\n}\n\n```\n**④其他**\n```\n/* 哈希函数 */\nint hashFunc(HashMapChaining *hashMap, int key) {\n    return key % hashMap->capacity;\n}\n\n/* 负载因子 */\ndouble loadFactor(HashMapChaining *hashMap) {\n    return (double)hashMap->size / (double)hashMap->capacity;\n}\n/* 打印哈希表 */\nvoid print(HashMapChaining *hashMap) {\n    for (int i = 0; i < hashMap->capacity; i++) {\n        Node *cur = hashMap->buckets[i];\n        printf(\"[\");\n        while (cur) {\n            printf(\"%d -> %s, \", cur->pair->key, cur->pair->val);\n            cur = cur->next;\n        }\n        printf(\"]\\n\");\n    }\n}\n```\n#### 3.2开放寻址哈希表\n**①结构**\n```\n/* 开放寻址哈希表 */\ntypedef struct {\n    int size;         // 键值对数量\n    int capacity;     // 哈希表容量\n    double loadThres; // 触发扩容的负载因子阈值\n    int extendRatio;  // 扩容倍数\n    Pair **buckets;   // 桶数组\n    Pair *TOMBSTONE;  // 删除标记\n} HashMapOpenAddressing;\n```\n**②构造与析构**\n```\n/* 构造函数 */\nHashMapOpenAddressing *newHashMapOpenAddressing() {\n    HashMapOpenAddressing *hashMap = (HashMapOpenAddressing *)malloc(sizeof(HashMapOpenAddressing));\n    hashMap->size = 0;\n    hashMap->capacity = 4;\n    hashMap->loadThres = 2.0 / 3.0;\n    hashMap->extendRatio = 2;\n    hashMap->buckets = (Pair **)malloc(sizeof(Pair *) * hashMap->capacity);\n    hashMap->TOMBSTONE = (Pair *)malloc(sizeof(Pair));\n    hashMap->TOMBSTONE->key = -1;\n    hashMap->TOMBSTONE->val = \"-1\";\n\n    return hashMap;\n}\n\n/* 析构函数 */\nvoid delHashMapOpenAddressing(HashMapOpenAddressing *hashMap) {\n    for (int i = 0; i < hashMap->capacity; i++) {\n        Pair *pair = hashMap->buckets[i];\n        if (pair != NULL && pair != hashMap->TOMBSTONE) {\n            free(pair->val);\n            free(pair);\n        }\n    }\n}\n```\n**③增删查改**\n```\n/* 搜索 key 对应的桶索引 */\nint findBucket(HashMapOpenAddressing *hashMap, int key) {\n    int index = hashFunc(hashMap, key);\n    int firstTombstone = -1;\n    // 线性探测，当遇到空桶时跳出\n    while (hashMap->buckets[index] != NULL) {\n        // 若遇到 key ，返回对应桶索引\n        if (hashMap->buckets[index]->key == key) {\n            // 若之前遇到了删除标记，则将键值对移动至该索引\n            if (firstTombstone != -1) {\n                hashMap->buckets[firstTombstone] = hashMap->buckets[index];\n                hashMap->buckets[index] = hashMap->TOMBSTONE;\n                return firstTombstone; // 返回移动后的桶索引\n            }\n            return index; // 返回桶索引\n        }\n        // 记录遇到的首个删除标记\n        if (firstTombstone == -1 && hashMap->buckets[index] == hashMap->TOMBSTONE) {\n            firstTombstone = index;\n        }\n        // 计算桶索引，越过尾部返回头部\n        index = (index + 1) % hashMap->capacity;\n    }\n    // 若 key 不存在，则返回添加点的索引\n    return firstTombstone == -1 ? index : firstTombstone;\n}\n\n/* 查询操作 */\nchar *get(HashMapOpenAddressing *hashMap, int key) {\n    // 搜索 key 对应的桶索引\n    int index = findBucket(hashMap, key);\n    // 若找到键值对，则返回对应 val\n    if (hashMap->buckets[index] != NULL && hashMap->buckets[index] != hashMap->TOMBSTONE) {\n        return hashMap->buckets[index]->val;\n    }\n    // 若键值对不存在，则返回空字符串\n    return \"\";\n}\n\n/* 添加操作 */\nvoid put(HashMapOpenAddressing *hashMap, int key, char *val) {\n    // 当负载因子超过阈值时，执行扩容\n    if (loadFactor(hashMap) > hashMap->loadThres) {\n        extend(hashMap);\n    }\n    // 搜索 key 对应的桶索引\n    int index = findBucket(hashMap, key);\n    // 若找到键值对，则覆盖 val 并返回\n    if (hashMap->buckets[index] != NULL && hashMap->buckets[index] != hashMap->TOMBSTONE) {\n        free(hashMap->buckets[index]->val);\n        hashMap->buckets[index]->val = (char *)malloc(sizeof(strlen(val + 1)));\n        strcpy(hashMap->buckets[index]->val, val);\n        hashMap->buckets[index]->val[strlen(val)] = '\\0';\n        return;\n    }\n    // 若键值对不存在，则添加该键值对\n    Pair *pair = (Pair *)malloc(sizeof(Pair));\n    pair->key = key;\n    pair->val = (char *)malloc(sizeof(strlen(val + 1)));\n    strcpy(pair->val, val);\n    pair->val[strlen(val)] = '\\0';\n\n    hashMap->buckets[index] = pair;\n    hashMap->size++;\n}\n\n/* 删除操作 */\nvoid removeItem(HashMapOpenAddressing *hashMap, int key) {\n    // 搜索 key 对应的桶索引\n    int index = findBucket(hashMap, key);\n    // 若找到键值对，则用删除标记覆盖它\n    if (hashMap->buckets[index] != NULL && hashMap->buckets[index] != hashMap->TOMBSTONE) {\n        Pair *pair = hashMap->buckets[index];\n        free(pair->val);\n        free(pair);\n        hashMap->buckets[index] = hashMap->TOMBSTONE;\n        hashMap->size--;\n    }\n}\n```\n**④其他**\n```\n/* 哈希函数 */\nint hashFunc(HashMapOpenAddressing *hashMap, int key) {\n    return key % hashMap->capacity;\n}\n\n/* 负载因子 */\ndouble loadFactor(HashMapOpenAddressing *hashMap) {\n    return (double)hashMap->size / (double)hashMap->capacity;\n}\n/* 扩容哈希表 */\nvoid extend(HashMapOpenAddressing *hashMap) {\n    // 暂存原哈希表\n    Pair **bucketsTmp = hashMap->buckets;\n    int oldCapacity = hashMap->capacity;\n    // 初始化扩容后的新哈希表\n    hashMap->capacity *= hashMap->extendRatio;\n    hashMap->buckets = (Pair **)malloc(sizeof(Pair *) * hashMap->capacity);\n    hashMap->size = 0;\n    // 将键值对从原哈希表搬运至新哈希表\n    for (int i = 0; i < oldCapacity; i++) {\n        Pair *pair = bucketsTmp[i];\n        if (pair != NULL && pair != hashMap->TOMBSTONE) {\n            put(hashMap, pair->key, pair->val);\n            free(pair->val);\n            free(pair);\n        }\n    }\n    free(bucketsTmp);\n}\n\n/* 打印哈希表 */\nvoid print(HashMapOpenAddressing *hashMap) {\n    for (int i = 0; i < hashMap->capacity; i++) {\n        Pair *pair = hashMap->buckets[i];\n        if (pair == NULL) {\n            printf(\"NULL\\n\");\n        } else if (pair == hashMap->TOMBSTONE) {\n            printf(\"TOMBSTONE\\n\");\n        } else {\n            printf(\"%d -> %s\\n\", pair->key, pair->val);\n        }\n    }\n}\n```\n","slug":"数据结构与算法（三）","published":1,"_id":"clmkphbfc001u9gvd4w2vdco5","layout":"post","photos":[],"link":"","content":"<h1 id=\"数据结构与算法（三）\"><a href=\"#数据结构与算法（三）\" class=\"headerlink\" title=\"数据结构与算法（三）\"></a>数据结构与算法（三）</h1><h2 id=\"哈希表\"><a href=\"#哈希表\" class=\"headerlink\" title=\"哈希表\"></a>哈希表</h2><h3 id=\"1-引言\"><a href=\"#1-引言\" class=\"headerlink\" title=\"1.引言\"></a>1.引言</h3><h4 id=\"1-1定义\"><a href=\"#1-1定义\" class=\"headerlink\" title=\"1.1定义\"></a>1.1定义</h4><blockquote>\n<p>建立<strong>键</strong><code>key</code>与<strong>值</strong><code>value</code>的<strong>映射</strong>，根据<strong>映射关系</strong>快速<strong>根据键找到值</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 哈希表的增删查改操作的时间复杂度都是O(1)</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 哈希表本质上是利用空间换时间</div>\n<h4 id=\"1-2哈希算法\"><a href=\"#1-2哈希算法\" class=\"headerlink\" title=\"1.2哈希算法\"></a>1.2哈希算法</h4><p><strong>①定义</strong></p>\n<blockquote>\n<p>即<strong>键与值的映射关系</strong>，构造<strong>散列函数</strong><code>h</code>，通过<code>h(key)</code>找到<strong>对应值的位置</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 本质上是将一个较大的输入空间映射到一个较小的输出空间</div>\n<p><strong>②构造</strong></p>\n<blockquote>\n<p>将<code>key</code>转化为<strong>哈希值</strong>，如将<code>key</code>的<strong>每个字符的ASCALL码相加</strong></p>\n</blockquote>\n<blockquote>\n<p>对<strong>哈希值</strong>进行<strong>二次操作</strong>，如<strong>对容器大小取模</strong>，从而<strong>缩小范围</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 哈希算法的构造准则就是计算简单和减少冲突，有专业的哈希算法，如SHA系列，一些编程语言也有内置哈希算法</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 使用大质数作为模数时，可以最大化地保证哈希值的均匀分布，因为质数不会与其他数字存在公约数</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 只有不可变对象是可哈希的</div>\n<hr>\n<h3 id=\"2-冲突处理\"><a href=\"#2-冲突处理\" class=\"headerlink\" title=\"2.冲突处理\"></a>2.冲突处理</h3><div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 通常情况下，哈希表的输入空间远远大于输出空间，冲突无法避免，需要一定的方法处理冲突</div>\n<h4 id=\"2-1开放定址\"><a href=\"#2-1开放定址\" class=\"headerlink\" title=\"2.1开放定址\"></a>2.1开放定址</h4><p><strong>①定义</strong></p>\n<blockquote>\n<p>若发生了<strong>第<code>i</code>次冲突</strong>，试探性地将<strong>其地址增加</strong><code>di</code>，即<code>hi(key)=h(key)+di</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 这里的冲突不是总计的冲突，而是当前元素发生冲突的次数，即对于每个元素，i都是从0开始计数</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 查找元素时，倘若不匹配，试探性地假设其发生冲突，使用哈希函数向后遍历，直到找到该元素或者遇到空元素</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 不能在开放寻址哈希表中直接删除元素，若删除了某个元素，与其发生冲突且存储时间晚于该元素的元素无法被查询</div>\n<blockquote>\n<p>通常采用<strong>懒删除</strong>，即<strong>不直接删除该元素</strong>，使用<strong>标记</strong>表示该元素被删除</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 查找元素时，可以记录遇到的首个标记元素，将查找到的元素与其交换位置，从而释放空间</div>\n\n\n<p><strong>②分类</strong></p>\n<blockquote>\n<p><strong>线性探测法</strong>：<code>di=i</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 线性探测会产生聚集现象，即冲突数据集中在某一块，从而导致那里更容易发生冲突</div>\n\n<blockquote>\n<p><strong>平方探测法</strong>：<code>di</code>序列为<code>1、-1、4、-4....i^2、-i^2</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 只要散列表的长度是某个4k+1形式的素数时，平方探测法可以探查到整个散列表空间</div>\n<blockquote>\n<p><strong>双散列探测法</strong>：<code>di=i*h2(key)</code>，其中<strong>h2为另一个非0散列函数</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> h2应该保证尽量多的哈希存储单元能被探测到，如h2 = p-h1</div>\n\n\n<h4 id=\"2-2分离链接\"><a href=\"#2-2分离链接\" class=\"headerlink\" title=\"2.2分离链接\"></a>2.2分离链接</h4><blockquote>\n<p><strong>原始哈希表</strong>中，<strong>每个地址</strong>对应的只是<strong>一个值</strong>，<strong>分离链接法</strong>采用的是<strong>链表</strong>，先<strong>找到对应链表</strong>再<strong>遍历该链表</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 分离链接的本质是扩容，此处不采用数组，因为数组一开始就要有一定的长度，会造成空间浪费</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 当链表很长时，可以将其转化为红黑树或者AVL树，优化查找时间</div>\n<hr>\n<h3 id=\"3-哈希表的实现\"><a href=\"#3-哈希表的实现\" class=\"headerlink\" title=\"3.哈希表的实现\"></a>3.哈希表的实现</h3><div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 因为哈希表的特性就是快速查找，所以其主体采用结构数组实现</div>\n<h4 id=\"3-1分离链接哈希表\"><a href=\"#3-1分离链接哈希表\" class=\"headerlink\" title=\"3.1分离链接哈希表\"></a>3.1分离链接哈希表</h4><p><strong>①结构代码</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">/* 链表节点 */\ntypedef struct Node {\n    Pair *pair;\n    struct Node *next;\n} Node;\n\n/* 分离链接哈希表 */\ntypedef struct {\n    int size;         // 键值对数量\n    int capacity;     // 哈希表容量\n    double loadThres; // 触发扩容的负载因子阈值\n    int extendRatio;  // 扩容倍数\n    Node **buckets;   // 桶数组\n} HashMapChaining;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>②构造和析构</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">/* 构造函数 */\nHashMapChaining *newHashMapChaining() {\n    HashMapChaining *hashMap = (HashMapChaining *)malloc(sizeof(HashMapChaining));\n    hashMap-&gt;size = 0;\n    hashMap-&gt;capacity = 4;\n    hashMap-&gt;loadThres = 2.0 / 3.0;\n    hashMap-&gt;extendRatio = 2;\n    hashMap-&gt;buckets = (Node **)malloc(hashMap-&gt;capacity * sizeof(Node *));\n    for (int i = 0; i &lt; hashMap-&gt;capacity; i++) {\n        hashMap-&gt;buckets[i] = NULL;\n    }\n    return hashMap;\n}\n\n/* 析构函数 */\nvoid delHashMapChaining(HashMapChaining *hashMap) {\n    for (int i = 0; i &lt; hashMap-&gt;capacity; i++) {\n        Node *cur = hashMap-&gt;buckets[i];\n        while (cur) {\n            Node *tmp = cur;\n            cur = cur-&gt;next;\n            free(tmp-&gt;pair);\n            free(tmp);\n        }\n    }\n    free(hashMap-&gt;buckets);\n    free(hashMap);\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>③增删查改</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">/* 查询操作 */\nchar *get(HashMapChaining *hashMap, int key) {\n    int index = hashFunc(hashMap, key);\n    // 遍历桶，若找到 key 则返回对应 val\n    Node *cur = hashMap-&gt;buckets[index];\n    while (cur) {\n        if (cur-&gt;pair-&gt;key == key) {\n            return cur-&gt;pair-&gt;val;\n        }\n        cur = cur-&gt;next;\n    }\n    return \"\"; // 若未找到 key 则返回空字符串\n}\n\n/* 添加操作 */\nvoid put(HashMapChaining *hashMap, int key, const char *val) {\n    // 当负载因子超过阈值时，执行扩容\n    if (loadFactor(hashMap) &gt; hashMap-&gt;loadThres) {\n        extend(hashMap);\n    }\n    int index = hashFunc(hashMap, key);\n    // 遍历桶，若遇到指定 key ，则更新对应 val 并返回\n    Node *cur = hashMap-&gt;buckets[index];\n    while (cur) {\n        if (cur-&gt;pair-&gt;key == key) {\n            strcpy(cur-&gt;pair-&gt;val, val); // 若遇到指定 key ，则更新对应 val 并返回\n            return;\n        }\n        cur = cur-&gt;next;\n    }\n    // 若无该 key ，则将键值对添加至尾部\n    Pair *newPair = (Pair *)malloc(sizeof(Pair));\n    newPair-&gt;key = key;\n    strcpy(newPair-&gt;val, val);\n    Node *newNode = (Node *)malloc(sizeof(Node));\n    newNode-&gt;pair = newPair;\n    newNode-&gt;next = hashMap-&gt;buckets[index];\n    hashMap-&gt;buckets[index] = newNode;\n    hashMap-&gt;size++;\n}\n\n/* 扩容哈希表 */\nvoid extend(HashMapChaining *hashMap) {\n    // 暂存原哈希表\n    int oldCapacity = hashMap-&gt;capacity;\n    Node **oldBuckets = hashMap-&gt;buckets;\n    // 初始化扩容后的新哈希表\n    hashMap-&gt;capacity *= hashMap-&gt;extendRatio;\n    hashMap-&gt;buckets = (Node **)malloc(hashMap-&gt;capacity * sizeof(Node *));\n    for (int i = 0; i &lt; hashMap-&gt;capacity; i++) {\n        hashMap-&gt;buckets[i] = NULL;\n    }\n    hashMap-&gt;size = 0;\n    // 将键值对从原哈希表搬运至新哈希表\n    for (int i = 0; i &lt; oldCapacity; i++) {\n        Node *cur = oldBuckets[i];\n        while (cur) {\n            put(hashMap, cur-&gt;pair-&gt;key, cur-&gt;pair-&gt;val);\n            Node *temp = cur;\n            cur = cur-&gt;next;\n            // 释放内存\n            free(temp-&gt;pair);\n            free(temp);\n        }\n    }\n\n    free(oldBuckets);\n}\n\n/* 删除操作 */\nvoid removeItem(HashMapChaining *hashMap, int key) {\n    int index = hashFunc(hashMap, key);\n    Node *cur = hashMap-&gt;buckets[index];\n    Node *pre = NULL;\n    while (cur) {\n        if (cur-&gt;pair-&gt;key == key) {\n            // 从中删除键值对\n            if (pre) {\n                pre-&gt;next = cur-&gt;next;\n            } else {\n                hashMap-&gt;buckets[index] = cur-&gt;next;\n            }\n            // 释放内存\n            free(cur-&gt;pair);\n            free(cur);\n            hashMap-&gt;size--;\n            return;\n        }\n        pre = cur;\n        cur = cur-&gt;next;\n    }\n}\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>④其他</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">/* 哈希函数 */\nint hashFunc(HashMapChaining *hashMap, int key) {\n    return key % hashMap-&gt;capacity;\n}\n\n/* 负载因子 */\ndouble loadFactor(HashMapChaining *hashMap) {\n    return (double)hashMap-&gt;size / (double)hashMap-&gt;capacity;\n}\n/* 打印哈希表 */\nvoid print(HashMapChaining *hashMap) {\n    for (int i = 0; i &lt; hashMap-&gt;capacity; i++) {\n        Node *cur = hashMap-&gt;buckets[i];\n        printf(\"[\");\n        while (cur) {\n            printf(\"%d -&gt; %s, \", cur-&gt;pair-&gt;key, cur-&gt;pair-&gt;val);\n            cur = cur-&gt;next;\n        }\n        printf(\"]\\n\");\n    }\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"3-2开放寻址哈希表\"><a href=\"#3-2开放寻址哈希表\" class=\"headerlink\" title=\"3.2开放寻址哈希表\"></a>3.2开放寻址哈希表</h4><p><strong>①结构</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">/* 开放寻址哈希表 */\ntypedef struct {\n    int size;         // 键值对数量\n    int capacity;     // 哈希表容量\n    double loadThres; // 触发扩容的负载因子阈值\n    int extendRatio;  // 扩容倍数\n    Pair **buckets;   // 桶数组\n    Pair *TOMBSTONE;  // 删除标记\n} HashMapOpenAddressing;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>②构造与析构</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">/* 构造函数 */\nHashMapOpenAddressing *newHashMapOpenAddressing() {\n    HashMapOpenAddressing *hashMap = (HashMapOpenAddressing *)malloc(sizeof(HashMapOpenAddressing));\n    hashMap-&gt;size = 0;\n    hashMap-&gt;capacity = 4;\n    hashMap-&gt;loadThres = 2.0 / 3.0;\n    hashMap-&gt;extendRatio = 2;\n    hashMap-&gt;buckets = (Pair **)malloc(sizeof(Pair *) * hashMap-&gt;capacity);\n    hashMap-&gt;TOMBSTONE = (Pair *)malloc(sizeof(Pair));\n    hashMap-&gt;TOMBSTONE-&gt;key = -1;\n    hashMap-&gt;TOMBSTONE-&gt;val = \"-1\";\n\n    return hashMap;\n}\n\n/* 析构函数 */\nvoid delHashMapOpenAddressing(HashMapOpenAddressing *hashMap) {\n    for (int i = 0; i &lt; hashMap-&gt;capacity; i++) {\n        Pair *pair = hashMap-&gt;buckets[i];\n        if (pair != NULL &amp;&amp; pair != hashMap-&gt;TOMBSTONE) {\n            free(pair-&gt;val);\n            free(pair);\n        }\n    }\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>③增删查改</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">/* 搜索 key 对应的桶索引 */\nint findBucket(HashMapOpenAddressing *hashMap, int key) {\n    int index = hashFunc(hashMap, key);\n    int firstTombstone = -1;\n    // 线性探测，当遇到空桶时跳出\n    while (hashMap-&gt;buckets[index] != NULL) {\n        // 若遇到 key ，返回对应桶索引\n        if (hashMap-&gt;buckets[index]-&gt;key == key) {\n            // 若之前遇到了删除标记，则将键值对移动至该索引\n            if (firstTombstone != -1) {\n                hashMap-&gt;buckets[firstTombstone] = hashMap-&gt;buckets[index];\n                hashMap-&gt;buckets[index] = hashMap-&gt;TOMBSTONE;\n                return firstTombstone; // 返回移动后的桶索引\n            }\n            return index; // 返回桶索引\n        }\n        // 记录遇到的首个删除标记\n        if (firstTombstone == -1 &amp;&amp; hashMap-&gt;buckets[index] == hashMap-&gt;TOMBSTONE) {\n            firstTombstone = index;\n        }\n        // 计算桶索引，越过尾部返回头部\n        index = (index + 1) % hashMap-&gt;capacity;\n    }\n    // 若 key 不存在，则返回添加点的索引\n    return firstTombstone == -1 ? index : firstTombstone;\n}\n\n/* 查询操作 */\nchar *get(HashMapOpenAddressing *hashMap, int key) {\n    // 搜索 key 对应的桶索引\n    int index = findBucket(hashMap, key);\n    // 若找到键值对，则返回对应 val\n    if (hashMap-&gt;buckets[index] != NULL &amp;&amp; hashMap-&gt;buckets[index] != hashMap-&gt;TOMBSTONE) {\n        return hashMap-&gt;buckets[index]-&gt;val;\n    }\n    // 若键值对不存在，则返回空字符串\n    return \"\";\n}\n\n/* 添加操作 */\nvoid put(HashMapOpenAddressing *hashMap, int key, char *val) {\n    // 当负载因子超过阈值时，执行扩容\n    if (loadFactor(hashMap) &gt; hashMap-&gt;loadThres) {\n        extend(hashMap);\n    }\n    // 搜索 key 对应的桶索引\n    int index = findBucket(hashMap, key);\n    // 若找到键值对，则覆盖 val 并返回\n    if (hashMap-&gt;buckets[index] != NULL &amp;&amp; hashMap-&gt;buckets[index] != hashMap-&gt;TOMBSTONE) {\n        free(hashMap-&gt;buckets[index]-&gt;val);\n        hashMap-&gt;buckets[index]-&gt;val = (char *)malloc(sizeof(strlen(val + 1)));\n        strcpy(hashMap-&gt;buckets[index]-&gt;val, val);\n        hashMap-&gt;buckets[index]-&gt;val[strlen(val)] = '\\0';\n        return;\n    }\n    // 若键值对不存在，则添加该键值对\n    Pair *pair = (Pair *)malloc(sizeof(Pair));\n    pair-&gt;key = key;\n    pair-&gt;val = (char *)malloc(sizeof(strlen(val + 1)));\n    strcpy(pair-&gt;val, val);\n    pair-&gt;val[strlen(val)] = '\\0';\n\n    hashMap-&gt;buckets[index] = pair;\n    hashMap-&gt;size++;\n}\n\n/* 删除操作 */\nvoid removeItem(HashMapOpenAddressing *hashMap, int key) {\n    // 搜索 key 对应的桶索引\n    int index = findBucket(hashMap, key);\n    // 若找到键值对，则用删除标记覆盖它\n    if (hashMap-&gt;buckets[index] != NULL &amp;&amp; hashMap-&gt;buckets[index] != hashMap-&gt;TOMBSTONE) {\n        Pair *pair = hashMap-&gt;buckets[index];\n        free(pair-&gt;val);\n        free(pair);\n        hashMap-&gt;buckets[index] = hashMap-&gt;TOMBSTONE;\n        hashMap-&gt;size--;\n    }\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>④其他</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">/* 哈希函数 */\nint hashFunc(HashMapOpenAddressing *hashMap, int key) {\n    return key % hashMap-&gt;capacity;\n}\n\n/* 负载因子 */\ndouble loadFactor(HashMapOpenAddressing *hashMap) {\n    return (double)hashMap-&gt;size / (double)hashMap-&gt;capacity;\n}\n/* 扩容哈希表 */\nvoid extend(HashMapOpenAddressing *hashMap) {\n    // 暂存原哈希表\n    Pair **bucketsTmp = hashMap-&gt;buckets;\n    int oldCapacity = hashMap-&gt;capacity;\n    // 初始化扩容后的新哈希表\n    hashMap-&gt;capacity *= hashMap-&gt;extendRatio;\n    hashMap-&gt;buckets = (Pair **)malloc(sizeof(Pair *) * hashMap-&gt;capacity);\n    hashMap-&gt;size = 0;\n    // 将键值对从原哈希表搬运至新哈希表\n    for (int i = 0; i &lt; oldCapacity; i++) {\n        Pair *pair = bucketsTmp[i];\n        if (pair != NULL &amp;&amp; pair != hashMap-&gt;TOMBSTONE) {\n            put(hashMap, pair-&gt;key, pair-&gt;val);\n            free(pair-&gt;val);\n            free(pair);\n        }\n    }\n    free(bucketsTmp);\n}\n\n/* 打印哈希表 */\nvoid print(HashMapOpenAddressing *hashMap) {\n    for (int i = 0; i &lt; hashMap-&gt;capacity; i++) {\n        Pair *pair = hashMap-&gt;buckets[i];\n        if (pair == NULL) {\n            printf(\"NULL\\n\");\n        } else if (pair == hashMap-&gt;TOMBSTONE) {\n            printf(\"TOMBSTONE\\n\");\n        } else {\n            printf(\"%d -&gt; %s\\n\", pair-&gt;key, pair-&gt;val);\n        }\n    }\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"数据结构与算法（三）\"><a href=\"#数据结构与算法（三）\" class=\"headerlink\" title=\"数据结构与算法（三）\"></a>数据结构与算法（三）</h1><h2 id=\"哈希表\"><a href=\"#哈希表\" class=\"headerlink\" title=\"哈希表\"></a>哈希表</h2><h3 id=\"1-引言\"><a href=\"#1-引言\" class=\"headerlink\" title=\"1.引言\"></a>1.引言</h3><h4 id=\"1-1定义\"><a href=\"#1-1定义\" class=\"headerlink\" title=\"1.1定义\"></a>1.1定义</h4><blockquote>\n<p>建立<strong>键</strong><code>key</code>与<strong>值</strong><code>value</code>的<strong>映射</strong>，根据<strong>映射关系</strong>快速<strong>根据键找到值</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 哈希表的增删查改操作的时间复杂度都是O(1)</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 哈希表本质上是利用空间换时间</div>\n<h4 id=\"1-2哈希算法\"><a href=\"#1-2哈希算法\" class=\"headerlink\" title=\"1.2哈希算法\"></a>1.2哈希算法</h4><p><strong>①定义</strong></p>\n<blockquote>\n<p>即<strong>键与值的映射关系</strong>，构造<strong>散列函数</strong><code>h</code>，通过<code>h(key)</code>找到<strong>对应值的位置</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 本质上是将一个较大的输入空间映射到一个较小的输出空间</div>\n<p><strong>②构造</strong></p>\n<blockquote>\n<p>将<code>key</code>转化为<strong>哈希值</strong>，如将<code>key</code>的<strong>每个字符的ASCALL码相加</strong></p>\n</blockquote>\n<blockquote>\n<p>对<strong>哈希值</strong>进行<strong>二次操作</strong>，如<strong>对容器大小取模</strong>，从而<strong>缩小范围</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 哈希算法的构造准则就是计算简单和减少冲突，有专业的哈希算法，如SHA系列，一些编程语言也有内置哈希算法</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 使用大质数作为模数时，可以最大化地保证哈希值的均匀分布，因为质数不会与其他数字存在公约数</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 只有不可变对象是可哈希的</div>\n<hr>\n<h3 id=\"2-冲突处理\"><a href=\"#2-冲突处理\" class=\"headerlink\" title=\"2.冲突处理\"></a>2.冲突处理</h3><div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 通常情况下，哈希表的输入空间远远大于输出空间，冲突无法避免，需要一定的方法处理冲突</div>\n<h4 id=\"2-1开放定址\"><a href=\"#2-1开放定址\" class=\"headerlink\" title=\"2.1开放定址\"></a>2.1开放定址</h4><p><strong>①定义</strong></p>\n<blockquote>\n<p>若发生了<strong>第<code>i</code>次冲突</strong>，试探性地将<strong>其地址增加</strong><code>di</code>，即<code>hi(key)=h(key)+di</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 这里的冲突不是总计的冲突，而是当前元素发生冲突的次数，即对于每个元素，i都是从0开始计数</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 查找元素时，倘若不匹配，试探性地假设其发生冲突，使用哈希函数向后遍历，直到找到该元素或者遇到空元素</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 不能在开放寻址哈希表中直接删除元素，若删除了某个元素，与其发生冲突且存储时间晚于该元素的元素无法被查询</div>\n<blockquote>\n<p>通常采用<strong>懒删除</strong>，即<strong>不直接删除该元素</strong>，使用<strong>标记</strong>表示该元素被删除</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 查找元素时，可以记录遇到的首个标记元素，将查找到的元素与其交换位置，从而释放空间</div>\n\n\n<p><strong>②分类</strong></p>\n<blockquote>\n<p><strong>线性探测法</strong>：<code>di=i</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 线性探测会产生聚集现象，即冲突数据集中在某一块，从而导致那里更容易发生冲突</div>\n\n<blockquote>\n<p><strong>平方探测法</strong>：<code>di</code>序列为<code>1、-1、4、-4....i^2、-i^2</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 只要散列表的长度是某个4k+1形式的素数时，平方探测法可以探查到整个散列表空间</div>\n<blockquote>\n<p><strong>双散列探测法</strong>：<code>di=i*h2(key)</code>，其中<strong>h2为另一个非0散列函数</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> h2应该保证尽量多的哈希存储单元能被探测到，如h2 = p-h1</div>\n\n\n<h4 id=\"2-2分离链接\"><a href=\"#2-2分离链接\" class=\"headerlink\" title=\"2.2分离链接\"></a>2.2分离链接</h4><blockquote>\n<p><strong>原始哈希表</strong>中，<strong>每个地址</strong>对应的只是<strong>一个值</strong>，<strong>分离链接法</strong>采用的是<strong>链表</strong>，先<strong>找到对应链表</strong>再<strong>遍历该链表</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 分离链接的本质是扩容，此处不采用数组，因为数组一开始就要有一定的长度，会造成空间浪费</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 当链表很长时，可以将其转化为红黑树或者AVL树，优化查找时间</div>\n<hr>\n<h3 id=\"3-哈希表的实现\"><a href=\"#3-哈希表的实现\" class=\"headerlink\" title=\"3.哈希表的实现\"></a>3.哈希表的实现</h3><div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 因为哈希表的特性就是快速查找，所以其主体采用结构数组实现</div>\n<h4 id=\"3-1分离链接哈希表\"><a href=\"#3-1分离链接哈希表\" class=\"headerlink\" title=\"3.1分离链接哈希表\"></a>3.1分离链接哈希表</h4><p><strong>①结构代码</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;* 链表节点 *&#x2F;\ntypedef struct Node &#123;\n    Pair *pair;\n    struct Node *next;\n&#125; Node;\n\n&#x2F;* 分离链接哈希表 *&#x2F;\ntypedef struct &#123;\n    int size;         &#x2F;&#x2F; 键值对数量\n    int capacity;     &#x2F;&#x2F; 哈希表容量\n    double loadThres; &#x2F;&#x2F; 触发扩容的负载因子阈值\n    int extendRatio;  &#x2F;&#x2F; 扩容倍数\n    Node **buckets;   &#x2F;&#x2F; 桶数组\n&#125; HashMapChaining;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>②构造和析构</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;* 构造函数 *&#x2F;\nHashMapChaining *newHashMapChaining() &#123;\n    HashMapChaining *hashMap &#x3D; (HashMapChaining *)malloc(sizeof(HashMapChaining));\n    hashMap-&gt;size &#x3D; 0;\n    hashMap-&gt;capacity &#x3D; 4;\n    hashMap-&gt;loadThres &#x3D; 2.0 &#x2F; 3.0;\n    hashMap-&gt;extendRatio &#x3D; 2;\n    hashMap-&gt;buckets &#x3D; (Node **)malloc(hashMap-&gt;capacity * sizeof(Node *));\n    for (int i &#x3D; 0; i &lt; hashMap-&gt;capacity; i++) &#123;\n        hashMap-&gt;buckets[i] &#x3D; NULL;\n    &#125;\n    return hashMap;\n&#125;\n\n&#x2F;* 析构函数 *&#x2F;\nvoid delHashMapChaining(HashMapChaining *hashMap) &#123;\n    for (int i &#x3D; 0; i &lt; hashMap-&gt;capacity; i++) &#123;\n        Node *cur &#x3D; hashMap-&gt;buckets[i];\n        while (cur) &#123;\n            Node *tmp &#x3D; cur;\n            cur &#x3D; cur-&gt;next;\n            free(tmp-&gt;pair);\n            free(tmp);\n        &#125;\n    &#125;\n    free(hashMap-&gt;buckets);\n    free(hashMap);\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>③增删查改</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;* 查询操作 *&#x2F;\nchar *get(HashMapChaining *hashMap, int key) &#123;\n    int index &#x3D; hashFunc(hashMap, key);\n    &#x2F;&#x2F; 遍历桶，若找到 key 则返回对应 val\n    Node *cur &#x3D; hashMap-&gt;buckets[index];\n    while (cur) &#123;\n        if (cur-&gt;pair-&gt;key &#x3D;&#x3D; key) &#123;\n            return cur-&gt;pair-&gt;val;\n        &#125;\n        cur &#x3D; cur-&gt;next;\n    &#125;\n    return &quot;&quot;; &#x2F;&#x2F; 若未找到 key 则返回空字符串\n&#125;\n\n&#x2F;* 添加操作 *&#x2F;\nvoid put(HashMapChaining *hashMap, int key, const char *val) &#123;\n    &#x2F;&#x2F; 当负载因子超过阈值时，执行扩容\n    if (loadFactor(hashMap) &gt; hashMap-&gt;loadThres) &#123;\n        extend(hashMap);\n    &#125;\n    int index &#x3D; hashFunc(hashMap, key);\n    &#x2F;&#x2F; 遍历桶，若遇到指定 key ，则更新对应 val 并返回\n    Node *cur &#x3D; hashMap-&gt;buckets[index];\n    while (cur) &#123;\n        if (cur-&gt;pair-&gt;key &#x3D;&#x3D; key) &#123;\n            strcpy(cur-&gt;pair-&gt;val, val); &#x2F;&#x2F; 若遇到指定 key ，则更新对应 val 并返回\n            return;\n        &#125;\n        cur &#x3D; cur-&gt;next;\n    &#125;\n    &#x2F;&#x2F; 若无该 key ，则将键值对添加至尾部\n    Pair *newPair &#x3D; (Pair *)malloc(sizeof(Pair));\n    newPair-&gt;key &#x3D; key;\n    strcpy(newPair-&gt;val, val);\n    Node *newNode &#x3D; (Node *)malloc(sizeof(Node));\n    newNode-&gt;pair &#x3D; newPair;\n    newNode-&gt;next &#x3D; hashMap-&gt;buckets[index];\n    hashMap-&gt;buckets[index] &#x3D; newNode;\n    hashMap-&gt;size++;\n&#125;\n\n&#x2F;* 扩容哈希表 *&#x2F;\nvoid extend(HashMapChaining *hashMap) &#123;\n    &#x2F;&#x2F; 暂存原哈希表\n    int oldCapacity &#x3D; hashMap-&gt;capacity;\n    Node **oldBuckets &#x3D; hashMap-&gt;buckets;\n    &#x2F;&#x2F; 初始化扩容后的新哈希表\n    hashMap-&gt;capacity *&#x3D; hashMap-&gt;extendRatio;\n    hashMap-&gt;buckets &#x3D; (Node **)malloc(hashMap-&gt;capacity * sizeof(Node *));\n    for (int i &#x3D; 0; i &lt; hashMap-&gt;capacity; i++) &#123;\n        hashMap-&gt;buckets[i] &#x3D; NULL;\n    &#125;\n    hashMap-&gt;size &#x3D; 0;\n    &#x2F;&#x2F; 将键值对从原哈希表搬运至新哈希表\n    for (int i &#x3D; 0; i &lt; oldCapacity; i++) &#123;\n        Node *cur &#x3D; oldBuckets[i];\n        while (cur) &#123;\n            put(hashMap, cur-&gt;pair-&gt;key, cur-&gt;pair-&gt;val);\n            Node *temp &#x3D; cur;\n            cur &#x3D; cur-&gt;next;\n            &#x2F;&#x2F; 释放内存\n            free(temp-&gt;pair);\n            free(temp);\n        &#125;\n    &#125;\n\n    free(oldBuckets);\n&#125;\n\n&#x2F;* 删除操作 *&#x2F;\nvoid removeItem(HashMapChaining *hashMap, int key) &#123;\n    int index &#x3D; hashFunc(hashMap, key);\n    Node *cur &#x3D; hashMap-&gt;buckets[index];\n    Node *pre &#x3D; NULL;\n    while (cur) &#123;\n        if (cur-&gt;pair-&gt;key &#x3D;&#x3D; key) &#123;\n            &#x2F;&#x2F; 从中删除键值对\n            if (pre) &#123;\n                pre-&gt;next &#x3D; cur-&gt;next;\n            &#125; else &#123;\n                hashMap-&gt;buckets[index] &#x3D; cur-&gt;next;\n            &#125;\n            &#x2F;&#x2F; 释放内存\n            free(cur-&gt;pair);\n            free(cur);\n            hashMap-&gt;size--;\n            return;\n        &#125;\n        pre &#x3D; cur;\n        cur &#x3D; cur-&gt;next;\n    &#125;\n&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>④其他</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;* 哈希函数 *&#x2F;\nint hashFunc(HashMapChaining *hashMap, int key) &#123;\n    return key % hashMap-&gt;capacity;\n&#125;\n\n&#x2F;* 负载因子 *&#x2F;\ndouble loadFactor(HashMapChaining *hashMap) &#123;\n    return (double)hashMap-&gt;size &#x2F; (double)hashMap-&gt;capacity;\n&#125;\n&#x2F;* 打印哈希表 *&#x2F;\nvoid print(HashMapChaining *hashMap) &#123;\n    for (int i &#x3D; 0; i &lt; hashMap-&gt;capacity; i++) &#123;\n        Node *cur &#x3D; hashMap-&gt;buckets[i];\n        printf(&quot;[&quot;);\n        while (cur) &#123;\n            printf(&quot;%d -&gt; %s, &quot;, cur-&gt;pair-&gt;key, cur-&gt;pair-&gt;val);\n            cur &#x3D; cur-&gt;next;\n        &#125;\n        printf(&quot;]\\n&quot;);\n    &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"3-2开放寻址哈希表\"><a href=\"#3-2开放寻址哈希表\" class=\"headerlink\" title=\"3.2开放寻址哈希表\"></a>3.2开放寻址哈希表</h4><p><strong>①结构</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;* 开放寻址哈希表 *&#x2F;\ntypedef struct &#123;\n    int size;         &#x2F;&#x2F; 键值对数量\n    int capacity;     &#x2F;&#x2F; 哈希表容量\n    double loadThres; &#x2F;&#x2F; 触发扩容的负载因子阈值\n    int extendRatio;  &#x2F;&#x2F; 扩容倍数\n    Pair **buckets;   &#x2F;&#x2F; 桶数组\n    Pair *TOMBSTONE;  &#x2F;&#x2F; 删除标记\n&#125; HashMapOpenAddressing;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>②构造与析构</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;* 构造函数 *&#x2F;\nHashMapOpenAddressing *newHashMapOpenAddressing() &#123;\n    HashMapOpenAddressing *hashMap &#x3D; (HashMapOpenAddressing *)malloc(sizeof(HashMapOpenAddressing));\n    hashMap-&gt;size &#x3D; 0;\n    hashMap-&gt;capacity &#x3D; 4;\n    hashMap-&gt;loadThres &#x3D; 2.0 &#x2F; 3.0;\n    hashMap-&gt;extendRatio &#x3D; 2;\n    hashMap-&gt;buckets &#x3D; (Pair **)malloc(sizeof(Pair *) * hashMap-&gt;capacity);\n    hashMap-&gt;TOMBSTONE &#x3D; (Pair *)malloc(sizeof(Pair));\n    hashMap-&gt;TOMBSTONE-&gt;key &#x3D; -1;\n    hashMap-&gt;TOMBSTONE-&gt;val &#x3D; &quot;-1&quot;;\n\n    return hashMap;\n&#125;\n\n&#x2F;* 析构函数 *&#x2F;\nvoid delHashMapOpenAddressing(HashMapOpenAddressing *hashMap) &#123;\n    for (int i &#x3D; 0; i &lt; hashMap-&gt;capacity; i++) &#123;\n        Pair *pair &#x3D; hashMap-&gt;buckets[i];\n        if (pair !&#x3D; NULL &amp;&amp; pair !&#x3D; hashMap-&gt;TOMBSTONE) &#123;\n            free(pair-&gt;val);\n            free(pair);\n        &#125;\n    &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>③增删查改</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;* 搜索 key 对应的桶索引 *&#x2F;\nint findBucket(HashMapOpenAddressing *hashMap, int key) &#123;\n    int index &#x3D; hashFunc(hashMap, key);\n    int firstTombstone &#x3D; -1;\n    &#x2F;&#x2F; 线性探测，当遇到空桶时跳出\n    while (hashMap-&gt;buckets[index] !&#x3D; NULL) &#123;\n        &#x2F;&#x2F; 若遇到 key ，返回对应桶索引\n        if (hashMap-&gt;buckets[index]-&gt;key &#x3D;&#x3D; key) &#123;\n            &#x2F;&#x2F; 若之前遇到了删除标记，则将键值对移动至该索引\n            if (firstTombstone !&#x3D; -1) &#123;\n                hashMap-&gt;buckets[firstTombstone] &#x3D; hashMap-&gt;buckets[index];\n                hashMap-&gt;buckets[index] &#x3D; hashMap-&gt;TOMBSTONE;\n                return firstTombstone; &#x2F;&#x2F; 返回移动后的桶索引\n            &#125;\n            return index; &#x2F;&#x2F; 返回桶索引\n        &#125;\n        &#x2F;&#x2F; 记录遇到的首个删除标记\n        if (firstTombstone &#x3D;&#x3D; -1 &amp;&amp; hashMap-&gt;buckets[index] &#x3D;&#x3D; hashMap-&gt;TOMBSTONE) &#123;\n            firstTombstone &#x3D; index;\n        &#125;\n        &#x2F;&#x2F; 计算桶索引，越过尾部返回头部\n        index &#x3D; (index + 1) % hashMap-&gt;capacity;\n    &#125;\n    &#x2F;&#x2F; 若 key 不存在，则返回添加点的索引\n    return firstTombstone &#x3D;&#x3D; -1 ? index : firstTombstone;\n&#125;\n\n&#x2F;* 查询操作 *&#x2F;\nchar *get(HashMapOpenAddressing *hashMap, int key) &#123;\n    &#x2F;&#x2F; 搜索 key 对应的桶索引\n    int index &#x3D; findBucket(hashMap, key);\n    &#x2F;&#x2F; 若找到键值对，则返回对应 val\n    if (hashMap-&gt;buckets[index] !&#x3D; NULL &amp;&amp; hashMap-&gt;buckets[index] !&#x3D; hashMap-&gt;TOMBSTONE) &#123;\n        return hashMap-&gt;buckets[index]-&gt;val;\n    &#125;\n    &#x2F;&#x2F; 若键值对不存在，则返回空字符串\n    return &quot;&quot;;\n&#125;\n\n&#x2F;* 添加操作 *&#x2F;\nvoid put(HashMapOpenAddressing *hashMap, int key, char *val) &#123;\n    &#x2F;&#x2F; 当负载因子超过阈值时，执行扩容\n    if (loadFactor(hashMap) &gt; hashMap-&gt;loadThres) &#123;\n        extend(hashMap);\n    &#125;\n    &#x2F;&#x2F; 搜索 key 对应的桶索引\n    int index &#x3D; findBucket(hashMap, key);\n    &#x2F;&#x2F; 若找到键值对，则覆盖 val 并返回\n    if (hashMap-&gt;buckets[index] !&#x3D; NULL &amp;&amp; hashMap-&gt;buckets[index] !&#x3D; hashMap-&gt;TOMBSTONE) &#123;\n        free(hashMap-&gt;buckets[index]-&gt;val);\n        hashMap-&gt;buckets[index]-&gt;val &#x3D; (char *)malloc(sizeof(strlen(val + 1)));\n        strcpy(hashMap-&gt;buckets[index]-&gt;val, val);\n        hashMap-&gt;buckets[index]-&gt;val[strlen(val)] &#x3D; &#39;\\0&#39;;\n        return;\n    &#125;\n    &#x2F;&#x2F; 若键值对不存在，则添加该键值对\n    Pair *pair &#x3D; (Pair *)malloc(sizeof(Pair));\n    pair-&gt;key &#x3D; key;\n    pair-&gt;val &#x3D; (char *)malloc(sizeof(strlen(val + 1)));\n    strcpy(pair-&gt;val, val);\n    pair-&gt;val[strlen(val)] &#x3D; &#39;\\0&#39;;\n\n    hashMap-&gt;buckets[index] &#x3D; pair;\n    hashMap-&gt;size++;\n&#125;\n\n&#x2F;* 删除操作 *&#x2F;\nvoid removeItem(HashMapOpenAddressing *hashMap, int key) &#123;\n    &#x2F;&#x2F; 搜索 key 对应的桶索引\n    int index &#x3D; findBucket(hashMap, key);\n    &#x2F;&#x2F; 若找到键值对，则用删除标记覆盖它\n    if (hashMap-&gt;buckets[index] !&#x3D; NULL &amp;&amp; hashMap-&gt;buckets[index] !&#x3D; hashMap-&gt;TOMBSTONE) &#123;\n        Pair *pair &#x3D; hashMap-&gt;buckets[index];\n        free(pair-&gt;val);\n        free(pair);\n        hashMap-&gt;buckets[index] &#x3D; hashMap-&gt;TOMBSTONE;\n        hashMap-&gt;size--;\n    &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>④其他</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;* 哈希函数 *&#x2F;\nint hashFunc(HashMapOpenAddressing *hashMap, int key) &#123;\n    return key % hashMap-&gt;capacity;\n&#125;\n\n&#x2F;* 负载因子 *&#x2F;\ndouble loadFactor(HashMapOpenAddressing *hashMap) &#123;\n    return (double)hashMap-&gt;size &#x2F; (double)hashMap-&gt;capacity;\n&#125;\n&#x2F;* 扩容哈希表 *&#x2F;\nvoid extend(HashMapOpenAddressing *hashMap) &#123;\n    &#x2F;&#x2F; 暂存原哈希表\n    Pair **bucketsTmp &#x3D; hashMap-&gt;buckets;\n    int oldCapacity &#x3D; hashMap-&gt;capacity;\n    &#x2F;&#x2F; 初始化扩容后的新哈希表\n    hashMap-&gt;capacity *&#x3D; hashMap-&gt;extendRatio;\n    hashMap-&gt;buckets &#x3D; (Pair **)malloc(sizeof(Pair *) * hashMap-&gt;capacity);\n    hashMap-&gt;size &#x3D; 0;\n    &#x2F;&#x2F; 将键值对从原哈希表搬运至新哈希表\n    for (int i &#x3D; 0; i &lt; oldCapacity; i++) &#123;\n        Pair *pair &#x3D; bucketsTmp[i];\n        if (pair !&#x3D; NULL &amp;&amp; pair !&#x3D; hashMap-&gt;TOMBSTONE) &#123;\n            put(hashMap, pair-&gt;key, pair-&gt;val);\n            free(pair-&gt;val);\n            free(pair);\n        &#125;\n    &#125;\n    free(bucketsTmp);\n&#125;\n\n&#x2F;* 打印哈希表 *&#x2F;\nvoid print(HashMapOpenAddressing *hashMap) &#123;\n    for (int i &#x3D; 0; i &lt; hashMap-&gt;capacity; i++) &#123;\n        Pair *pair &#x3D; hashMap-&gt;buckets[i];\n        if (pair &#x3D;&#x3D; NULL) &#123;\n            printf(&quot;NULL\\n&quot;);\n        &#125; else if (pair &#x3D;&#x3D; hashMap-&gt;TOMBSTONE) &#123;\n            printf(&quot;TOMBSTONE\\n&quot;);\n        &#125; else &#123;\n            printf(&quot;%d -&gt; %s\\n&quot;, pair-&gt;key, pair-&gt;val);\n        &#125;\n    &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"数据结构与算法（二）","seo_title":"seo名称","toc":true,"indent":true,"top":false,"comments":1,"archive":true,"cover":false,"mathjax":false,"pin":false,"top_meta":false,"bottom_meta":false,"sidebar":["toc"],"keywords":"文章关键词","updated":"2023-11-07T14:10:58.029Z","date":"2023-11-07T14:10:58.029Z","img":"/medias/featureimages/10.webp","summary":"线性结构","_content":"# 数据结构与算法（二）\n## 线性结构\n### 1.引言\n#### 1.1数组和链表\n**①数组**\n>一段**连续的内存空间**，其**数组名**记录了其**起始位置**，可以通过**索引**访问**对应位置**的内存单元\n{%list%}\n数组的大小通常是一开始就确定的，但也可以通过一些手段构成动态数组，如C语言的malloc()\n{%endlist%}\n{%right%}\n数组的元素访问非常块，元素地址=起始地址+元素长度x元素索引\n{%endright%}\n{%warning%}\n由于数组是一段连续的内存空间，所以是有限的，可能会出现扩容问题，且移动一个元素会影响其后所有元素\n{%endwarning%}\n**②链表**\n>多个**零星的内存空间**通过**指针**链接在一起，每个链表有一个**头节点**，记录链表**起始位置**，并通过**各个节点存储的指针**访问**对应节点**\n{%list%}\n根据各个节点的链接关系，链表可分为单链表、双向链表和环形链表\n{%endlist%}\n{%right%}\n链表分散于内存各处，更加灵活，内存允许的情况下可以无限增长，且移动一个节点只会影响与其相连的节点\n{%endright%}\n{%warning%}\n链表需要存储指针信息，需要占用更多的内存，且查询节点需要使用指针，速度较慢\n{%endwarning%}\n![数组与链表](/image/SF_1.png)\n\n#### 1.2抽象\n**①概述**\n>只关心**是什么**，而不关心**如何做到**\n{%list%}\n数据结构的抽象就是描述其定义及其操作集\n{%endlist%}\n**②定义**\n>**线性表**：**零个或多个**数据元素的**有限序列**，**每个元素**只有**一个直接前驱元素**，**一个直接后继元素**\n{%list%}\n线性表的元素可以是任何结构，如线性表，但是线性表存储的元素必须统一\n{%endlist%}\n>**栈**：受到**一定约束**的**线性表**，只能在**一端插入和弹出**数据，**后入先出**\n\n>**队列**：受到**一定约束**的**线性表**，只能在**一端插入**，在**另一端删除**，**先进先出**\n\n**③操作集**\n>每个**数据结构**的**操作集**都只需要包含一些**基本且独立**的操作\n{%right%}\n任何复杂操作，都可以转化为操作集的组合\n{%endright%}\n{%warning%}\n每个操作的实现都要考虑不合理情况并抛出异常，以及操作带来的副作用\n{%endwarning%}\n![线性结构](/image/SF_2.png)\n***\n### 2.线性表\n#### 2.1数组实现\n**①结构代码**\n```\n#define MAXSIZE 30\ntypedef int ElemType; //如果要修改线性表的数据类型，直接修改这里即可\ntypedef struct\n{\n  ElemType data[MAXSIZE];\n  int length; //线性表目前的长度\n}SqList;\n```\n**②操作集实现**\n>**查找**：获取**对应位置**的**数据**\n{%warning%}\n需要判断查找的位置是否合理\n{%endwarning%}\n```\n#define OK 1\n#define ERROR 0\ntypedef int Status;\n\nStatus  GetElem(SqList L,int i,ElemType *e)\n{\n  if(L.length==0||i<1||i>L.length) //首先进行异常判断\n    return ERROR;\n  *e = L.data[i-1];\n\n  return OK;\n}\n```\n>**插入**：将**指定数据**添加到**指定位置**\n{%warning%}\n需要判断插入位置是否合理，以及该操作带来的副作用\n{%endwarning%}\n```\nStatus ListInsert(SqList *L,int i,ElemType e) //注意这里传入的是结构的指针，因为要改变结构\n{\n  //首先进行异常检查\n  int k;\n  if(L->lenth==MAXSIZE)\n    return ERROR;\n  if(i<1||i>L->lenth+1) //注意i的含义对代码的影响\n    return ERROR;\n  //考虑插入位置对操作的影响\n  if(i<=L->length)\n  {\n    for(k=L->length;k>=i-1;k--) //后移元素\n      L->data[k+1]=L->data[k];\n  }\n  L->data[i-1]=e;\n  L->length++; //注意操作带来的额外影响\n  \n  return OK;\n}\n```\n>**删除**：删除**指定位置**数据并**整理**线性表\n```\nStatus ListDelete(SqList *L,int i)\n{\n  int k;\n  //异常检查\n  if(L->length==0)\n    return ERROR;\n  if(i<1||i>L->length)\n    return ERROR;\n\n  //当删除位置不在线性表末尾时\n  if(i<L->length)\n  {\n    for(k=i-1,k<L-length,k++)\n      L->data[k]=L->data[k+1];\n  }\n  L->length--; //函数操作带来的额外影响\n\n  return OK;\n}\n```\n#### 2.2链表实现\n**①结构代码**\n{%list%}\n链表由节点组成，且链接关系也存储在节点中，所以指明了节点的结构就是指明了链表的结构\n{%endlist%}\n```\n//单链表节点结构\ntypedef struct Node\n{\n  ElemType data;\n  struct Node *next;\n}Node;\ntypedef struct Node *LinkList\n```\n**②操作集实现**\n>**创建**：链表是一种**动态结构**，指明其**头节点**即可\n\n>**查找**\n```\nStatus GetElem(LinkList L,int i,ElemType *e) //传入L为链表的头节点的指针\n{\n  int j;\n  LinkList p;\n  p=L->next; //使p指向链表的第一个节点\n  j = 1;\n  //其中p作为判别条件是防止其超过链表范围，因为当p为空指针时，说明已经到达最后一个节点了\n  while(p && j<i) \n  {\n    p = p->next;\n    ++j;\n  }\n  if(!p || j>i) //当p为空指针或者i小于1时，第i个元素不存在\n    return ERROR;\n  return OK;\n}\n```\n>**插入**\n{%warning%}\n注意节点插入时，先将新节点插入，再将旧的链接断开\n{%endwarning%}\n```\n/*在已存在链表的第i个位置插入元素e\nStatus ListInsert(LinkList *L,int i,ElemType *e)\n{\n  int j;\n  LinkList p,s;\n  p = *L;\n  j = 1；\n  while(p && j<i ) /*寻找第i个结点,循环结束时j = i-1；\n  {\n    p = p->next;\n    ++j;\n  }\n  if (!p || j>i) /*当i为0或者第i个结点不存在时\n    return ERROR；\n  s = (LinkList)malloc(sizeof(Node));\n  s->data = e;\n  /*注意结点断开和相连的顺序\n  s->next = p->next;/*先将新节点添加进链表\n  p->next = s;/*再将旧链接断开并添加新链接\n}\n```\n>**删除**\n{%warning%}\n对于没有回收机制的语言，需要注意释放动态分配获得的内存\n{%endwarning%}\n```\nStatus LinkDelete(LinkList *L,int i,ElemType *e)\n{\n  int j;\n  LinkList p,q;\n  p = *L;\n  j = 1;\n  while(p->next && j<i)\n  {\n    p = p->next;\n    ++j;\n  }\n  if (!p || j>i) /*当i为0或者第i个结点不存在时\n    return ERROR；\n  q = p->next;\n  p->next = q->next;\n  *e = q->data;\n  free(q); /*记得要释放对应的空间\n  return OK;\n}\n```\n>**销毁**\n```\nStatus LinkClear(LinkList *L)\n{\n  LinkList p,q;\n  p = (*L)->next;\n  while (p)\n  {\n    q = p->next;\n    free(p)\n    p=q\n  }\n  (*L)->next = NULL;\n  return OK;\n}\n```\n***\n### 3.栈\n#### 3.1数组实现\n**①结构代码**\n>由一个**记录元素的一维数组**和一个**记录栈顶元素位置**的**变量**组成\n```\n#define MaxSize\ntypedef struct SNode* Stack\nstruct SNode\n{\n  ElementType Data[MaxSize];\n  int Top = -1;\n}\n```\n**②操作集实现**\n>**压入元素**：将**指定元素**放在**栈顶上面**\n```\nvoid Push(Stack PtrS,ElementType item)\n{\n  if (PtrS->Top==Maxsize-1)\n  {\n    printf(\"栈已满\")；\n    return；\n  }\n  else\n  {\n    PtrS->Data[++(PtrS->Top)]==item;\n  }\n}\n```\n>**弹出元素**：将**栈顶元素**删除\n```\nElementType Pop(Stack PtrS)\n{\n  if(PtrS->Top==-1)\n  {\n    printf(\"栈空\")；\n    return ；\n  }\n  else\n  return(PtrS->Data[(PtrS->Top)--]); /*注意--符号是后缀\n}\n```\n#### 3.2链表实现\n**①结构代码**\n{%list%}\n以链表的头节点作为TOP，方便查找\n{%endlist%}\n```\ntypedef struct SNode* Stack\nstruct SNode\n{\n  ElementType Data;\n  struct SNode* Next;\n}\n```\n**②操作集实现**\n>**压入元素**\n```\nvoid Push(ElementType item,Stack S) \n{\n  struct SNode *TmpCell;\n  TmpCell=(struct SNode *)malloc(sizeof(struct SNode));\n  TmpCell->Element = item;\n  TmpCell->Next = S->Next;\n  S->Next = TmpCell;\n}\n```\n>**弹出元素**\n```\nElementType Pop(Stack S)\n{\n  struct SNode *FirstCell;\n  ElementType TopElem;\n  if(IsEmpty(S))\n  {\n    printf(\"栈空\")；\n    return NULL；\n  }\n  else\n  {\n    FirstCell = S->Next; /*指向头节点\n    S->Next = FirstCell = S->Next;\n    TopElem = FirtCell->Element;\n    free(FirstCell);\n    return TopElem;\n  }\n}\n```\n***\n### 4.队列\n#### 4.1数组实现\n**①结构代码**\n>`rear`是指向**队尾的“指针”**，`front`是指向**队头的“指针”**，**插入**一个元素时，`rear`**加一**，**删除**一个元素时，`front`**加一**，\n{%list%}\n当“指针”可以在超过MaxSize且列表未满时，对MaxSize取余再次从0开始，需要一个状态标签判断队列是否已满\n{%endlist%}\n{%right%}\n山不转水转！\n{%endright%}\n\n```\n#define MaxSize\nstruct QNode\n{\n  ElementType Data [MaxSize]；\n  int rear = -1; \n  int front = -1;\n};\ntypedef struct QNode *Queue;\n```\n**②操作集实现**\n>**入队列**：将**指定元素**添加到**队尾**\n```\nvoid AddQ(Queue PtrQ,ElementType item)\n{\n  if((PtrQ->rear+1)%MaxSize==PtrQ->front)\n  {\n    printf(\"队列已满\")；\n    return ；\n  }\n  PtrQ->rear=(PtrQ->rear+1)%MaxSize;\n  PtrQ->Data[PtrQ->rear]=item;\n}\n```\n>**出队列**：删除**队头元素**\n```\nElementType DeleteQ(Queue PtrQ)\n{\n  if(PtrQ->front==PtrQ->rear)\n  {\n    printf(\"队列空\")；\n    return ERROR；\n  }\n  else\n  {\n    PtrQ->front=(PtrQ->front+1)%MaxSize;\n    return PtrQ->Data[PtrQ->front];\n  }\n}\n```\n#### 4.2链表实现\n**①结构代码**\n```\nstruct Node\n{\n  ElementType Data;\n  struct Node *Next;\n};\nstruct QNode\n{\n  struct Node *rear; /*指向队尾\n  struct Node *front; /*指向队头，列表的头节点，出队的一端\n};\ntypedef struct QNode *Queue;\nQueue PtrQ;\n```\n**②操作集实现**\n>**出队列**\n```\nElementType DeleteQ(Queue PtrQ)\n{\n  struct Node *FrontCell; /*作为中间变量保存要删除的节点\n  ElementType FrontElem;\n\n  if(PtrQ->front==NULL)\n  {\n    print(\"队列空\")；\n    return ERROR；\n  }\n  FrontCell = PtrQ->front;\n  if(PtrQ->front == PtrQ->rear)\n    PtrQ->front=PtrQ->rear=NULL;\n  else\n    PtrQ->front=PtrQ->front->Next;\n  FrontElem = FrontCell->data;\n  free(FrontCell);\n  return FrontElem;\n}\n```\n>**入队列**\n```\nStatus AddQ(Queue PtrQ,ElementType Elem)\n{\n  struct Node *FrontCell; /*作为中间变量保存要删除的节点\n  FrontCell = (struct Node *)malloc(sizeof(Node));\n  if(!FrontCell)\n    exit(OVERFLOW);\n  FrontCell->Data = Elem;\n  PtrQ->rear->next = FrontCell;\n  PtrQ->rear = FrontCell;\n  return OK;\n}\n```\n","source":"_posts/数据结构与算法（二）.md","raw":"---\ntitle: 数据结构与算法（二）\nseo_title: seo名称\ntoc: true\nindent: true\ntop: false\ncomments: true\narchive: true\ncover: false\nmathjax: false\npin: false\ntop_meta: false\nbottom_meta: false\nsidebar:\n  - toc\ntag:\n  - 计算机基础\n  - 数据结构与算法\ncategories: 计算机基础\nkeywords: 文章关键词\nupdated: ''\ndate:\nimg: /medias/featureimages/10.webp\nsummary: 线性结构\n---\n# 数据结构与算法（二）\n## 线性结构\n### 1.引言\n#### 1.1数组和链表\n**①数组**\n>一段**连续的内存空间**，其**数组名**记录了其**起始位置**，可以通过**索引**访问**对应位置**的内存单元\n{%list%}\n数组的大小通常是一开始就确定的，但也可以通过一些手段构成动态数组，如C语言的malloc()\n{%endlist%}\n{%right%}\n数组的元素访问非常块，元素地址=起始地址+元素长度x元素索引\n{%endright%}\n{%warning%}\n由于数组是一段连续的内存空间，所以是有限的，可能会出现扩容问题，且移动一个元素会影响其后所有元素\n{%endwarning%}\n**②链表**\n>多个**零星的内存空间**通过**指针**链接在一起，每个链表有一个**头节点**，记录链表**起始位置**，并通过**各个节点存储的指针**访问**对应节点**\n{%list%}\n根据各个节点的链接关系，链表可分为单链表、双向链表和环形链表\n{%endlist%}\n{%right%}\n链表分散于内存各处，更加灵活，内存允许的情况下可以无限增长，且移动一个节点只会影响与其相连的节点\n{%endright%}\n{%warning%}\n链表需要存储指针信息，需要占用更多的内存，且查询节点需要使用指针，速度较慢\n{%endwarning%}\n![数组与链表](/image/SF_1.png)\n\n#### 1.2抽象\n**①概述**\n>只关心**是什么**，而不关心**如何做到**\n{%list%}\n数据结构的抽象就是描述其定义及其操作集\n{%endlist%}\n**②定义**\n>**线性表**：**零个或多个**数据元素的**有限序列**，**每个元素**只有**一个直接前驱元素**，**一个直接后继元素**\n{%list%}\n线性表的元素可以是任何结构，如线性表，但是线性表存储的元素必须统一\n{%endlist%}\n>**栈**：受到**一定约束**的**线性表**，只能在**一端插入和弹出**数据，**后入先出**\n\n>**队列**：受到**一定约束**的**线性表**，只能在**一端插入**，在**另一端删除**，**先进先出**\n\n**③操作集**\n>每个**数据结构**的**操作集**都只需要包含一些**基本且独立**的操作\n{%right%}\n任何复杂操作，都可以转化为操作集的组合\n{%endright%}\n{%warning%}\n每个操作的实现都要考虑不合理情况并抛出异常，以及操作带来的副作用\n{%endwarning%}\n![线性结构](/image/SF_2.png)\n***\n### 2.线性表\n#### 2.1数组实现\n**①结构代码**\n```\n#define MAXSIZE 30\ntypedef int ElemType; //如果要修改线性表的数据类型，直接修改这里即可\ntypedef struct\n{\n  ElemType data[MAXSIZE];\n  int length; //线性表目前的长度\n}SqList;\n```\n**②操作集实现**\n>**查找**：获取**对应位置**的**数据**\n{%warning%}\n需要判断查找的位置是否合理\n{%endwarning%}\n```\n#define OK 1\n#define ERROR 0\ntypedef int Status;\n\nStatus  GetElem(SqList L,int i,ElemType *e)\n{\n  if(L.length==0||i<1||i>L.length) //首先进行异常判断\n    return ERROR;\n  *e = L.data[i-1];\n\n  return OK;\n}\n```\n>**插入**：将**指定数据**添加到**指定位置**\n{%warning%}\n需要判断插入位置是否合理，以及该操作带来的副作用\n{%endwarning%}\n```\nStatus ListInsert(SqList *L,int i,ElemType e) //注意这里传入的是结构的指针，因为要改变结构\n{\n  //首先进行异常检查\n  int k;\n  if(L->lenth==MAXSIZE)\n    return ERROR;\n  if(i<1||i>L->lenth+1) //注意i的含义对代码的影响\n    return ERROR;\n  //考虑插入位置对操作的影响\n  if(i<=L->length)\n  {\n    for(k=L->length;k>=i-1;k--) //后移元素\n      L->data[k+1]=L->data[k];\n  }\n  L->data[i-1]=e;\n  L->length++; //注意操作带来的额外影响\n  \n  return OK;\n}\n```\n>**删除**：删除**指定位置**数据并**整理**线性表\n```\nStatus ListDelete(SqList *L,int i)\n{\n  int k;\n  //异常检查\n  if(L->length==0)\n    return ERROR;\n  if(i<1||i>L->length)\n    return ERROR;\n\n  //当删除位置不在线性表末尾时\n  if(i<L->length)\n  {\n    for(k=i-1,k<L-length,k++)\n      L->data[k]=L->data[k+1];\n  }\n  L->length--; //函数操作带来的额外影响\n\n  return OK;\n}\n```\n#### 2.2链表实现\n**①结构代码**\n{%list%}\n链表由节点组成，且链接关系也存储在节点中，所以指明了节点的结构就是指明了链表的结构\n{%endlist%}\n```\n//单链表节点结构\ntypedef struct Node\n{\n  ElemType data;\n  struct Node *next;\n}Node;\ntypedef struct Node *LinkList\n```\n**②操作集实现**\n>**创建**：链表是一种**动态结构**，指明其**头节点**即可\n\n>**查找**\n```\nStatus GetElem(LinkList L,int i,ElemType *e) //传入L为链表的头节点的指针\n{\n  int j;\n  LinkList p;\n  p=L->next; //使p指向链表的第一个节点\n  j = 1;\n  //其中p作为判别条件是防止其超过链表范围，因为当p为空指针时，说明已经到达最后一个节点了\n  while(p && j<i) \n  {\n    p = p->next;\n    ++j;\n  }\n  if(!p || j>i) //当p为空指针或者i小于1时，第i个元素不存在\n    return ERROR;\n  return OK;\n}\n```\n>**插入**\n{%warning%}\n注意节点插入时，先将新节点插入，再将旧的链接断开\n{%endwarning%}\n```\n/*在已存在链表的第i个位置插入元素e\nStatus ListInsert(LinkList *L,int i,ElemType *e)\n{\n  int j;\n  LinkList p,s;\n  p = *L;\n  j = 1；\n  while(p && j<i ) /*寻找第i个结点,循环结束时j = i-1；\n  {\n    p = p->next;\n    ++j;\n  }\n  if (!p || j>i) /*当i为0或者第i个结点不存在时\n    return ERROR；\n  s = (LinkList)malloc(sizeof(Node));\n  s->data = e;\n  /*注意结点断开和相连的顺序\n  s->next = p->next;/*先将新节点添加进链表\n  p->next = s;/*再将旧链接断开并添加新链接\n}\n```\n>**删除**\n{%warning%}\n对于没有回收机制的语言，需要注意释放动态分配获得的内存\n{%endwarning%}\n```\nStatus LinkDelete(LinkList *L,int i,ElemType *e)\n{\n  int j;\n  LinkList p,q;\n  p = *L;\n  j = 1;\n  while(p->next && j<i)\n  {\n    p = p->next;\n    ++j;\n  }\n  if (!p || j>i) /*当i为0或者第i个结点不存在时\n    return ERROR；\n  q = p->next;\n  p->next = q->next;\n  *e = q->data;\n  free(q); /*记得要释放对应的空间\n  return OK;\n}\n```\n>**销毁**\n```\nStatus LinkClear(LinkList *L)\n{\n  LinkList p,q;\n  p = (*L)->next;\n  while (p)\n  {\n    q = p->next;\n    free(p)\n    p=q\n  }\n  (*L)->next = NULL;\n  return OK;\n}\n```\n***\n### 3.栈\n#### 3.1数组实现\n**①结构代码**\n>由一个**记录元素的一维数组**和一个**记录栈顶元素位置**的**变量**组成\n```\n#define MaxSize\ntypedef struct SNode* Stack\nstruct SNode\n{\n  ElementType Data[MaxSize];\n  int Top = -1;\n}\n```\n**②操作集实现**\n>**压入元素**：将**指定元素**放在**栈顶上面**\n```\nvoid Push(Stack PtrS,ElementType item)\n{\n  if (PtrS->Top==Maxsize-1)\n  {\n    printf(\"栈已满\")；\n    return；\n  }\n  else\n  {\n    PtrS->Data[++(PtrS->Top)]==item;\n  }\n}\n```\n>**弹出元素**：将**栈顶元素**删除\n```\nElementType Pop(Stack PtrS)\n{\n  if(PtrS->Top==-1)\n  {\n    printf(\"栈空\")；\n    return ；\n  }\n  else\n  return(PtrS->Data[(PtrS->Top)--]); /*注意--符号是后缀\n}\n```\n#### 3.2链表实现\n**①结构代码**\n{%list%}\n以链表的头节点作为TOP，方便查找\n{%endlist%}\n```\ntypedef struct SNode* Stack\nstruct SNode\n{\n  ElementType Data;\n  struct SNode* Next;\n}\n```\n**②操作集实现**\n>**压入元素**\n```\nvoid Push(ElementType item,Stack S) \n{\n  struct SNode *TmpCell;\n  TmpCell=(struct SNode *)malloc(sizeof(struct SNode));\n  TmpCell->Element = item;\n  TmpCell->Next = S->Next;\n  S->Next = TmpCell;\n}\n```\n>**弹出元素**\n```\nElementType Pop(Stack S)\n{\n  struct SNode *FirstCell;\n  ElementType TopElem;\n  if(IsEmpty(S))\n  {\n    printf(\"栈空\")；\n    return NULL；\n  }\n  else\n  {\n    FirstCell = S->Next; /*指向头节点\n    S->Next = FirstCell = S->Next;\n    TopElem = FirtCell->Element;\n    free(FirstCell);\n    return TopElem;\n  }\n}\n```\n***\n### 4.队列\n#### 4.1数组实现\n**①结构代码**\n>`rear`是指向**队尾的“指针”**，`front`是指向**队头的“指针”**，**插入**一个元素时，`rear`**加一**，**删除**一个元素时，`front`**加一**，\n{%list%}\n当“指针”可以在超过MaxSize且列表未满时，对MaxSize取余再次从0开始，需要一个状态标签判断队列是否已满\n{%endlist%}\n{%right%}\n山不转水转！\n{%endright%}\n\n```\n#define MaxSize\nstruct QNode\n{\n  ElementType Data [MaxSize]；\n  int rear = -1; \n  int front = -1;\n};\ntypedef struct QNode *Queue;\n```\n**②操作集实现**\n>**入队列**：将**指定元素**添加到**队尾**\n```\nvoid AddQ(Queue PtrQ,ElementType item)\n{\n  if((PtrQ->rear+1)%MaxSize==PtrQ->front)\n  {\n    printf(\"队列已满\")；\n    return ；\n  }\n  PtrQ->rear=(PtrQ->rear+1)%MaxSize;\n  PtrQ->Data[PtrQ->rear]=item;\n}\n```\n>**出队列**：删除**队头元素**\n```\nElementType DeleteQ(Queue PtrQ)\n{\n  if(PtrQ->front==PtrQ->rear)\n  {\n    printf(\"队列空\")；\n    return ERROR；\n  }\n  else\n  {\n    PtrQ->front=(PtrQ->front+1)%MaxSize;\n    return PtrQ->Data[PtrQ->front];\n  }\n}\n```\n#### 4.2链表实现\n**①结构代码**\n```\nstruct Node\n{\n  ElementType Data;\n  struct Node *Next;\n};\nstruct QNode\n{\n  struct Node *rear; /*指向队尾\n  struct Node *front; /*指向队头，列表的头节点，出队的一端\n};\ntypedef struct QNode *Queue;\nQueue PtrQ;\n```\n**②操作集实现**\n>**出队列**\n```\nElementType DeleteQ(Queue PtrQ)\n{\n  struct Node *FrontCell; /*作为中间变量保存要删除的节点\n  ElementType FrontElem;\n\n  if(PtrQ->front==NULL)\n  {\n    print(\"队列空\")；\n    return ERROR；\n  }\n  FrontCell = PtrQ->front;\n  if(PtrQ->front == PtrQ->rear)\n    PtrQ->front=PtrQ->rear=NULL;\n  else\n    PtrQ->front=PtrQ->front->Next;\n  FrontElem = FrontCell->data;\n  free(FrontCell);\n  return FrontElem;\n}\n```\n>**入队列**\n```\nStatus AddQ(Queue PtrQ,ElementType Elem)\n{\n  struct Node *FrontCell; /*作为中间变量保存要删除的节点\n  FrontCell = (struct Node *)malloc(sizeof(Node));\n  if(!FrontCell)\n    exit(OVERFLOW);\n  FrontCell->Data = Elem;\n  PtrQ->rear->next = FrontCell;\n  PtrQ->rear = FrontCell;\n  return OK;\n}\n```\n","slug":"数据结构与算法（二）","published":1,"_id":"clmkphbfd001z9gvd2vn1bujv","layout":"post","photos":[],"link":"","content":"<h1 id=\"数据结构与算法（二）\"><a href=\"#数据结构与算法（二）\" class=\"headerlink\" title=\"数据结构与算法（二）\"></a>数据结构与算法（二）</h1><h2 id=\"线性结构\"><a href=\"#线性结构\" class=\"headerlink\" title=\"线性结构\"></a>线性结构</h2><h3 id=\"1-引言\"><a href=\"#1-引言\" class=\"headerlink\" title=\"1.引言\"></a>1.引言</h3><h4 id=\"1-1数组和链表\"><a href=\"#1-1数组和链表\" class=\"headerlink\" title=\"1.1数组和链表\"></a>1.1数组和链表</h4><p><strong>①数组</strong></p>\n<blockquote>\n<p>一段<strong>连续的内存空间</strong>，其<strong>数组名</strong>记录了其<strong>起始位置</strong>，可以通过<strong>索引</strong>访问<strong>对应位置</strong>的内存单元</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 数组的大小通常是一开始就确定的，但也可以通过一些手段构成动态数组，如C语言的malloc()</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 数组的元素访问非常块，元素地址=起始地址+元素长度x元素索引</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 由于数组是一段连续的内存空间，所以是有限的，可能会出现扩容问题，且移动一个元素会影响其后所有元素</div>\n<p><strong>②链表</strong></p>\n<blockquote>\n<p>多个<strong>零星的内存空间</strong>通过<strong>指针</strong>链接在一起，每个链表有一个<strong>头节点</strong>，记录链表<strong>起始位置</strong>，并通过<strong>各个节点存储的指针</strong>访问<strong>对应节点</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 根据各个节点的链接关系，链表可分为单链表、双向链表和环形链表</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 链表分散于内存各处，更加灵活，内存允许的情况下可以无限增长，且移动一个节点只会影响与其相连的节点</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 链表需要存储指针信息，需要占用更多的内存，且查询节点需要使用指针，速度较慢</div>\n<p><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/SF_1.png\" alt=\"数组与链表\"></p>\n<h4 id=\"1-2抽象\"><a href=\"#1-2抽象\" class=\"headerlink\" title=\"1.2抽象\"></a>1.2抽象</h4><p><strong>①概述</strong></p>\n<blockquote>\n<p>只关心<strong>是什么</strong>，而不关心<strong>如何做到</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 数据结构的抽象就是描述其定义及其操作集</div>\n<p><strong>②定义</strong></p>\n<blockquote>\n<p><strong>线性表</strong>：<strong>零个或多个</strong>数据元素的<strong>有限序列</strong>，<strong>每个元素</strong>只有<strong>一个直接前驱元素</strong>，<strong>一个直接后继元素</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 线性表的元素可以是任何结构，如线性表，但是线性表存储的元素必须统一</div>\n<blockquote>\n<p><strong>栈</strong>：受到<strong>一定约束</strong>的<strong>线性表</strong>，只能在<strong>一端插入和弹出</strong>数据，<strong>后入先出</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>队列</strong>：受到<strong>一定约束</strong>的<strong>线性表</strong>，只能在<strong>一端插入</strong>，在<strong>另一端删除</strong>，<strong>先进先出</strong></p>\n</blockquote>\n<p><strong>③操作集</strong></p>\n<blockquote>\n<p>每个<strong>数据结构</strong>的<strong>操作集</strong>都只需要包含一些<strong>基本且独立</strong>的操作</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 任何复杂操作，都可以转化为操作集的组合</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 每个操作的实现都要考虑不合理情况并抛出异常，以及操作带来的副作用</div>\n<p><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/SF_2.png\" alt=\"线性结构\"></p>\n<hr>\n<h3 id=\"2-线性表\"><a href=\"#2-线性表\" class=\"headerlink\" title=\"2.线性表\"></a>2.线性表</h3><h4 id=\"2-1数组实现\"><a href=\"#2-1数组实现\" class=\"headerlink\" title=\"2.1数组实现\"></a>2.1数组实现</h4><p><strong>①结构代码</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#define MAXSIZE 30\ntypedef int ElemType; //如果要修改线性表的数据类型，直接修改这里即可\ntypedef struct\n{\n  ElemType data[MAXSIZE];\n  int length; //线性表目前的长度\n}SqList;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>②操作集实现</strong></p>\n<blockquote>\n<p><strong>查找</strong>：获取<strong>对应位置</strong>的<strong>数据</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 需要判断查找的位置是否合理</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#define OK 1\n#define ERROR 0\ntypedef int Status;\n\nStatus  GetElem(SqList L,int i,ElemType *e)\n{\n  if(L.length==0||i&lt;1||i&gt;L.length) //首先进行异常判断\n    return ERROR;\n  *e = L.data[i-1];\n\n  return OK;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><strong>插入</strong>：将<strong>指定数据</strong>添加到<strong>指定位置</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 需要判断插入位置是否合理，以及该操作带来的副作用</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Status ListInsert(SqList *L,int i,ElemType e) //注意这里传入的是结构的指针，因为要改变结构\n{\n  //首先进行异常检查\n  int k;\n  if(L-&gt;lenth==MAXSIZE)\n    return ERROR;\n  if(i&lt;1||i&gt;L-&gt;lenth+1) //注意i的含义对代码的影响\n    return ERROR;\n  //考虑插入位置对操作的影响\n  if(i&lt;=L-&gt;length)\n  {\n    for(k=L-&gt;length;k&gt;=i-1;k--) //后移元素\n      L-&gt;data[k+1]=L-&gt;data[k];\n  }\n  L-&gt;data[i-1]=e;\n  L-&gt;length++; //注意操作带来的额外影响\n  \n  return OK;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><strong>删除</strong>：删除<strong>指定位置</strong>数据并<strong>整理</strong>线性表</p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Status ListDelete(SqList *L,int i)\n{\n  int k;\n  //异常检查\n  if(L-&gt;length==0)\n    return ERROR;\n  if(i&lt;1||i&gt;L-&gt;length)\n    return ERROR;\n\n  //当删除位置不在线性表末尾时\n  if(i&lt;L-&gt;length)\n  {\n    for(k=i-1,k&lt;L-length,k++)\n      L-&gt;data[k]=L-&gt;data[k+1];\n  }\n  L-&gt;length--; //函数操作带来的额外影响\n\n  return OK;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"2-2链表实现\"><a href=\"#2-2链表实现\" class=\"headerlink\" title=\"2.2链表实现\"></a>2.2链表实现</h4><p><strong>①结构代码</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 链表由节点组成，且链接关系也存储在节点中，所以指明了节点的结构就是指明了链表的结构</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">//单链表节点结构\ntypedef struct Node\n{\n  ElemType data;\n  struct Node *next;\n}Node;\ntypedef struct Node *LinkList<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>②操作集实现</strong></p>\n<blockquote>\n<p><strong>创建</strong>：链表是一种<strong>动态结构</strong>，指明其<strong>头节点</strong>即可</p>\n</blockquote>\n<blockquote>\n<p><strong>查找</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Status GetElem(LinkList L,int i,ElemType *e) //传入L为链表的头节点的指针\n{\n  int j;\n  LinkList p;\n  p=L-&gt;next; //使p指向链表的第一个节点\n  j = 1;\n  //其中p作为判别条件是防止其超过链表范围，因为当p为空指针时，说明已经到达最后一个节点了\n  while(p &amp;&amp; j&lt;i) \n  {\n    p = p-&gt;next;\n    ++j;\n  }\n  if(!p || j&gt;i) //当p为空指针或者i小于1时，第i个元素不存在\n    return ERROR;\n  return OK;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><strong>插入</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 注意节点插入时，先将新节点插入，再将旧的链接断开</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">/*在已存在链表的第i个位置插入元素e\nStatus ListInsert(LinkList *L,int i,ElemType *e)\n{\n  int j;\n  LinkList p,s;\n  p = *L;\n  j = 1；\n  while(p &amp;&amp; j&lt;i ) /*寻找第i个结点,循环结束时j = i-1；\n  {\n    p = p-&gt;next;\n    ++j;\n  }\n  if (!p || j&gt;i) /*当i为0或者第i个结点不存在时\n    return ERROR；\n  s = (LinkList)malloc(sizeof(Node));\n  s-&gt;data = e;\n  /*注意结点断开和相连的顺序\n  s-&gt;next = p-&gt;next;/*先将新节点添加进链表\n  p-&gt;next = s;/*再将旧链接断开并添加新链接\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><strong>删除</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 对于没有回收机制的语言，需要注意释放动态分配获得的内存</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Status LinkDelete(LinkList *L,int i,ElemType *e)\n{\n  int j;\n  LinkList p,q;\n  p = *L;\n  j = 1;\n  while(p-&gt;next &amp;&amp; j&lt;i)\n  {\n    p = p-&gt;next;\n    ++j;\n  }\n  if (!p || j&gt;i) /*当i为0或者第i个结点不存在时\n    return ERROR；\n  q = p-&gt;next;\n  p-&gt;next = q-&gt;next;\n  *e = q-&gt;data;\n  free(q); /*记得要释放对应的空间\n  return OK;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><strong>销毁</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Status LinkClear(LinkList *L)\n{\n  LinkList p,q;\n  p = (*L)-&gt;next;\n  while (p)\n  {\n    q = p-&gt;next;\n    free(p)\n    p=q\n  }\n  (*L)-&gt;next = NULL;\n  return OK;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<hr>\n<h3 id=\"3-栈\"><a href=\"#3-栈\" class=\"headerlink\" title=\"3.栈\"></a>3.栈</h3><h4 id=\"3-1数组实现\"><a href=\"#3-1数组实现\" class=\"headerlink\" title=\"3.1数组实现\"></a>3.1数组实现</h4><p><strong>①结构代码</strong></p>\n<blockquote>\n<p>由一个<strong>记录元素的一维数组</strong>和一个<strong>记录栈顶元素位置</strong>的<strong>变量</strong>组成</p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#define MaxSize\ntypedef struct SNode* Stack\nstruct SNode\n{\n  ElementType Data[MaxSize];\n  int Top = -1;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>②操作集实现</strong></p>\n<blockquote>\n<p><strong>压入元素</strong>：将<strong>指定元素</strong>放在<strong>栈顶上面</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">void Push(Stack PtrS,ElementType item)\n{\n  if (PtrS-&gt;Top==Maxsize-1)\n  {\n    printf(\"栈已满\")；\n    return；\n  }\n  else\n  {\n    PtrS-&gt;Data[++(PtrS-&gt;Top)]==item;\n  }\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><strong>弹出元素</strong>：将<strong>栈顶元素</strong>删除</p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">ElementType Pop(Stack PtrS)\n{\n  if(PtrS-&gt;Top==-1)\n  {\n    printf(\"栈空\")；\n    return ；\n  }\n  else\n  return(PtrS-&gt;Data[(PtrS-&gt;Top)--]); /*注意--符号是后缀\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"3-2链表实现\"><a href=\"#3-2链表实现\" class=\"headerlink\" title=\"3.2链表实现\"></a>3.2链表实现</h4><p><strong>①结构代码</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 以链表的头节点作为TOP，方便查找</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">typedef struct SNode* Stack\nstruct SNode\n{\n  ElementType Data;\n  struct SNode* Next;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>②操作集实现</strong></p>\n<blockquote>\n<p><strong>压入元素</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">void Push(ElementType item,Stack S) \n{\n  struct SNode *TmpCell;\n  TmpCell=(struct SNode *)malloc(sizeof(struct SNode));\n  TmpCell-&gt;Element = item;\n  TmpCell-&gt;Next = S-&gt;Next;\n  S-&gt;Next = TmpCell;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><strong>弹出元素</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">ElementType Pop(Stack S)\n{\n  struct SNode *FirstCell;\n  ElementType TopElem;\n  if(IsEmpty(S))\n  {\n    printf(\"栈空\")；\n    return NULL；\n  }\n  else\n  {\n    FirstCell = S-&gt;Next; /*指向头节点\n    S-&gt;Next = FirstCell = S-&gt;Next;\n    TopElem = FirtCell-&gt;Element;\n    free(FirstCell);\n    return TopElem;\n  }\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<hr>\n<h3 id=\"4-队列\"><a href=\"#4-队列\" class=\"headerlink\" title=\"4.队列\"></a>4.队列</h3><h4 id=\"4-1数组实现\"><a href=\"#4-1数组实现\" class=\"headerlink\" title=\"4.1数组实现\"></a>4.1数组实现</h4><p><strong>①结构代码</strong></p>\n<blockquote>\n<p><code>rear</code>是指向<strong>队尾的“指针”</strong>，<code>front</code>是指向<strong>队头的“指针”</strong>，<strong>插入</strong>一个元素时，<code>rear</code><strong>加一</strong>，<strong>删除</strong>一个元素时，<code>front</code><strong>加一</strong>，</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 当“指针”可以在超过MaxSize且列表未满时，对MaxSize取余再次从0开始，需要一个状态标签判断队列是否已满</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 山不转水转！</div>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#define MaxSize\nstruct QNode\n{\n  ElementType Data [MaxSize]；\n  int rear = -1; \n  int front = -1;\n};\ntypedef struct QNode *Queue;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>②操作集实现</strong></p>\n<blockquote>\n<p><strong>入队列</strong>：将<strong>指定元素</strong>添加到<strong>队尾</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">void AddQ(Queue PtrQ,ElementType item)\n{\n  if((PtrQ-&gt;rear+1)%MaxSize==PtrQ-&gt;front)\n  {\n    printf(\"队列已满\")；\n    return ；\n  }\n  PtrQ-&gt;rear=(PtrQ-&gt;rear+1)%MaxSize;\n  PtrQ-&gt;Data[PtrQ-&gt;rear]=item;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><strong>出队列</strong>：删除<strong>队头元素</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">ElementType DeleteQ(Queue PtrQ)\n{\n  if(PtrQ-&gt;front==PtrQ-&gt;rear)\n  {\n    printf(\"队列空\")；\n    return ERROR；\n  }\n  else\n  {\n    PtrQ-&gt;front=(PtrQ-&gt;front+1)%MaxSize;\n    return PtrQ-&gt;Data[PtrQ-&gt;front];\n  }\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"4-2链表实现\"><a href=\"#4-2链表实现\" class=\"headerlink\" title=\"4.2链表实现\"></a>4.2链表实现</h4><p><strong>①结构代码</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">struct Node\n{\n  ElementType Data;\n  struct Node *Next;\n};\nstruct QNode\n{\n  struct Node *rear; /*指向队尾\n  struct Node *front; /*指向队头，列表的头节点，出队的一端\n};\ntypedef struct QNode *Queue;\nQueue PtrQ;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>②操作集实现</strong></p>\n<blockquote>\n<p><strong>出队列</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">ElementType DeleteQ(Queue PtrQ)\n{\n  struct Node *FrontCell; /*作为中间变量保存要删除的节点\n  ElementType FrontElem;\n\n  if(PtrQ-&gt;front==NULL)\n  {\n    print(\"队列空\")；\n    return ERROR；\n  }\n  FrontCell = PtrQ-&gt;front;\n  if(PtrQ-&gt;front == PtrQ-&gt;rear)\n    PtrQ-&gt;front=PtrQ-&gt;rear=NULL;\n  else\n    PtrQ-&gt;front=PtrQ-&gt;front-&gt;Next;\n  FrontElem = FrontCell-&gt;data;\n  free(FrontCell);\n  return FrontElem;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><strong>入队列</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Status AddQ(Queue PtrQ,ElementType Elem)\n{\n  struct Node *FrontCell; /*作为中间变量保存要删除的节点\n  FrontCell = (struct Node *)malloc(sizeof(Node));\n  if(!FrontCell)\n    exit(OVERFLOW);\n  FrontCell-&gt;Data = Elem;\n  PtrQ-&gt;rear-&gt;next = FrontCell;\n  PtrQ-&gt;rear = FrontCell;\n  return OK;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"数据结构与算法（二）\"><a href=\"#数据结构与算法（二）\" class=\"headerlink\" title=\"数据结构与算法（二）\"></a>数据结构与算法（二）</h1><h2 id=\"线性结构\"><a href=\"#线性结构\" class=\"headerlink\" title=\"线性结构\"></a>线性结构</h2><h3 id=\"1-引言\"><a href=\"#1-引言\" class=\"headerlink\" title=\"1.引言\"></a>1.引言</h3><h4 id=\"1-1数组和链表\"><a href=\"#1-1数组和链表\" class=\"headerlink\" title=\"1.1数组和链表\"></a>1.1数组和链表</h4><p><strong>①数组</strong></p>\n<blockquote>\n<p>一段<strong>连续的内存空间</strong>，其<strong>数组名</strong>记录了其<strong>起始位置</strong>，可以通过<strong>索引</strong>访问<strong>对应位置</strong>的内存单元</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 数组的大小通常是一开始就确定的，但也可以通过一些手段构成动态数组，如C语言的malloc()</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 数组的元素访问非常块，元素地址=起始地址+元素长度x元素索引</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 由于数组是一段连续的内存空间，所以是有限的，可能会出现扩容问题，且移动一个元素会影响其后所有元素</div>\n<p><strong>②链表</strong></p>\n<blockquote>\n<p>多个<strong>零星的内存空间</strong>通过<strong>指针</strong>链接在一起，每个链表有一个<strong>头节点</strong>，记录链表<strong>起始位置</strong>，并通过<strong>各个节点存储的指针</strong>访问<strong>对应节点</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 根据各个节点的链接关系，链表可分为单链表、双向链表和环形链表</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 链表分散于内存各处，更加灵活，内存允许的情况下可以无限增长，且移动一个节点只会影响与其相连的节点</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 链表需要存储指针信息，需要占用更多的内存，且查询节点需要使用指针，速度较慢</div>\n<p><img src=\"/image/SF_1.png\" alt=\"数组与链表\"></p>\n<h4 id=\"1-2抽象\"><a href=\"#1-2抽象\" class=\"headerlink\" title=\"1.2抽象\"></a>1.2抽象</h4><p><strong>①概述</strong></p>\n<blockquote>\n<p>只关心<strong>是什么</strong>，而不关心<strong>如何做到</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 数据结构的抽象就是描述其定义及其操作集</div>\n<p><strong>②定义</strong></p>\n<blockquote>\n<p><strong>线性表</strong>：<strong>零个或多个</strong>数据元素的<strong>有限序列</strong>，<strong>每个元素</strong>只有<strong>一个直接前驱元素</strong>，<strong>一个直接后继元素</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 线性表的元素可以是任何结构，如线性表，但是线性表存储的元素必须统一</div>\n<blockquote>\n<p><strong>栈</strong>：受到<strong>一定约束</strong>的<strong>线性表</strong>，只能在<strong>一端插入和弹出</strong>数据，<strong>后入先出</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>队列</strong>：受到<strong>一定约束</strong>的<strong>线性表</strong>，只能在<strong>一端插入</strong>，在<strong>另一端删除</strong>，<strong>先进先出</strong></p>\n</blockquote>\n<p><strong>③操作集</strong></p>\n<blockquote>\n<p>每个<strong>数据结构</strong>的<strong>操作集</strong>都只需要包含一些<strong>基本且独立</strong>的操作</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 任何复杂操作，都可以转化为操作集的组合</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 每个操作的实现都要考虑不合理情况并抛出异常，以及操作带来的副作用</div>\n<p><img src=\"/image/SF_2.png\" alt=\"线性结构\"></p>\n<hr>\n<h3 id=\"2-线性表\"><a href=\"#2-线性表\" class=\"headerlink\" title=\"2.线性表\"></a>2.线性表</h3><h4 id=\"2-1数组实现\"><a href=\"#2-1数组实现\" class=\"headerlink\" title=\"2.1数组实现\"></a>2.1数组实现</h4><p><strong>①结构代码</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#define MAXSIZE 30\ntypedef int ElemType; &#x2F;&#x2F;如果要修改线性表的数据类型，直接修改这里即可\ntypedef struct\n&#123;\n  ElemType data[MAXSIZE];\n  int length; &#x2F;&#x2F;线性表目前的长度\n&#125;SqList;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>②操作集实现</strong></p>\n<blockquote>\n<p><strong>查找</strong>：获取<strong>对应位置</strong>的<strong>数据</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 需要判断查找的位置是否合理</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#define OK 1\n#define ERROR 0\ntypedef int Status;\n\nStatus  GetElem(SqList L,int i,ElemType *e)\n&#123;\n  if(L.length&#x3D;&#x3D;0||i&lt;1||i&gt;L.length) &#x2F;&#x2F;首先进行异常判断\n    return ERROR;\n  *e &#x3D; L.data[i-1];\n\n  return OK;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><strong>插入</strong>：将<strong>指定数据</strong>添加到<strong>指定位置</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 需要判断插入位置是否合理，以及该操作带来的副作用</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Status ListInsert(SqList *L,int i,ElemType e) &#x2F;&#x2F;注意这里传入的是结构的指针，因为要改变结构\n&#123;\n  &#x2F;&#x2F;首先进行异常检查\n  int k;\n  if(L-&gt;lenth&#x3D;&#x3D;MAXSIZE)\n    return ERROR;\n  if(i&lt;1||i&gt;L-&gt;lenth+1) &#x2F;&#x2F;注意i的含义对代码的影响\n    return ERROR;\n  &#x2F;&#x2F;考虑插入位置对操作的影响\n  if(i&lt;&#x3D;L-&gt;length)\n  &#123;\n    for(k&#x3D;L-&gt;length;k&gt;&#x3D;i-1;k--) &#x2F;&#x2F;后移元素\n      L-&gt;data[k+1]&#x3D;L-&gt;data[k];\n  &#125;\n  L-&gt;data[i-1]&#x3D;e;\n  L-&gt;length++; &#x2F;&#x2F;注意操作带来的额外影响\n  \n  return OK;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><strong>删除</strong>：删除<strong>指定位置</strong>数据并<strong>整理</strong>线性表</p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Status ListDelete(SqList *L,int i)\n&#123;\n  int k;\n  &#x2F;&#x2F;异常检查\n  if(L-&gt;length&#x3D;&#x3D;0)\n    return ERROR;\n  if(i&lt;1||i&gt;L-&gt;length)\n    return ERROR;\n\n  &#x2F;&#x2F;当删除位置不在线性表末尾时\n  if(i&lt;L-&gt;length)\n  &#123;\n    for(k&#x3D;i-1,k&lt;L-length,k++)\n      L-&gt;data[k]&#x3D;L-&gt;data[k+1];\n  &#125;\n  L-&gt;length--; &#x2F;&#x2F;函数操作带来的额外影响\n\n  return OK;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"2-2链表实现\"><a href=\"#2-2链表实现\" class=\"headerlink\" title=\"2.2链表实现\"></a>2.2链表实现</h4><p><strong>①结构代码</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 链表由节点组成，且链接关系也存储在节点中，所以指明了节点的结构就是指明了链表的结构</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F;单链表节点结构\ntypedef struct Node\n&#123;\n  ElemType data;\n  struct Node *next;\n&#125;Node;\ntypedef struct Node *LinkList<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>②操作集实现</strong></p>\n<blockquote>\n<p><strong>创建</strong>：链表是一种<strong>动态结构</strong>，指明其<strong>头节点</strong>即可</p>\n</blockquote>\n<blockquote>\n<p><strong>查找</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Status GetElem(LinkList L,int i,ElemType *e) &#x2F;&#x2F;传入L为链表的头节点的指针\n&#123;\n  int j;\n  LinkList p;\n  p&#x3D;L-&gt;next; &#x2F;&#x2F;使p指向链表的第一个节点\n  j &#x3D; 1;\n  &#x2F;&#x2F;其中p作为判别条件是防止其超过链表范围，因为当p为空指针时，说明已经到达最后一个节点了\n  while(p &amp;&amp; j&lt;i) \n  &#123;\n    p &#x3D; p-&gt;next;\n    ++j;\n  &#125;\n  if(!p || j&gt;i) &#x2F;&#x2F;当p为空指针或者i小于1时，第i个元素不存在\n    return ERROR;\n  return OK;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><strong>插入</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 注意节点插入时，先将新节点插入，再将旧的链接断开</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;*在已存在链表的第i个位置插入元素e\nStatus ListInsert(LinkList *L,int i,ElemType *e)\n&#123;\n  int j;\n  LinkList p,s;\n  p &#x3D; *L;\n  j &#x3D; 1；\n  while(p &amp;&amp; j&lt;i ) &#x2F;*寻找第i个结点,循环结束时j &#x3D; i-1；\n  &#123;\n    p &#x3D; p-&gt;next;\n    ++j;\n  &#125;\n  if (!p || j&gt;i) &#x2F;*当i为0或者第i个结点不存在时\n    return ERROR；\n  s &#x3D; (LinkList)malloc(sizeof(Node));\n  s-&gt;data &#x3D; e;\n  &#x2F;*注意结点断开和相连的顺序\n  s-&gt;next &#x3D; p-&gt;next;&#x2F;*先将新节点添加进链表\n  p-&gt;next &#x3D; s;&#x2F;*再将旧链接断开并添加新链接\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><strong>删除</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 对于没有回收机制的语言，需要注意释放动态分配获得的内存</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Status LinkDelete(LinkList *L,int i,ElemType *e)\n&#123;\n  int j;\n  LinkList p,q;\n  p &#x3D; *L;\n  j &#x3D; 1;\n  while(p-&gt;next &amp;&amp; j&lt;i)\n  &#123;\n    p &#x3D; p-&gt;next;\n    ++j;\n  &#125;\n  if (!p || j&gt;i) &#x2F;*当i为0或者第i个结点不存在时\n    return ERROR；\n  q &#x3D; p-&gt;next;\n  p-&gt;next &#x3D; q-&gt;next;\n  *e &#x3D; q-&gt;data;\n  free(q); &#x2F;*记得要释放对应的空间\n  return OK;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><strong>销毁</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Status LinkClear(LinkList *L)\n&#123;\n  LinkList p,q;\n  p &#x3D; (*L)-&gt;next;\n  while (p)\n  &#123;\n    q &#x3D; p-&gt;next;\n    free(p)\n    p&#x3D;q\n  &#125;\n  (*L)-&gt;next &#x3D; NULL;\n  return OK;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<hr>\n<h3 id=\"3-栈\"><a href=\"#3-栈\" class=\"headerlink\" title=\"3.栈\"></a>3.栈</h3><h4 id=\"3-1数组实现\"><a href=\"#3-1数组实现\" class=\"headerlink\" title=\"3.1数组实现\"></a>3.1数组实现</h4><p><strong>①结构代码</strong></p>\n<blockquote>\n<p>由一个<strong>记录元素的一维数组</strong>和一个<strong>记录栈顶元素位置</strong>的<strong>变量</strong>组成</p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#define MaxSize\ntypedef struct SNode* Stack\nstruct SNode\n&#123;\n  ElementType Data[MaxSize];\n  int Top &#x3D; -1;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>②操作集实现</strong></p>\n<blockquote>\n<p><strong>压入元素</strong>：将<strong>指定元素</strong>放在<strong>栈顶上面</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">void Push(Stack PtrS,ElementType item)\n&#123;\n  if (PtrS-&gt;Top&#x3D;&#x3D;Maxsize-1)\n  &#123;\n    printf(&quot;栈已满&quot;)；\n    return；\n  &#125;\n  else\n  &#123;\n    PtrS-&gt;Data[++(PtrS-&gt;Top)]&#x3D;&#x3D;item;\n  &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><strong>弹出元素</strong>：将<strong>栈顶元素</strong>删除</p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">ElementType Pop(Stack PtrS)\n&#123;\n  if(PtrS-&gt;Top&#x3D;&#x3D;-1)\n  &#123;\n    printf(&quot;栈空&quot;)；\n    return ；\n  &#125;\n  else\n  return(PtrS-&gt;Data[(PtrS-&gt;Top)--]); &#x2F;*注意--符号是后缀\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"3-2链表实现\"><a href=\"#3-2链表实现\" class=\"headerlink\" title=\"3.2链表实现\"></a>3.2链表实现</h4><p><strong>①结构代码</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 以链表的头节点作为TOP，方便查找</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">typedef struct SNode* Stack\nstruct SNode\n&#123;\n  ElementType Data;\n  struct SNode* Next;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>②操作集实现</strong></p>\n<blockquote>\n<p><strong>压入元素</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">void Push(ElementType item,Stack S) \n&#123;\n  struct SNode *TmpCell;\n  TmpCell&#x3D;(struct SNode *)malloc(sizeof(struct SNode));\n  TmpCell-&gt;Element &#x3D; item;\n  TmpCell-&gt;Next &#x3D; S-&gt;Next;\n  S-&gt;Next &#x3D; TmpCell;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><strong>弹出元素</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">ElementType Pop(Stack S)\n&#123;\n  struct SNode *FirstCell;\n  ElementType TopElem;\n  if(IsEmpty(S))\n  &#123;\n    printf(&quot;栈空&quot;)；\n    return NULL；\n  &#125;\n  else\n  &#123;\n    FirstCell &#x3D; S-&gt;Next; &#x2F;*指向头节点\n    S-&gt;Next &#x3D; FirstCell &#x3D; S-&gt;Next;\n    TopElem &#x3D; FirtCell-&gt;Element;\n    free(FirstCell);\n    return TopElem;\n  &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<hr>\n<h3 id=\"4-队列\"><a href=\"#4-队列\" class=\"headerlink\" title=\"4.队列\"></a>4.队列</h3><h4 id=\"4-1数组实现\"><a href=\"#4-1数组实现\" class=\"headerlink\" title=\"4.1数组实现\"></a>4.1数组实现</h4><p><strong>①结构代码</strong></p>\n<blockquote>\n<p><code>rear</code>是指向<strong>队尾的“指针”</strong>，<code>front</code>是指向<strong>队头的“指针”</strong>，<strong>插入</strong>一个元素时，<code>rear</code><strong>加一</strong>，<strong>删除</strong>一个元素时，<code>front</code><strong>加一</strong>，</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 当“指针”可以在超过MaxSize且列表未满时，对MaxSize取余再次从0开始，需要一个状态标签判断队列是否已满</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 山不转水转！</div>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#define MaxSize\nstruct QNode\n&#123;\n  ElementType Data [MaxSize]；\n  int rear &#x3D; -1; \n  int front &#x3D; -1;\n&#125;;\ntypedef struct QNode *Queue;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>②操作集实现</strong></p>\n<blockquote>\n<p><strong>入队列</strong>：将<strong>指定元素</strong>添加到<strong>队尾</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">void AddQ(Queue PtrQ,ElementType item)\n&#123;\n  if((PtrQ-&gt;rear+1)%MaxSize&#x3D;&#x3D;PtrQ-&gt;front)\n  &#123;\n    printf(&quot;队列已满&quot;)；\n    return ；\n  &#125;\n  PtrQ-&gt;rear&#x3D;(PtrQ-&gt;rear+1)%MaxSize;\n  PtrQ-&gt;Data[PtrQ-&gt;rear]&#x3D;item;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><strong>出队列</strong>：删除<strong>队头元素</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">ElementType DeleteQ(Queue PtrQ)\n&#123;\n  if(PtrQ-&gt;front&#x3D;&#x3D;PtrQ-&gt;rear)\n  &#123;\n    printf(&quot;队列空&quot;)；\n    return ERROR；\n  &#125;\n  else\n  &#123;\n    PtrQ-&gt;front&#x3D;(PtrQ-&gt;front+1)%MaxSize;\n    return PtrQ-&gt;Data[PtrQ-&gt;front];\n  &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"4-2链表实现\"><a href=\"#4-2链表实现\" class=\"headerlink\" title=\"4.2链表实现\"></a>4.2链表实现</h4><p><strong>①结构代码</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">struct Node\n&#123;\n  ElementType Data;\n  struct Node *Next;\n&#125;;\nstruct QNode\n&#123;\n  struct Node *rear; &#x2F;*指向队尾\n  struct Node *front; &#x2F;*指向队头，列表的头节点，出队的一端\n&#125;;\ntypedef struct QNode *Queue;\nQueue PtrQ;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>②操作集实现</strong></p>\n<blockquote>\n<p><strong>出队列</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">ElementType DeleteQ(Queue PtrQ)\n&#123;\n  struct Node *FrontCell; &#x2F;*作为中间变量保存要删除的节点\n  ElementType FrontElem;\n\n  if(PtrQ-&gt;front&#x3D;&#x3D;NULL)\n  &#123;\n    print(&quot;队列空&quot;)；\n    return ERROR；\n  &#125;\n  FrontCell &#x3D; PtrQ-&gt;front;\n  if(PtrQ-&gt;front &#x3D;&#x3D; PtrQ-&gt;rear)\n    PtrQ-&gt;front&#x3D;PtrQ-&gt;rear&#x3D;NULL;\n  else\n    PtrQ-&gt;front&#x3D;PtrQ-&gt;front-&gt;Next;\n  FrontElem &#x3D; FrontCell-&gt;data;\n  free(FrontCell);\n  return FrontElem;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><strong>入队列</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Status AddQ(Queue PtrQ,ElementType Elem)\n&#123;\n  struct Node *FrontCell; &#x2F;*作为中间变量保存要删除的节点\n  FrontCell &#x3D; (struct Node *)malloc(sizeof(Node));\n  if(!FrontCell)\n    exit(OVERFLOW);\n  FrontCell-&gt;Data &#x3D; Elem;\n  PtrQ-&gt;rear-&gt;next &#x3D; FrontCell;\n  PtrQ-&gt;rear &#x3D; FrontCell;\n  return OK;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"数据结构与算法（五）","seo_title":"seo名称","toc":true,"indent":true,"top":false,"comments":1,"archive":true,"cover":false,"mathjax":false,"pin":false,"top_meta":false,"bottom_meta":false,"sidebar":["toc"],"keywords":"文章关键词","updated":"2023-11-07T14:10:58.029Z","img":"/medias/featureimages/10.webp","date":"2023-11-07T14:10:58.029Z","summary":"排序算法","_content":"# 数据结构与算法（五）\n## 排序算法\n{%right%}\n默认按照从小到大排序\n{%endright%}\n### 1.冒泡排序\n**1.1思路**：从头比较相邻的两个元素，如果两个元素满足设定的大小关系，则不变，反之则调换位置，这样可以把最小/大的元素放在末尾，随机再对n-1个元素再次使用冒泡排序，总共重复n-1次\n**1.2代码实现**\n![冒泡排序](/image/sjjg_39.png)\n>其中`flag`的作用就是判断是否已经排序好\n\n### 2.插入排序\n**2.1思路**：类似于打扑克理牌的过程，一开始我们手里有一张牌，即`A[0]`，随后从A[1]开始往手里加牌，和**手里的牌的最后一位**（即`A[P-1]`）开始向前比较，如果比新牌大，则交换新牌和他的位置，直到找到新牌的位置（即前一张牌小于新牌）\n**2.2代码实现**\n![插入排序](/image/sjjg_40.png)\n>注意中间变量的作用\n\n### 3.希尔排序（改进的插入排序）\n**3.1逆序对**\n![逆序对](/image/sjjg_41.png)\n![改进思路](/image/sjjg_42.png)\n**3.2思路**\n![基本思路](/image/sjjg_43.png)\n![不足](/image/sjjg_44.png)\n![改进](/image/sjjg_45.png)\n\n### 4.选择排序\n**4.1思路**：首先找到全部元素中的最小元素，放在最前面，然后再找到剩余元素的最小元素，放在第二位，以此类推\n**4.2代码实现**\n![选择排序](/image/sjjg_46.png)\n\n### 5.堆排序（改进的选择排序）\n**5.1思路**：选择排序的瓶颈主要是如何**快速找到最小元**，所以可以采用最小堆来找到最小元素\n**5.2代码实现**\n![堆排序](/image/sjjg_47.png)\n![改进的堆排序](/image/sjjg_48.png)\n>改进的堆排序将数组调整为最大堆，然后将根节点和最后元素交换，然后将最大元素排除在外，重复以上步骤\n\n### 6.归并排序\n**6.1思路**：主要采用的是**分而治之**的思想，将整个序列一直二分，直到将其分为最小单元即只有两个单元，然后将其转化为有序子列并成为新的最小单元，以此类推，直到整个序列都被排序\n>两个**有序子列**的合并：已知两个有序子列，以及一个足够容纳两个子列的空容器，首先比较两个子序列的第一个位置上的元素，选择较小的那个放进容器，然后被选择的子序列的位置向后挪一位，以此类推完成排序\n![有序子列的归并](/image/sjjg_49.png)\n![有序子列的归并代码实现](/image/sjjg_50.png)\n**6.2代码实现**\n**①递归实现**\n![递归实现](/image/sjjg_51.png)\n![统一接口](/image/sjjg_52.png)\n![注意事项](/image/sjjg_53.png)\n**②非递归实现**\n![非递归实现](/image/sjjg_54.png)\n![统一接口](/image/sjjg_55.png)\n\n### 7.快速排序\n{%right%}\n小规模数据采用简单排序（如插入排序），大规模数据采用快速排序\n{%endright%}\n**7.1思路**：挑选一个主元，将序列分为大于该主元和小于该主元的两部分，然后在对这两部分实施上述类似的操作\n>快速排序可以保证在划分子集后，主元所在位置都是它**最终的正确位置**\n\n**7.2代码实现**\n**①主元的选取**\n![主元的选取](/image/sjjg_56.png)\n>这样选取主元之后，`Right`和`Left`元素都不用考虑了\n\n**②子集划分**：如下图，选取后的主元为6，考虑中间的元素（理由见上），最左端和最右端都有一个指针，当左端（右端）指针指向元素小于（大于）主元时，向右（左）移动指针，**反之则停下，当两边指针都停下时交换对应元素**，随后继续迭代，当左端指针大于右端时，交换主元和左端指针位置，完成子集划分\n![子集划分——开始](/image/sjjg_57.png)\n![子集划分——结束](/image/sjjg_58.png)\n**③算法主体**\n![快速排序](/image/sjjg_59.png)\n### 8.基于表排序的物理排序\n{%right%}\n之前的算法都需要频繁地交换元素，对于元素较大的序列效率较差，可以先进行表排序，减少交换元素的次数\n{%endright%}\n**8.1表排序**：不直接排序元素本身，而是排序其指针（位置），需要一个新的数组存储**排序后的位置**\n![表排序](/image/sjjg_60.png)\n**8.2物理排序**：进行完表排序后，发现其排列组成了若干个独立的环，如下图所示，`table[0]`→`A[3]`→`table[3]`→`A[1]`→`table[1]`→`A[5]`→`table[5]`→`A[0]`→`table[0]`形成了一个独立的环，分别调整这些环，将环的一项拆除（将对应的数据存到临时变量中），并根据其`table[]`的值将对应数据放入其中，**并将其`table[i]`改为对应的`i`**，表示这个数据的位置是调整过的，直到空位`table[]`对应位置满足`table[i]==i`，表示环结束，将存在临时变量中的数据存到对应空位中。\n![物理排序](/image/sjjg_61.png)\n### 9.基数排序\n**9.1桶排序**：建立一个**指针数组**，每个指针对应一个**链表**，每个链表代表一种情况，将符合该情况的数据插入该链表即可，排序完后依次从每个桶中提取数据即可\n![桶排序](/image/sjjg_62.png)\n**9.2基数排序**：实际上就是多次的桶排序，如下例，一个三位数如果将每一个数都看作为一种情况，则需要1000个桶，不划算，可以每次只看三位数的某一位，假设从个位数看到百位数，则只需要十个桶，看三次即可，第一次将个位数符合情况的插入到各个桶中，**根据第一次桶排序的顺序**，观察其十位数，插入到对应的桶中，以此类推，观察完所有特征即可\n![基数排序](/image/sjjg_63.png)\n**9.3多关键字排序**\n**①主位优先**\n![主位优先](/image/sjjg_64.png)\n**②次位优先**\n![次位优先](/image/sjjg_65.png)\n\n>注意题中需要的顺序，如果主位优先中第二步也采用桶排序，则获得的顺序是13组，而不是4组，要注意如果只使用桶排序，**关键字的顺序**是非常重要的\n\n### 10.小结\n![小结](/image/sjjg_66.png)","source":"_posts/数据结构与算法（六）.md","raw":"---\ntitle: 数据结构与算法（五）\nseo_title: seo名称\ntoc: true\nindent: true\ntop: false\ncomments: true\narchive: true\ncover: false\nmathjax: false\npin: false\ntop_meta: false\nbottom_meta: false\nsidebar:\n  - toc\ntag:\n  - 计算机基础\n  - 数据结构与算法\ncategories: 计算机基础\nkeywords: 文章关键词\nupdated: ''\nimg: /medias/featureimages/10.webp\ndate:\nsummary: 排序算法\n---\n# 数据结构与算法（五）\n## 排序算法\n{%right%}\n默认按照从小到大排序\n{%endright%}\n### 1.冒泡排序\n**1.1思路**：从头比较相邻的两个元素，如果两个元素满足设定的大小关系，则不变，反之则调换位置，这样可以把最小/大的元素放在末尾，随机再对n-1个元素再次使用冒泡排序，总共重复n-1次\n**1.2代码实现**\n![冒泡排序](/image/sjjg_39.png)\n>其中`flag`的作用就是判断是否已经排序好\n\n### 2.插入排序\n**2.1思路**：类似于打扑克理牌的过程，一开始我们手里有一张牌，即`A[0]`，随后从A[1]开始往手里加牌，和**手里的牌的最后一位**（即`A[P-1]`）开始向前比较，如果比新牌大，则交换新牌和他的位置，直到找到新牌的位置（即前一张牌小于新牌）\n**2.2代码实现**\n![插入排序](/image/sjjg_40.png)\n>注意中间变量的作用\n\n### 3.希尔排序（改进的插入排序）\n**3.1逆序对**\n![逆序对](/image/sjjg_41.png)\n![改进思路](/image/sjjg_42.png)\n**3.2思路**\n![基本思路](/image/sjjg_43.png)\n![不足](/image/sjjg_44.png)\n![改进](/image/sjjg_45.png)\n\n### 4.选择排序\n**4.1思路**：首先找到全部元素中的最小元素，放在最前面，然后再找到剩余元素的最小元素，放在第二位，以此类推\n**4.2代码实现**\n![选择排序](/image/sjjg_46.png)\n\n### 5.堆排序（改进的选择排序）\n**5.1思路**：选择排序的瓶颈主要是如何**快速找到最小元**，所以可以采用最小堆来找到最小元素\n**5.2代码实现**\n![堆排序](/image/sjjg_47.png)\n![改进的堆排序](/image/sjjg_48.png)\n>改进的堆排序将数组调整为最大堆，然后将根节点和最后元素交换，然后将最大元素排除在外，重复以上步骤\n\n### 6.归并排序\n**6.1思路**：主要采用的是**分而治之**的思想，将整个序列一直二分，直到将其分为最小单元即只有两个单元，然后将其转化为有序子列并成为新的最小单元，以此类推，直到整个序列都被排序\n>两个**有序子列**的合并：已知两个有序子列，以及一个足够容纳两个子列的空容器，首先比较两个子序列的第一个位置上的元素，选择较小的那个放进容器，然后被选择的子序列的位置向后挪一位，以此类推完成排序\n![有序子列的归并](/image/sjjg_49.png)\n![有序子列的归并代码实现](/image/sjjg_50.png)\n**6.2代码实现**\n**①递归实现**\n![递归实现](/image/sjjg_51.png)\n![统一接口](/image/sjjg_52.png)\n![注意事项](/image/sjjg_53.png)\n**②非递归实现**\n![非递归实现](/image/sjjg_54.png)\n![统一接口](/image/sjjg_55.png)\n\n### 7.快速排序\n{%right%}\n小规模数据采用简单排序（如插入排序），大规模数据采用快速排序\n{%endright%}\n**7.1思路**：挑选一个主元，将序列分为大于该主元和小于该主元的两部分，然后在对这两部分实施上述类似的操作\n>快速排序可以保证在划分子集后，主元所在位置都是它**最终的正确位置**\n\n**7.2代码实现**\n**①主元的选取**\n![主元的选取](/image/sjjg_56.png)\n>这样选取主元之后，`Right`和`Left`元素都不用考虑了\n\n**②子集划分**：如下图，选取后的主元为6，考虑中间的元素（理由见上），最左端和最右端都有一个指针，当左端（右端）指针指向元素小于（大于）主元时，向右（左）移动指针，**反之则停下，当两边指针都停下时交换对应元素**，随后继续迭代，当左端指针大于右端时，交换主元和左端指针位置，完成子集划分\n![子集划分——开始](/image/sjjg_57.png)\n![子集划分——结束](/image/sjjg_58.png)\n**③算法主体**\n![快速排序](/image/sjjg_59.png)\n### 8.基于表排序的物理排序\n{%right%}\n之前的算法都需要频繁地交换元素，对于元素较大的序列效率较差，可以先进行表排序，减少交换元素的次数\n{%endright%}\n**8.1表排序**：不直接排序元素本身，而是排序其指针（位置），需要一个新的数组存储**排序后的位置**\n![表排序](/image/sjjg_60.png)\n**8.2物理排序**：进行完表排序后，发现其排列组成了若干个独立的环，如下图所示，`table[0]`→`A[3]`→`table[3]`→`A[1]`→`table[1]`→`A[5]`→`table[5]`→`A[0]`→`table[0]`形成了一个独立的环，分别调整这些环，将环的一项拆除（将对应的数据存到临时变量中），并根据其`table[]`的值将对应数据放入其中，**并将其`table[i]`改为对应的`i`**，表示这个数据的位置是调整过的，直到空位`table[]`对应位置满足`table[i]==i`，表示环结束，将存在临时变量中的数据存到对应空位中。\n![物理排序](/image/sjjg_61.png)\n### 9.基数排序\n**9.1桶排序**：建立一个**指针数组**，每个指针对应一个**链表**，每个链表代表一种情况，将符合该情况的数据插入该链表即可，排序完后依次从每个桶中提取数据即可\n![桶排序](/image/sjjg_62.png)\n**9.2基数排序**：实际上就是多次的桶排序，如下例，一个三位数如果将每一个数都看作为一种情况，则需要1000个桶，不划算，可以每次只看三位数的某一位，假设从个位数看到百位数，则只需要十个桶，看三次即可，第一次将个位数符合情况的插入到各个桶中，**根据第一次桶排序的顺序**，观察其十位数，插入到对应的桶中，以此类推，观察完所有特征即可\n![基数排序](/image/sjjg_63.png)\n**9.3多关键字排序**\n**①主位优先**\n![主位优先](/image/sjjg_64.png)\n**②次位优先**\n![次位优先](/image/sjjg_65.png)\n\n>注意题中需要的顺序，如果主位优先中第二步也采用桶排序，则获得的顺序是13组，而不是4组，要注意如果只使用桶排序，**关键字的顺序**是非常重要的\n\n### 10.小结\n![小结](/image/sjjg_66.png)","slug":"数据结构与算法（六）","published":1,"_id":"clmkphbfd00229gvdcjvr5v9t","layout":"post","photos":[],"link":"","content":"<h1 id=\"数据结构与算法（五）\"><a href=\"#数据结构与算法（五）\" class=\"headerlink\" title=\"数据结构与算法（五）\"></a>数据结构与算法（五）</h1><h2 id=\"排序算法\"><a href=\"#排序算法\" class=\"headerlink\" title=\"排序算法\"></a>排序算法</h2><div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 默认按照从小到大排序</div>\n<h3 id=\"1-冒泡排序\"><a href=\"#1-冒泡排序\" class=\"headerlink\" title=\"1.冒泡排序\"></a>1.冒泡排序</h3><p><strong>1.1思路</strong>：从头比较相邻的两个元素，如果两个元素满足设定的大小关系，则不变，反之则调换位置，这样可以把最小/大的元素放在末尾，随机再对n-1个元素再次使用冒泡排序，总共重复n-1次<br><strong>1.2代码实现</strong><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/sjjg_39.png\" alt=\"冒泡排序\"></p>\n<blockquote>\n<p>其中<code>flag</code>的作用就是判断是否已经排序好</p>\n</blockquote>\n<h3 id=\"2-插入排序\"><a href=\"#2-插入排序\" class=\"headerlink\" title=\"2.插入排序\"></a>2.插入排序</h3><p><strong>2.1思路</strong>：类似于打扑克理牌的过程，一开始我们手里有一张牌，即<code>A[0]</code>，随后从A[1]开始往手里加牌，和<strong>手里的牌的最后一位</strong>（即<code>A[P-1]</code>）开始向前比较，如果比新牌大，则交换新牌和他的位置，直到找到新牌的位置（即前一张牌小于新牌）<br><strong>2.2代码实现</strong><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/sjjg_40.png\" alt=\"插入排序\"></p>\n<blockquote>\n<p>注意中间变量的作用</p>\n</blockquote>\n<h3 id=\"3-希尔排序（改进的插入排序）\"><a href=\"#3-希尔排序（改进的插入排序）\" class=\"headerlink\" title=\"3.希尔排序（改进的插入排序）\"></a>3.希尔排序（改进的插入排序）</h3><p><strong>3.1逆序对</strong><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/sjjg_41.png\" alt=\"逆序对\"><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/sjjg_42.png\" alt=\"改进思路\"><br><strong>3.2思路</strong><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/sjjg_43.png\" alt=\"基本思路\"><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/sjjg_44.png\" alt=\"不足\"><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/sjjg_45.png\" alt=\"改进\"></p>\n<h3 id=\"4-选择排序\"><a href=\"#4-选择排序\" class=\"headerlink\" title=\"4.选择排序\"></a>4.选择排序</h3><p><strong>4.1思路</strong>：首先找到全部元素中的最小元素，放在最前面，然后再找到剩余元素的最小元素，放在第二位，以此类推<br><strong>4.2代码实现</strong><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/sjjg_46.png\" alt=\"选择排序\"></p>\n<h3 id=\"5-堆排序（改进的选择排序）\"><a href=\"#5-堆排序（改进的选择排序）\" class=\"headerlink\" title=\"5.堆排序（改进的选择排序）\"></a>5.堆排序（改进的选择排序）</h3><p><strong>5.1思路</strong>：选择排序的瓶颈主要是如何<strong>快速找到最小元</strong>，所以可以采用最小堆来找到最小元素<br><strong>5.2代码实现</strong><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/sjjg_47.png\" alt=\"堆排序\"><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/sjjg_48.png\" alt=\"改进的堆排序\"></p>\n<blockquote>\n<p>改进的堆排序将数组调整为最大堆，然后将根节点和最后元素交换，然后将最大元素排除在外，重复以上步骤</p>\n</blockquote>\n<h3 id=\"6-归并排序\"><a href=\"#6-归并排序\" class=\"headerlink\" title=\"6.归并排序\"></a>6.归并排序</h3><p><strong>6.1思路</strong>：主要采用的是<strong>分而治之</strong>的思想，将整个序列一直二分，直到将其分为最小单元即只有两个单元，然后将其转化为有序子列并成为新的最小单元，以此类推，直到整个序列都被排序</p>\n<blockquote>\n<p>两个<strong>有序子列</strong>的合并：已知两个有序子列，以及一个足够容纳两个子列的空容器，首先比较两个子序列的第一个位置上的元素，选择较小的那个放进容器，然后被选择的子序列的位置向后挪一位，以此类推完成排序<br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/sjjg_49.png\" alt=\"有序子列的归并\"><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/sjjg_50.png\" alt=\"有序子列的归并代码实现\"><br><strong>6.2代码实现</strong><br><strong>①递归实现</strong><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/sjjg_51.png\" alt=\"递归实现\"><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/sjjg_52.png\" alt=\"统一接口\"><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/sjjg_53.png\" alt=\"注意事项\"><br><strong>②非递归实现</strong><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/sjjg_54.png\" alt=\"非递归实现\"><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/sjjg_55.png\" alt=\"统一接口\"></p>\n</blockquote>\n<h3 id=\"7-快速排序\"><a href=\"#7-快速排序\" class=\"headerlink\" title=\"7.快速排序\"></a>7.快速排序</h3><div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 小规模数据采用简单排序（如插入排序），大规模数据采用快速排序</div>\n<p><strong>7.1思路</strong>：挑选一个主元，将序列分为大于该主元和小于该主元的两部分，然后在对这两部分实施上述类似的操作</p>\n<blockquote>\n<p>快速排序可以保证在划分子集后，主元所在位置都是它<strong>最终的正确位置</strong></p>\n</blockquote>\n<p><strong>7.2代码实现</strong><br><strong>①主元的选取</strong><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/sjjg_56.png\" alt=\"主元的选取\"></p>\n<blockquote>\n<p>这样选取主元之后，<code>Right</code>和<code>Left</code>元素都不用考虑了</p>\n</blockquote>\n<p><strong>②子集划分</strong>：如下图，选取后的主元为6，考虑中间的元素（理由见上），最左端和最右端都有一个指针，当左端（右端）指针指向元素小于（大于）主元时，向右（左）移动指针，<strong>反之则停下，当两边指针都停下时交换对应元素</strong>，随后继续迭代，当左端指针大于右端时，交换主元和左端指针位置，完成子集划分<br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/sjjg_57.png\" alt=\"子集划分——开始\"><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/sjjg_58.png\" alt=\"子集划分——结束\"><br><strong>③算法主体</strong><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/sjjg_59.png\" alt=\"快速排序\"></p>\n<h3 id=\"8-基于表排序的物理排序\"><a href=\"#8-基于表排序的物理排序\" class=\"headerlink\" title=\"8.基于表排序的物理排序\"></a>8.基于表排序的物理排序</h3><div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 之前的算法都需要频繁地交换元素，对于元素较大的序列效率较差，可以先进行表排序，减少交换元素的次数</div>\n<p><strong>8.1表排序</strong>：不直接排序元素本身，而是排序其指针（位置），需要一个新的数组存储<strong>排序后的位置</strong><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/sjjg_60.png\" alt=\"表排序\"><br><strong>8.2物理排序</strong>：进行完表排序后，发现其排列组成了若干个独立的环，如下图所示，<code>table[0]</code>→<code>A[3]</code>→<code>table[3]</code>→<code>A[1]</code>→<code>table[1]</code>→<code>A[5]</code>→<code>table[5]</code>→<code>A[0]</code>→<code>table[0]</code>形成了一个独立的环，分别调整这些环，将环的一项拆除（将对应的数据存到临时变量中），并根据其<code>table[]</code>的值将对应数据放入其中，**并将其<code>table[i]</code>改为对应的<code>i</code>**，表示这个数据的位置是调整过的，直到空位<code>table[]</code>对应位置满足<code>table[i]==i</code>，表示环结束，将存在临时变量中的数据存到对应空位中。<br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/sjjg_61.png\" alt=\"物理排序\"></p>\n<h3 id=\"9-基数排序\"><a href=\"#9-基数排序\" class=\"headerlink\" title=\"9.基数排序\"></a>9.基数排序</h3><p><strong>9.1桶排序</strong>：建立一个<strong>指针数组</strong>，每个指针对应一个<strong>链表</strong>，每个链表代表一种情况，将符合该情况的数据插入该链表即可，排序完后依次从每个桶中提取数据即可<br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/sjjg_62.png\" alt=\"桶排序\"><br><strong>9.2基数排序</strong>：实际上就是多次的桶排序，如下例，一个三位数如果将每一个数都看作为一种情况，则需要1000个桶，不划算，可以每次只看三位数的某一位，假设从个位数看到百位数，则只需要十个桶，看三次即可，第一次将个位数符合情况的插入到各个桶中，<strong>根据第一次桶排序的顺序</strong>，观察其十位数，插入到对应的桶中，以此类推，观察完所有特征即可<br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/sjjg_63.png\" alt=\"基数排序\"><br><strong>9.3多关键字排序</strong><br><strong>①主位优先</strong><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/sjjg_64.png\" alt=\"主位优先\"><br><strong>②次位优先</strong><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/sjjg_65.png\" alt=\"次位优先\"></p>\n<blockquote>\n<p>注意题中需要的顺序，如果主位优先中第二步也采用桶排序，则获得的顺序是13组，而不是4组，要注意如果只使用桶排序，<strong>关键字的顺序</strong>是非常重要的</p>\n</blockquote>\n<h3 id=\"10-小结\"><a href=\"#10-小结\" class=\"headerlink\" title=\"10.小结\"></a>10.小结</h3><p><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/sjjg_66.png\" alt=\"小结\"></p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"数据结构与算法（五）\"><a href=\"#数据结构与算法（五）\" class=\"headerlink\" title=\"数据结构与算法（五）\"></a>数据结构与算法（五）</h1><h2 id=\"排序算法\"><a href=\"#排序算法\" class=\"headerlink\" title=\"排序算法\"></a>排序算法</h2><div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 默认按照从小到大排序</div>\n<h3 id=\"1-冒泡排序\"><a href=\"#1-冒泡排序\" class=\"headerlink\" title=\"1.冒泡排序\"></a>1.冒泡排序</h3><p><strong>1.1思路</strong>：从头比较相邻的两个元素，如果两个元素满足设定的大小关系，则不变，反之则调换位置，这样可以把最小&#x2F;大的元素放在末尾，随机再对n-1个元素再次使用冒泡排序，总共重复n-1次<br><strong>1.2代码实现</strong><br><img src=\"/image/sjjg_39.png\" alt=\"冒泡排序\"></p>\n<blockquote>\n<p>其中<code>flag</code>的作用就是判断是否已经排序好</p>\n</blockquote>\n<h3 id=\"2-插入排序\"><a href=\"#2-插入排序\" class=\"headerlink\" title=\"2.插入排序\"></a>2.插入排序</h3><p><strong>2.1思路</strong>：类似于打扑克理牌的过程，一开始我们手里有一张牌，即<code>A[0]</code>，随后从A[1]开始往手里加牌，和<strong>手里的牌的最后一位</strong>（即<code>A[P-1]</code>）开始向前比较，如果比新牌大，则交换新牌和他的位置，直到找到新牌的位置（即前一张牌小于新牌）<br><strong>2.2代码实现</strong><br><img src=\"/image/sjjg_40.png\" alt=\"插入排序\"></p>\n<blockquote>\n<p>注意中间变量的作用</p>\n</blockquote>\n<h3 id=\"3-希尔排序（改进的插入排序）\"><a href=\"#3-希尔排序（改进的插入排序）\" class=\"headerlink\" title=\"3.希尔排序（改进的插入排序）\"></a>3.希尔排序（改进的插入排序）</h3><p><strong>3.1逆序对</strong><br><img src=\"/image/sjjg_41.png\" alt=\"逆序对\"><br><img src=\"/image/sjjg_42.png\" alt=\"改进思路\"><br><strong>3.2思路</strong><br><img src=\"/image/sjjg_43.png\" alt=\"基本思路\"><br><img src=\"/image/sjjg_44.png\" alt=\"不足\"><br><img src=\"/image/sjjg_45.png\" alt=\"改进\"></p>\n<h3 id=\"4-选择排序\"><a href=\"#4-选择排序\" class=\"headerlink\" title=\"4.选择排序\"></a>4.选择排序</h3><p><strong>4.1思路</strong>：首先找到全部元素中的最小元素，放在最前面，然后再找到剩余元素的最小元素，放在第二位，以此类推<br><strong>4.2代码实现</strong><br><img src=\"/image/sjjg_46.png\" alt=\"选择排序\"></p>\n<h3 id=\"5-堆排序（改进的选择排序）\"><a href=\"#5-堆排序（改进的选择排序）\" class=\"headerlink\" title=\"5.堆排序（改进的选择排序）\"></a>5.堆排序（改进的选择排序）</h3><p><strong>5.1思路</strong>：选择排序的瓶颈主要是如何<strong>快速找到最小元</strong>，所以可以采用最小堆来找到最小元素<br><strong>5.2代码实现</strong><br><img src=\"/image/sjjg_47.png\" alt=\"堆排序\"><br><img src=\"/image/sjjg_48.png\" alt=\"改进的堆排序\"></p>\n<blockquote>\n<p>改进的堆排序将数组调整为最大堆，然后将根节点和最后元素交换，然后将最大元素排除在外，重复以上步骤</p>\n</blockquote>\n<h3 id=\"6-归并排序\"><a href=\"#6-归并排序\" class=\"headerlink\" title=\"6.归并排序\"></a>6.归并排序</h3><p><strong>6.1思路</strong>：主要采用的是<strong>分而治之</strong>的思想，将整个序列一直二分，直到将其分为最小单元即只有两个单元，然后将其转化为有序子列并成为新的最小单元，以此类推，直到整个序列都被排序</p>\n<blockquote>\n<p>两个<strong>有序子列</strong>的合并：已知两个有序子列，以及一个足够容纳两个子列的空容器，首先比较两个子序列的第一个位置上的元素，选择较小的那个放进容器，然后被选择的子序列的位置向后挪一位，以此类推完成排序<br><img src=\"/image/sjjg_49.png\" alt=\"有序子列的归并\"><br><img src=\"/image/sjjg_50.png\" alt=\"有序子列的归并代码实现\"><br><strong>6.2代码实现</strong><br><strong>①递归实现</strong><br><img src=\"/image/sjjg_51.png\" alt=\"递归实现\"><br><img src=\"/image/sjjg_52.png\" alt=\"统一接口\"><br><img src=\"/image/sjjg_53.png\" alt=\"注意事项\"><br><strong>②非递归实现</strong><br><img src=\"/image/sjjg_54.png\" alt=\"非递归实现\"><br><img src=\"/image/sjjg_55.png\" alt=\"统一接口\"></p>\n</blockquote>\n<h3 id=\"7-快速排序\"><a href=\"#7-快速排序\" class=\"headerlink\" title=\"7.快速排序\"></a>7.快速排序</h3><div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 小规模数据采用简单排序（如插入排序），大规模数据采用快速排序</div>\n<p><strong>7.1思路</strong>：挑选一个主元，将序列分为大于该主元和小于该主元的两部分，然后在对这两部分实施上述类似的操作</p>\n<blockquote>\n<p>快速排序可以保证在划分子集后，主元所在位置都是它<strong>最终的正确位置</strong></p>\n</blockquote>\n<p><strong>7.2代码实现</strong><br><strong>①主元的选取</strong><br><img src=\"/image/sjjg_56.png\" alt=\"主元的选取\"></p>\n<blockquote>\n<p>这样选取主元之后，<code>Right</code>和<code>Left</code>元素都不用考虑了</p>\n</blockquote>\n<p><strong>②子集划分</strong>：如下图，选取后的主元为6，考虑中间的元素（理由见上），最左端和最右端都有一个指针，当左端（右端）指针指向元素小于（大于）主元时，向右（左）移动指针，<strong>反之则停下，当两边指针都停下时交换对应元素</strong>，随后继续迭代，当左端指针大于右端时，交换主元和左端指针位置，完成子集划分<br><img src=\"/image/sjjg_57.png\" alt=\"子集划分——开始\"><br><img src=\"/image/sjjg_58.png\" alt=\"子集划分——结束\"><br><strong>③算法主体</strong><br><img src=\"/image/sjjg_59.png\" alt=\"快速排序\"></p>\n<h3 id=\"8-基于表排序的物理排序\"><a href=\"#8-基于表排序的物理排序\" class=\"headerlink\" title=\"8.基于表排序的物理排序\"></a>8.基于表排序的物理排序</h3><div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 之前的算法都需要频繁地交换元素，对于元素较大的序列效率较差，可以先进行表排序，减少交换元素的次数</div>\n<p><strong>8.1表排序</strong>：不直接排序元素本身，而是排序其指针（位置），需要一个新的数组存储<strong>排序后的位置</strong><br><img src=\"/image/sjjg_60.png\" alt=\"表排序\"><br><strong>8.2物理排序</strong>：进行完表排序后，发现其排列组成了若干个独立的环，如下图所示，<code>table[0]</code>→<code>A[3]</code>→<code>table[3]</code>→<code>A[1]</code>→<code>table[1]</code>→<code>A[5]</code>→<code>table[5]</code>→<code>A[0]</code>→<code>table[0]</code>形成了一个独立的环，分别调整这些环，将环的一项拆除（将对应的数据存到临时变量中），并根据其<code>table[]</code>的值将对应数据放入其中，**并将其<code>table[i]</code>改为对应的<code>i</code>**，表示这个数据的位置是调整过的，直到空位<code>table[]</code>对应位置满足<code>table[i]==i</code>，表示环结束，将存在临时变量中的数据存到对应空位中。<br><img src=\"/image/sjjg_61.png\" alt=\"物理排序\"></p>\n<h3 id=\"9-基数排序\"><a href=\"#9-基数排序\" class=\"headerlink\" title=\"9.基数排序\"></a>9.基数排序</h3><p><strong>9.1桶排序</strong>：建立一个<strong>指针数组</strong>，每个指针对应一个<strong>链表</strong>，每个链表代表一种情况，将符合该情况的数据插入该链表即可，排序完后依次从每个桶中提取数据即可<br><img src=\"/image/sjjg_62.png\" alt=\"桶排序\"><br><strong>9.2基数排序</strong>：实际上就是多次的桶排序，如下例，一个三位数如果将每一个数都看作为一种情况，则需要1000个桶，不划算，可以每次只看三位数的某一位，假设从个位数看到百位数，则只需要十个桶，看三次即可，第一次将个位数符合情况的插入到各个桶中，<strong>根据第一次桶排序的顺序</strong>，观察其十位数，插入到对应的桶中，以此类推，观察完所有特征即可<br><img src=\"/image/sjjg_63.png\" alt=\"基数排序\"><br><strong>9.3多关键字排序</strong><br><strong>①主位优先</strong><br><img src=\"/image/sjjg_64.png\" alt=\"主位优先\"><br><strong>②次位优先</strong><br><img src=\"/image/sjjg_65.png\" alt=\"次位优先\"></p>\n<blockquote>\n<p>注意题中需要的顺序，如果主位优先中第二步也采用桶排序，则获得的顺序是13组，而不是4组，要注意如果只使用桶排序，<strong>关键字的顺序</strong>是非常重要的</p>\n</blockquote>\n<h3 id=\"10-小结\"><a href=\"#10-小结\" class=\"headerlink\" title=\"10.小结\"></a>10.小结</h3><p><img src=\"/image/sjjg_66.png\" alt=\"小结\"></p>\n"},{"title":"数据结构与算法（四）","seo_title":"seo名称","toc":true,"indent":true,"top":false,"comments":1,"archive":true,"cover":false,"mathjax":false,"pin":false,"top_meta":false,"bottom_meta":false,"sidebar":["toc"],"keywords":"文章关键词","updated":"2023-11-07T14:10:58.029Z","img":"/medias/featureimages/10.webp","date":"2023-11-07T14:10:58.029Z","summary":"图结构","_content":"# 数据结构与算法（四）\n## 图结构\n### 1.图\n**1.1定义**：由一个非空的有限**顶点**集合V和一个有限**边**集合E组成\n**1.2表示**\n①邻接矩阵：对角线为0的**对称矩阵**\n![邻接矩阵](/image/sjjg_15.png)\n![邻接矩阵的数组表示](/image/sjjg_16.png)\n②邻接表\n![邻接表](/image/sjjg_17.png)\n\n**1.3图的连通性**\n①连通：如果两个顶点之间存在一条**无向路径**，则称这两点是连通的\n②连通图：图中**任意两点**均连通\n③连通分量\n![连通分量](/image/sjjg_20.png)\n\n### 2.图的遍历\n**2.1深度优先搜索（DFS）**\n①思想：选定一个入口，挑选一个没有被访问的与之相连的节点，来到这个节点之后同样挑选一个与之相连的没有被访问的节点，如果没有则原路返回，直到返回到出口\n②伪码描述\n![DFS](/image/sjjg_18.png)\n**2.2广度优先搜索（BFS）**\n①思想：选择一个入口，将其压入队列中，弹出入口时，将与入口相连的节点压入队列中，然后弹出队列最前面的节点，并将与其相连的节点压入队列中，直到队列为空\n②伪码描述\n![BFS](/image/sjjg_19.png)\n\n**2.3两种遍历方法的特点**\n\n### 3.图的建立\n**3.1邻接矩阵表示**\n①结构代码\n顶点结构代码\n```\ntypedef struct GNode *PtrToNode;\nstruct GNode\n{\n  int Nv; /*定点数\n  int Ne; /*边数\n  WeightType G[MaxVertexNum][MaxVertexNum];\n};\ntypedef PtrToNode MGraph;\n```\n边结构代码\n```\ntypedef struct ENode *PtrToENode;\nstruct ENode\n{\n  VerTex V1,V2; /*边连接的顶点\n  WeightType Weight; /*权重\n}\ntypedef PtrToENode Edge;\n```\n②图的初始化（有一定顶点但是边为0）\n```\ntypedef int Vertex; /*用顶点下标表示顶点，为整型\nMGraph CreateGraph(int VertexNum)\n{\n  Vertex V,W;\n  MGraph Graph;\n\n  Graph = (MGraph)malloc(sizeof(struct GNode));\n  Graph->Nv = VertexNum;\n  Graph->Ne = 0;\n\n  for(V = 0;V < Graph->Nv;V++)\n    for(W = 0;W < Graph->Nv;W++)\n      Graph->G[V][W] = 0;\n  return Graph;\n}\n```\n②边的插入\n```\nvoid InsertEdge(MGraph Graph,Edge E)\n{\n  Graph->G[E->V1][E->V2] = E->Weigh; \n  Graph->G[E->V2][E->V1] = E->Weigh; /*如果是有向边，则这条可以省略\n}\n```\n③图的建立\n![图的建立](/image/sjjg_21.png)\n**3.2邻接表表示**\n①结构代码\n顶点结构\n```\ntypedef struct GNode *PtrToGNode;\nstruct GNode\n{\n  int Nv; /*顶点数\n  int Ne; /*边数\n  AdjList G; /邻接表\n};\n```\n邻接表结构\n```\ntypedef struct Vnode\n{\n  PtrToAdjVNode FirstEdge;\n  DataType Data; /*顶点数据\n}AdjList[MaxVertexNum];\n```\n>该段代码将元素为`Vnode`结构的数组重命名为`AdjList`\n\n边结构\n```\ntypedef struct AdjVNode *PtrToAdjVNode;\nstruct AdjVNode\n{\n  Vertex AdjV; /*邻接点下标\n  WeightType Weight; /*边权重\n  PtrToAdjVNode Next;\n};\n②初始化\n```\ntypedef int Vertex; /*定义实质为整形的顶点下标变量\nLGraph CreateGraph(int VertexNum)\n{\n  Vertex V;\n  LGraph Graph;\n\n  Graph = (LGraph)malloc(sizeof(struct GNode));\n  Graph->Nv = VertexNum;\n  Graph->Ne = 0;\n  for(V = 0;V < Graph->Nv;V++)\n    Graph->G[V].FirstEdge = NULL;\n  \n  return Graph;\n}\n③插入边\n```\nvoid Insert(LGraph Graph, Edge E)\n{\n  /*建立新的邻接点\n  PtrToAdjVNode NewNode;\n  NewNode = (PtrToAdjVNode)malloc(sizeof(struct AdjVNode));\n  NewNode->AdjV = E->V2;\n  NewNode->Weight = E->Weight;\n  /*\n  NewNode->Next = Graph->G[E->V1].FirstEdge;\n  Graph->G[E->V1].FirstEdge = NewNode;\n}\n```\n\n### 4.图的最短路径算法\n**4.1无权图的单源最短路径算法**\n①思路：从起点出发，先找到和他距离为1的**没有访问过**的节点，然后在此基础上寻找距离为2的节点，以此类推，直到找到终点\n\n![思路](/image/sjjg_22.png)\n②伪码描述\n>其中`dist`数组将没访问的节点与原点的距离设置为一个负数，可以同时起到`Visited`函数作用\n`path`记录的是最短路径中，当前节点的上一个节点信息\n\n![伪码描述](/image/sjjg_23.png)\n**4.2有权图的单源最短路径算法**\n①思路：选定原点`s`，然后访问其**邻接点**，计算其路径长度并存储在`dist[]`中（`dist[]`记录的是原点**经过已收录点**到对应点的距离，初始值都为**正无穷**），选择一个`dist[]`**最小的未收录的点**收录，随后访问收录点的**未收录邻接点**，更新`dist[]`，在更新的过程中，要注意新收录点可能会影响其邻接点的`dist[]`，即**只经过旧收录点的路径不是最短的了**，需要更新`dist[]`和`path[]`，以此类推，直到所有点都被收录。\n![Dijkstra](/image/sjjg_24.png)\n②伪码描述\n![伪码描述](/image/sjjg_25.png)\n![时间复杂度](/image/sjjg_26.png)\n\n**4.3多源最短路算法**\n①思路\n![Floyd](/image/sjjg_27.png)\n②伪码描述\n![伪码描述](/image/sjjg_28.png)\n\n### 5.最小生成树\n**5.1定义**\n![最小生成树](/image/sjjg_29.png)\n**5.2贪心算法**\n![贪心算法](/image/sjjg_30.png)\n**5.2prim算法**\n①思路：先选择一个起点，选择其**权重最小的邻接点**并收录，随后选择**已收录点**的权重最小的邻接点，但是不能构成回路，以此类推，直到收录所有的点\n②伪码描述\n![伪码描述](/image/sjjg_31.png)\n**5.2Kruskal算法**\n①思路：选择其中**未被选择的权值最小的边**（可以是多条）将顶点连接起来，以此类推，但是在过程中不能形成回路，直到收录了V-1条边\n②伪码描述\n![伪码描述](/image/sjjg_32.png)\n>回路的检查：一开始将所有顶点看作为独立集合，新加边就是合并集合，如果新加入的边的两边顶点已经是一个集合的了，则会形成回路\n\n### 6.拓扑排序\n**6.1定义**\n![拓扑排序](/image/sjjg_33.png)\n![例子](/image/sjjg_34.png)\n**6.2算法**\n①思想：每次输出所有**没有前驱节点**的节点\n②伪码描述\n![伪码描述](/image/sjjg_35.png)\n![算法改进](/image/sjjg_36.png)\n### 7.关键路径（项目管理问题）\n**7.1定义**\n![定义](/image/sjjg_37.png)\n**7.2思路**\n![思路](/image/sjjg_38.png)","source":"_posts/数据结构与算法（五）.md","raw":"---\ntitle: 数据结构与算法（四）\nseo_title: seo名称\ntoc: true\nindent: true\ntop: false\ncomments: true\narchive: true\ncover: false\nmathjax: false\npin: false\ntop_meta: false\nbottom_meta: false\nsidebar:\n  - toc\ntag:\n  - 计算机基础\n  - 数据结构与算法\ncategories: 计算机基础\nkeywords: 文章关键词\nupdated: ''\nimg: /medias/featureimages/10.webp\ndate:\nsummary: 图结构\n---\n# 数据结构与算法（四）\n## 图结构\n### 1.图\n**1.1定义**：由一个非空的有限**顶点**集合V和一个有限**边**集合E组成\n**1.2表示**\n①邻接矩阵：对角线为0的**对称矩阵**\n![邻接矩阵](/image/sjjg_15.png)\n![邻接矩阵的数组表示](/image/sjjg_16.png)\n②邻接表\n![邻接表](/image/sjjg_17.png)\n\n**1.3图的连通性**\n①连通：如果两个顶点之间存在一条**无向路径**，则称这两点是连通的\n②连通图：图中**任意两点**均连通\n③连通分量\n![连通分量](/image/sjjg_20.png)\n\n### 2.图的遍历\n**2.1深度优先搜索（DFS）**\n①思想：选定一个入口，挑选一个没有被访问的与之相连的节点，来到这个节点之后同样挑选一个与之相连的没有被访问的节点，如果没有则原路返回，直到返回到出口\n②伪码描述\n![DFS](/image/sjjg_18.png)\n**2.2广度优先搜索（BFS）**\n①思想：选择一个入口，将其压入队列中，弹出入口时，将与入口相连的节点压入队列中，然后弹出队列最前面的节点，并将与其相连的节点压入队列中，直到队列为空\n②伪码描述\n![BFS](/image/sjjg_19.png)\n\n**2.3两种遍历方法的特点**\n\n### 3.图的建立\n**3.1邻接矩阵表示**\n①结构代码\n顶点结构代码\n```\ntypedef struct GNode *PtrToNode;\nstruct GNode\n{\n  int Nv; /*定点数\n  int Ne; /*边数\n  WeightType G[MaxVertexNum][MaxVertexNum];\n};\ntypedef PtrToNode MGraph;\n```\n边结构代码\n```\ntypedef struct ENode *PtrToENode;\nstruct ENode\n{\n  VerTex V1,V2; /*边连接的顶点\n  WeightType Weight; /*权重\n}\ntypedef PtrToENode Edge;\n```\n②图的初始化（有一定顶点但是边为0）\n```\ntypedef int Vertex; /*用顶点下标表示顶点，为整型\nMGraph CreateGraph(int VertexNum)\n{\n  Vertex V,W;\n  MGraph Graph;\n\n  Graph = (MGraph)malloc(sizeof(struct GNode));\n  Graph->Nv = VertexNum;\n  Graph->Ne = 0;\n\n  for(V = 0;V < Graph->Nv;V++)\n    for(W = 0;W < Graph->Nv;W++)\n      Graph->G[V][W] = 0;\n  return Graph;\n}\n```\n②边的插入\n```\nvoid InsertEdge(MGraph Graph,Edge E)\n{\n  Graph->G[E->V1][E->V2] = E->Weigh; \n  Graph->G[E->V2][E->V1] = E->Weigh; /*如果是有向边，则这条可以省略\n}\n```\n③图的建立\n![图的建立](/image/sjjg_21.png)\n**3.2邻接表表示**\n①结构代码\n顶点结构\n```\ntypedef struct GNode *PtrToGNode;\nstruct GNode\n{\n  int Nv; /*顶点数\n  int Ne; /*边数\n  AdjList G; /邻接表\n};\n```\n邻接表结构\n```\ntypedef struct Vnode\n{\n  PtrToAdjVNode FirstEdge;\n  DataType Data; /*顶点数据\n}AdjList[MaxVertexNum];\n```\n>该段代码将元素为`Vnode`结构的数组重命名为`AdjList`\n\n边结构\n```\ntypedef struct AdjVNode *PtrToAdjVNode;\nstruct AdjVNode\n{\n  Vertex AdjV; /*邻接点下标\n  WeightType Weight; /*边权重\n  PtrToAdjVNode Next;\n};\n②初始化\n```\ntypedef int Vertex; /*定义实质为整形的顶点下标变量\nLGraph CreateGraph(int VertexNum)\n{\n  Vertex V;\n  LGraph Graph;\n\n  Graph = (LGraph)malloc(sizeof(struct GNode));\n  Graph->Nv = VertexNum;\n  Graph->Ne = 0;\n  for(V = 0;V < Graph->Nv;V++)\n    Graph->G[V].FirstEdge = NULL;\n  \n  return Graph;\n}\n③插入边\n```\nvoid Insert(LGraph Graph, Edge E)\n{\n  /*建立新的邻接点\n  PtrToAdjVNode NewNode;\n  NewNode = (PtrToAdjVNode)malloc(sizeof(struct AdjVNode));\n  NewNode->AdjV = E->V2;\n  NewNode->Weight = E->Weight;\n  /*\n  NewNode->Next = Graph->G[E->V1].FirstEdge;\n  Graph->G[E->V1].FirstEdge = NewNode;\n}\n```\n\n### 4.图的最短路径算法\n**4.1无权图的单源最短路径算法**\n①思路：从起点出发，先找到和他距离为1的**没有访问过**的节点，然后在此基础上寻找距离为2的节点，以此类推，直到找到终点\n\n![思路](/image/sjjg_22.png)\n②伪码描述\n>其中`dist`数组将没访问的节点与原点的距离设置为一个负数，可以同时起到`Visited`函数作用\n`path`记录的是最短路径中，当前节点的上一个节点信息\n\n![伪码描述](/image/sjjg_23.png)\n**4.2有权图的单源最短路径算法**\n①思路：选定原点`s`，然后访问其**邻接点**，计算其路径长度并存储在`dist[]`中（`dist[]`记录的是原点**经过已收录点**到对应点的距离，初始值都为**正无穷**），选择一个`dist[]`**最小的未收录的点**收录，随后访问收录点的**未收录邻接点**，更新`dist[]`，在更新的过程中，要注意新收录点可能会影响其邻接点的`dist[]`，即**只经过旧收录点的路径不是最短的了**，需要更新`dist[]`和`path[]`，以此类推，直到所有点都被收录。\n![Dijkstra](/image/sjjg_24.png)\n②伪码描述\n![伪码描述](/image/sjjg_25.png)\n![时间复杂度](/image/sjjg_26.png)\n\n**4.3多源最短路算法**\n①思路\n![Floyd](/image/sjjg_27.png)\n②伪码描述\n![伪码描述](/image/sjjg_28.png)\n\n### 5.最小生成树\n**5.1定义**\n![最小生成树](/image/sjjg_29.png)\n**5.2贪心算法**\n![贪心算法](/image/sjjg_30.png)\n**5.2prim算法**\n①思路：先选择一个起点，选择其**权重最小的邻接点**并收录，随后选择**已收录点**的权重最小的邻接点，但是不能构成回路，以此类推，直到收录所有的点\n②伪码描述\n![伪码描述](/image/sjjg_31.png)\n**5.2Kruskal算法**\n①思路：选择其中**未被选择的权值最小的边**（可以是多条）将顶点连接起来，以此类推，但是在过程中不能形成回路，直到收录了V-1条边\n②伪码描述\n![伪码描述](/image/sjjg_32.png)\n>回路的检查：一开始将所有顶点看作为独立集合，新加边就是合并集合，如果新加入的边的两边顶点已经是一个集合的了，则会形成回路\n\n### 6.拓扑排序\n**6.1定义**\n![拓扑排序](/image/sjjg_33.png)\n![例子](/image/sjjg_34.png)\n**6.2算法**\n①思想：每次输出所有**没有前驱节点**的节点\n②伪码描述\n![伪码描述](/image/sjjg_35.png)\n![算法改进](/image/sjjg_36.png)\n### 7.关键路径（项目管理问题）\n**7.1定义**\n![定义](/image/sjjg_37.png)\n**7.2思路**\n![思路](/image/sjjg_38.png)","slug":"数据结构与算法（五）","published":1,"_id":"clmkphbfe00269gvddorl278e","layout":"post","photos":[],"link":"","content":"<h1 id=\"数据结构与算法（四）\"><a href=\"#数据结构与算法（四）\" class=\"headerlink\" title=\"数据结构与算法（四）\"></a>数据结构与算法（四）</h1><h2 id=\"图结构\"><a href=\"#图结构\" class=\"headerlink\" title=\"图结构\"></a>图结构</h2><h3 id=\"1-图\"><a href=\"#1-图\" class=\"headerlink\" title=\"1.图\"></a>1.图</h3><p><strong>1.1定义</strong>：由一个非空的有限<strong>顶点</strong>集合V和一个有限<strong>边</strong>集合E组成<br><strong>1.2表示</strong><br>①邻接矩阵：对角线为0的<strong>对称矩阵</strong><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/sjjg_15.png\" alt=\"邻接矩阵\"><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/sjjg_16.png\" alt=\"邻接矩阵的数组表示\"><br>②邻接表<br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/sjjg_17.png\" alt=\"邻接表\"></p>\n<p><strong>1.3图的连通性</strong><br>①连通：如果两个顶点之间存在一条<strong>无向路径</strong>，则称这两点是连通的<br>②连通图：图中<strong>任意两点</strong>均连通<br>③连通分量<br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/sjjg_20.png\" alt=\"连通分量\"></p>\n<h3 id=\"2-图的遍历\"><a href=\"#2-图的遍历\" class=\"headerlink\" title=\"2.图的遍历\"></a>2.图的遍历</h3><p><strong>2.1深度优先搜索（DFS）</strong><br>①思想：选定一个入口，挑选一个没有被访问的与之相连的节点，来到这个节点之后同样挑选一个与之相连的没有被访问的节点，如果没有则原路返回，直到返回到出口<br>②伪码描述<br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/sjjg_18.png\" alt=\"DFS\"><br><strong>2.2广度优先搜索（BFS）</strong><br>①思想：选择一个入口，将其压入队列中，弹出入口时，将与入口相连的节点压入队列中，然后弹出队列最前面的节点，并将与其相连的节点压入队列中，直到队列为空<br>②伪码描述<br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/sjjg_19.png\" alt=\"BFS\"></p>\n<p><strong>2.3两种遍历方法的特点</strong></p>\n<h3 id=\"3-图的建立\"><a href=\"#3-图的建立\" class=\"headerlink\" title=\"3.图的建立\"></a>3.图的建立</h3><p><strong>3.1邻接矩阵表示</strong><br>①结构代码<br>顶点结构代码</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">typedef struct GNode *PtrToNode;\nstruct GNode\n{\n  int Nv; /*定点数\n  int Ne; /*边数\n  WeightType G[MaxVertexNum][MaxVertexNum];\n};\ntypedef PtrToNode MGraph;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>边结构代码</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">typedef struct ENode *PtrToENode;\nstruct ENode\n{\n  VerTex V1,V2; /*边连接的顶点\n  WeightType Weight; /*权重\n}\ntypedef PtrToENode Edge;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>②图的初始化（有一定顶点但是边为0）</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">typedef int Vertex; /*用顶点下标表示顶点，为整型\nMGraph CreateGraph(int VertexNum)\n{\n  Vertex V,W;\n  MGraph Graph;\n\n  Graph = (MGraph)malloc(sizeof(struct GNode));\n  Graph-&gt;Nv = VertexNum;\n  Graph-&gt;Ne = 0;\n\n  for(V = 0;V &lt; Graph-&gt;Nv;V++)\n    for(W = 0;W &lt; Graph-&gt;Nv;W++)\n      Graph-&gt;G[V][W] = 0;\n  return Graph;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>②边的插入</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">void InsertEdge(MGraph Graph,Edge E)\n{\n  Graph-&gt;G[E-&gt;V1][E-&gt;V2] = E-&gt;Weigh; \n  Graph-&gt;G[E-&gt;V2][E-&gt;V1] = E-&gt;Weigh; /*如果是有向边，则这条可以省略\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>③图的建立<br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/sjjg_21.png\" alt=\"图的建立\"><br><strong>3.2邻接表表示</strong><br>①结构代码<br>顶点结构</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">typedef struct GNode *PtrToGNode;\nstruct GNode\n{\n  int Nv; /*顶点数\n  int Ne; /*边数\n  AdjList G; /邻接表\n};<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>邻接表结构</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">typedef struct Vnode\n{\n  PtrToAdjVNode FirstEdge;\n  DataType Data; /*顶点数据\n}AdjList[MaxVertexNum];<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>该段代码将元素为<code>Vnode</code>结构的数组重命名为<code>AdjList</code></p>\n</blockquote>\n<p>边结构</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">typedef struct AdjVNode *PtrToAdjVNode;\nstruct AdjVNode\n{\n  Vertex AdjV; /*邻接点下标\n  WeightType Weight; /*边权重\n  PtrToAdjVNode Next;\n};\n②初始化<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>typedef int Vertex; /*定义实质为整形的顶点下标变量<br>LGraph CreateGraph(int VertexNum)<br>{<br>  Vertex V;<br>  LGraph Graph;</p>\n<p>  Graph = (LGraph)malloc(sizeof(struct GNode));<br>  Graph-&gt;Nv = VertexNum;<br>  Graph-&gt;Ne = 0;<br>  for(V = 0;V &lt; Graph-&gt;Nv;V++)<br>    Graph-&gt;G[V].FirstEdge = NULL;</p>\n<p>  return Graph;<br>}<br>③插入边</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">void Insert(LGraph Graph, Edge E)\n{\n  /*建立新的邻接点\n  PtrToAdjVNode NewNode;\n  NewNode = (PtrToAdjVNode)malloc(sizeof(struct AdjVNode));\n  NewNode-&gt;AdjV = E-&gt;V2;\n  NewNode-&gt;Weight = E-&gt;Weight;\n  /*\n  NewNode-&gt;Next = Graph-&gt;G[E-&gt;V1].FirstEdge;\n  Graph-&gt;G[E-&gt;V1].FirstEdge = NewNode;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"4-图的最短路径算法\"><a href=\"#4-图的最短路径算法\" class=\"headerlink\" title=\"4.图的最短路径算法\"></a>4.图的最短路径算法</h3><p><strong>4.1无权图的单源最短路径算法</strong><br>①思路：从起点出发，先找到和他距离为1的<strong>没有访问过</strong>的节点，然后在此基础上寻找距离为2的节点，以此类推，直到找到终点</p>\n<p><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/sjjg_22.png\" alt=\"思路\"><br>②伪码描述</p>\n<blockquote>\n<p>其中<code>dist</code>数组将没访问的节点与原点的距离设置为一个负数，可以同时起到<code>Visited</code>函数作用<br><code>path</code>记录的是最短路径中，当前节点的上一个节点信息</p>\n</blockquote>\n<p><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/sjjg_23.png\" alt=\"伪码描述\"><br><strong>4.2有权图的单源最短路径算法</strong><br>①思路：选定原点<code>s</code>，然后访问其<strong>邻接点</strong>，计算其路径长度并存储在<code>dist[]</code>中（<code>dist[]</code>记录的是原点<strong>经过已收录点</strong>到对应点的距离，初始值都为<strong>正无穷</strong>），选择一个<code>dist[]</code><strong>最小的未收录的点</strong>收录，随后访问收录点的<strong>未收录邻接点</strong>，更新<code>dist[]</code>，在更新的过程中，要注意新收录点可能会影响其邻接点的<code>dist[]</code>，即<strong>只经过旧收录点的路径不是最短的了</strong>，需要更新<code>dist[]</code>和<code>path[]</code>，以此类推，直到所有点都被收录。<br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/sjjg_24.png\" alt=\"Dijkstra\"><br>②伪码描述<br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/sjjg_25.png\" alt=\"伪码描述\"><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/sjjg_26.png\" alt=\"时间复杂度\"></p>\n<p><strong>4.3多源最短路算法</strong><br>①思路<br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/sjjg_27.png\" alt=\"Floyd\"><br>②伪码描述<br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/sjjg_28.png\" alt=\"伪码描述\"></p>\n<h3 id=\"5-最小生成树\"><a href=\"#5-最小生成树\" class=\"headerlink\" title=\"5.最小生成树\"></a>5.最小生成树</h3><p><strong>5.1定义</strong><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/sjjg_29.png\" alt=\"最小生成树\"><br><strong>5.2贪心算法</strong><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/sjjg_30.png\" alt=\"贪心算法\"><br><strong>5.2prim算法</strong><br>①思路：先选择一个起点，选择其<strong>权重最小的邻接点</strong>并收录，随后选择<strong>已收录点</strong>的权重最小的邻接点，但是不能构成回路，以此类推，直到收录所有的点<br>②伪码描述<br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/sjjg_31.png\" alt=\"伪码描述\"><br><strong>5.2Kruskal算法</strong><br>①思路：选择其中<strong>未被选择的权值最小的边</strong>（可以是多条）将顶点连接起来，以此类推，但是在过程中不能形成回路，直到收录了V-1条边<br>②伪码描述<br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/sjjg_32.png\" alt=\"伪码描述\"></p>\n<blockquote>\n<p>回路的检查：一开始将所有顶点看作为独立集合，新加边就是合并集合，如果新加入的边的两边顶点已经是一个集合的了，则会形成回路</p>\n</blockquote>\n<h3 id=\"6-拓扑排序\"><a href=\"#6-拓扑排序\" class=\"headerlink\" title=\"6.拓扑排序\"></a>6.拓扑排序</h3><p><strong>6.1定义</strong><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/sjjg_33.png\" alt=\"拓扑排序\"><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/sjjg_34.png\" alt=\"例子\"><br><strong>6.2算法</strong><br>①思想：每次输出所有<strong>没有前驱节点</strong>的节点<br>②伪码描述<br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/sjjg_35.png\" alt=\"伪码描述\"><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/sjjg_36.png\" alt=\"算法改进\"></p>\n<h3 id=\"7-关键路径（项目管理问题）\"><a href=\"#7-关键路径（项目管理问题）\" class=\"headerlink\" title=\"7.关键路径（项目管理问题）\"></a>7.关键路径（项目管理问题）</h3><p><strong>7.1定义</strong><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/sjjg_37.png\" alt=\"定义\"><br><strong>7.2思路</strong><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/sjjg_38.png\" alt=\"思路\"></p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"数据结构与算法（四）\"><a href=\"#数据结构与算法（四）\" class=\"headerlink\" title=\"数据结构与算法（四）\"></a>数据结构与算法（四）</h1><h2 id=\"图结构\"><a href=\"#图结构\" class=\"headerlink\" title=\"图结构\"></a>图结构</h2><h3 id=\"1-图\"><a href=\"#1-图\" class=\"headerlink\" title=\"1.图\"></a>1.图</h3><p><strong>1.1定义</strong>：由一个非空的有限<strong>顶点</strong>集合V和一个有限<strong>边</strong>集合E组成<br><strong>1.2表示</strong><br>①邻接矩阵：对角线为0的<strong>对称矩阵</strong><br><img src=\"/image/sjjg_15.png\" alt=\"邻接矩阵\"><br><img src=\"/image/sjjg_16.png\" alt=\"邻接矩阵的数组表示\"><br>②邻接表<br><img src=\"/image/sjjg_17.png\" alt=\"邻接表\"></p>\n<p><strong>1.3图的连通性</strong><br>①连通：如果两个顶点之间存在一条<strong>无向路径</strong>，则称这两点是连通的<br>②连通图：图中<strong>任意两点</strong>均连通<br>③连通分量<br><img src=\"/image/sjjg_20.png\" alt=\"连通分量\"></p>\n<h3 id=\"2-图的遍历\"><a href=\"#2-图的遍历\" class=\"headerlink\" title=\"2.图的遍历\"></a>2.图的遍历</h3><p><strong>2.1深度优先搜索（DFS）</strong><br>①思想：选定一个入口，挑选一个没有被访问的与之相连的节点，来到这个节点之后同样挑选一个与之相连的没有被访问的节点，如果没有则原路返回，直到返回到出口<br>②伪码描述<br><img src=\"/image/sjjg_18.png\" alt=\"DFS\"><br><strong>2.2广度优先搜索（BFS）</strong><br>①思想：选择一个入口，将其压入队列中，弹出入口时，将与入口相连的节点压入队列中，然后弹出队列最前面的节点，并将与其相连的节点压入队列中，直到队列为空<br>②伪码描述<br><img src=\"/image/sjjg_19.png\" alt=\"BFS\"></p>\n<p><strong>2.3两种遍历方法的特点</strong></p>\n<h3 id=\"3-图的建立\"><a href=\"#3-图的建立\" class=\"headerlink\" title=\"3.图的建立\"></a>3.图的建立</h3><p><strong>3.1邻接矩阵表示</strong><br>①结构代码<br>顶点结构代码</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">typedef struct GNode *PtrToNode;\nstruct GNode\n&#123;\n  int Nv; &#x2F;*定点数\n  int Ne; &#x2F;*边数\n  WeightType G[MaxVertexNum][MaxVertexNum];\n&#125;;\ntypedef PtrToNode MGraph;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>边结构代码</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">typedef struct ENode *PtrToENode;\nstruct ENode\n&#123;\n  VerTex V1,V2; &#x2F;*边连接的顶点\n  WeightType Weight; &#x2F;*权重\n&#125;\ntypedef PtrToENode Edge;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>②图的初始化（有一定顶点但是边为0）</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">typedef int Vertex; &#x2F;*用顶点下标表示顶点，为整型\nMGraph CreateGraph(int VertexNum)\n&#123;\n  Vertex V,W;\n  MGraph Graph;\n\n  Graph &#x3D; (MGraph)malloc(sizeof(struct GNode));\n  Graph-&gt;Nv &#x3D; VertexNum;\n  Graph-&gt;Ne &#x3D; 0;\n\n  for(V &#x3D; 0;V &lt; Graph-&gt;Nv;V++)\n    for(W &#x3D; 0;W &lt; Graph-&gt;Nv;W++)\n      Graph-&gt;G[V][W] &#x3D; 0;\n  return Graph;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>②边的插入</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">void InsertEdge(MGraph Graph,Edge E)\n&#123;\n  Graph-&gt;G[E-&gt;V1][E-&gt;V2] &#x3D; E-&gt;Weigh; \n  Graph-&gt;G[E-&gt;V2][E-&gt;V1] &#x3D; E-&gt;Weigh; &#x2F;*如果是有向边，则这条可以省略\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>③图的建立<br><img src=\"/image/sjjg_21.png\" alt=\"图的建立\"><br><strong>3.2邻接表表示</strong><br>①结构代码<br>顶点结构</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">typedef struct GNode *PtrToGNode;\nstruct GNode\n&#123;\n  int Nv; &#x2F;*顶点数\n  int Ne; &#x2F;*边数\n  AdjList G; &#x2F;邻接表\n&#125;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>邻接表结构</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">typedef struct Vnode\n&#123;\n  PtrToAdjVNode FirstEdge;\n  DataType Data; &#x2F;*顶点数据\n&#125;AdjList[MaxVertexNum];<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>该段代码将元素为<code>Vnode</code>结构的数组重命名为<code>AdjList</code></p>\n</blockquote>\n<p>边结构</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">typedef struct AdjVNode *PtrToAdjVNode;\nstruct AdjVNode\n&#123;\n  Vertex AdjV; &#x2F;*邻接点下标\n  WeightType Weight; &#x2F;*边权重\n  PtrToAdjVNode Next;\n&#125;;\n②初始化<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>typedef int Vertex; &#x2F;*定义实质为整形的顶点下标变量<br>LGraph CreateGraph(int VertexNum)<br>{<br>  Vertex V;<br>  LGraph Graph;</p>\n<p>  Graph &#x3D; (LGraph)malloc(sizeof(struct GNode));<br>  Graph-&gt;Nv &#x3D; VertexNum;<br>  Graph-&gt;Ne &#x3D; 0;<br>  for(V &#x3D; 0;V &lt; Graph-&gt;Nv;V++)<br>    Graph-&gt;G[V].FirstEdge &#x3D; NULL;</p>\n<p>  return Graph;<br>}<br>③插入边</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">void Insert(LGraph Graph, Edge E)\n&#123;\n  &#x2F;*建立新的邻接点\n  PtrToAdjVNode NewNode;\n  NewNode &#x3D; (PtrToAdjVNode)malloc(sizeof(struct AdjVNode));\n  NewNode-&gt;AdjV &#x3D; E-&gt;V2;\n  NewNode-&gt;Weight &#x3D; E-&gt;Weight;\n  &#x2F;*\n  NewNode-&gt;Next &#x3D; Graph-&gt;G[E-&gt;V1].FirstEdge;\n  Graph-&gt;G[E-&gt;V1].FirstEdge &#x3D; NewNode;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"4-图的最短路径算法\"><a href=\"#4-图的最短路径算法\" class=\"headerlink\" title=\"4.图的最短路径算法\"></a>4.图的最短路径算法</h3><p><strong>4.1无权图的单源最短路径算法</strong><br>①思路：从起点出发，先找到和他距离为1的<strong>没有访问过</strong>的节点，然后在此基础上寻找距离为2的节点，以此类推，直到找到终点</p>\n<p><img src=\"/image/sjjg_22.png\" alt=\"思路\"><br>②伪码描述</p>\n<blockquote>\n<p>其中<code>dist</code>数组将没访问的节点与原点的距离设置为一个负数，可以同时起到<code>Visited</code>函数作用<br><code>path</code>记录的是最短路径中，当前节点的上一个节点信息</p>\n</blockquote>\n<p><img src=\"/image/sjjg_23.png\" alt=\"伪码描述\"><br><strong>4.2有权图的单源最短路径算法</strong><br>①思路：选定原点<code>s</code>，然后访问其<strong>邻接点</strong>，计算其路径长度并存储在<code>dist[]</code>中（<code>dist[]</code>记录的是原点<strong>经过已收录点</strong>到对应点的距离，初始值都为<strong>正无穷</strong>），选择一个<code>dist[]</code><strong>最小的未收录的点</strong>收录，随后访问收录点的<strong>未收录邻接点</strong>，更新<code>dist[]</code>，在更新的过程中，要注意新收录点可能会影响其邻接点的<code>dist[]</code>，即<strong>只经过旧收录点的路径不是最短的了</strong>，需要更新<code>dist[]</code>和<code>path[]</code>，以此类推，直到所有点都被收录。<br><img src=\"/image/sjjg_24.png\" alt=\"Dijkstra\"><br>②伪码描述<br><img src=\"/image/sjjg_25.png\" alt=\"伪码描述\"><br><img src=\"/image/sjjg_26.png\" alt=\"时间复杂度\"></p>\n<p><strong>4.3多源最短路算法</strong><br>①思路<br><img src=\"/image/sjjg_27.png\" alt=\"Floyd\"><br>②伪码描述<br><img src=\"/image/sjjg_28.png\" alt=\"伪码描述\"></p>\n<h3 id=\"5-最小生成树\"><a href=\"#5-最小生成树\" class=\"headerlink\" title=\"5.最小生成树\"></a>5.最小生成树</h3><p><strong>5.1定义</strong><br><img src=\"/image/sjjg_29.png\" alt=\"最小生成树\"><br><strong>5.2贪心算法</strong><br><img src=\"/image/sjjg_30.png\" alt=\"贪心算法\"><br><strong>5.2prim算法</strong><br>①思路：先选择一个起点，选择其<strong>权重最小的邻接点</strong>并收录，随后选择<strong>已收录点</strong>的权重最小的邻接点，但是不能构成回路，以此类推，直到收录所有的点<br>②伪码描述<br><img src=\"/image/sjjg_31.png\" alt=\"伪码描述\"><br><strong>5.2Kruskal算法</strong><br>①思路：选择其中<strong>未被选择的权值最小的边</strong>（可以是多条）将顶点连接起来，以此类推，但是在过程中不能形成回路，直到收录了V-1条边<br>②伪码描述<br><img src=\"/image/sjjg_32.png\" alt=\"伪码描述\"></p>\n<blockquote>\n<p>回路的检查：一开始将所有顶点看作为独立集合，新加边就是合并集合，如果新加入的边的两边顶点已经是一个集合的了，则会形成回路</p>\n</blockquote>\n<h3 id=\"6-拓扑排序\"><a href=\"#6-拓扑排序\" class=\"headerlink\" title=\"6.拓扑排序\"></a>6.拓扑排序</h3><p><strong>6.1定义</strong><br><img src=\"/image/sjjg_33.png\" alt=\"拓扑排序\"><br><img src=\"/image/sjjg_34.png\" alt=\"例子\"><br><strong>6.2算法</strong><br>①思想：每次输出所有<strong>没有前驱节点</strong>的节点<br>②伪码描述<br><img src=\"/image/sjjg_35.png\" alt=\"伪码描述\"><br><img src=\"/image/sjjg_36.png\" alt=\"算法改进\"></p>\n<h3 id=\"7-关键路径（项目管理问题）\"><a href=\"#7-关键路径（项目管理问题）\" class=\"headerlink\" title=\"7.关键路径（项目管理问题）\"></a>7.关键路径（项目管理问题）</h3><p><strong>7.1定义</strong><br><img src=\"/image/sjjg_37.png\" alt=\"定义\"><br><strong>7.2思路</strong><br><img src=\"/image/sjjg_38.png\" alt=\"思路\"></p>\n"},{"title":"数据结构与算法（四）","seo_title":"seo名称","toc":true,"indent":true,"top":false,"comments":1,"archive":true,"cover":false,"mathjax":false,"pin":false,"top_meta":false,"bottom_meta":false,"sidebar":["toc"],"keywords":"文章关键词","updated":"2023-11-08T08:56:41.249Z","img":"/medias/featureimages/10.webp","date":"2023-11-07T14:10:58.029Z","summary":"树形结构","_content":"# 数据结构与算法（四）\n## 树形结构\n### 1.二叉树\n#### 1.1树\n**①定义**\n>每个树都有一个**根节点**，**其余节点**可分为**互不相交的子树**，且只有**一个父节点**和**若干个子节点**，**没有子节点**的节点称为**叶节点**\n{%list%}\n树明显是基于递归定义的，所以有关树的很多算法都用到了递归思想\n{%endlist%}\n\n**②儿子-兄弟表示法**\n>**每个节点**存储**两个指针**，**左指针**指向**最左的儿子节点**，**右指针**指向**相邻兄弟节点**\n{%right%}\n所有的树都可以转化为二叉树，所以树的主要研究对象为二叉树\n{%endright%}\n![儿子-兄弟表示法](/image/SF_3.png)\n\n#### 1.2二叉树\n**①定义**\n> 由**根节点**和同为**二叉树**的**左子树**和**右子树**组成，即**每个节点**最多只能有**两个子节点**，称为**左节点**和**右节点**\n\n**②特殊二叉树**\n>**完美二叉树**：当二叉树有**n层**时，有**2^n-1个节点**，**叶子节点**只能出现在**最下面一层**\n\n>**完全二叉树**：对二叉树中节点**从上至下**，**从左往右**进行**编号**，**编号为i**的节点与**满二叉树**中**编号为i**的节点**位置相同**\n{%list%}\n即从某一叶节点缺失所有右边的兄弟节点，左边的兄弟节点不缺失\n{%endlist%}\n![特殊二叉树](/image/SF_4.png)\n\n#### 1.3二叉树的存储结构\n**①顺序存储结构**\n>将二叉树转化为**广义的完全二叉树**，**从上至下**，**从左往右**进行**编号**，节点的**编号**就是其在**数组的索引**\n{%list%}\n不存在的节点表示为空\n{%endlist%}\n**②链表存储**\n>**节点结构**分别有**指向左子节点的指针**和**指向右子节点的指针**，**整个二叉树**只需要知道其**根节点指针**即可\n\n### 2.二叉树的遍历\n#### 2.1层序遍历\n**①定义**\n>**向下逐层**遍历二叉树，**每一层**按照**从左到右**的顺序**访问节点**\n{%list%}\n层序遍历本质上是广度优先遍历，体现了一种“一圈一圈向外扩展”的逐层遍历方式\n{%endlist%}\n{%right%}\n层序遍历的逐层推进和队列的先进先出本质上一样的\n{%endright%}\n![层序遍历](/image/SF_5.png)\n**②非递归实现**\n```\nint *levelOrder(TreeNode *root, int *size) {\n    /* 辅助队列 */\n    int front, rear;\n    int index, *arr;\n    TreeNode *node;\n    TreeNode **queue;\n\n    /*动态申请队列，队列保存的是节点指针，所以最终表现形态为节点指针的指针*/\n    queue = (TreeNode **)malloc(sizeof(TreeNode *) * MAX_SIZE);\n    // 队列伪指针\n    front = 0, rear = 0;\n    // 加入根节点\n    queue[rear++] = root;\n    // 初始化一个列表，用于保存遍历序列\n    /* 辅助数组 */\n    arr = (int *)malloc(sizeof(int) * MAX_SIZE);\n    // 数组指针\n    index = 0;\n    /*利用队列实现层序遍历*/\n    while (front < rear) {\n        // 队列出队\n        node = queue[front++];\n        // 保存节点值\n        arr[index++] = node->val;\n        if (node->left != NULL) {\n            // 左子节点入队\n            queue[rear++] = node->left;\n        }\n        if (node->right != NULL) {\n            // 右子节点入队\n            queue[rear++] = node->right;\n        }\n    }\n    // 更新数组长度的值\n    *size = index;\n    arr = realloc(arr, sizeof(int) * (*size));\n\n    // 释放辅助数组空间\n    free(queue);\n    return arr;\n}\n```\n#### 2.2前序、中序和后续遍历\n**①定义**\n>**前序遍历**：先访问**根节点**，**前序遍历**其**左子树**，再**前序遍历**其**右子树**\n\n>**中序遍历**：**中序遍历**其**左子树**，访问**根节点**，再**中序遍历**其**右子树**\n\n>**后序遍历**：**后序遍历**其**左子树**，**后续遍历**其**右子树**，访问其**根节点**\n{%list%}\n这三种遍历本质上是深度优先遍历，体现了一种“先走到尽头，再回溯继续”的遍历方式\n{%endlist%}\n{%right%}\n对于一个节点，有三次访问的时刻，即第一次访问（没有访问其子节点），从左子树返回访问和从右子树返回访问，三种遍历方式就是分别再三次访问时输出\n{%endright%}\n![前序、中序和后续遍历](/image/SF_6.png)\n**②三种遍历的递归实现**\n```\n/* 前序遍历 */\nvoid preOrder(TreeNode *root, int *size) {\n    if (root == NULL)\n        return;\n    // 访问优先级：根节点 -> 左子树 -> 右子树\n    arr[(*size)++] = root->val;\n    preOrder(root->left, size);\n    preOrder(root->right, size);\n}\n\n/* 中序遍历 */\nvoid inOrder(TreeNode *root, int *size) {\n    if (root == NULL)\n        return;\n    // 访问优先级：左子树 -> 根节点 -> 右子树\n    inOrder(root->left, size);\n    arr[(*size)++] = root->val;\n    inOrder(root->right, size);\n}\n\n/* 后序遍历 */\nvoid postOrder(TreeNode *root, int *size) {\n    if (root == NULL)\n        return;\n    // 访问优先级：左子树 -> 右子树 -> 根节点\n    postOrder(root->left, size);\n    postOrder(root->right, size);\n    arr[(*size)++] = root->val;\n}\n```\n\n\n## 三、特殊二叉树\n### 1.二叉搜索树\n**1.1定义**\n>非空左子树的**所有键值**小于其根节点\n非空右子树的**所有键值**大于其根节点\n左右子树都是二叉搜索树\n**1.2二叉搜索树的查找**\n**①递归实现**\n```\nPosition Find(ElementType x,BinTree BST)\n{\n  /*没找到，递归退出条件\n  if(!Bst)\n    return NULL;\n  /*递归查找\n  if(x>Bst->Data)\n    return Find(x,BST->Right);\n  else if(x<Bst->Data)\n    return Find(x,BST->Left);\n  /*成功找到，递归退出条件\n  else\n    return BST;\n}\n```\n**②非递归实现**\n```\nPosition Find(ElementType x,BinTree BST)\n{\n  while(BST)\n  {\n    if(x > BST->Data)\n      BST = BST->Right;\n    else if(x < BST->Data)\n      BST = BST->Left;\n    else\n      return BST;\n  }\n  return NULL;\n}\n``` \n**1.3二叉搜索树的插入**\n**①递归实现**\n```\nBinTree Insert(ElementType x,BinTree BST)\n{\n  /*递归退出条件，找到对应插入位置，即一个空位置\n  if(!BST)\n  {\n    BST = malloc(sizeof(struct TreeNode));\n    BST->Data = x;\n    BST->Left = BST->Right =NULL;\n  }\n  else\n  {\n    if(x < BST->Data)\n      BST->Left = Insert(x,BST->Left); \n    else if(x > BST->Data)\n      BST->Right = Insert(x,BST->Right);\n  }\n  return BST;\n}\n```\n**②非递归实现**\n```\nBinTree Insert(ElementType x,BinTree BST)\n{\n  while(BST)\n  {\n    if(x > BST->Data)\n    {\n      if(!BST->Right)\n      {\n      BST->Right = malloc(sizeof(struct TreeNode));\n      BST->Right->Data = x;\n      BST->Right->Right = BST->Right->Left = NULL;\n      return BST->Right\n      }\n      else\n      BST = BST->Right\n    }\n    else if(x < BST->Data)\n    {\n      if(!BST->Left)\n      {\n      BST->Left = malloc(sizeof(struct TreeNode));\n      BST->Left->Data = x;\n      BST->Left->Right = BST->Left->Left = NULL;\n      return BST->Right\n      }\n      else\n      BST = BST->Left;\n    }\n    else \n    return BST;\n  }\n  BST = malloc(sizeof(struct TreeNode));\n  BST->Data = x;\n  BST->Left = Bst->Right = NULL;\n  return BST;\n}\n```\n**1.4二叉搜索树的删除**\n**①思路**：节点分为三类，即叶节点、有一个孩子的节点和有两个孩子的节点\n>叶节点：直接删除即可\n有一个孩子的节点：将孩子节点接到其父节点即可\n有两个孩子的节点：将其**右子树最小元素**或者**左子树最大元素**代替之，可以转化为上述两种情况\n\n**②代码实现**\n```\nBinTree Delete(ElementType x,BinTree BST)\n{\n  Position Tmp;\n  if(!BST)\n    print(\"未找到该元素\")；\n  else if(x < BST->Data)\n    BST->Left = Delete(x,BST->Left);\n  else if(x > BST->Data)\n    BST->Right = Delete(x,BST->Right);\n  else\n    /*当有两个孩子\n    if(BST->Left && BST->Right)\n    {\n      /*找到其右子树最小元素替代之\n      Tmp = FindMin(BST->Right);\n      BST->Data = Tmp->Data;\n      /*删除其右子树最小元素\n      BST->Right = Delete(BST->Data,BST->Right);\n    }\n    /*有一个或者没有孩子\n    else\n    {\n      Tmp = BST\n      if(!BST->Left)\n        BST = BST->Right\n      else if(!BST->Right)\n        BST = BST->Left;\n      free(Tmp)\n    }\n  return BST;\n}\n```\n**1.5平衡二叉树**\n**①定义**：空树或者**任意节点**左右子树**高度差**绝对值不超过1\n>平衡二叉树的优点：给定节点数n的最大高度为O(log2n)\n\n**②平衡二叉树的调整**：当插入节点时可能会破坏搜索二叉树的平衡性\n![RR旋转](/image/sjjg_9.png)\n![LL旋转](/image/sjjg_10.png)\n![LR旋转](/image/sjjg_11.png)\n![RL旋转](/image/sjjg_12.png)\n>注意多余出来部分要根据二叉搜索树的定义调整\n\n### 2.堆\n**2.1定义**：特殊的**队列**，取出元素的顺序是按照元素的**优先级**（关键字）\n>用**数组**表示的**完全二叉树**\n任意节点的优先级是**其子树所有节点**的最大/小值，即**根节点到任意节点路径**是**有序**的\n**2.2结构代码**\n```\ntypedef struct HeapStruct *MaxHeap\nstruct HeapStruct\n{\n  ElementType *Elements; /*存储堆的数组\n  int Size; /*堆的当前元素个数\n  int Capacity; /*最大容量\n};\n```\n**2.3操作集（最大堆）**\n**①创建堆**\n```\nMaxHeap Create(int MaxSize)\n{\n  MaxHeap H = malloc(sizeof(struct HeapStruct));\n  H->Elements = malloc((MaxSize+1)*sizeof(ElementType));\n  H->Size = 0;\n  H->Capacity = MaxSize;\n  /*定义哨兵，便于查找\n  H->Elements[0] = MaxData;\n  return H;\n}\n```\n>其中定义了**哨兵**\n**②堆的插入**\n```\nvoid Insert(MaxHeap H,ElementType item)\n{\n  int i;\n  if(IsFull(H))\n  {\n    printf(\"最大堆已满\")；\n    return;\n  }\n  i = ++H->Size;\n  /*保证最大堆特性的比较\n  for( ;H->Elements[i/2] < item; i/=2)\n    H->Elements[i] = H->Elements[i/2];\n  H->Elements[i] = item;\n}\n```\n>为了保证最大堆的特性，需要保证**新插入节点要比父节点小**，所以如果他比父节点要大，就**交换**其和父节点位置，直到其小于对应的父节点\n在这个过程中，哨兵的存在可以防止其到0的位置（超出堆的范围，因为堆的下标不能是0）\n**③堆的删除**\n```\nElementType DeleteMax(MaxHeap H)\n{\n  /*从堆中取出最大元素，并删除一个节点\n  int Parent,Child;\n  ElementType MaxItem,temp;\n  if(IsEmpty(H))\n  {\n    printf(\"最大堆已为空\")；\n    return;\n  }\n  /*取出根节点最大值\n  MaxItem = H->Elements[1];\n  /*用最大堆中最后一个元素从根节点开始向上过滤下层节点\n  temp = H->Elements[H->Size--]; /先取出末尾元素，然后Size减1\n  for(Parent = 1;Parent*2 <= H->Size; Parent = Child) \n  {\n    Child = Parent * 2；\n    if((Child!=H->Size)&&(H->Elements[Child] < H->ElementType[Child+1]))\n      Child++; /*找到其左儿子和右儿子的较大者并指向它\n    if(temp>= H->Element[Child])\n    break; /*找到对应插入位置了，即比其儿子节点都大\n    else\n      H->Elements[Parent] = H->Elements[Child]; /*移动到下一层，将较大的儿子移上去\n  }\n  H->Elements[Parent] = H->Elements[Child];\n  return MaxItem;\n}\n```\n>总体思想：将最后一个位置的节点**内存**删除，将其值**先插入到根节点**中（因为根节点的值已经被取出），然后慢慢向下迭代，交换位置\n`Parent*2 <= H->Size`的作用是判断该父节点有没有左儿子，如果没有左儿子就更加没有右儿子\n`Child!=H->Size`的作用是判断其有没有右儿子，因为如果左儿子刚好是堆的边界，则没有右儿子\n**④堆的建立**\n>总体思想：先将各个元素按照**输入顺序**存入，形成**完全二叉树**，利用**分而治之**的思想，将整个堆分为**根节点和左子堆和右子堆**，以此类推，最后分到最后就是父节点和左右儿子节点的比较\n\n### 3.哈夫曼树\n**3.1定义**：最优二叉树，即每个**叶子结点**到根节点的带权路径长度之和最小\n**3.2构造**\n**①总体思想**：将所有节点按照大小排序（可以用堆的方法），每次把权值最小的两棵二叉树合并，比如说1、2、3、4、5，合并一次变为3（1、2）、3、4、5，然后变为6（3（1、2）、3）、4、5，以此类推\n**②代码实现**\n![哈夫曼树的构造](/image/sjjg_14.png)\n**3.3哈夫曼编码**:为了使得出现频率高的字符编码短些，出现频率低的字符编码长些，可以将哈夫曼树的节点路径看作为1和0，左节点为0，右节点为1，**编码长度就是路径长度**，按照字符出现频率构造哈夫曼树即可\n![哈夫曼编码](/image/sjjg_13.png)\n\n","source":"_posts/数据结构与算法（四）.md","raw":"---\ntitle: 数据结构与算法（四）\nseo_title: seo名称\ntoc: true\nindent: true\ntop: false\ncomments: true\narchive: true\ncover: false\nmathjax: false\npin: false\ntop_meta: false\nbottom_meta: false\nsidebar:\n  - toc\ntag:\n  - 数据结构与算法\n  - 计算机基础\n  - 《hello 算法》\ncategories: 计算机基础\nkeywords: 文章关键词\nupdated: ''\nimg: /medias/featureimages/10.webp\ndate:\nsummary: 树形结构\n---\n# 数据结构与算法（四）\n## 树形结构\n### 1.二叉树\n#### 1.1树\n**①定义**\n>每个树都有一个**根节点**，**其余节点**可分为**互不相交的子树**，且只有**一个父节点**和**若干个子节点**，**没有子节点**的节点称为**叶节点**\n{%list%}\n树明显是基于递归定义的，所以有关树的很多算法都用到了递归思想\n{%endlist%}\n\n**②儿子-兄弟表示法**\n>**每个节点**存储**两个指针**，**左指针**指向**最左的儿子节点**，**右指针**指向**相邻兄弟节点**\n{%right%}\n所有的树都可以转化为二叉树，所以树的主要研究对象为二叉树\n{%endright%}\n![儿子-兄弟表示法](/image/SF_3.png)\n\n#### 1.2二叉树\n**①定义**\n> 由**根节点**和同为**二叉树**的**左子树**和**右子树**组成，即**每个节点**最多只能有**两个子节点**，称为**左节点**和**右节点**\n\n**②特殊二叉树**\n>**完美二叉树**：当二叉树有**n层**时，有**2^n-1个节点**，**叶子节点**只能出现在**最下面一层**\n\n>**完全二叉树**：对二叉树中节点**从上至下**，**从左往右**进行**编号**，**编号为i**的节点与**满二叉树**中**编号为i**的节点**位置相同**\n{%list%}\n即从某一叶节点缺失所有右边的兄弟节点，左边的兄弟节点不缺失\n{%endlist%}\n![特殊二叉树](/image/SF_4.png)\n\n#### 1.3二叉树的存储结构\n**①顺序存储结构**\n>将二叉树转化为**广义的完全二叉树**，**从上至下**，**从左往右**进行**编号**，节点的**编号**就是其在**数组的索引**\n{%list%}\n不存在的节点表示为空\n{%endlist%}\n**②链表存储**\n>**节点结构**分别有**指向左子节点的指针**和**指向右子节点的指针**，**整个二叉树**只需要知道其**根节点指针**即可\n\n### 2.二叉树的遍历\n#### 2.1层序遍历\n**①定义**\n>**向下逐层**遍历二叉树，**每一层**按照**从左到右**的顺序**访问节点**\n{%list%}\n层序遍历本质上是广度优先遍历，体现了一种“一圈一圈向外扩展”的逐层遍历方式\n{%endlist%}\n{%right%}\n层序遍历的逐层推进和队列的先进先出本质上一样的\n{%endright%}\n![层序遍历](/image/SF_5.png)\n**②非递归实现**\n```\nint *levelOrder(TreeNode *root, int *size) {\n    /* 辅助队列 */\n    int front, rear;\n    int index, *arr;\n    TreeNode *node;\n    TreeNode **queue;\n\n    /*动态申请队列，队列保存的是节点指针，所以最终表现形态为节点指针的指针*/\n    queue = (TreeNode **)malloc(sizeof(TreeNode *) * MAX_SIZE);\n    // 队列伪指针\n    front = 0, rear = 0;\n    // 加入根节点\n    queue[rear++] = root;\n    // 初始化一个列表，用于保存遍历序列\n    /* 辅助数组 */\n    arr = (int *)malloc(sizeof(int) * MAX_SIZE);\n    // 数组指针\n    index = 0;\n    /*利用队列实现层序遍历*/\n    while (front < rear) {\n        // 队列出队\n        node = queue[front++];\n        // 保存节点值\n        arr[index++] = node->val;\n        if (node->left != NULL) {\n            // 左子节点入队\n            queue[rear++] = node->left;\n        }\n        if (node->right != NULL) {\n            // 右子节点入队\n            queue[rear++] = node->right;\n        }\n    }\n    // 更新数组长度的值\n    *size = index;\n    arr = realloc(arr, sizeof(int) * (*size));\n\n    // 释放辅助数组空间\n    free(queue);\n    return arr;\n}\n```\n#### 2.2前序、中序和后续遍历\n**①定义**\n>**前序遍历**：先访问**根节点**，**前序遍历**其**左子树**，再**前序遍历**其**右子树**\n\n>**中序遍历**：**中序遍历**其**左子树**，访问**根节点**，再**中序遍历**其**右子树**\n\n>**后序遍历**：**后序遍历**其**左子树**，**后续遍历**其**右子树**，访问其**根节点**\n{%list%}\n这三种遍历本质上是深度优先遍历，体现了一种“先走到尽头，再回溯继续”的遍历方式\n{%endlist%}\n{%right%}\n对于一个节点，有三次访问的时刻，即第一次访问（没有访问其子节点），从左子树返回访问和从右子树返回访问，三种遍历方式就是分别再三次访问时输出\n{%endright%}\n![前序、中序和后续遍历](/image/SF_6.png)\n**②三种遍历的递归实现**\n```\n/* 前序遍历 */\nvoid preOrder(TreeNode *root, int *size) {\n    if (root == NULL)\n        return;\n    // 访问优先级：根节点 -> 左子树 -> 右子树\n    arr[(*size)++] = root->val;\n    preOrder(root->left, size);\n    preOrder(root->right, size);\n}\n\n/* 中序遍历 */\nvoid inOrder(TreeNode *root, int *size) {\n    if (root == NULL)\n        return;\n    // 访问优先级：左子树 -> 根节点 -> 右子树\n    inOrder(root->left, size);\n    arr[(*size)++] = root->val;\n    inOrder(root->right, size);\n}\n\n/* 后序遍历 */\nvoid postOrder(TreeNode *root, int *size) {\n    if (root == NULL)\n        return;\n    // 访问优先级：左子树 -> 右子树 -> 根节点\n    postOrder(root->left, size);\n    postOrder(root->right, size);\n    arr[(*size)++] = root->val;\n}\n```\n\n\n## 三、特殊二叉树\n### 1.二叉搜索树\n**1.1定义**\n>非空左子树的**所有键值**小于其根节点\n非空右子树的**所有键值**大于其根节点\n左右子树都是二叉搜索树\n**1.2二叉搜索树的查找**\n**①递归实现**\n```\nPosition Find(ElementType x,BinTree BST)\n{\n  /*没找到，递归退出条件\n  if(!Bst)\n    return NULL;\n  /*递归查找\n  if(x>Bst->Data)\n    return Find(x,BST->Right);\n  else if(x<Bst->Data)\n    return Find(x,BST->Left);\n  /*成功找到，递归退出条件\n  else\n    return BST;\n}\n```\n**②非递归实现**\n```\nPosition Find(ElementType x,BinTree BST)\n{\n  while(BST)\n  {\n    if(x > BST->Data)\n      BST = BST->Right;\n    else if(x < BST->Data)\n      BST = BST->Left;\n    else\n      return BST;\n  }\n  return NULL;\n}\n``` \n**1.3二叉搜索树的插入**\n**①递归实现**\n```\nBinTree Insert(ElementType x,BinTree BST)\n{\n  /*递归退出条件，找到对应插入位置，即一个空位置\n  if(!BST)\n  {\n    BST = malloc(sizeof(struct TreeNode));\n    BST->Data = x;\n    BST->Left = BST->Right =NULL;\n  }\n  else\n  {\n    if(x < BST->Data)\n      BST->Left = Insert(x,BST->Left); \n    else if(x > BST->Data)\n      BST->Right = Insert(x,BST->Right);\n  }\n  return BST;\n}\n```\n**②非递归实现**\n```\nBinTree Insert(ElementType x,BinTree BST)\n{\n  while(BST)\n  {\n    if(x > BST->Data)\n    {\n      if(!BST->Right)\n      {\n      BST->Right = malloc(sizeof(struct TreeNode));\n      BST->Right->Data = x;\n      BST->Right->Right = BST->Right->Left = NULL;\n      return BST->Right\n      }\n      else\n      BST = BST->Right\n    }\n    else if(x < BST->Data)\n    {\n      if(!BST->Left)\n      {\n      BST->Left = malloc(sizeof(struct TreeNode));\n      BST->Left->Data = x;\n      BST->Left->Right = BST->Left->Left = NULL;\n      return BST->Right\n      }\n      else\n      BST = BST->Left;\n    }\n    else \n    return BST;\n  }\n  BST = malloc(sizeof(struct TreeNode));\n  BST->Data = x;\n  BST->Left = Bst->Right = NULL;\n  return BST;\n}\n```\n**1.4二叉搜索树的删除**\n**①思路**：节点分为三类，即叶节点、有一个孩子的节点和有两个孩子的节点\n>叶节点：直接删除即可\n有一个孩子的节点：将孩子节点接到其父节点即可\n有两个孩子的节点：将其**右子树最小元素**或者**左子树最大元素**代替之，可以转化为上述两种情况\n\n**②代码实现**\n```\nBinTree Delete(ElementType x,BinTree BST)\n{\n  Position Tmp;\n  if(!BST)\n    print(\"未找到该元素\")；\n  else if(x < BST->Data)\n    BST->Left = Delete(x,BST->Left);\n  else if(x > BST->Data)\n    BST->Right = Delete(x,BST->Right);\n  else\n    /*当有两个孩子\n    if(BST->Left && BST->Right)\n    {\n      /*找到其右子树最小元素替代之\n      Tmp = FindMin(BST->Right);\n      BST->Data = Tmp->Data;\n      /*删除其右子树最小元素\n      BST->Right = Delete(BST->Data,BST->Right);\n    }\n    /*有一个或者没有孩子\n    else\n    {\n      Tmp = BST\n      if(!BST->Left)\n        BST = BST->Right\n      else if(!BST->Right)\n        BST = BST->Left;\n      free(Tmp)\n    }\n  return BST;\n}\n```\n**1.5平衡二叉树**\n**①定义**：空树或者**任意节点**左右子树**高度差**绝对值不超过1\n>平衡二叉树的优点：给定节点数n的最大高度为O(log2n)\n\n**②平衡二叉树的调整**：当插入节点时可能会破坏搜索二叉树的平衡性\n![RR旋转](/image/sjjg_9.png)\n![LL旋转](/image/sjjg_10.png)\n![LR旋转](/image/sjjg_11.png)\n![RL旋转](/image/sjjg_12.png)\n>注意多余出来部分要根据二叉搜索树的定义调整\n\n### 2.堆\n**2.1定义**：特殊的**队列**，取出元素的顺序是按照元素的**优先级**（关键字）\n>用**数组**表示的**完全二叉树**\n任意节点的优先级是**其子树所有节点**的最大/小值，即**根节点到任意节点路径**是**有序**的\n**2.2结构代码**\n```\ntypedef struct HeapStruct *MaxHeap\nstruct HeapStruct\n{\n  ElementType *Elements; /*存储堆的数组\n  int Size; /*堆的当前元素个数\n  int Capacity; /*最大容量\n};\n```\n**2.3操作集（最大堆）**\n**①创建堆**\n```\nMaxHeap Create(int MaxSize)\n{\n  MaxHeap H = malloc(sizeof(struct HeapStruct));\n  H->Elements = malloc((MaxSize+1)*sizeof(ElementType));\n  H->Size = 0;\n  H->Capacity = MaxSize;\n  /*定义哨兵，便于查找\n  H->Elements[0] = MaxData;\n  return H;\n}\n```\n>其中定义了**哨兵**\n**②堆的插入**\n```\nvoid Insert(MaxHeap H,ElementType item)\n{\n  int i;\n  if(IsFull(H))\n  {\n    printf(\"最大堆已满\")；\n    return;\n  }\n  i = ++H->Size;\n  /*保证最大堆特性的比较\n  for( ;H->Elements[i/2] < item; i/=2)\n    H->Elements[i] = H->Elements[i/2];\n  H->Elements[i] = item;\n}\n```\n>为了保证最大堆的特性，需要保证**新插入节点要比父节点小**，所以如果他比父节点要大，就**交换**其和父节点位置，直到其小于对应的父节点\n在这个过程中，哨兵的存在可以防止其到0的位置（超出堆的范围，因为堆的下标不能是0）\n**③堆的删除**\n```\nElementType DeleteMax(MaxHeap H)\n{\n  /*从堆中取出最大元素，并删除一个节点\n  int Parent,Child;\n  ElementType MaxItem,temp;\n  if(IsEmpty(H))\n  {\n    printf(\"最大堆已为空\")；\n    return;\n  }\n  /*取出根节点最大值\n  MaxItem = H->Elements[1];\n  /*用最大堆中最后一个元素从根节点开始向上过滤下层节点\n  temp = H->Elements[H->Size--]; /先取出末尾元素，然后Size减1\n  for(Parent = 1;Parent*2 <= H->Size; Parent = Child) \n  {\n    Child = Parent * 2；\n    if((Child!=H->Size)&&(H->Elements[Child] < H->ElementType[Child+1]))\n      Child++; /*找到其左儿子和右儿子的较大者并指向它\n    if(temp>= H->Element[Child])\n    break; /*找到对应插入位置了，即比其儿子节点都大\n    else\n      H->Elements[Parent] = H->Elements[Child]; /*移动到下一层，将较大的儿子移上去\n  }\n  H->Elements[Parent] = H->Elements[Child];\n  return MaxItem;\n}\n```\n>总体思想：将最后一个位置的节点**内存**删除，将其值**先插入到根节点**中（因为根节点的值已经被取出），然后慢慢向下迭代，交换位置\n`Parent*2 <= H->Size`的作用是判断该父节点有没有左儿子，如果没有左儿子就更加没有右儿子\n`Child!=H->Size`的作用是判断其有没有右儿子，因为如果左儿子刚好是堆的边界，则没有右儿子\n**④堆的建立**\n>总体思想：先将各个元素按照**输入顺序**存入，形成**完全二叉树**，利用**分而治之**的思想，将整个堆分为**根节点和左子堆和右子堆**，以此类推，最后分到最后就是父节点和左右儿子节点的比较\n\n### 3.哈夫曼树\n**3.1定义**：最优二叉树，即每个**叶子结点**到根节点的带权路径长度之和最小\n**3.2构造**\n**①总体思想**：将所有节点按照大小排序（可以用堆的方法），每次把权值最小的两棵二叉树合并，比如说1、2、3、4、5，合并一次变为3（1、2）、3、4、5，然后变为6（3（1、2）、3）、4、5，以此类推\n**②代码实现**\n![哈夫曼树的构造](/image/sjjg_14.png)\n**3.3哈夫曼编码**:为了使得出现频率高的字符编码短些，出现频率低的字符编码长些，可以将哈夫曼树的节点路径看作为1和0，左节点为0，右节点为1，**编码长度就是路径长度**，按照字符出现频率构造哈夫曼树即可\n![哈夫曼编码](/image/sjjg_13.png)\n\n","slug":"数据结构与算法（四）","published":1,"_id":"clmkphbfe00289gvdcj3i8nxz","layout":"post","photos":[],"link":"","content":"<h1 id=\"数据结构与算法（四）\"><a href=\"#数据结构与算法（四）\" class=\"headerlink\" title=\"数据结构与算法（四）\"></a>数据结构与算法（四）</h1><h2 id=\"树形结构\"><a href=\"#树形结构\" class=\"headerlink\" title=\"树形结构\"></a>树形结构</h2><h3 id=\"1-二叉树\"><a href=\"#1-二叉树\" class=\"headerlink\" title=\"1.二叉树\"></a>1.二叉树</h3><h4 id=\"1-1树\"><a href=\"#1-1树\" class=\"headerlink\" title=\"1.1树\"></a>1.1树</h4><p><strong>①定义</strong></p>\n<blockquote>\n<p>每个树都有一个<strong>根节点</strong>，<strong>其余节点</strong>可分为<strong>互不相交的子树</strong>，且只有<strong>一个父节点</strong>和<strong>若干个子节点</strong>，<strong>没有子节点</strong>的节点称为<strong>叶节点</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 树明显是基于递归定义的，所以有关树的很多算法都用到了递归思想</div>\n\n<p><strong>②儿子-兄弟表示法</strong></p>\n<blockquote>\n<p><strong>每个节点</strong>存储<strong>两个指针</strong>，<strong>左指针</strong>指向<strong>最左的儿子节点</strong>，<strong>右指针</strong>指向<strong>相邻兄弟节点</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 所有的树都可以转化为二叉树，所以树的主要研究对象为二叉树</div>\n<p><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/SF_3.png\" alt=\"儿子-兄弟表示法\"></p>\n<h4 id=\"1-2二叉树\"><a href=\"#1-2二叉树\" class=\"headerlink\" title=\"1.2二叉树\"></a>1.2二叉树</h4><p><strong>①定义</strong></p>\n<blockquote>\n<p>由<strong>根节点</strong>和同为<strong>二叉树</strong>的<strong>左子树</strong>和<strong>右子树</strong>组成，即<strong>每个节点</strong>最多只能有<strong>两个子节点</strong>，称为<strong>左节点</strong>和<strong>右节点</strong></p>\n</blockquote>\n<p><strong>②特殊二叉树</strong></p>\n<blockquote>\n<p><strong>完美二叉树</strong>：当二叉树有<strong>n层</strong>时，有<strong>2^n-1个节点</strong>，<strong>叶子节点</strong>只能出现在<strong>最下面一层</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>完全二叉树</strong>：对二叉树中节点<strong>从上至下</strong>，<strong>从左往右</strong>进行<strong>编号</strong>，<strong>编号为i</strong>的节点与<strong>满二叉树</strong>中<strong>编号为i</strong>的节点<strong>位置相同</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 即从某一叶节点缺失所有右边的兄弟节点，左边的兄弟节点不缺失</div>\n<p><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/SF_4.png\" alt=\"特殊二叉树\"></p>\n<h4 id=\"1-3二叉树的存储结构\"><a href=\"#1-3二叉树的存储结构\" class=\"headerlink\" title=\"1.3二叉树的存储结构\"></a>1.3二叉树的存储结构</h4><p><strong>①顺序存储结构</strong></p>\n<blockquote>\n<p>将二叉树转化为<strong>广义的完全二叉树</strong>，<strong>从上至下</strong>，<strong>从左往右</strong>进行<strong>编号</strong>，节点的<strong>编号</strong>就是其在<strong>数组的索引</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 不存在的节点表示为空</div>\n<p><strong>②链表存储</strong></p>\n<blockquote>\n<p><strong>节点结构</strong>分别有<strong>指向左子节点的指针</strong>和<strong>指向右子节点的指针</strong>，<strong>整个二叉树</strong>只需要知道其<strong>根节点指针</strong>即可</p>\n</blockquote>\n<h3 id=\"2-二叉树的遍历\"><a href=\"#2-二叉树的遍历\" class=\"headerlink\" title=\"2.二叉树的遍历\"></a>2.二叉树的遍历</h3><h4 id=\"2-1层序遍历\"><a href=\"#2-1层序遍历\" class=\"headerlink\" title=\"2.1层序遍历\"></a>2.1层序遍历</h4><p><strong>①定义</strong></p>\n<blockquote>\n<p><strong>向下逐层</strong>遍历二叉树，<strong>每一层</strong>按照<strong>从左到右</strong>的顺序<strong>访问节点</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 层序遍历本质上是广度优先遍历，体现了一种“一圈一圈向外扩展”的逐层遍历方式</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 层序遍历的逐层推进和队列的先进先出本质上一样的</div>\n<p><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/SF_5.png\" alt=\"层序遍历\"><br><strong>②非递归实现</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">int *levelOrder(TreeNode *root, int *size) {\n    /* 辅助队列 */\n    int front, rear;\n    int index, *arr;\n    TreeNode *node;\n    TreeNode **queue;\n\n    /*动态申请队列，队列保存的是节点指针，所以最终表现形态为节点指针的指针*/\n    queue = (TreeNode **)malloc(sizeof(TreeNode *) * MAX_SIZE);\n    // 队列伪指针\n    front = 0, rear = 0;\n    // 加入根节点\n    queue[rear++] = root;\n    // 初始化一个列表，用于保存遍历序列\n    /* 辅助数组 */\n    arr = (int *)malloc(sizeof(int) * MAX_SIZE);\n    // 数组指针\n    index = 0;\n    /*利用队列实现层序遍历*/\n    while (front &lt; rear) {\n        // 队列出队\n        node = queue[front++];\n        // 保存节点值\n        arr[index++] = node-&gt;val;\n        if (node-&gt;left != NULL) {\n            // 左子节点入队\n            queue[rear++] = node-&gt;left;\n        }\n        if (node-&gt;right != NULL) {\n            // 右子节点入队\n            queue[rear++] = node-&gt;right;\n        }\n    }\n    // 更新数组长度的值\n    *size = index;\n    arr = realloc(arr, sizeof(int) * (*size));\n\n    // 释放辅助数组空间\n    free(queue);\n    return arr;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"2-2前序、中序和后续遍历\"><a href=\"#2-2前序、中序和后续遍历\" class=\"headerlink\" title=\"2.2前序、中序和后续遍历\"></a>2.2前序、中序和后续遍历</h4><p><strong>①定义</strong></p>\n<blockquote>\n<p><strong>前序遍历</strong>：先访问<strong>根节点</strong>，<strong>前序遍历</strong>其<strong>左子树</strong>，再<strong>前序遍历</strong>其<strong>右子树</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>中序遍历</strong>：<strong>中序遍历</strong>其<strong>左子树</strong>，访问<strong>根节点</strong>，再<strong>中序遍历</strong>其<strong>右子树</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>后序遍历</strong>：<strong>后序遍历</strong>其<strong>左子树</strong>，<strong>后续遍历</strong>其<strong>右子树</strong>，访问其<strong>根节点</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 这三种遍历本质上是深度优先遍历，体现了一种“先走到尽头，再回溯继续”的遍历方式</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 对于一个节点，有三次访问的时刻，即第一次访问（没有访问其子节点），从左子树返回访问和从右子树返回访问，三种遍历方式就是分别再三次访问时输出</div>\n<p><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/SF_6.png\" alt=\"前序、中序和后续遍历\"><br><strong>②三种遍历的递归实现</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">/* 前序遍历 */\nvoid preOrder(TreeNode *root, int *size) {\n    if (root == NULL)\n        return;\n    // 访问优先级：根节点 -&gt; 左子树 -&gt; 右子树\n    arr[(*size)++] = root-&gt;val;\n    preOrder(root-&gt;left, size);\n    preOrder(root-&gt;right, size);\n}\n\n/* 中序遍历 */\nvoid inOrder(TreeNode *root, int *size) {\n    if (root == NULL)\n        return;\n    // 访问优先级：左子树 -&gt; 根节点 -&gt; 右子树\n    inOrder(root-&gt;left, size);\n    arr[(*size)++] = root-&gt;val;\n    inOrder(root-&gt;right, size);\n}\n\n/* 后序遍历 */\nvoid postOrder(TreeNode *root, int *size) {\n    if (root == NULL)\n        return;\n    // 访问优先级：左子树 -&gt; 右子树 -&gt; 根节点\n    postOrder(root-&gt;left, size);\n    postOrder(root-&gt;right, size);\n    arr[(*size)++] = root-&gt;val;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h2 id=\"三、特殊二叉树\"><a href=\"#三、特殊二叉树\" class=\"headerlink\" title=\"三、特殊二叉树\"></a>三、特殊二叉树</h2><h3 id=\"1-二叉搜索树\"><a href=\"#1-二叉搜索树\" class=\"headerlink\" title=\"1.二叉搜索树\"></a>1.二叉搜索树</h3><p><strong>1.1定义</strong></p>\n<blockquote>\n<p>非空左子树的<strong>所有键值</strong>小于其根节点<br>非空右子树的<strong>所有键值</strong>大于其根节点<br>左右子树都是二叉搜索树<br><strong>1.2二叉搜索树的查找</strong><br><strong>①递归实现</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Position Find(ElementType x,BinTree BST)\n{\n  /*没找到，递归退出条件\n  if(!Bst)\n    return NULL;\n  /*递归查找\n  if(x&gt;Bst-&gt;Data)\n    return Find(x,BST-&gt;Right);\n  else if(x&lt;Bst-&gt;Data)\n    return Find(x,BST-&gt;Left);\n  /*成功找到，递归退出条件\n  else\n    return BST;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>②非递归实现</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Position Find(ElementType x,BinTree BST)\n{\n  while(BST)\n  {\n    if(x &gt; BST-&gt;Data)\n      BST = BST-&gt;Right;\n    else if(x &lt; BST-&gt;Data)\n      BST = BST-&gt;Left;\n    else\n      return BST;\n  }\n  return NULL;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>1.3二叉搜索树的插入</strong><br><strong>①递归实现</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">BinTree Insert(ElementType x,BinTree BST)\n{\n  /*递归退出条件，找到对应插入位置，即一个空位置\n  if(!BST)\n  {\n    BST = malloc(sizeof(struct TreeNode));\n    BST-&gt;Data = x;\n    BST-&gt;Left = BST-&gt;Right =NULL;\n  }\n  else\n  {\n    if(x &lt; BST-&gt;Data)\n      BST-&gt;Left = Insert(x,BST-&gt;Left); \n    else if(x &gt; BST-&gt;Data)\n      BST-&gt;Right = Insert(x,BST-&gt;Right);\n  }\n  return BST;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>②非递归实现</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">BinTree Insert(ElementType x,BinTree BST)\n{\n  while(BST)\n  {\n    if(x &gt; BST-&gt;Data)\n    {\n      if(!BST-&gt;Right)\n      {\n      BST-&gt;Right = malloc(sizeof(struct TreeNode));\n      BST-&gt;Right-&gt;Data = x;\n      BST-&gt;Right-&gt;Right = BST-&gt;Right-&gt;Left = NULL;\n      return BST-&gt;Right\n      }\n      else\n      BST = BST-&gt;Right\n    }\n    else if(x &lt; BST-&gt;Data)\n    {\n      if(!BST-&gt;Left)\n      {\n      BST-&gt;Left = malloc(sizeof(struct TreeNode));\n      BST-&gt;Left-&gt;Data = x;\n      BST-&gt;Left-&gt;Right = BST-&gt;Left-&gt;Left = NULL;\n      return BST-&gt;Right\n      }\n      else\n      BST = BST-&gt;Left;\n    }\n    else \n    return BST;\n  }\n  BST = malloc(sizeof(struct TreeNode));\n  BST-&gt;Data = x;\n  BST-&gt;Left = Bst-&gt;Right = NULL;\n  return BST;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>1.4二叉搜索树的删除</strong><br><strong>①思路</strong>：节点分为三类，即叶节点、有一个孩子的节点和有两个孩子的节点</p>\n<blockquote>\n<p>叶节点：直接删除即可<br>有一个孩子的节点：将孩子节点接到其父节点即可<br>有两个孩子的节点：将其<strong>右子树最小元素</strong>或者<strong>左子树最大元素</strong>代替之，可以转化为上述两种情况</p>\n</blockquote>\n<p><strong>②代码实现</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">BinTree Delete(ElementType x,BinTree BST)\n{\n  Position Tmp;\n  if(!BST)\n    print(\"未找到该元素\")；\n  else if(x &lt; BST-&gt;Data)\n    BST-&gt;Left = Delete(x,BST-&gt;Left);\n  else if(x &gt; BST-&gt;Data)\n    BST-&gt;Right = Delete(x,BST-&gt;Right);\n  else\n    /*当有两个孩子\n    if(BST-&gt;Left &amp;&amp; BST-&gt;Right)\n    {\n      /*找到其右子树最小元素替代之\n      Tmp = FindMin(BST-&gt;Right);\n      BST-&gt;Data = Tmp-&gt;Data;\n      /*删除其右子树最小元素\n      BST-&gt;Right = Delete(BST-&gt;Data,BST-&gt;Right);\n    }\n    /*有一个或者没有孩子\n    else\n    {\n      Tmp = BST\n      if(!BST-&gt;Left)\n        BST = BST-&gt;Right\n      else if(!BST-&gt;Right)\n        BST = BST-&gt;Left;\n      free(Tmp)\n    }\n  return BST;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>1.5平衡二叉树</strong><br><strong>①定义</strong>：空树或者<strong>任意节点</strong>左右子树<strong>高度差</strong>绝对值不超过1</p>\n<blockquote>\n<p>平衡二叉树的优点：给定节点数n的最大高度为O(log2n)</p>\n</blockquote>\n<p><strong>②平衡二叉树的调整</strong>：当插入节点时可能会破坏搜索二叉树的平衡性<br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/sjjg_9.png\" alt=\"RR旋转\"><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/sjjg_10.png\" alt=\"LL旋转\"><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/sjjg_11.png\" alt=\"LR旋转\"><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/sjjg_12.png\" alt=\"RL旋转\"></p>\n<blockquote>\n<p>注意多余出来部分要根据二叉搜索树的定义调整</p>\n</blockquote>\n<h3 id=\"2-堆\"><a href=\"#2-堆\" class=\"headerlink\" title=\"2.堆\"></a>2.堆</h3><p><strong>2.1定义</strong>：特殊的<strong>队列</strong>，取出元素的顺序是按照元素的<strong>优先级</strong>（关键字）</p>\n<blockquote>\n<p>用<strong>数组</strong>表示的<strong>完全二叉树</strong><br>任意节点的优先级是<strong>其子树所有节点</strong>的最大/小值，即<strong>根节点到任意节点路径</strong>是<strong>有序</strong>的<br><strong>2.2结构代码</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">typedef struct HeapStruct *MaxHeap\nstruct HeapStruct\n{\n  ElementType *Elements; /*存储堆的数组\n  int Size; /*堆的当前元素个数\n  int Capacity; /*最大容量\n};<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>2.3操作集（最大堆）</strong><br><strong>①创建堆</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">MaxHeap Create(int MaxSize)\n{\n  MaxHeap H = malloc(sizeof(struct HeapStruct));\n  H-&gt;Elements = malloc((MaxSize+1)*sizeof(ElementType));\n  H-&gt;Size = 0;\n  H-&gt;Capacity = MaxSize;\n  /*定义哨兵，便于查找\n  H-&gt;Elements[0] = MaxData;\n  return H;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>其中定义了<strong>哨兵</strong><br><strong>②堆的插入</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">void Insert(MaxHeap H,ElementType item)\n{\n  int i;\n  if(IsFull(H))\n  {\n    printf(\"最大堆已满\")；\n    return;\n  }\n  i = ++H-&gt;Size;\n  /*保证最大堆特性的比较\n  for( ;H-&gt;Elements[i/2] &lt; item; i/=2)\n    H-&gt;Elements[i] = H-&gt;Elements[i/2];\n  H-&gt;Elements[i] = item;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>为了保证最大堆的特性，需要保证<strong>新插入节点要比父节点小</strong>，所以如果他比父节点要大，就<strong>交换</strong>其和父节点位置，直到其小于对应的父节点<br>在这个过程中，哨兵的存在可以防止其到0的位置（超出堆的范围，因为堆的下标不能是0）<br><strong>③堆的删除</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">ElementType DeleteMax(MaxHeap H)\n{\n  /*从堆中取出最大元素，并删除一个节点\n  int Parent,Child;\n  ElementType MaxItem,temp;\n  if(IsEmpty(H))\n  {\n    printf(\"最大堆已为空\")；\n    return;\n  }\n  /*取出根节点最大值\n  MaxItem = H-&gt;Elements[1];\n  /*用最大堆中最后一个元素从根节点开始向上过滤下层节点\n  temp = H-&gt;Elements[H-&gt;Size--]; /先取出末尾元素，然后Size减1\n  for(Parent = 1;Parent*2 &lt;= H-&gt;Size; Parent = Child) \n  {\n    Child = Parent * 2；\n    if((Child!=H-&gt;Size)&amp;&amp;(H-&gt;Elements[Child] &lt; H-&gt;ElementType[Child+1]))\n      Child++; /*找到其左儿子和右儿子的较大者并指向它\n    if(temp&gt;= H-&gt;Element[Child])\n    break; /*找到对应插入位置了，即比其儿子节点都大\n    else\n      H-&gt;Elements[Parent] = H-&gt;Elements[Child]; /*移动到下一层，将较大的儿子移上去\n  }\n  H-&gt;Elements[Parent] = H-&gt;Elements[Child];\n  return MaxItem;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>总体思想：将最后一个位置的节点<strong>内存</strong>删除，将其值<strong>先插入到根节点</strong>中（因为根节点的值已经被取出），然后慢慢向下迭代，交换位置<br><code>Parent*2 &lt;= H-&gt;Size</code>的作用是判断该父节点有没有左儿子，如果没有左儿子就更加没有右儿子<br><code>Child!=H-&gt;Size</code>的作用是判断其有没有右儿子，因为如果左儿子刚好是堆的边界，则没有右儿子<br><strong>④堆的建立</strong><br>总体思想：先将各个元素按照<strong>输入顺序</strong>存入，形成<strong>完全二叉树</strong>，利用<strong>分而治之</strong>的思想，将整个堆分为<strong>根节点和左子堆和右子堆</strong>，以此类推，最后分到最后就是父节点和左右儿子节点的比较</p>\n</blockquote>\n<h3 id=\"3-哈夫曼树\"><a href=\"#3-哈夫曼树\" class=\"headerlink\" title=\"3.哈夫曼树\"></a>3.哈夫曼树</h3><p><strong>3.1定义</strong>：最优二叉树，即每个<strong>叶子结点</strong>到根节点的带权路径长度之和最小<br><strong>3.2构造</strong><br><strong>①总体思想</strong>：将所有节点按照大小排序（可以用堆的方法），每次把权值最小的两棵二叉树合并，比如说1、2、3、4、5，合并一次变为3（1、2）、3、4、5，然后变为6（3（1、2）、3）、4、5，以此类推<br><strong>②代码实现</strong><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/sjjg_14.png\" alt=\"哈夫曼树的构造\"><br><strong>3.3哈夫曼编码</strong>:为了使得出现频率高的字符编码短些，出现频率低的字符编码长些，可以将哈夫曼树的节点路径看作为1和0，左节点为0，右节点为1，<strong>编码长度就是路径长度</strong>，按照字符出现频率构造哈夫曼树即可<br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/sjjg_13.png\" alt=\"哈夫曼编码\"></p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"数据结构与算法（四）\"><a href=\"#数据结构与算法（四）\" class=\"headerlink\" title=\"数据结构与算法（四）\"></a>数据结构与算法（四）</h1><h2 id=\"树形结构\"><a href=\"#树形结构\" class=\"headerlink\" title=\"树形结构\"></a>树形结构</h2><h3 id=\"1-二叉树\"><a href=\"#1-二叉树\" class=\"headerlink\" title=\"1.二叉树\"></a>1.二叉树</h3><h4 id=\"1-1树\"><a href=\"#1-1树\" class=\"headerlink\" title=\"1.1树\"></a>1.1树</h4><p><strong>①定义</strong></p>\n<blockquote>\n<p>每个树都有一个<strong>根节点</strong>，<strong>其余节点</strong>可分为<strong>互不相交的子树</strong>，且只有<strong>一个父节点</strong>和<strong>若干个子节点</strong>，<strong>没有子节点</strong>的节点称为<strong>叶节点</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 树明显是基于递归定义的，所以有关树的很多算法都用到了递归思想</div>\n\n<p><strong>②儿子-兄弟表示法</strong></p>\n<blockquote>\n<p><strong>每个节点</strong>存储<strong>两个指针</strong>，<strong>左指针</strong>指向<strong>最左的儿子节点</strong>，<strong>右指针</strong>指向<strong>相邻兄弟节点</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 所有的树都可以转化为二叉树，所以树的主要研究对象为二叉树</div>\n<p><img src=\"/image/SF_3.png\" alt=\"儿子-兄弟表示法\"></p>\n<h4 id=\"1-2二叉树\"><a href=\"#1-2二叉树\" class=\"headerlink\" title=\"1.2二叉树\"></a>1.2二叉树</h4><p><strong>①定义</strong></p>\n<blockquote>\n<p>由<strong>根节点</strong>和同为<strong>二叉树</strong>的<strong>左子树</strong>和<strong>右子树</strong>组成，即<strong>每个节点</strong>最多只能有<strong>两个子节点</strong>，称为<strong>左节点</strong>和<strong>右节点</strong></p>\n</blockquote>\n<p><strong>②特殊二叉树</strong></p>\n<blockquote>\n<p><strong>完美二叉树</strong>：当二叉树有<strong>n层</strong>时，有<strong>2^n-1个节点</strong>，<strong>叶子节点</strong>只能出现在<strong>最下面一层</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>完全二叉树</strong>：对二叉树中节点<strong>从上至下</strong>，<strong>从左往右</strong>进行<strong>编号</strong>，<strong>编号为i</strong>的节点与<strong>满二叉树</strong>中<strong>编号为i</strong>的节点<strong>位置相同</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 即从某一叶节点缺失所有右边的兄弟节点，左边的兄弟节点不缺失</div>\n<p><img src=\"/image/SF_4.png\" alt=\"特殊二叉树\"></p>\n<h4 id=\"1-3二叉树的存储结构\"><a href=\"#1-3二叉树的存储结构\" class=\"headerlink\" title=\"1.3二叉树的存储结构\"></a>1.3二叉树的存储结构</h4><p><strong>①顺序存储结构</strong></p>\n<blockquote>\n<p>将二叉树转化为<strong>广义的完全二叉树</strong>，<strong>从上至下</strong>，<strong>从左往右</strong>进行<strong>编号</strong>，节点的<strong>编号</strong>就是其在<strong>数组的索引</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 不存在的节点表示为空</div>\n<p><strong>②链表存储</strong></p>\n<blockquote>\n<p><strong>节点结构</strong>分别有<strong>指向左子节点的指针</strong>和<strong>指向右子节点的指针</strong>，<strong>整个二叉树</strong>只需要知道其<strong>根节点指针</strong>即可</p>\n</blockquote>\n<h3 id=\"2-二叉树的遍历\"><a href=\"#2-二叉树的遍历\" class=\"headerlink\" title=\"2.二叉树的遍历\"></a>2.二叉树的遍历</h3><h4 id=\"2-1层序遍历\"><a href=\"#2-1层序遍历\" class=\"headerlink\" title=\"2.1层序遍历\"></a>2.1层序遍历</h4><p><strong>①定义</strong></p>\n<blockquote>\n<p><strong>向下逐层</strong>遍历二叉树，<strong>每一层</strong>按照<strong>从左到右</strong>的顺序<strong>访问节点</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 层序遍历本质上是广度优先遍历，体现了一种“一圈一圈向外扩展”的逐层遍历方式</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 层序遍历的逐层推进和队列的先进先出本质上一样的</div>\n<p><img src=\"/image/SF_5.png\" alt=\"层序遍历\"><br><strong>②非递归实现</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">int *levelOrder(TreeNode *root, int *size) &#123;\n    &#x2F;* 辅助队列 *&#x2F;\n    int front, rear;\n    int index, *arr;\n    TreeNode *node;\n    TreeNode **queue;\n\n    &#x2F;*动态申请队列，队列保存的是节点指针，所以最终表现形态为节点指针的指针*&#x2F;\n    queue &#x3D; (TreeNode **)malloc(sizeof(TreeNode *) * MAX_SIZE);\n    &#x2F;&#x2F; 队列伪指针\n    front &#x3D; 0, rear &#x3D; 0;\n    &#x2F;&#x2F; 加入根节点\n    queue[rear++] &#x3D; root;\n    &#x2F;&#x2F; 初始化一个列表，用于保存遍历序列\n    &#x2F;* 辅助数组 *&#x2F;\n    arr &#x3D; (int *)malloc(sizeof(int) * MAX_SIZE);\n    &#x2F;&#x2F; 数组指针\n    index &#x3D; 0;\n    &#x2F;*利用队列实现层序遍历*&#x2F;\n    while (front &lt; rear) &#123;\n        &#x2F;&#x2F; 队列出队\n        node &#x3D; queue[front++];\n        &#x2F;&#x2F; 保存节点值\n        arr[index++] &#x3D; node-&gt;val;\n        if (node-&gt;left !&#x3D; NULL) &#123;\n            &#x2F;&#x2F; 左子节点入队\n            queue[rear++] &#x3D; node-&gt;left;\n        &#125;\n        if (node-&gt;right !&#x3D; NULL) &#123;\n            &#x2F;&#x2F; 右子节点入队\n            queue[rear++] &#x3D; node-&gt;right;\n        &#125;\n    &#125;\n    &#x2F;&#x2F; 更新数组长度的值\n    *size &#x3D; index;\n    arr &#x3D; realloc(arr, sizeof(int) * (*size));\n\n    &#x2F;&#x2F; 释放辅助数组空间\n    free(queue);\n    return arr;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"2-2前序、中序和后续遍历\"><a href=\"#2-2前序、中序和后续遍历\" class=\"headerlink\" title=\"2.2前序、中序和后续遍历\"></a>2.2前序、中序和后续遍历</h4><p><strong>①定义</strong></p>\n<blockquote>\n<p><strong>前序遍历</strong>：先访问<strong>根节点</strong>，<strong>前序遍历</strong>其<strong>左子树</strong>，再<strong>前序遍历</strong>其<strong>右子树</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>中序遍历</strong>：<strong>中序遍历</strong>其<strong>左子树</strong>，访问<strong>根节点</strong>，再<strong>中序遍历</strong>其<strong>右子树</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>后序遍历</strong>：<strong>后序遍历</strong>其<strong>左子树</strong>，<strong>后续遍历</strong>其<strong>右子树</strong>，访问其<strong>根节点</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 这三种遍历本质上是深度优先遍历，体现了一种“先走到尽头，再回溯继续”的遍历方式</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 对于一个节点，有三次访问的时刻，即第一次访问（没有访问其子节点），从左子树返回访问和从右子树返回访问，三种遍历方式就是分别再三次访问时输出</div>\n<p><img src=\"/image/SF_6.png\" alt=\"前序、中序和后续遍历\"><br><strong>②三种遍历的递归实现</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;* 前序遍历 *&#x2F;\nvoid preOrder(TreeNode *root, int *size) &#123;\n    if (root &#x3D;&#x3D; NULL)\n        return;\n    &#x2F;&#x2F; 访问优先级：根节点 -&gt; 左子树 -&gt; 右子树\n    arr[(*size)++] &#x3D; root-&gt;val;\n    preOrder(root-&gt;left, size);\n    preOrder(root-&gt;right, size);\n&#125;\n\n&#x2F;* 中序遍历 *&#x2F;\nvoid inOrder(TreeNode *root, int *size) &#123;\n    if (root &#x3D;&#x3D; NULL)\n        return;\n    &#x2F;&#x2F; 访问优先级：左子树 -&gt; 根节点 -&gt; 右子树\n    inOrder(root-&gt;left, size);\n    arr[(*size)++] &#x3D; root-&gt;val;\n    inOrder(root-&gt;right, size);\n&#125;\n\n&#x2F;* 后序遍历 *&#x2F;\nvoid postOrder(TreeNode *root, int *size) &#123;\n    if (root &#x3D;&#x3D; NULL)\n        return;\n    &#x2F;&#x2F; 访问优先级：左子树 -&gt; 右子树 -&gt; 根节点\n    postOrder(root-&gt;left, size);\n    postOrder(root-&gt;right, size);\n    arr[(*size)++] &#x3D; root-&gt;val;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h2 id=\"三、特殊二叉树\"><a href=\"#三、特殊二叉树\" class=\"headerlink\" title=\"三、特殊二叉树\"></a>三、特殊二叉树</h2><h3 id=\"1-二叉搜索树\"><a href=\"#1-二叉搜索树\" class=\"headerlink\" title=\"1.二叉搜索树\"></a>1.二叉搜索树</h3><p><strong>1.1定义</strong></p>\n<blockquote>\n<p>非空左子树的<strong>所有键值</strong>小于其根节点<br>非空右子树的<strong>所有键值</strong>大于其根节点<br>左右子树都是二叉搜索树<br><strong>1.2二叉搜索树的查找</strong><br><strong>①递归实现</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Position Find(ElementType x,BinTree BST)\n&#123;\n  &#x2F;*没找到，递归退出条件\n  if(!Bst)\n    return NULL;\n  &#x2F;*递归查找\n  if(x&gt;Bst-&gt;Data)\n    return Find(x,BST-&gt;Right);\n  else if(x&lt;Bst-&gt;Data)\n    return Find(x,BST-&gt;Left);\n  &#x2F;*成功找到，递归退出条件\n  else\n    return BST;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>②非递归实现</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Position Find(ElementType x,BinTree BST)\n&#123;\n  while(BST)\n  &#123;\n    if(x &gt; BST-&gt;Data)\n      BST &#x3D; BST-&gt;Right;\n    else if(x &lt; BST-&gt;Data)\n      BST &#x3D; BST-&gt;Left;\n    else\n      return BST;\n  &#125;\n  return NULL;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>1.3二叉搜索树的插入</strong><br><strong>①递归实现</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">BinTree Insert(ElementType x,BinTree BST)\n&#123;\n  &#x2F;*递归退出条件，找到对应插入位置，即一个空位置\n  if(!BST)\n  &#123;\n    BST &#x3D; malloc(sizeof(struct TreeNode));\n    BST-&gt;Data &#x3D; x;\n    BST-&gt;Left &#x3D; BST-&gt;Right &#x3D;NULL;\n  &#125;\n  else\n  &#123;\n    if(x &lt; BST-&gt;Data)\n      BST-&gt;Left &#x3D; Insert(x,BST-&gt;Left); \n    else if(x &gt; BST-&gt;Data)\n      BST-&gt;Right &#x3D; Insert(x,BST-&gt;Right);\n  &#125;\n  return BST;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>②非递归实现</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">BinTree Insert(ElementType x,BinTree BST)\n&#123;\n  while(BST)\n  &#123;\n    if(x &gt; BST-&gt;Data)\n    &#123;\n      if(!BST-&gt;Right)\n      &#123;\n      BST-&gt;Right &#x3D; malloc(sizeof(struct TreeNode));\n      BST-&gt;Right-&gt;Data &#x3D; x;\n      BST-&gt;Right-&gt;Right &#x3D; BST-&gt;Right-&gt;Left &#x3D; NULL;\n      return BST-&gt;Right\n      &#125;\n      else\n      BST &#x3D; BST-&gt;Right\n    &#125;\n    else if(x &lt; BST-&gt;Data)\n    &#123;\n      if(!BST-&gt;Left)\n      &#123;\n      BST-&gt;Left &#x3D; malloc(sizeof(struct TreeNode));\n      BST-&gt;Left-&gt;Data &#x3D; x;\n      BST-&gt;Left-&gt;Right &#x3D; BST-&gt;Left-&gt;Left &#x3D; NULL;\n      return BST-&gt;Right\n      &#125;\n      else\n      BST &#x3D; BST-&gt;Left;\n    &#125;\n    else \n    return BST;\n  &#125;\n  BST &#x3D; malloc(sizeof(struct TreeNode));\n  BST-&gt;Data &#x3D; x;\n  BST-&gt;Left &#x3D; Bst-&gt;Right &#x3D; NULL;\n  return BST;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>1.4二叉搜索树的删除</strong><br><strong>①思路</strong>：节点分为三类，即叶节点、有一个孩子的节点和有两个孩子的节点</p>\n<blockquote>\n<p>叶节点：直接删除即可<br>有一个孩子的节点：将孩子节点接到其父节点即可<br>有两个孩子的节点：将其<strong>右子树最小元素</strong>或者<strong>左子树最大元素</strong>代替之，可以转化为上述两种情况</p>\n</blockquote>\n<p><strong>②代码实现</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">BinTree Delete(ElementType x,BinTree BST)\n&#123;\n  Position Tmp;\n  if(!BST)\n    print(&quot;未找到该元素&quot;)；\n  else if(x &lt; BST-&gt;Data)\n    BST-&gt;Left &#x3D; Delete(x,BST-&gt;Left);\n  else if(x &gt; BST-&gt;Data)\n    BST-&gt;Right &#x3D; Delete(x,BST-&gt;Right);\n  else\n    &#x2F;*当有两个孩子\n    if(BST-&gt;Left &amp;&amp; BST-&gt;Right)\n    &#123;\n      &#x2F;*找到其右子树最小元素替代之\n      Tmp &#x3D; FindMin(BST-&gt;Right);\n      BST-&gt;Data &#x3D; Tmp-&gt;Data;\n      &#x2F;*删除其右子树最小元素\n      BST-&gt;Right &#x3D; Delete(BST-&gt;Data,BST-&gt;Right);\n    &#125;\n    &#x2F;*有一个或者没有孩子\n    else\n    &#123;\n      Tmp &#x3D; BST\n      if(!BST-&gt;Left)\n        BST &#x3D; BST-&gt;Right\n      else if(!BST-&gt;Right)\n        BST &#x3D; BST-&gt;Left;\n      free(Tmp)\n    &#125;\n  return BST;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>1.5平衡二叉树</strong><br><strong>①定义</strong>：空树或者<strong>任意节点</strong>左右子树<strong>高度差</strong>绝对值不超过1</p>\n<blockquote>\n<p>平衡二叉树的优点：给定节点数n的最大高度为O(log2n)</p>\n</blockquote>\n<p><strong>②平衡二叉树的调整</strong>：当插入节点时可能会破坏搜索二叉树的平衡性<br><img src=\"/image/sjjg_9.png\" alt=\"RR旋转\"><br><img src=\"/image/sjjg_10.png\" alt=\"LL旋转\"><br><img src=\"/image/sjjg_11.png\" alt=\"LR旋转\"><br><img src=\"/image/sjjg_12.png\" alt=\"RL旋转\"></p>\n<blockquote>\n<p>注意多余出来部分要根据二叉搜索树的定义调整</p>\n</blockquote>\n<h3 id=\"2-堆\"><a href=\"#2-堆\" class=\"headerlink\" title=\"2.堆\"></a>2.堆</h3><p><strong>2.1定义</strong>：特殊的<strong>队列</strong>，取出元素的顺序是按照元素的<strong>优先级</strong>（关键字）</p>\n<blockquote>\n<p>用<strong>数组</strong>表示的<strong>完全二叉树</strong><br>任意节点的优先级是<strong>其子树所有节点</strong>的最大&#x2F;小值，即<strong>根节点到任意节点路径</strong>是<strong>有序</strong>的<br><strong>2.2结构代码</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">typedef struct HeapStruct *MaxHeap\nstruct HeapStruct\n&#123;\n  ElementType *Elements; &#x2F;*存储堆的数组\n  int Size; &#x2F;*堆的当前元素个数\n  int Capacity; &#x2F;*最大容量\n&#125;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>2.3操作集（最大堆）</strong><br><strong>①创建堆</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">MaxHeap Create(int MaxSize)\n&#123;\n  MaxHeap H &#x3D; malloc(sizeof(struct HeapStruct));\n  H-&gt;Elements &#x3D; malloc((MaxSize+1)*sizeof(ElementType));\n  H-&gt;Size &#x3D; 0;\n  H-&gt;Capacity &#x3D; MaxSize;\n  &#x2F;*定义哨兵，便于查找\n  H-&gt;Elements[0] &#x3D; MaxData;\n  return H;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>其中定义了<strong>哨兵</strong><br><strong>②堆的插入</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">void Insert(MaxHeap H,ElementType item)\n&#123;\n  int i;\n  if(IsFull(H))\n  &#123;\n    printf(&quot;最大堆已满&quot;)；\n    return;\n  &#125;\n  i &#x3D; ++H-&gt;Size;\n  &#x2F;*保证最大堆特性的比较\n  for( ;H-&gt;Elements[i&#x2F;2] &lt; item; i&#x2F;&#x3D;2)\n    H-&gt;Elements[i] &#x3D; H-&gt;Elements[i&#x2F;2];\n  H-&gt;Elements[i] &#x3D; item;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>为了保证最大堆的特性，需要保证<strong>新插入节点要比父节点小</strong>，所以如果他比父节点要大，就<strong>交换</strong>其和父节点位置，直到其小于对应的父节点<br>在这个过程中，哨兵的存在可以防止其到0的位置（超出堆的范围，因为堆的下标不能是0）<br><strong>③堆的删除</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">ElementType DeleteMax(MaxHeap H)\n&#123;\n  &#x2F;*从堆中取出最大元素，并删除一个节点\n  int Parent,Child;\n  ElementType MaxItem,temp;\n  if(IsEmpty(H))\n  &#123;\n    printf(&quot;最大堆已为空&quot;)；\n    return;\n  &#125;\n  &#x2F;*取出根节点最大值\n  MaxItem &#x3D; H-&gt;Elements[1];\n  &#x2F;*用最大堆中最后一个元素从根节点开始向上过滤下层节点\n  temp &#x3D; H-&gt;Elements[H-&gt;Size--]; &#x2F;先取出末尾元素，然后Size减1\n  for(Parent &#x3D; 1;Parent*2 &lt;&#x3D; H-&gt;Size; Parent &#x3D; Child) \n  &#123;\n    Child &#x3D; Parent * 2；\n    if((Child!&#x3D;H-&gt;Size)&amp;&amp;(H-&gt;Elements[Child] &lt; H-&gt;ElementType[Child+1]))\n      Child++; &#x2F;*找到其左儿子和右儿子的较大者并指向它\n    if(temp&gt;&#x3D; H-&gt;Element[Child])\n    break; &#x2F;*找到对应插入位置了，即比其儿子节点都大\n    else\n      H-&gt;Elements[Parent] &#x3D; H-&gt;Elements[Child]; &#x2F;*移动到下一层，将较大的儿子移上去\n  &#125;\n  H-&gt;Elements[Parent] &#x3D; H-&gt;Elements[Child];\n  return MaxItem;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>总体思想：将最后一个位置的节点<strong>内存</strong>删除，将其值<strong>先插入到根节点</strong>中（因为根节点的值已经被取出），然后慢慢向下迭代，交换位置<br><code>Parent*2 &lt;= H-&gt;Size</code>的作用是判断该父节点有没有左儿子，如果没有左儿子就更加没有右儿子<br><code>Child!=H-&gt;Size</code>的作用是判断其有没有右儿子，因为如果左儿子刚好是堆的边界，则没有右儿子<br><strong>④堆的建立</strong><br>总体思想：先将各个元素按照<strong>输入顺序</strong>存入，形成<strong>完全二叉树</strong>，利用<strong>分而治之</strong>的思想，将整个堆分为<strong>根节点和左子堆和右子堆</strong>，以此类推，最后分到最后就是父节点和左右儿子节点的比较</p>\n</blockquote>\n<h3 id=\"3-哈夫曼树\"><a href=\"#3-哈夫曼树\" class=\"headerlink\" title=\"3.哈夫曼树\"></a>3.哈夫曼树</h3><p><strong>3.1定义</strong>：最优二叉树，即每个<strong>叶子结点</strong>到根节点的带权路径长度之和最小<br><strong>3.2构造</strong><br><strong>①总体思想</strong>：将所有节点按照大小排序（可以用堆的方法），每次把权值最小的两棵二叉树合并，比如说1、2、3、4、5，合并一次变为3（1、2）、3、4、5，然后变为6（3（1、2）、3）、4、5，以此类推<br><strong>②代码实现</strong><br><img src=\"/image/sjjg_14.png\" alt=\"哈夫曼树的构造\"><br><strong>3.3哈夫曼编码</strong>:为了使得出现频率高的字符编码短些，出现频率低的字符编码长些，可以将哈夫曼树的节点路径看作为1和0，左节点为0，右节点为1，<strong>编码长度就是路径长度</strong>，按照字符出现频率构造哈夫曼树即可<br><img src=\"/image/sjjg_13.png\" alt=\"哈夫曼编码\"></p>\n"},{"title":"汇编语言（一）","seo_title":"seo名称","toc":true,"indent":true,"top":false,"comments":1,"archive":true,"cover":false,"mathjax":false,"pin":false,"top_meta":false,"bottom_meta":false,"sidebar":["toc"],"keywords":"文章关键词","updated":"2023-11-07T14:10:58.029Z","img":"/medias/featureimages/27.webp","date":"2023-11-07T14:10:58.029Z","summary":"汇编语言","_content":"\n# 汇编语言（一）\n## 汇编语言启蒙\n{%right%}\n以下内容主要以8086CPU为例，该CPU是16位结构，注意这个大前提\n{%endright%}\n### 1.引言\n#### 1.1汇编语言\n**①组成**\n>**汇编指令**：机器指令便于记忆的格式，有对应的**机器码**\n**伪指令**：没有对应的机器码，由**编译器执行**，计算机并不执行\n**符号**：由**编译器识别**，没有对应的机器码\n\n**②机器语言**\n>**机器指令**的集合，机器指令是一系列**二进制数字**，计算机将机器指令转化为一系列的**高低电平**，使电子器件受到驱动\n{%list%}\n这个工作由微处理器（如CPU）完成，每一种微处理器都有其机器指令集\n{%endlist%}\n\n#### 1.2指令与数据\n{%list%}\n两者本质上都是一串二进制数据，也并没有特殊的格式区别它们，取决于CPU如何解释它们\n{%endlist%}\n**①进制**\n>**二进制**：以字母`B`结尾\n**八进制**：以字母`O`或者`Q`结尾\n**十进制**：以字母`D`结尾，或者没有结尾字母\n**十六进制**：以字母`H`结尾\n{%wrong%}\n十六进制的数据，在汇编源程序中不能以字母开头，需要在前面加0，如A000H需要改为0A000H\n{%endwrong%}\n\n**②ASCLL编码**\n>用**单引号**`''`表示对应信息**按照字符**给出，**编译器**将其转化为对应的`ASCLL`编码\n`'unIX'`等价于`75H,6EH,49H,58H`\n{%list%}\n小写字母的ASCLL码比对应大写字母的ASCLL码大20H\n{%endlist%}\n\n\n**③逻辑位操作**\n>`and`：按位进行**与**运算\n`or`：按位进行**或**运算\n{%list%}\n可以通过该逻辑运算将对应的位设为1/0\n{%endlist%}\n```\nand al,10111111 ;将第6位设为0\nor al,01000000 ;将第6位设为1\n```\n{%right%}\n可以通过改变位改变字母大小写，大写字母的ASCLL码第5位为0，小写字母对应位置为1，这样不需要判断大小写\n{%endright%}\n**③移位操作**\n>`shl`：**左**移位\n`shr`：**右**移位\n{%list%}\n这条指令将移出的位存储在CF标志中，并用0填充缺失的位\n{%endlist%}\n{%warning%}\n只能操作内存单元或者寄存器，不能操作字面量\n{%endwarning%}\n\n#### 1.3相关硬件概念\n**①主板和接口卡**\n>**主板**：主板上一些主要器件通过**总线**相连，如**CPU**、**存储器**、**外围芯片组**和**扩展插槽**等\n**接口卡**：插在**扩展插槽**上，CPU通过控制接口卡控制**外部设备**，如鼠标、屏幕和键盘等\n\n**②CPU**\n>**组成**\n**运算器**：信息处理\n**寄存器**：信息存储，一般能存储的**位数不高**，主要都是**和CPU密切相关的信息**\n**控制器**：控制各种器件工作\n{%list%}\n出于兼容性的考虑，一个寄存器可分多个寄存器，通常最小单位8位（因为一个内存单元是8位），如一个16位寄存器ax可以看成两个8位寄存器al和ah\n{%endlist%}\n{%right%}\n可以通过改变寄存器内容实现对CPU的控制\n{%endright%}\n{%warning%}\n当指令操作al导致溢出时，溢出的位不会存储到ah中，因为它将al当作一个独立的寄存器\n{%endwarning%}\n**③总线**\n>CPU和**其他部件**交流的通道，物理上是一根根**导线的集合**，可分为以下三类\n\n>**地址总线**：指定存储单元\n{%list%}\n地址总线的宽度（根数）为N，则其能对2^N个单元寻址\n{%endlist%}\n>**数据总线**：传输数据\n{%list%}\n数据总线的宽度（根数）为N，则一次能传输N位的数据\n{%endlist%}\n>**控制总线**：传输控制指令\n{%list%}\n数据总线的宽度（根数）为N，则有N种控制指令（激活则为高电平）\n{%endlist%}\n\n**④存储器**\n{%right%}\n依据读写属性分类\n{%endright%}\n>**随机存储器**：**可读可写**，但是必须**带电存储**，关机后存储内容消失\n**只读存储器**：只能读取，存储内容**不会丢失**\n{%right%}\n依据功能分类\n{%endright%}\n>**随机存储器**：存放CPU使用的**大部分数据和程序**\n**装有BIOS的ROM**：BIOS是主板和各类接口卡中的软件，可通过它对该硬件进行**最基本的输入和输出**\n**接口卡上的RAM**：某些接口卡需要**对大量输入输出数据进行暂时存储**，则会装有RAM，如显示卡的显存\n\n**⑤端口**\n>**PC系统**中，除了**存储器**，还有**其他芯片**通过**总线**和CPU相连，如**接口卡**和**主板**上的**接口芯片**等，这些芯片都有一组可以由CPU读写的**寄存器**，称之为**端口**，每个端口都有一个**对应的地址**\n{%list%}\n端口只能用in和out指令进行读写，且需要用特定的寄存器访问端口\n{%endlist%}\n\n***\n\n### 2.内存与地址\n#### 2.1内存地址空间\n**①存储单元**\n>每个存储器被划分为**若干个存储单元**，每个存储单元存储**一个字节**\n\n**②逻辑存储器**\n>CPU在操作**物理存储器**时，将他们**总的**看作为一个由若干存储单元组成的**逻辑存储器**，每个存储器占**一段地址空间**\n{%list%}\n内存地址空间的大小受到地址总线宽度的影响\n{%endlist%}\n\n#### 2.2物理地址\n>一个单元**真实唯一**的地址，也是CPU通过**地址总线**发出的地址\n{%right%}\n物理地址的详细计算方法和具体的CPU有关，其中最重要的就是它是多少位结构\n{%endright%}\n**①十六位结构**\n>**运算器一次处理**最多**16位**的数据\n**寄存器最大长度**为**16位**\n**寄存器和运算器的通路**为**16位**\n\n**②地址加法器**：计算**物理地址**，`物理地址 = 段地址*16+偏移地址`，也可以表示为`段地址:偏移地址`\n>易知每一段的起始地址为**16的倍数**，每一段的长度为**64KB**\n{%list%}\n8086CPU地址总线宽度为20，但是它本身一次性只能传输16位数据，如果直接从CPU内部发出地址信号，则只能达到64KB的寻址能力，故需要使用地址加法器扩大其寻址能力（16位乘以16则为20位）\n{%endlist%}\n{%warning%}\n同一个物理地址可以使用不同的段地址和偏移地址表示\n{%endwarning%}\n\n#### 2.3寻址\n**①段地址**：由**段寄存器**提供\n>8086CPU有四个段寄存器，`CS`、`DS`、`ES`和`SS`，其中`CS`和`SS`有对应的**特殊用途**，其余可供自由使用\n{%list%}\n缺省时，cpu会根据情况自动读取段寄存器中的值作为默认段地址，可以添加段前缀显示表明段地址\n{%endlist%}\n{%warning%}\n每个寄存器都有其特殊用途，如乘除法需要使用ax，bx，只是CS、SS等寄存器被占用频率非常高，故最好不要随便使用\n{%endwarning%}\n>**段前缀**：`段前缀:[偏移地址]`\n段前缀通常是**段寄存器名**，如`mov ax,ds:[bx]`\n\n**②偏移地址**：可以通过`[]`给出，其中可以放置**立即数**和**寻址寄存器**，也可以**混合使用**\n>**立即数**：直接**包含在机器指令中**的数据，执行前位于cpu的**指令缓冲器**中\n{%list%}\n如100、'a'等，类似于C中的字面值\n{%endlist%}\n>**寻址寄存器**：8086CPU提供了`bx`，`bp`，`si`，`di`四个寄存器\n{%list%}\nsi和di寄存器，不能分为两个八位寄存器\n{%endlist%}\n{%warning%}\n其中bx和bp不能同时出现，si和di也不能同时出现\n{%endwarning%}\n>**混合使用**：如`[bx+si+8]`、`[bp+di]`、`[bx+9]`，也可以写成`[bx].8[si]`、`[bx].9`、`[bx]`\n{%list%}\n若含有bp，则段地址默认为ss段寄存器中的数据，其余默认为ds段寄存器\n{%endlist%}\n{%right%}\n用段寄存器指定段，用偏移地址访问段\n{%endright%}\n{%wrong%}\n汇编语言中偏移地址是以存储单元为单位计算的，并没有像C语言那么智能\n{%endwrong%}\n\n#### 2.4内存访问\n**①`mov`指令**：\n>`mov [container],[data]`\n将**数据**送入一个**容器**中\n\n>**容器**：类似于**C的左值**，可以是**寄存器名**，**内存单元地址**\n**数据**：类似于**C的右值**，可以是**字面量**、**寄存器名**以及**内存单元地址**\n{%list%}\nmov ax,bx类似于C中ax = bx\n{%endlist%}\n{%right%}\n8086CPU不支持通过立即数直接修改段寄存器的值（mov DS,xxxxH），需要先修改一个通用寄存器的值，然后将该寄存器的值送入DS（mov ds,ax）\n{%endright%}\n{%warning%}\n与在debug中不同的是，mov ax,[0]指令在一些编译器中的意义等同于mov ax,0，为了防止歧义需要添加段前缀，或者将0存入bx中，采用mov ax,[bx]\n{%endwarning%}\n{%wrong%}\n在赋值的时候，需要保证两边的内存大小是一样的\n{%endwrong%}\n>若需要将一个**小内存**的值**传入**到**大内存值**中（如累加，需要使用一个大内存作为容器**防止溢出**），可以用一个**大内存容器**作为**中介**\n```\nmov dx,bl ;错误\n\nmov al,bl\nmov ah,0\nadd dx,ax\n```\n\n**②数据长度信息**\n{%list%}\n访问内存不仅仅需要直到其起始地址，还需要知道操作的内存长度\n{%endlist%}\n>**寄存器名**：如`mov ax,xxx`或者`mov xxx,ax`则表示**处理的数据长度为一个字**，因为`ax`寄存器长度为**一个字**\n同理`mov al,xxx`或者`mov xxx,al`表示进行**字节操作**\n\n>**显示指明**：`word ptr`指明访问的内存为**字单元**，`byte ptr`指明是**字节单元**\n如`mov word ptr ds:[0],1`和`mov byte ptr ds:[0],1`,两者修改的**内存长度**不一样，前者修改的是`ds:[0]`和`ds:[1]`，后者修改的是`ds;[0]`\n{%list%}\n一个字需要两个内存单位，字的低位字节存放在低地址单元中，高位字节存放再高地址单元中\n{%endlist%}\n{%right%}\npush、pop只执行字操作\n{%endright%}\n{%warning%}\n在没有寄存器参与的内存单元访问指令中，必须要显示指明操作内存长度\n{%endwarning%}\n\n#### 2.5指令的访问\n**①相关寄存器**\n>**`CS`段寄存器**：用于提供**当前要实施指令**的**段地址**\n**`IP`寄存器**：搭配`CS`**段寄存器**使用，8086CPU将`CS:IP`作为当前要实施的指令的**物理地址**\n\n**②过程概述**\n![初始状态](/image/HB_1.png)\n>`CS`和`IP`寄存器的值送入**地址加法器**中，获得指令的**物理地址**\n**地址加法器**将物理地址送入**控制输入输出电路**\n**控制输入输出电路**将物理地址送入**地址总线**\n**数据总线**将对应物理地址**对应的指令**送入CPU\n{%list%}\n如图，一条指令占据多个内存单元，数据总线输入的是整条指令，而不仅仅是对应物理地址对应的内存单元的数据\n{%endlist%}\n>**控制输入输出电路**将对应指令送入**指令缓冲器**\n`IP`的值自动增加，指向**下一条指令**\n{%list%}\n若刚刚读入的指令长度为N个字节，则IP增加3\n{%endlist%}\n>**执行**指令缓冲器中的指令，并重复上述过程执行**下一条指令**\n{%right%}\nCS:IP对应内存位置的数据即为指令，CPU根据这个区分指令和数据\n{%endright%}\n{%list%}\n可以修改CS和IP寄存器的值，指向我们的代码段，用于执行该段代码\n{%endlist%}\n{%warning%}\nmov指令可以修改大部分寄存器的地址，但是不能修改CS和IP的地址，需要用跳转修改\n{%endwarning%}\n\n***\n### 3.汇编程序概述\n#### 3.1汇编程序执行概述\n**①编写汇编源程序**\n{%list%}\n汇编语言的源文件后缀为.asm\n{%endlist%}\n**②对源程序进行编译链接**\n>编译产生**目标文件**\n链接源文件产生**可执行文件**\n{%list%}\n可执行文件包括两部分，一部分为程序和数据，另一部分为相关描述信息（程序有多大，占用多大内存）\n{%endlist%}\n{%right%}\n其中伪指令在编译时均转化为相关描述信息\n{%endright%}\n**③执行程序**\n>每个**操作系统**都有类似于**命令解释器**的程序用于执行程序，**命令解释器**会先找到对应程序并将其**载入内存**，随后设置`CS:IP`指向**程序的入口**，命令解释器**停止运行**，并运行对应程序，最后对应程序运行**结束**，**返回**到命令解解释程序\n#### 3.2汇编源程序框架\n**①框架**\n>汇编指令才是**机器执行**的指令，其余都变成了**描述信息**\n\n![指令和伪指令](/image/HB_5.png)\n>**程序返回**：一个程序结束后，将**CPU的控制权**还给使他运行的程序\n{%list%}\n在汇编程序的最后一个段中结尾处添加以下两行指令即可\n{%endlist%}\n```\nmov ax,4c00H\nint 21H\n```\n**②常用伪指令**\n>`assume 段寄存器名:段名`：将某个段和某个**段寄存器**联系到一起\n{%right%}\n段和段寄存器的关联将决定这个段的作用，如代码段和CS联系到一起，栈段和SS联系到一起\n{%endright%}\n>`段名 segment`：说明一个段**开始**\n`段名 ends`：说明一个段**结束**\n{%list%}\n一个汇编程序由多个段组成，段名最后会被处理为一个段地址\n{%endlist%}\n>`end`：一个汇编程序的**结束标记**\n{%warning%}\n不要搞混end和ends\n{%endwarning%}\n\n**②常用汇编指令**\n>`add`：加法指令\n{%list%}\nadd ax,bx类似于C中ax = ax + bx\n{%endlist%}\n>`sub`：减法指令\n{%list%}\nsub ax,bx类似于C中ax = ax - bx\n{%endlist%}\n>`inc`：递增指令\n{%list%}\ninc ax类似于ax = ax+1\n{%endlist%}\n>`dec`：递减指令\n{%list%}\ndec ax类似于ax = ax-1\n{%endlist%}\n>`div`：除法指令\n{%list%}\ndiv 容器，容器（不能是ax，dx相关寄存器）中为除数，若除数为8位，则被除数为16位，放在ax中，结束后al存商，ah存余数，若除数为16位，则被除数为32位，高位放在dx中，低位放在ax中，结束后ax存商，dx存余数\n{%endlist%}\n{%right%}\n根据被除数的范围选取除法的类别，16位寄存器能表示的值的上限为65535\n{%endright%}\n{%warning%}\n使用内存单元时，需要使用word ptr和byte ptr指明内存单元的长度\n{%endwarning%}\n>`mul`：乘法法指令\n{%list%}\n\n{%endlist%}\n\n#### 3.3源文件的编译\n**①运行编译器**\n![masm编译器](/image/HB_6.png)\n>本篇采用微软的`masm`编译器\n\n**②导入源文件**\n![导入源文件](/image/HB_7.png)\n>如果源文件在**编译器工作路径下**，输入**文件名**即可，否则需要指明**完整路径**\n如果源程序不是`.asm`文件，则需要输入**全名**\n{%list%}\n编译后将在指定路径（在对应冒号后输入路径即可）生成可执行文件（.obj文件），缺省情况下当前路径\n{%endlist%}\n{%right%}\n编译过程中还会提示你生成一些中间文件，如列表文件（.lst）和交叉引用文件（.crf），可忽略（直接enter）\n{%endright%}\n\n#### 3.4链接目标文件\n**①运行链接器**\n![Overlay Linker链接器](/image/HB_8.png)\n>本篇采用微软的`Overlay Linker`\n\n**②导入目标文件**\n![导入目标文件](/image/HB_9.png)\n>路径和文件名的规则**同编译器**\n{%right%}\n链接过程中还会提示你生成一些中间文件，如映像文件（.map），可忽略（直接enter）\n{%endright%}\n**③链接库文件**\n![链接库文件](/image/HB_10.png)\n>如果程序中调用了**库文件中的子程序**，则需要链接对应的库\n\n#### 3.5简化的编译和链接\n![简化的编译](/image/HB_11.png)\n![简化的链接](/image/HB_12.png)\n>将跳过一些**非必要步骤**，即生成中间文件和链接库\n\n#### 3.6跟踪程序执行过程\n>本篇采用微软的`debug`程序\n\n**①导入可执行文件**\n![简化的链接](/image/HB_14.png)\n\n**②可执行文件的加载过程**\n>`DOS`系统中可执行文件的加载过程，其中`SA`存放在`ds`寄存器中，`DOS`系统使用`PSP`用来与程序通信\n\n![可执行文件的内存情况](/image/HB_15.png)\n\n**③查看寄存器状态**\n>输入`-r`查看寄存器\n\n![简化的链接](/image/HB_13.png)\n\n**④查看程序内容**\n>输入`-u`查看程序内容\n\n![查看程序内容](/image/HB_16.png)\n\n**⑤单步执行程序**\n>输入`-t`单步执行指令\n{%warning%}\n当执行到int 21时，需要使用-p执行\n{%endwarning%}\n![单步执行程序](/image/HB_17.png)\n\n\n\n\n","source":"_posts/汇编语言（一）.md","raw":"---\ntitle: 汇编语言（一）\nseo_title: seo名称\ntoc: true\nindent: true\ntop: false\ncomments: true\narchive: true\ncover: false\nmathjax: false\npin: false\ntop_meta: false\nbottom_meta: false\nsidebar:\n  - toc\ntag:\n  - 汇编语言\n  - 《汇编语言》\ncategories: 编程语言\nkeywords: 文章关键词\nupdated: ''\nimg: /medias/featureimages/27.webp\ndate:\nsummary: 汇编语言\n---\n\n# 汇编语言（一）\n## 汇编语言启蒙\n{%right%}\n以下内容主要以8086CPU为例，该CPU是16位结构，注意这个大前提\n{%endright%}\n### 1.引言\n#### 1.1汇编语言\n**①组成**\n>**汇编指令**：机器指令便于记忆的格式，有对应的**机器码**\n**伪指令**：没有对应的机器码，由**编译器执行**，计算机并不执行\n**符号**：由**编译器识别**，没有对应的机器码\n\n**②机器语言**\n>**机器指令**的集合，机器指令是一系列**二进制数字**，计算机将机器指令转化为一系列的**高低电平**，使电子器件受到驱动\n{%list%}\n这个工作由微处理器（如CPU）完成，每一种微处理器都有其机器指令集\n{%endlist%}\n\n#### 1.2指令与数据\n{%list%}\n两者本质上都是一串二进制数据，也并没有特殊的格式区别它们，取决于CPU如何解释它们\n{%endlist%}\n**①进制**\n>**二进制**：以字母`B`结尾\n**八进制**：以字母`O`或者`Q`结尾\n**十进制**：以字母`D`结尾，或者没有结尾字母\n**十六进制**：以字母`H`结尾\n{%wrong%}\n十六进制的数据，在汇编源程序中不能以字母开头，需要在前面加0，如A000H需要改为0A000H\n{%endwrong%}\n\n**②ASCLL编码**\n>用**单引号**`''`表示对应信息**按照字符**给出，**编译器**将其转化为对应的`ASCLL`编码\n`'unIX'`等价于`75H,6EH,49H,58H`\n{%list%}\n小写字母的ASCLL码比对应大写字母的ASCLL码大20H\n{%endlist%}\n\n\n**③逻辑位操作**\n>`and`：按位进行**与**运算\n`or`：按位进行**或**运算\n{%list%}\n可以通过该逻辑运算将对应的位设为1/0\n{%endlist%}\n```\nand al,10111111 ;将第6位设为0\nor al,01000000 ;将第6位设为1\n```\n{%right%}\n可以通过改变位改变字母大小写，大写字母的ASCLL码第5位为0，小写字母对应位置为1，这样不需要判断大小写\n{%endright%}\n**③移位操作**\n>`shl`：**左**移位\n`shr`：**右**移位\n{%list%}\n这条指令将移出的位存储在CF标志中，并用0填充缺失的位\n{%endlist%}\n{%warning%}\n只能操作内存单元或者寄存器，不能操作字面量\n{%endwarning%}\n\n#### 1.3相关硬件概念\n**①主板和接口卡**\n>**主板**：主板上一些主要器件通过**总线**相连，如**CPU**、**存储器**、**外围芯片组**和**扩展插槽**等\n**接口卡**：插在**扩展插槽**上，CPU通过控制接口卡控制**外部设备**，如鼠标、屏幕和键盘等\n\n**②CPU**\n>**组成**\n**运算器**：信息处理\n**寄存器**：信息存储，一般能存储的**位数不高**，主要都是**和CPU密切相关的信息**\n**控制器**：控制各种器件工作\n{%list%}\n出于兼容性的考虑，一个寄存器可分多个寄存器，通常最小单位8位（因为一个内存单元是8位），如一个16位寄存器ax可以看成两个8位寄存器al和ah\n{%endlist%}\n{%right%}\n可以通过改变寄存器内容实现对CPU的控制\n{%endright%}\n{%warning%}\n当指令操作al导致溢出时，溢出的位不会存储到ah中，因为它将al当作一个独立的寄存器\n{%endwarning%}\n**③总线**\n>CPU和**其他部件**交流的通道，物理上是一根根**导线的集合**，可分为以下三类\n\n>**地址总线**：指定存储单元\n{%list%}\n地址总线的宽度（根数）为N，则其能对2^N个单元寻址\n{%endlist%}\n>**数据总线**：传输数据\n{%list%}\n数据总线的宽度（根数）为N，则一次能传输N位的数据\n{%endlist%}\n>**控制总线**：传输控制指令\n{%list%}\n数据总线的宽度（根数）为N，则有N种控制指令（激活则为高电平）\n{%endlist%}\n\n**④存储器**\n{%right%}\n依据读写属性分类\n{%endright%}\n>**随机存储器**：**可读可写**，但是必须**带电存储**，关机后存储内容消失\n**只读存储器**：只能读取，存储内容**不会丢失**\n{%right%}\n依据功能分类\n{%endright%}\n>**随机存储器**：存放CPU使用的**大部分数据和程序**\n**装有BIOS的ROM**：BIOS是主板和各类接口卡中的软件，可通过它对该硬件进行**最基本的输入和输出**\n**接口卡上的RAM**：某些接口卡需要**对大量输入输出数据进行暂时存储**，则会装有RAM，如显示卡的显存\n\n**⑤端口**\n>**PC系统**中，除了**存储器**，还有**其他芯片**通过**总线**和CPU相连，如**接口卡**和**主板**上的**接口芯片**等，这些芯片都有一组可以由CPU读写的**寄存器**，称之为**端口**，每个端口都有一个**对应的地址**\n{%list%}\n端口只能用in和out指令进行读写，且需要用特定的寄存器访问端口\n{%endlist%}\n\n***\n\n### 2.内存与地址\n#### 2.1内存地址空间\n**①存储单元**\n>每个存储器被划分为**若干个存储单元**，每个存储单元存储**一个字节**\n\n**②逻辑存储器**\n>CPU在操作**物理存储器**时，将他们**总的**看作为一个由若干存储单元组成的**逻辑存储器**，每个存储器占**一段地址空间**\n{%list%}\n内存地址空间的大小受到地址总线宽度的影响\n{%endlist%}\n\n#### 2.2物理地址\n>一个单元**真实唯一**的地址，也是CPU通过**地址总线**发出的地址\n{%right%}\n物理地址的详细计算方法和具体的CPU有关，其中最重要的就是它是多少位结构\n{%endright%}\n**①十六位结构**\n>**运算器一次处理**最多**16位**的数据\n**寄存器最大长度**为**16位**\n**寄存器和运算器的通路**为**16位**\n\n**②地址加法器**：计算**物理地址**，`物理地址 = 段地址*16+偏移地址`，也可以表示为`段地址:偏移地址`\n>易知每一段的起始地址为**16的倍数**，每一段的长度为**64KB**\n{%list%}\n8086CPU地址总线宽度为20，但是它本身一次性只能传输16位数据，如果直接从CPU内部发出地址信号，则只能达到64KB的寻址能力，故需要使用地址加法器扩大其寻址能力（16位乘以16则为20位）\n{%endlist%}\n{%warning%}\n同一个物理地址可以使用不同的段地址和偏移地址表示\n{%endwarning%}\n\n#### 2.3寻址\n**①段地址**：由**段寄存器**提供\n>8086CPU有四个段寄存器，`CS`、`DS`、`ES`和`SS`，其中`CS`和`SS`有对应的**特殊用途**，其余可供自由使用\n{%list%}\n缺省时，cpu会根据情况自动读取段寄存器中的值作为默认段地址，可以添加段前缀显示表明段地址\n{%endlist%}\n{%warning%}\n每个寄存器都有其特殊用途，如乘除法需要使用ax，bx，只是CS、SS等寄存器被占用频率非常高，故最好不要随便使用\n{%endwarning%}\n>**段前缀**：`段前缀:[偏移地址]`\n段前缀通常是**段寄存器名**，如`mov ax,ds:[bx]`\n\n**②偏移地址**：可以通过`[]`给出，其中可以放置**立即数**和**寻址寄存器**，也可以**混合使用**\n>**立即数**：直接**包含在机器指令中**的数据，执行前位于cpu的**指令缓冲器**中\n{%list%}\n如100、'a'等，类似于C中的字面值\n{%endlist%}\n>**寻址寄存器**：8086CPU提供了`bx`，`bp`，`si`，`di`四个寄存器\n{%list%}\nsi和di寄存器，不能分为两个八位寄存器\n{%endlist%}\n{%warning%}\n其中bx和bp不能同时出现，si和di也不能同时出现\n{%endwarning%}\n>**混合使用**：如`[bx+si+8]`、`[bp+di]`、`[bx+9]`，也可以写成`[bx].8[si]`、`[bx].9`、`[bx]`\n{%list%}\n若含有bp，则段地址默认为ss段寄存器中的数据，其余默认为ds段寄存器\n{%endlist%}\n{%right%}\n用段寄存器指定段，用偏移地址访问段\n{%endright%}\n{%wrong%}\n汇编语言中偏移地址是以存储单元为单位计算的，并没有像C语言那么智能\n{%endwrong%}\n\n#### 2.4内存访问\n**①`mov`指令**：\n>`mov [container],[data]`\n将**数据**送入一个**容器**中\n\n>**容器**：类似于**C的左值**，可以是**寄存器名**，**内存单元地址**\n**数据**：类似于**C的右值**，可以是**字面量**、**寄存器名**以及**内存单元地址**\n{%list%}\nmov ax,bx类似于C中ax = bx\n{%endlist%}\n{%right%}\n8086CPU不支持通过立即数直接修改段寄存器的值（mov DS,xxxxH），需要先修改一个通用寄存器的值，然后将该寄存器的值送入DS（mov ds,ax）\n{%endright%}\n{%warning%}\n与在debug中不同的是，mov ax,[0]指令在一些编译器中的意义等同于mov ax,0，为了防止歧义需要添加段前缀，或者将0存入bx中，采用mov ax,[bx]\n{%endwarning%}\n{%wrong%}\n在赋值的时候，需要保证两边的内存大小是一样的\n{%endwrong%}\n>若需要将一个**小内存**的值**传入**到**大内存值**中（如累加，需要使用一个大内存作为容器**防止溢出**），可以用一个**大内存容器**作为**中介**\n```\nmov dx,bl ;错误\n\nmov al,bl\nmov ah,0\nadd dx,ax\n```\n\n**②数据长度信息**\n{%list%}\n访问内存不仅仅需要直到其起始地址，还需要知道操作的内存长度\n{%endlist%}\n>**寄存器名**：如`mov ax,xxx`或者`mov xxx,ax`则表示**处理的数据长度为一个字**，因为`ax`寄存器长度为**一个字**\n同理`mov al,xxx`或者`mov xxx,al`表示进行**字节操作**\n\n>**显示指明**：`word ptr`指明访问的内存为**字单元**，`byte ptr`指明是**字节单元**\n如`mov word ptr ds:[0],1`和`mov byte ptr ds:[0],1`,两者修改的**内存长度**不一样，前者修改的是`ds:[0]`和`ds:[1]`，后者修改的是`ds;[0]`\n{%list%}\n一个字需要两个内存单位，字的低位字节存放在低地址单元中，高位字节存放再高地址单元中\n{%endlist%}\n{%right%}\npush、pop只执行字操作\n{%endright%}\n{%warning%}\n在没有寄存器参与的内存单元访问指令中，必须要显示指明操作内存长度\n{%endwarning%}\n\n#### 2.5指令的访问\n**①相关寄存器**\n>**`CS`段寄存器**：用于提供**当前要实施指令**的**段地址**\n**`IP`寄存器**：搭配`CS`**段寄存器**使用，8086CPU将`CS:IP`作为当前要实施的指令的**物理地址**\n\n**②过程概述**\n![初始状态](/image/HB_1.png)\n>`CS`和`IP`寄存器的值送入**地址加法器**中，获得指令的**物理地址**\n**地址加法器**将物理地址送入**控制输入输出电路**\n**控制输入输出电路**将物理地址送入**地址总线**\n**数据总线**将对应物理地址**对应的指令**送入CPU\n{%list%}\n如图，一条指令占据多个内存单元，数据总线输入的是整条指令，而不仅仅是对应物理地址对应的内存单元的数据\n{%endlist%}\n>**控制输入输出电路**将对应指令送入**指令缓冲器**\n`IP`的值自动增加，指向**下一条指令**\n{%list%}\n若刚刚读入的指令长度为N个字节，则IP增加3\n{%endlist%}\n>**执行**指令缓冲器中的指令，并重复上述过程执行**下一条指令**\n{%right%}\nCS:IP对应内存位置的数据即为指令，CPU根据这个区分指令和数据\n{%endright%}\n{%list%}\n可以修改CS和IP寄存器的值，指向我们的代码段，用于执行该段代码\n{%endlist%}\n{%warning%}\nmov指令可以修改大部分寄存器的地址，但是不能修改CS和IP的地址，需要用跳转修改\n{%endwarning%}\n\n***\n### 3.汇编程序概述\n#### 3.1汇编程序执行概述\n**①编写汇编源程序**\n{%list%}\n汇编语言的源文件后缀为.asm\n{%endlist%}\n**②对源程序进行编译链接**\n>编译产生**目标文件**\n链接源文件产生**可执行文件**\n{%list%}\n可执行文件包括两部分，一部分为程序和数据，另一部分为相关描述信息（程序有多大，占用多大内存）\n{%endlist%}\n{%right%}\n其中伪指令在编译时均转化为相关描述信息\n{%endright%}\n**③执行程序**\n>每个**操作系统**都有类似于**命令解释器**的程序用于执行程序，**命令解释器**会先找到对应程序并将其**载入内存**，随后设置`CS:IP`指向**程序的入口**，命令解释器**停止运行**，并运行对应程序，最后对应程序运行**结束**，**返回**到命令解解释程序\n#### 3.2汇编源程序框架\n**①框架**\n>汇编指令才是**机器执行**的指令，其余都变成了**描述信息**\n\n![指令和伪指令](/image/HB_5.png)\n>**程序返回**：一个程序结束后，将**CPU的控制权**还给使他运行的程序\n{%list%}\n在汇编程序的最后一个段中结尾处添加以下两行指令即可\n{%endlist%}\n```\nmov ax,4c00H\nint 21H\n```\n**②常用伪指令**\n>`assume 段寄存器名:段名`：将某个段和某个**段寄存器**联系到一起\n{%right%}\n段和段寄存器的关联将决定这个段的作用，如代码段和CS联系到一起，栈段和SS联系到一起\n{%endright%}\n>`段名 segment`：说明一个段**开始**\n`段名 ends`：说明一个段**结束**\n{%list%}\n一个汇编程序由多个段组成，段名最后会被处理为一个段地址\n{%endlist%}\n>`end`：一个汇编程序的**结束标记**\n{%warning%}\n不要搞混end和ends\n{%endwarning%}\n\n**②常用汇编指令**\n>`add`：加法指令\n{%list%}\nadd ax,bx类似于C中ax = ax + bx\n{%endlist%}\n>`sub`：减法指令\n{%list%}\nsub ax,bx类似于C中ax = ax - bx\n{%endlist%}\n>`inc`：递增指令\n{%list%}\ninc ax类似于ax = ax+1\n{%endlist%}\n>`dec`：递减指令\n{%list%}\ndec ax类似于ax = ax-1\n{%endlist%}\n>`div`：除法指令\n{%list%}\ndiv 容器，容器（不能是ax，dx相关寄存器）中为除数，若除数为8位，则被除数为16位，放在ax中，结束后al存商，ah存余数，若除数为16位，则被除数为32位，高位放在dx中，低位放在ax中，结束后ax存商，dx存余数\n{%endlist%}\n{%right%}\n根据被除数的范围选取除法的类别，16位寄存器能表示的值的上限为65535\n{%endright%}\n{%warning%}\n使用内存单元时，需要使用word ptr和byte ptr指明内存单元的长度\n{%endwarning%}\n>`mul`：乘法法指令\n{%list%}\n\n{%endlist%}\n\n#### 3.3源文件的编译\n**①运行编译器**\n![masm编译器](/image/HB_6.png)\n>本篇采用微软的`masm`编译器\n\n**②导入源文件**\n![导入源文件](/image/HB_7.png)\n>如果源文件在**编译器工作路径下**，输入**文件名**即可，否则需要指明**完整路径**\n如果源程序不是`.asm`文件，则需要输入**全名**\n{%list%}\n编译后将在指定路径（在对应冒号后输入路径即可）生成可执行文件（.obj文件），缺省情况下当前路径\n{%endlist%}\n{%right%}\n编译过程中还会提示你生成一些中间文件，如列表文件（.lst）和交叉引用文件（.crf），可忽略（直接enter）\n{%endright%}\n\n#### 3.4链接目标文件\n**①运行链接器**\n![Overlay Linker链接器](/image/HB_8.png)\n>本篇采用微软的`Overlay Linker`\n\n**②导入目标文件**\n![导入目标文件](/image/HB_9.png)\n>路径和文件名的规则**同编译器**\n{%right%}\n链接过程中还会提示你生成一些中间文件，如映像文件（.map），可忽略（直接enter）\n{%endright%}\n**③链接库文件**\n![链接库文件](/image/HB_10.png)\n>如果程序中调用了**库文件中的子程序**，则需要链接对应的库\n\n#### 3.5简化的编译和链接\n![简化的编译](/image/HB_11.png)\n![简化的链接](/image/HB_12.png)\n>将跳过一些**非必要步骤**，即生成中间文件和链接库\n\n#### 3.6跟踪程序执行过程\n>本篇采用微软的`debug`程序\n\n**①导入可执行文件**\n![简化的链接](/image/HB_14.png)\n\n**②可执行文件的加载过程**\n>`DOS`系统中可执行文件的加载过程，其中`SA`存放在`ds`寄存器中，`DOS`系统使用`PSP`用来与程序通信\n\n![可执行文件的内存情况](/image/HB_15.png)\n\n**③查看寄存器状态**\n>输入`-r`查看寄存器\n\n![简化的链接](/image/HB_13.png)\n\n**④查看程序内容**\n>输入`-u`查看程序内容\n\n![查看程序内容](/image/HB_16.png)\n\n**⑤单步执行程序**\n>输入`-t`单步执行指令\n{%warning%}\n当执行到int 21时，需要使用-p执行\n{%endwarning%}\n![单步执行程序](/image/HB_17.png)\n\n\n\n\n","slug":"汇编语言（一）","published":1,"_id":"clmkphbff002c9gvd4tls62qa","layout":"post","photos":[],"link":"","content":"<h1 id=\"汇编语言（一）\"><a href=\"#汇编语言（一）\" class=\"headerlink\" title=\"汇编语言（一）\"></a>汇编语言（一）</h1><h2 id=\"汇编语言启蒙\"><a href=\"#汇编语言启蒙\" class=\"headerlink\" title=\"汇编语言启蒙\"></a>汇编语言启蒙</h2><div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 以下内容主要以8086CPU为例，该CPU是16位结构，注意这个大前提</div>\n<h3 id=\"1-引言\"><a href=\"#1-引言\" class=\"headerlink\" title=\"1.引言\"></a>1.引言</h3><h4 id=\"1-1汇编语言\"><a href=\"#1-1汇编语言\" class=\"headerlink\" title=\"1.1汇编语言\"></a>1.1汇编语言</h4><p><strong>①组成</strong></p>\n<blockquote>\n<p><strong>汇编指令</strong>：机器指令便于记忆的格式，有对应的<strong>机器码</strong><br><strong>伪指令</strong>：没有对应的机器码，由<strong>编译器执行</strong>，计算机并不执行<br><strong>符号</strong>：由<strong>编译器识别</strong>，没有对应的机器码</p>\n</blockquote>\n<p><strong>②机器语言</strong></p>\n<blockquote>\n<p><strong>机器指令</strong>的集合，机器指令是一系列<strong>二进制数字</strong>，计算机将机器指令转化为一系列的<strong>高低电平</strong>，使电子器件受到驱动</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 这个工作由微处理器（如CPU）完成，每一种微处理器都有其机器指令集</div>\n\n<h4 id=\"1-2指令与数据\"><a href=\"#1-2指令与数据\" class=\"headerlink\" title=\"1.2指令与数据\"></a>1.2指令与数据</h4><div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 两者本质上都是一串二进制数据，也并没有特殊的格式区别它们，取决于CPU如何解释它们</div>\n<p><strong>①进制</strong></p>\n<blockquote>\n<p><strong>二进制</strong>：以字母<code>B</code>结尾<br><strong>八进制</strong>：以字母<code>O</code>或者<code>Q</code>结尾<br><strong>十进制</strong>：以字母<code>D</code>结尾，或者没有结尾字母<br><strong>十六进制</strong>：以字母<code>H</code>结尾</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 十六进制的数据，在汇编源程序中不能以字母开头，需要在前面加0，如A000H需要改为0A000H</div>\n\n<p><strong>②ASCLL编码</strong></p>\n<blockquote>\n<p>用<strong>单引号</strong><code>''</code>表示对应信息<strong>按照字符</strong>给出，<strong>编译器</strong>将其转化为对应的<code>ASCLL</code>编码<br><code>'unIX'</code>等价于<code>75H,6EH,49H,58H</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 小写字母的ASCLL码比对应大写字母的ASCLL码大20H</div>\n\n\n<p><strong>③逻辑位操作</strong></p>\n<blockquote>\n<p><code>and</code>：按位进行<strong>与</strong>运算<br><code>or</code>：按位进行<strong>或</strong>运算</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 可以通过该逻辑运算将对应的位设为1/0</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">and al,10111111 ;将第6位设为0\nor al,01000000 ;将第6位设为1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 可以通过改变位改变字母大小写，大写字母的ASCLL码第5位为0，小写字母对应位置为1，这样不需要判断大小写</div>\n<p><strong>③移位操作</strong></p>\n<blockquote>\n<p><code>shl</code>：<strong>左</strong>移位<br><code>shr</code>：<strong>右</strong>移位</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 这条指令将移出的位存储在CF标志中，并用0填充缺失的位</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 只能操作内存单元或者寄存器，不能操作字面量</div>\n\n<h4 id=\"1-3相关硬件概念\"><a href=\"#1-3相关硬件概念\" class=\"headerlink\" title=\"1.3相关硬件概念\"></a>1.3相关硬件概念</h4><p><strong>①主板和接口卡</strong></p>\n<blockquote>\n<p><strong>主板</strong>：主板上一些主要器件通过<strong>总线</strong>相连，如<strong>CPU</strong>、<strong>存储器</strong>、<strong>外围芯片组</strong>和<strong>扩展插槽</strong>等<br><strong>接口卡</strong>：插在<strong>扩展插槽</strong>上，CPU通过控制接口卡控制<strong>外部设备</strong>，如鼠标、屏幕和键盘等</p>\n</blockquote>\n<p><strong>②CPU</strong></p>\n<blockquote>\n<p><strong>组成</strong><br><strong>运算器</strong>：信息处理<br><strong>寄存器</strong>：信息存储，一般能存储的<strong>位数不高</strong>，主要都是<strong>和CPU密切相关的信息</strong><br><strong>控制器</strong>：控制各种器件工作</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 出于兼容性的考虑，一个寄存器可分多个寄存器，通常最小单位8位（因为一个内存单元是8位），如一个16位寄存器ax可以看成两个8位寄存器al和ah</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 可以通过改变寄存器内容实现对CPU的控制</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 当指令操作al导致溢出时，溢出的位不会存储到ah中，因为它将al当作一个独立的寄存器</div>\n<p><strong>③总线</strong></p>\n<blockquote>\n<p>CPU和<strong>其他部件</strong>交流的通道，物理上是一根根<strong>导线的集合</strong>，可分为以下三类</p>\n</blockquote>\n<blockquote>\n<p><strong>地址总线</strong>：指定存储单元</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 地址总线的宽度（根数）为N，则其能对2^N个单元寻址</div>\n<blockquote>\n<p><strong>数据总线</strong>：传输数据</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 数据总线的宽度（根数）为N，则一次能传输N位的数据</div>\n<blockquote>\n<p><strong>控制总线</strong>：传输控制指令</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 数据总线的宽度（根数）为N，则有N种控制指令（激活则为高电平）</div>\n\n<p><strong>④存储器</strong></p>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 依据读写属性分类</div>\n<blockquote>\n<p><strong>随机存储器</strong>：<strong>可读可写</strong>，但是必须<strong>带电存储</strong>，关机后存储内容消失<br><strong>只读存储器</strong>：只能读取，存储内容<strong>不会丢失</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 依据功能分类</div>\n<blockquote>\n<p><strong>随机存储器</strong>：存放CPU使用的<strong>大部分数据和程序</strong><br><strong>装有BIOS的ROM</strong>：BIOS是主板和各类接口卡中的软件，可通过它对该硬件进行<strong>最基本的输入和输出</strong><br><strong>接口卡上的RAM</strong>：某些接口卡需要<strong>对大量输入输出数据进行暂时存储</strong>，则会装有RAM，如显示卡的显存</p>\n</blockquote>\n<p><strong>⑤端口</strong></p>\n<blockquote>\n<p><strong>PC系统</strong>中，除了<strong>存储器</strong>，还有<strong>其他芯片</strong>通过<strong>总线</strong>和CPU相连，如<strong>接口卡</strong>和<strong>主板</strong>上的<strong>接口芯片</strong>等，这些芯片都有一组可以由CPU读写的<strong>寄存器</strong>，称之为<strong>端口</strong>，每个端口都有一个<strong>对应的地址</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 端口只能用in和out指令进行读写，且需要用特定的寄存器访问端口</div>\n\n<hr>\n<h3 id=\"2-内存与地址\"><a href=\"#2-内存与地址\" class=\"headerlink\" title=\"2.内存与地址\"></a>2.内存与地址</h3><h4 id=\"2-1内存地址空间\"><a href=\"#2-1内存地址空间\" class=\"headerlink\" title=\"2.1内存地址空间\"></a>2.1内存地址空间</h4><p><strong>①存储单元</strong></p>\n<blockquote>\n<p>每个存储器被划分为<strong>若干个存储单元</strong>，每个存储单元存储<strong>一个字节</strong></p>\n</blockquote>\n<p><strong>②逻辑存储器</strong></p>\n<blockquote>\n<p>CPU在操作<strong>物理存储器</strong>时，将他们<strong>总的</strong>看作为一个由若干存储单元组成的<strong>逻辑存储器</strong>，每个存储器占<strong>一段地址空间</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 内存地址空间的大小受到地址总线宽度的影响</div>\n\n<h4 id=\"2-2物理地址\"><a href=\"#2-2物理地址\" class=\"headerlink\" title=\"2.2物理地址\"></a>2.2物理地址</h4><blockquote>\n<p>一个单元<strong>真实唯一</strong>的地址，也是CPU通过<strong>地址总线</strong>发出的地址</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 物理地址的详细计算方法和具体的CPU有关，其中最重要的就是它是多少位结构</div>\n<p><strong>①十六位结构</strong></p>\n<blockquote>\n<p><strong>运算器一次处理</strong>最多<strong>16位</strong>的数据<br><strong>寄存器最大长度</strong>为<strong>16位</strong><br><strong>寄存器和运算器的通路</strong>为<strong>16位</strong></p>\n</blockquote>\n<p><strong>②地址加法器</strong>：计算<strong>物理地址</strong>，<code>物理地址 = 段地址*16+偏移地址</code>，也可以表示为<code>段地址:偏移地址</code></p>\n<blockquote>\n<p>易知每一段的起始地址为<strong>16的倍数</strong>，每一段的长度为<strong>64KB</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 8086CPU地址总线宽度为20，但是它本身一次性只能传输16位数据，如果直接从CPU内部发出地址信号，则只能达到64KB的寻址能力，故需要使用地址加法器扩大其寻址能力（16位乘以16则为20位）</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 同一个物理地址可以使用不同的段地址和偏移地址表示</div>\n\n<h4 id=\"2-3寻址\"><a href=\"#2-3寻址\" class=\"headerlink\" title=\"2.3寻址\"></a>2.3寻址</h4><p><strong>①段地址</strong>：由<strong>段寄存器</strong>提供</p>\n<blockquote>\n<p>8086CPU有四个段寄存器，<code>CS</code>、<code>DS</code>、<code>ES</code>和<code>SS</code>，其中<code>CS</code>和<code>SS</code>有对应的<strong>特殊用途</strong>，其余可供自由使用</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 缺省时，cpu会根据情况自动读取段寄存器中的值作为默认段地址，可以添加段前缀显示表明段地址</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 每个寄存器都有其特殊用途，如乘除法需要使用ax，bx，只是CS、SS等寄存器被占用频率非常高，故最好不要随便使用</div>\n<blockquote>\n<p><strong>段前缀</strong>：<code>段前缀:[偏移地址]</code><br>段前缀通常是<strong>段寄存器名</strong>，如<code>mov ax,ds:[bx]</code></p>\n</blockquote>\n<p><strong>②偏移地址</strong>：可以通过<code>[]</code>给出，其中可以放置<strong>立即数</strong>和<strong>寻址寄存器</strong>，也可以<strong>混合使用</strong></p>\n<blockquote>\n<p><strong>立即数</strong>：直接<strong>包含在机器指令中</strong>的数据，执行前位于cpu的<strong>指令缓冲器</strong>中</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 如100、'a'等，类似于C中的字面值</div>\n<blockquote>\n<p><strong>寻址寄存器</strong>：8086CPU提供了<code>bx</code>，<code>bp</code>，<code>si</code>，<code>di</code>四个寄存器</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> si和di寄存器，不能分为两个八位寄存器</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 其中bx和bp不能同时出现，si和di也不能同时出现</div>\n<blockquote>\n<p><strong>混合使用</strong>：如<code>[bx+si+8]</code>、<code>[bp+di]</code>、<code>[bx+9]</code>，也可以写成<code>[bx].8[si]</code>、<code>[bx].9</code>、<code>[bx]</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 若含有bp，则段地址默认为ss段寄存器中的数据，其余默认为ds段寄存器</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 用段寄存器指定段，用偏移地址访问段</div>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 汇编语言中偏移地址是以存储单元为单位计算的，并没有像C语言那么智能</div>\n\n<h4 id=\"2-4内存访问\"><a href=\"#2-4内存访问\" class=\"headerlink\" title=\"2.4内存访问\"></a>2.4内存访问</h4><p><strong>①<code>mov</code>指令</strong>：</p>\n<blockquote>\n<p><code>mov [container],[data]</code><br>将<strong>数据</strong>送入一个<strong>容器</strong>中</p>\n</blockquote>\n<blockquote>\n<p><strong>容器</strong>：类似于<strong>C的左值</strong>，可以是<strong>寄存器名</strong>，<strong>内存单元地址</strong><br><strong>数据</strong>：类似于<strong>C的右值</strong>，可以是<strong>字面量</strong>、<strong>寄存器名</strong>以及<strong>内存单元地址</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> mov ax,bx类似于C中ax = bx</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 8086CPU不支持通过立即数直接修改段寄存器的值（mov DS,xxxxH），需要先修改一个通用寄存器的值，然后将该寄存器的值送入DS（mov ds,ax）</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 与在debug中不同的是，mov ax,[0]指令在一些编译器中的意义等同于mov ax,0，为了防止歧义需要添加段前缀，或者将0存入bx中，采用mov ax,[bx]</div>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 在赋值的时候，需要保证两边的内存大小是一样的</div>\n<blockquote>\n<p>若需要将一个<strong>小内存</strong>的值<strong>传入</strong>到<strong>大内存值</strong>中（如累加，需要使用一个大内存作为容器<strong>防止溢出</strong>），可以用一个<strong>大内存容器</strong>作为<strong>中介</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mov dx,bl ;错误\n\nmov al,bl\nmov ah,0\nadd dx,ax<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>②数据长度信息</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 访问内存不仅仅需要直到其起始地址，还需要知道操作的内存长度</div>\n<blockquote>\n<p><strong>寄存器名</strong>：如<code>mov ax,xxx</code>或者<code>mov xxx,ax</code>则表示<strong>处理的数据长度为一个字</strong>，因为<code>ax</code>寄存器长度为<strong>一个字</strong><br>同理<code>mov al,xxx</code>或者<code>mov xxx,al</code>表示进行<strong>字节操作</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>显示指明</strong>：<code>word ptr</code>指明访问的内存为<strong>字单元</strong>，<code>byte ptr</code>指明是<strong>字节单元</strong><br>如<code>mov word ptr ds:[0],1</code>和<code>mov byte ptr ds:[0],1</code>,两者修改的<strong>内存长度</strong>不一样，前者修改的是<code>ds:[0]</code>和<code>ds:[1]</code>，后者修改的是<code>ds;[0]</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 一个字需要两个内存单位，字的低位字节存放在低地址单元中，高位字节存放再高地址单元中</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> push、pop只执行字操作</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 在没有寄存器参与的内存单元访问指令中，必须要显示指明操作内存长度</div>\n\n<h4 id=\"2-5指令的访问\"><a href=\"#2-5指令的访问\" class=\"headerlink\" title=\"2.5指令的访问\"></a>2.5指令的访问</h4><p><strong>①相关寄存器</strong></p>\n<blockquote>\n<p><strong><code>CS</code>段寄存器</strong>：用于提供<strong>当前要实施指令</strong>的<strong>段地址</strong><br><strong><code>IP</code>寄存器</strong>：搭配<code>CS</code><strong>段寄存器</strong>使用，8086CPU将<code>CS:IP</code>作为当前要实施的指令的<strong>物理地址</strong></p>\n</blockquote>\n<p><strong>②过程概述</strong><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/HB_1.png\" alt=\"初始状态\"></p>\n<blockquote>\n<p><code>CS</code>和<code>IP</code>寄存器的值送入<strong>地址加法器</strong>中，获得指令的<strong>物理地址</strong><br><strong>地址加法器</strong>将物理地址送入<strong>控制输入输出电路</strong><br><strong>控制输入输出电路</strong>将物理地址送入<strong>地址总线</strong><br><strong>数据总线</strong>将对应物理地址<strong>对应的指令</strong>送入CPU</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 如图，一条指令占据多个内存单元，数据总线输入的是整条指令，而不仅仅是对应物理地址对应的内存单元的数据</div>\n<blockquote>\n<p><strong>控制输入输出电路</strong>将对应指令送入<strong>指令缓冲器</strong><br><code>IP</code>的值自动增加，指向<strong>下一条指令</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 若刚刚读入的指令长度为N个字节，则IP增加3</div>\n<blockquote>\n<p><strong>执行</strong>指令缓冲器中的指令，并重复上述过程执行<strong>下一条指令</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> CS:IP对应内存位置的数据即为指令，CPU根据这个区分指令和数据</div>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 可以修改CS和IP寄存器的值，指向我们的代码段，用于执行该段代码</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> mov指令可以修改大部分寄存器的地址，但是不能修改CS和IP的地址，需要用跳转修改</div>\n\n<hr>\n<h3 id=\"3-汇编程序概述\"><a href=\"#3-汇编程序概述\" class=\"headerlink\" title=\"3.汇编程序概述\"></a>3.汇编程序概述</h3><h4 id=\"3-1汇编程序执行概述\"><a href=\"#3-1汇编程序执行概述\" class=\"headerlink\" title=\"3.1汇编程序执行概述\"></a>3.1汇编程序执行概述</h4><p><strong>①编写汇编源程序</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 汇编语言的源文件后缀为.asm</div>\n<p><strong>②对源程序进行编译链接</strong></p>\n<blockquote>\n<p>编译产生<strong>目标文件</strong><br>链接源文件产生<strong>可执行文件</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 可执行文件包括两部分，一部分为程序和数据，另一部分为相关描述信息（程序有多大，占用多大内存）</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 其中伪指令在编译时均转化为相关描述信息</div>\n<p><strong>③执行程序</strong></p>\n<blockquote>\n<p>每个<strong>操作系统</strong>都有类似于<strong>命令解释器</strong>的程序用于执行程序，<strong>命令解释器</strong>会先找到对应程序并将其<strong>载入内存</strong>，随后设置<code>CS:IP</code>指向<strong>程序的入口</strong>，命令解释器<strong>停止运行</strong>，并运行对应程序，最后对应程序运行<strong>结束</strong>，<strong>返回</strong>到命令解解释程序</p>\n</blockquote>\n<h4 id=\"3-2汇编源程序框架\"><a href=\"#3-2汇编源程序框架\" class=\"headerlink\" title=\"3.2汇编源程序框架\"></a>3.2汇编源程序框架</h4><p><strong>①框架</strong></p>\n<blockquote>\n<p>汇编指令才是<strong>机器执行</strong>的指令，其余都变成了<strong>描述信息</strong></p>\n</blockquote>\n<p><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/HB_5.png\" alt=\"指令和伪指令\"></p>\n<blockquote>\n<p><strong>程序返回</strong>：一个程序结束后，将<strong>CPU的控制权</strong>还给使他运行的程序</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 在汇编程序的最后一个段中结尾处添加以下两行指令即可</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mov ax,4c00H\nint 21H<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><strong>②常用伪指令</strong></p>\n<blockquote>\n<p><code>assume 段寄存器名:段名</code>：将某个段和某个<strong>段寄存器</strong>联系到一起</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 段和段寄存器的关联将决定这个段的作用，如代码段和CS联系到一起，栈段和SS联系到一起</div>\n<blockquote>\n<p><code>段名 segment</code>：说明一个段<strong>开始</strong><br><code>段名 ends</code>：说明一个段<strong>结束</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 一个汇编程序由多个段组成，段名最后会被处理为一个段地址</div>\n<blockquote>\n<p><code>end</code>：一个汇编程序的<strong>结束标记</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 不要搞混end和ends</div>\n\n<p><strong>②常用汇编指令</strong></p>\n<blockquote>\n<p><code>add</code>：加法指令</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> add ax,bx类似于C中ax = ax + bx</div>\n<blockquote>\n<p><code>sub</code>：减法指令</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> sub ax,bx类似于C中ax = ax - bx</div>\n<blockquote>\n<p><code>inc</code>：递增指令</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> inc ax类似于ax = ax+1</div>\n<blockquote>\n<p><code>dec</code>：递减指令</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> dec ax类似于ax = ax-1</div>\n<blockquote>\n<p><code>div</code>：除法指令</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> div 容器，容器（不能是ax，dx相关寄存器）中为除数，若除数为8位，则被除数为16位，放在ax中，结束后al存商，ah存余数，若除数为16位，则被除数为32位，高位放在dx中，低位放在ax中，结束后ax存商，dx存余数</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 根据被除数的范围选取除法的类别，16位寄存器能表示的值的上限为65535</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 使用内存单元时，需要使用word ptr和byte ptr指明内存单元的长度</div>\n<blockquote>\n<p><code>mul</code>：乘法法指令</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> </div>\n\n<h4 id=\"3-3源文件的编译\"><a href=\"#3-3源文件的编译\" class=\"headerlink\" title=\"3.3源文件的编译\"></a>3.3源文件的编译</h4><p><strong>①运行编译器</strong><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/HB_6.png\" alt=\"masm编译器\"></p>\n<blockquote>\n<p>本篇采用微软的<code>masm</code>编译器</p>\n</blockquote>\n<p><strong>②导入源文件</strong><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/HB_7.png\" alt=\"导入源文件\"></p>\n<blockquote>\n<p>如果源文件在<strong>编译器工作路径下</strong>，输入<strong>文件名</strong>即可，否则需要指明<strong>完整路径</strong><br>如果源程序不是<code>.asm</code>文件，则需要输入<strong>全名</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 编译后将在指定路径（在对应冒号后输入路径即可）生成可执行文件（.obj文件），缺省情况下当前路径</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 编译过程中还会提示你生成一些中间文件，如列表文件（.lst）和交叉引用文件（.crf），可忽略（直接enter）</div>\n\n<h4 id=\"3-4链接目标文件\"><a href=\"#3-4链接目标文件\" class=\"headerlink\" title=\"3.4链接目标文件\"></a>3.4链接目标文件</h4><p><strong>①运行链接器</strong><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/HB_8.png\" alt=\"Overlay Linker链接器\"></p>\n<blockquote>\n<p>本篇采用微软的<code>Overlay Linker</code></p>\n</blockquote>\n<p><strong>②导入目标文件</strong><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/HB_9.png\" alt=\"导入目标文件\"></p>\n<blockquote>\n<p>路径和文件名的规则<strong>同编译器</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 链接过程中还会提示你生成一些中间文件，如映像文件（.map），可忽略（直接enter）</div>\n<p><strong>③链接库文件</strong><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/HB_10.png\" alt=\"链接库文件\"></p>\n<blockquote>\n<p>如果程序中调用了<strong>库文件中的子程序</strong>，则需要链接对应的库</p>\n</blockquote>\n<h4 id=\"3-5简化的编译和链接\"><a href=\"#3-5简化的编译和链接\" class=\"headerlink\" title=\"3.5简化的编译和链接\"></a>3.5简化的编译和链接</h4><p><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/HB_11.png\" alt=\"简化的编译\"><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/HB_12.png\" alt=\"简化的链接\"></p>\n<blockquote>\n<p>将跳过一些<strong>非必要步骤</strong>，即生成中间文件和链接库</p>\n</blockquote>\n<h4 id=\"3-6跟踪程序执行过程\"><a href=\"#3-6跟踪程序执行过程\" class=\"headerlink\" title=\"3.6跟踪程序执行过程\"></a>3.6跟踪程序执行过程</h4><blockquote>\n<p>本篇采用微软的<code>debug</code>程序</p>\n</blockquote>\n<p><strong>①导入可执行文件</strong><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/HB_14.png\" alt=\"简化的链接\"></p>\n<p><strong>②可执行文件的加载过程</strong></p>\n<blockquote>\n<p><code>DOS</code>系统中可执行文件的加载过程，其中<code>SA</code>存放在<code>ds</code>寄存器中，<code>DOS</code>系统使用<code>PSP</code>用来与程序通信</p>\n</blockquote>\n<p><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/HB_15.png\" alt=\"可执行文件的内存情况\"></p>\n<p><strong>③查看寄存器状态</strong></p>\n<blockquote>\n<p>输入<code>-r</code>查看寄存器</p>\n</blockquote>\n<p><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/HB_13.png\" alt=\"简化的链接\"></p>\n<p><strong>④查看程序内容</strong></p>\n<blockquote>\n<p>输入<code>-u</code>查看程序内容</p>\n</blockquote>\n<p><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/HB_16.png\" alt=\"查看程序内容\"></p>\n<p><strong>⑤单步执行程序</strong></p>\n<blockquote>\n<p>输入<code>-t</code>单步执行指令</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 当执行到int 21时，需要使用-p执行</div>\n<p><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/HB_17.png\" alt=\"单步执行程序\"></p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"汇编语言（一）\"><a href=\"#汇编语言（一）\" class=\"headerlink\" title=\"汇编语言（一）\"></a>汇编语言（一）</h1><h2 id=\"汇编语言启蒙\"><a href=\"#汇编语言启蒙\" class=\"headerlink\" title=\"汇编语言启蒙\"></a>汇编语言启蒙</h2><div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 以下内容主要以8086CPU为例，该CPU是16位结构，注意这个大前提</div>\n<h3 id=\"1-引言\"><a href=\"#1-引言\" class=\"headerlink\" title=\"1.引言\"></a>1.引言</h3><h4 id=\"1-1汇编语言\"><a href=\"#1-1汇编语言\" class=\"headerlink\" title=\"1.1汇编语言\"></a>1.1汇编语言</h4><p><strong>①组成</strong></p>\n<blockquote>\n<p><strong>汇编指令</strong>：机器指令便于记忆的格式，有对应的<strong>机器码</strong><br><strong>伪指令</strong>：没有对应的机器码，由<strong>编译器执行</strong>，计算机并不执行<br><strong>符号</strong>：由<strong>编译器识别</strong>，没有对应的机器码</p>\n</blockquote>\n<p><strong>②机器语言</strong></p>\n<blockquote>\n<p><strong>机器指令</strong>的集合，机器指令是一系列<strong>二进制数字</strong>，计算机将机器指令转化为一系列的<strong>高低电平</strong>，使电子器件受到驱动</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 这个工作由微处理器（如CPU）完成，每一种微处理器都有其机器指令集</div>\n\n<h4 id=\"1-2指令与数据\"><a href=\"#1-2指令与数据\" class=\"headerlink\" title=\"1.2指令与数据\"></a>1.2指令与数据</h4><div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 两者本质上都是一串二进制数据，也并没有特殊的格式区别它们，取决于CPU如何解释它们</div>\n<p><strong>①进制</strong></p>\n<blockquote>\n<p><strong>二进制</strong>：以字母<code>B</code>结尾<br><strong>八进制</strong>：以字母<code>O</code>或者<code>Q</code>结尾<br><strong>十进制</strong>：以字母<code>D</code>结尾，或者没有结尾字母<br><strong>十六进制</strong>：以字母<code>H</code>结尾</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 十六进制的数据，在汇编源程序中不能以字母开头，需要在前面加0，如A000H需要改为0A000H</div>\n\n<p><strong>②ASCLL编码</strong></p>\n<blockquote>\n<p>用<strong>单引号</strong><code>&#39;&#39;</code>表示对应信息<strong>按照字符</strong>给出，<strong>编译器</strong>将其转化为对应的<code>ASCLL</code>编码<br><code>&#39;unIX&#39;</code>等价于<code>75H,6EH,49H,58H</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 小写字母的ASCLL码比对应大写字母的ASCLL码大20H</div>\n\n\n<p><strong>③逻辑位操作</strong></p>\n<blockquote>\n<p><code>and</code>：按位进行<strong>与</strong>运算<br><code>or</code>：按位进行<strong>或</strong>运算</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 可以通过该逻辑运算将对应的位设为1/0</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">and al,10111111 ;将第6位设为0\nor al,01000000 ;将第6位设为1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 可以通过改变位改变字母大小写，大写字母的ASCLL码第5位为0，小写字母对应位置为1，这样不需要判断大小写</div>\n<p><strong>③移位操作</strong></p>\n<blockquote>\n<p><code>shl</code>：<strong>左</strong>移位<br><code>shr</code>：<strong>右</strong>移位</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 这条指令将移出的位存储在CF标志中，并用0填充缺失的位</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 只能操作内存单元或者寄存器，不能操作字面量</div>\n\n<h4 id=\"1-3相关硬件概念\"><a href=\"#1-3相关硬件概念\" class=\"headerlink\" title=\"1.3相关硬件概念\"></a>1.3相关硬件概念</h4><p><strong>①主板和接口卡</strong></p>\n<blockquote>\n<p><strong>主板</strong>：主板上一些主要器件通过<strong>总线</strong>相连，如<strong>CPU</strong>、<strong>存储器</strong>、<strong>外围芯片组</strong>和<strong>扩展插槽</strong>等<br><strong>接口卡</strong>：插在<strong>扩展插槽</strong>上，CPU通过控制接口卡控制<strong>外部设备</strong>，如鼠标、屏幕和键盘等</p>\n</blockquote>\n<p><strong>②CPU</strong></p>\n<blockquote>\n<p><strong>组成</strong><br><strong>运算器</strong>：信息处理<br><strong>寄存器</strong>：信息存储，一般能存储的<strong>位数不高</strong>，主要都是<strong>和CPU密切相关的信息</strong><br><strong>控制器</strong>：控制各种器件工作</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 出于兼容性的考虑，一个寄存器可分多个寄存器，通常最小单位8位（因为一个内存单元是8位），如一个16位寄存器ax可以看成两个8位寄存器al和ah</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 可以通过改变寄存器内容实现对CPU的控制</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 当指令操作al导致溢出时，溢出的位不会存储到ah中，因为它将al当作一个独立的寄存器</div>\n<p><strong>③总线</strong></p>\n<blockquote>\n<p>CPU和<strong>其他部件</strong>交流的通道，物理上是一根根<strong>导线的集合</strong>，可分为以下三类</p>\n</blockquote>\n<blockquote>\n<p><strong>地址总线</strong>：指定存储单元</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 地址总线的宽度（根数）为N，则其能对2^N个单元寻址</div>\n<blockquote>\n<p><strong>数据总线</strong>：传输数据</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 数据总线的宽度（根数）为N，则一次能传输N位的数据</div>\n<blockquote>\n<p><strong>控制总线</strong>：传输控制指令</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 数据总线的宽度（根数）为N，则有N种控制指令（激活则为高电平）</div>\n\n<p><strong>④存储器</strong></p>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 依据读写属性分类</div>\n<blockquote>\n<p><strong>随机存储器</strong>：<strong>可读可写</strong>，但是必须<strong>带电存储</strong>，关机后存储内容消失<br><strong>只读存储器</strong>：只能读取，存储内容<strong>不会丢失</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 依据功能分类</div>\n<blockquote>\n<p><strong>随机存储器</strong>：存放CPU使用的<strong>大部分数据和程序</strong><br><strong>装有BIOS的ROM</strong>：BIOS是主板和各类接口卡中的软件，可通过它对该硬件进行<strong>最基本的输入和输出</strong><br><strong>接口卡上的RAM</strong>：某些接口卡需要<strong>对大量输入输出数据进行暂时存储</strong>，则会装有RAM，如显示卡的显存</p>\n</blockquote>\n<p><strong>⑤端口</strong></p>\n<blockquote>\n<p><strong>PC系统</strong>中，除了<strong>存储器</strong>，还有<strong>其他芯片</strong>通过<strong>总线</strong>和CPU相连，如<strong>接口卡</strong>和<strong>主板</strong>上的<strong>接口芯片</strong>等，这些芯片都有一组可以由CPU读写的<strong>寄存器</strong>，称之为<strong>端口</strong>，每个端口都有一个<strong>对应的地址</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 端口只能用in和out指令进行读写，且需要用特定的寄存器访问端口</div>\n\n<hr>\n<h3 id=\"2-内存与地址\"><a href=\"#2-内存与地址\" class=\"headerlink\" title=\"2.内存与地址\"></a>2.内存与地址</h3><h4 id=\"2-1内存地址空间\"><a href=\"#2-1内存地址空间\" class=\"headerlink\" title=\"2.1内存地址空间\"></a>2.1内存地址空间</h4><p><strong>①存储单元</strong></p>\n<blockquote>\n<p>每个存储器被划分为<strong>若干个存储单元</strong>，每个存储单元存储<strong>一个字节</strong></p>\n</blockquote>\n<p><strong>②逻辑存储器</strong></p>\n<blockquote>\n<p>CPU在操作<strong>物理存储器</strong>时，将他们<strong>总的</strong>看作为一个由若干存储单元组成的<strong>逻辑存储器</strong>，每个存储器占<strong>一段地址空间</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 内存地址空间的大小受到地址总线宽度的影响</div>\n\n<h4 id=\"2-2物理地址\"><a href=\"#2-2物理地址\" class=\"headerlink\" title=\"2.2物理地址\"></a>2.2物理地址</h4><blockquote>\n<p>一个单元<strong>真实唯一</strong>的地址，也是CPU通过<strong>地址总线</strong>发出的地址</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 物理地址的详细计算方法和具体的CPU有关，其中最重要的就是它是多少位结构</div>\n<p><strong>①十六位结构</strong></p>\n<blockquote>\n<p><strong>运算器一次处理</strong>最多<strong>16位</strong>的数据<br><strong>寄存器最大长度</strong>为<strong>16位</strong><br><strong>寄存器和运算器的通路</strong>为<strong>16位</strong></p>\n</blockquote>\n<p><strong>②地址加法器</strong>：计算<strong>物理地址</strong>，<code>物理地址 = 段地址*16+偏移地址</code>，也可以表示为<code>段地址:偏移地址</code></p>\n<blockquote>\n<p>易知每一段的起始地址为<strong>16的倍数</strong>，每一段的长度为<strong>64KB</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 8086CPU地址总线宽度为20，但是它本身一次性只能传输16位数据，如果直接从CPU内部发出地址信号，则只能达到64KB的寻址能力，故需要使用地址加法器扩大其寻址能力（16位乘以16则为20位）</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 同一个物理地址可以使用不同的段地址和偏移地址表示</div>\n\n<h4 id=\"2-3寻址\"><a href=\"#2-3寻址\" class=\"headerlink\" title=\"2.3寻址\"></a>2.3寻址</h4><p><strong>①段地址</strong>：由<strong>段寄存器</strong>提供</p>\n<blockquote>\n<p>8086CPU有四个段寄存器，<code>CS</code>、<code>DS</code>、<code>ES</code>和<code>SS</code>，其中<code>CS</code>和<code>SS</code>有对应的<strong>特殊用途</strong>，其余可供自由使用</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 缺省时，cpu会根据情况自动读取段寄存器中的值作为默认段地址，可以添加段前缀显示表明段地址</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 每个寄存器都有其特殊用途，如乘除法需要使用ax，bx，只是CS、SS等寄存器被占用频率非常高，故最好不要随便使用</div>\n<blockquote>\n<p><strong>段前缀</strong>：<code>段前缀:[偏移地址]</code><br>段前缀通常是<strong>段寄存器名</strong>，如<code>mov ax,ds:[bx]</code></p>\n</blockquote>\n<p><strong>②偏移地址</strong>：可以通过<code>[]</code>给出，其中可以放置<strong>立即数</strong>和<strong>寻址寄存器</strong>，也可以<strong>混合使用</strong></p>\n<blockquote>\n<p><strong>立即数</strong>：直接<strong>包含在机器指令中</strong>的数据，执行前位于cpu的<strong>指令缓冲器</strong>中</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 如100、'a'等，类似于C中的字面值</div>\n<blockquote>\n<p><strong>寻址寄存器</strong>：8086CPU提供了<code>bx</code>，<code>bp</code>，<code>si</code>，<code>di</code>四个寄存器</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> si和di寄存器，不能分为两个八位寄存器</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 其中bx和bp不能同时出现，si和di也不能同时出现</div>\n<blockquote>\n<p><strong>混合使用</strong>：如<code>[bx+si+8]</code>、<code>[bp+di]</code>、<code>[bx+9]</code>，也可以写成<code>[bx].8[si]</code>、<code>[bx].9</code>、<code>[bx]</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 若含有bp，则段地址默认为ss段寄存器中的数据，其余默认为ds段寄存器</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 用段寄存器指定段，用偏移地址访问段</div>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 汇编语言中偏移地址是以存储单元为单位计算的，并没有像C语言那么智能</div>\n\n<h4 id=\"2-4内存访问\"><a href=\"#2-4内存访问\" class=\"headerlink\" title=\"2.4内存访问\"></a>2.4内存访问</h4><p><strong>①<code>mov</code>指令</strong>：</p>\n<blockquote>\n<p><code>mov [container],[data]</code><br>将<strong>数据</strong>送入一个<strong>容器</strong>中</p>\n</blockquote>\n<blockquote>\n<p><strong>容器</strong>：类似于<strong>C的左值</strong>，可以是<strong>寄存器名</strong>，<strong>内存单元地址</strong><br><strong>数据</strong>：类似于<strong>C的右值</strong>，可以是<strong>字面量</strong>、<strong>寄存器名</strong>以及<strong>内存单元地址</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> mov ax,bx类似于C中ax = bx</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 8086CPU不支持通过立即数直接修改段寄存器的值（mov DS,xxxxH），需要先修改一个通用寄存器的值，然后将该寄存器的值送入DS（mov ds,ax）</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 与在debug中不同的是，mov ax,[0]指令在一些编译器中的意义等同于mov ax,0，为了防止歧义需要添加段前缀，或者将0存入bx中，采用mov ax,[bx]</div>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 在赋值的时候，需要保证两边的内存大小是一样的</div>\n<blockquote>\n<p>若需要将一个<strong>小内存</strong>的值<strong>传入</strong>到<strong>大内存值</strong>中（如累加，需要使用一个大内存作为容器<strong>防止溢出</strong>），可以用一个<strong>大内存容器</strong>作为<strong>中介</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mov dx,bl ;错误\n\nmov al,bl\nmov ah,0\nadd dx,ax<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>②数据长度信息</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 访问内存不仅仅需要直到其起始地址，还需要知道操作的内存长度</div>\n<blockquote>\n<p><strong>寄存器名</strong>：如<code>mov ax,xxx</code>或者<code>mov xxx,ax</code>则表示<strong>处理的数据长度为一个字</strong>，因为<code>ax</code>寄存器长度为<strong>一个字</strong><br>同理<code>mov al,xxx</code>或者<code>mov xxx,al</code>表示进行<strong>字节操作</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>显示指明</strong>：<code>word ptr</code>指明访问的内存为<strong>字单元</strong>，<code>byte ptr</code>指明是<strong>字节单元</strong><br>如<code>mov word ptr ds:[0],1</code>和<code>mov byte ptr ds:[0],1</code>,两者修改的<strong>内存长度</strong>不一样，前者修改的是<code>ds:[0]</code>和<code>ds:[1]</code>，后者修改的是<code>ds;[0]</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 一个字需要两个内存单位，字的低位字节存放在低地址单元中，高位字节存放再高地址单元中</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> push、pop只执行字操作</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 在没有寄存器参与的内存单元访问指令中，必须要显示指明操作内存长度</div>\n\n<h4 id=\"2-5指令的访问\"><a href=\"#2-5指令的访问\" class=\"headerlink\" title=\"2.5指令的访问\"></a>2.5指令的访问</h4><p><strong>①相关寄存器</strong></p>\n<blockquote>\n<p><strong><code>CS</code>段寄存器</strong>：用于提供<strong>当前要实施指令</strong>的<strong>段地址</strong><br><strong><code>IP</code>寄存器</strong>：搭配<code>CS</code><strong>段寄存器</strong>使用，8086CPU将<code>CS:IP</code>作为当前要实施的指令的<strong>物理地址</strong></p>\n</blockquote>\n<p><strong>②过程概述</strong><br><img src=\"/image/HB_1.png\" alt=\"初始状态\"></p>\n<blockquote>\n<p><code>CS</code>和<code>IP</code>寄存器的值送入<strong>地址加法器</strong>中，获得指令的<strong>物理地址</strong><br><strong>地址加法器</strong>将物理地址送入<strong>控制输入输出电路</strong><br><strong>控制输入输出电路</strong>将物理地址送入<strong>地址总线</strong><br><strong>数据总线</strong>将对应物理地址<strong>对应的指令</strong>送入CPU</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 如图，一条指令占据多个内存单元，数据总线输入的是整条指令，而不仅仅是对应物理地址对应的内存单元的数据</div>\n<blockquote>\n<p><strong>控制输入输出电路</strong>将对应指令送入<strong>指令缓冲器</strong><br><code>IP</code>的值自动增加，指向<strong>下一条指令</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 若刚刚读入的指令长度为N个字节，则IP增加3</div>\n<blockquote>\n<p><strong>执行</strong>指令缓冲器中的指令，并重复上述过程执行<strong>下一条指令</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> CS:IP对应内存位置的数据即为指令，CPU根据这个区分指令和数据</div>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 可以修改CS和IP寄存器的值，指向我们的代码段，用于执行该段代码</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> mov指令可以修改大部分寄存器的地址，但是不能修改CS和IP的地址，需要用跳转修改</div>\n\n<hr>\n<h3 id=\"3-汇编程序概述\"><a href=\"#3-汇编程序概述\" class=\"headerlink\" title=\"3.汇编程序概述\"></a>3.汇编程序概述</h3><h4 id=\"3-1汇编程序执行概述\"><a href=\"#3-1汇编程序执行概述\" class=\"headerlink\" title=\"3.1汇编程序执行概述\"></a>3.1汇编程序执行概述</h4><p><strong>①编写汇编源程序</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 汇编语言的源文件后缀为.asm</div>\n<p><strong>②对源程序进行编译链接</strong></p>\n<blockquote>\n<p>编译产生<strong>目标文件</strong><br>链接源文件产生<strong>可执行文件</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 可执行文件包括两部分，一部分为程序和数据，另一部分为相关描述信息（程序有多大，占用多大内存）</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 其中伪指令在编译时均转化为相关描述信息</div>\n<p><strong>③执行程序</strong></p>\n<blockquote>\n<p>每个<strong>操作系统</strong>都有类似于<strong>命令解释器</strong>的程序用于执行程序，<strong>命令解释器</strong>会先找到对应程序并将其<strong>载入内存</strong>，随后设置<code>CS:IP</code>指向<strong>程序的入口</strong>，命令解释器<strong>停止运行</strong>，并运行对应程序，最后对应程序运行<strong>结束</strong>，<strong>返回</strong>到命令解解释程序</p>\n</blockquote>\n<h4 id=\"3-2汇编源程序框架\"><a href=\"#3-2汇编源程序框架\" class=\"headerlink\" title=\"3.2汇编源程序框架\"></a>3.2汇编源程序框架</h4><p><strong>①框架</strong></p>\n<blockquote>\n<p>汇编指令才是<strong>机器执行</strong>的指令，其余都变成了<strong>描述信息</strong></p>\n</blockquote>\n<p><img src=\"/image/HB_5.png\" alt=\"指令和伪指令\"></p>\n<blockquote>\n<p><strong>程序返回</strong>：一个程序结束后，将<strong>CPU的控制权</strong>还给使他运行的程序</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 在汇编程序的最后一个段中结尾处添加以下两行指令即可</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mov ax,4c00H\nint 21H<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><strong>②常用伪指令</strong></p>\n<blockquote>\n<p><code>assume 段寄存器名:段名</code>：将某个段和某个<strong>段寄存器</strong>联系到一起</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 段和段寄存器的关联将决定这个段的作用，如代码段和CS联系到一起，栈段和SS联系到一起</div>\n<blockquote>\n<p><code>段名 segment</code>：说明一个段<strong>开始</strong><br><code>段名 ends</code>：说明一个段<strong>结束</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 一个汇编程序由多个段组成，段名最后会被处理为一个段地址</div>\n<blockquote>\n<p><code>end</code>：一个汇编程序的<strong>结束标记</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 不要搞混end和ends</div>\n\n<p><strong>②常用汇编指令</strong></p>\n<blockquote>\n<p><code>add</code>：加法指令</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> add ax,bx类似于C中ax = ax + bx</div>\n<blockquote>\n<p><code>sub</code>：减法指令</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> sub ax,bx类似于C中ax = ax - bx</div>\n<blockquote>\n<p><code>inc</code>：递增指令</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> inc ax类似于ax = ax+1</div>\n<blockquote>\n<p><code>dec</code>：递减指令</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> dec ax类似于ax = ax-1</div>\n<blockquote>\n<p><code>div</code>：除法指令</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> div 容器，容器（不能是ax，dx相关寄存器）中为除数，若除数为8位，则被除数为16位，放在ax中，结束后al存商，ah存余数，若除数为16位，则被除数为32位，高位放在dx中，低位放在ax中，结束后ax存商，dx存余数</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 根据被除数的范围选取除法的类别，16位寄存器能表示的值的上限为65535</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 使用内存单元时，需要使用word ptr和byte ptr指明内存单元的长度</div>\n<blockquote>\n<p><code>mul</code>：乘法法指令</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> </div>\n\n<h4 id=\"3-3源文件的编译\"><a href=\"#3-3源文件的编译\" class=\"headerlink\" title=\"3.3源文件的编译\"></a>3.3源文件的编译</h4><p><strong>①运行编译器</strong><br><img src=\"/image/HB_6.png\" alt=\"masm编译器\"></p>\n<blockquote>\n<p>本篇采用微软的<code>masm</code>编译器</p>\n</blockquote>\n<p><strong>②导入源文件</strong><br><img src=\"/image/HB_7.png\" alt=\"导入源文件\"></p>\n<blockquote>\n<p>如果源文件在<strong>编译器工作路径下</strong>，输入<strong>文件名</strong>即可，否则需要指明<strong>完整路径</strong><br>如果源程序不是<code>.asm</code>文件，则需要输入<strong>全名</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 编译后将在指定路径（在对应冒号后输入路径即可）生成可执行文件（.obj文件），缺省情况下当前路径</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 编译过程中还会提示你生成一些中间文件，如列表文件（.lst）和交叉引用文件（.crf），可忽略（直接enter）</div>\n\n<h4 id=\"3-4链接目标文件\"><a href=\"#3-4链接目标文件\" class=\"headerlink\" title=\"3.4链接目标文件\"></a>3.4链接目标文件</h4><p><strong>①运行链接器</strong><br><img src=\"/image/HB_8.png\" alt=\"Overlay Linker链接器\"></p>\n<blockquote>\n<p>本篇采用微软的<code>Overlay Linker</code></p>\n</blockquote>\n<p><strong>②导入目标文件</strong><br><img src=\"/image/HB_9.png\" alt=\"导入目标文件\"></p>\n<blockquote>\n<p>路径和文件名的规则<strong>同编译器</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 链接过程中还会提示你生成一些中间文件，如映像文件（.map），可忽略（直接enter）</div>\n<p><strong>③链接库文件</strong><br><img src=\"/image/HB_10.png\" alt=\"链接库文件\"></p>\n<blockquote>\n<p>如果程序中调用了<strong>库文件中的子程序</strong>，则需要链接对应的库</p>\n</blockquote>\n<h4 id=\"3-5简化的编译和链接\"><a href=\"#3-5简化的编译和链接\" class=\"headerlink\" title=\"3.5简化的编译和链接\"></a>3.5简化的编译和链接</h4><p><img src=\"/image/HB_11.png\" alt=\"简化的编译\"><br><img src=\"/image/HB_12.png\" alt=\"简化的链接\"></p>\n<blockquote>\n<p>将跳过一些<strong>非必要步骤</strong>，即生成中间文件和链接库</p>\n</blockquote>\n<h4 id=\"3-6跟踪程序执行过程\"><a href=\"#3-6跟踪程序执行过程\" class=\"headerlink\" title=\"3.6跟踪程序执行过程\"></a>3.6跟踪程序执行过程</h4><blockquote>\n<p>本篇采用微软的<code>debug</code>程序</p>\n</blockquote>\n<p><strong>①导入可执行文件</strong><br><img src=\"/image/HB_14.png\" alt=\"简化的链接\"></p>\n<p><strong>②可执行文件的加载过程</strong></p>\n<blockquote>\n<p><code>DOS</code>系统中可执行文件的加载过程，其中<code>SA</code>存放在<code>ds</code>寄存器中，<code>DOS</code>系统使用<code>PSP</code>用来与程序通信</p>\n</blockquote>\n<p><img src=\"/image/HB_15.png\" alt=\"可执行文件的内存情况\"></p>\n<p><strong>③查看寄存器状态</strong></p>\n<blockquote>\n<p>输入<code>-r</code>查看寄存器</p>\n</blockquote>\n<p><img src=\"/image/HB_13.png\" alt=\"简化的链接\"></p>\n<p><strong>④查看程序内容</strong></p>\n<blockquote>\n<p>输入<code>-u</code>查看程序内容</p>\n</blockquote>\n<p><img src=\"/image/HB_16.png\" alt=\"查看程序内容\"></p>\n<p><strong>⑤单步执行程序</strong></p>\n<blockquote>\n<p>输入<code>-t</code>单步执行指令</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 当执行到int 21时，需要使用-p执行</div>\n<p><img src=\"/image/HB_17.png\" alt=\"单步执行程序\"></p>\n"},{"title":"汇编语言（二）","seo_title":"seo名称","toc":true,"indent":true,"top":false,"comments":1,"archive":true,"cover":false,"mathjax":false,"pin":false,"top_meta":false,"bottom_meta":false,"sidebar":["toc"],"keywords":"文章关键词","updated":"2023-11-07T14:10:58.029Z","img":"/medias/featureimages/27.webp","date":"2023-11-07T14:10:58.029Z","summary":"汇编语言","_content":"\n# 汇编语言（二）\n## 汇编语言基础\n### 1.程序分段\n>主要可分为**数据段、栈段和程序段**\n\n#### 1.1内存申请\n{%right%}\n定义了多少数据，就相当于申请了对应长度的内存空间\n{%endright%}\n**①相关指令**\n>`db`：定义**字节型数据**\n`db 数据1,数据2,...,数据N`\n\n>`dw`：定义**字型数据**\n`dw 数据1,数据2,...,数据N`\n\n>`dd`：定义**双字数据**\n`dd 数据1,数据2,...,数据N`\n\n>`dup`：配合`db`、`dw`、`dd`进行**重复数据的定义**\n`dd 重复次数 dup (重复数据列表)`\n{%list%}\ndd 3 dup (0,1,2)相当于dd 0,1,2,0,1,2,0,1,2\n{%endlist%}\n\n**②实例**\n{%list%}\n由于dw指令在程序开头，故这些数据的地址从CS:0开始\n{%endlist%}\n```\nassume cs:code\ncode segment\ndw 0123h,0456h,0789h,0abch,0defh,0fedh,0cbah,0987h\n\n    mov bx,0\n    mov ax,0\n\n    mov cx,8\n  s: add ax.cs:[bx]\n    add bx,2\n    loop s\n\n    mov ax,400ch\n    int 21h\n  code ends\n  end\n```\n**③程序跟踪**\n>使用`-u`查看程序内容，这些内容实际上是`dw`**定义的数据**，但是被`debug`程序**强行翻译为指令**\n\n![查看程序](/image/HB_18.png)\n>使用`-r`查看**前十六个字节**的详细内容\n\n![查看](/image/HB_19.png)\n\n#### 1.2设置程序入口\n**①`start`伪指令**：将`CS:IP`指向对应地址\n>上述程序**不能正常运行**，因为程序入口是**数据强行翻译的指令**\n\n**②实例**\n>`end start`伪指令不仅仅描述**程序的结束**，也描述了**程序的入口**\n```\nassume cs:code\ncode segment\ndw 0123h,0456h,0789h,0abch,0defh,0fedh,0cbah,0987h\nstart: mov bx,0\n    mov ax,0\n\n    mov cx,8\n s: add ax.cs:[bx]\n    add bx,2\n    loop s\n\n    mov ax,400ch\n    int 21h\n  code ends\n  end start\n```\n\n#### 1.3栈机制\n**①引言**\n>**概述**：可以把**一段内存**当作**栈**来使用\n`push 容器`：将容器中数据放入**栈顶**\n`pop 容器`：将栈顶数据弹出并**存入容器**中\n\n>**相关寄存器**\n段寄存器`SS`和寄存器`SP`\n{%list%}\nSS:SP指向栈顶的物理地址\n{%endlist%}\n{%right%}\n指定了SS，也就相当于指定了一段内存作为栈，一个栈段最大为64KB\n{%endright%}\n\n![CPU的栈机制](/image/HB_2.png)\n**②push和pop的详细过程**\n![push](/image/HB_3.png)\n![pop](/image/HB_4.png)\n{%list%}\n执行pop后，原来的栈顶元素并不会消失，直到被新push的元素覆盖\n{%endlist%}\n{%wrong%}\n当栈满时push元素以及当栈空时pop元素，都会发生越界问题，需要自己注意\n{%endwrong%}\n\n**③实例**\n>**概述**：将一段内存中数据**反序排列**\n```\nassume cs:codesg\ncodesg segment\n\n;定义16个字型数据，其中0为字节型数据，将这段空间当作栈来使用\ndw 0123h,0456h,0789h,0abch,0defh,0fedh,0cbah,0987h\ndw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\n\n;设置栈顶指针，注意栈是从高地址向低地址增长\nstart: mov ax,cs\n    mov ss,ax\n    mov sp,30h\n\n    mov bx,0\n    mov cx,8\n\n;将对应元素放入栈中\ns:  push cs:[bx]\n    add bx,2\n    loop s\n\n;重置循环相关寄存器\n    mov bx,0\n    mov cs,8\n\n;将栈中元素依次放入原来的位置，但是顺序颠倒\ns0: pop cs:[bx]\n    add bx,2\n    loop s0\n\n    mov ax,4c00h\n    int 21h\ncodesg ends\nend start\n```\n{%list%}\n栈的地址空间需要自己申请，并将ss:sp指向对应位置\n{%endlist%}\n{%right%}\n栈从高地址向低地址增长\n{%endright%}\n{%warning%}\n使用栈时要注意出栈、入栈顺序\n{%endwarning%}\n\n#### 1.4使用多个段\n**①意义**\n>将**不同的类型数据**放入**不同的段**中\n>使用**更大的内存空间**\n\n**②实例**\n\n```\nassume cs:code,ds:data,ss:stack\n\ndata segment\n;定义8个字型数据\ndw 0123h,0456h,0789h,0abch,0defh,0fedh,0cbah,0987h\ndata ends\n\nstack segment\n;申请栈空间\ndw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\nstack ends\n\ncode segment\n;设置栈顶指针，注意栈是从高地址向低地址增长\nstart: mov ax,stack ;注意段寄存器名换为段名\n    mov ss,ax\n    mov sp,20h ;为什么变为20h？\n\n;ds指向data段\n    mov ax,data\n    mov ds,ax\n\n    mov bx,0\n    mov cx,8\n\n;将对应元素放入栈中\ns:  push [bx]\n    add bx,2\n    loop s\n\n;重置循环相关寄存器\n    mov bx,0\n    mov cs,8\n\n;将栈中元素依次放入原来的位置，但是顺序颠倒\ns0: pop [bx]\n    add bx,2\n    loop s0\n\n    mov ax,4c00h\n    int 21h\ncode ends\nend start\n```\n{%right%}\n定义段，还需要申请一定大小的的内存\n{%endright%}\n{%warning%}\nassume指令只是将段寄存器和对应段的名称联系到一起，并没有设定段寄存器的值，因为assume本质上还是一个伪指令，伪指令并不能控制cpu，还是需要修改ds、ss的值以访问对应段\n{%endwarning%}\n{%wrong%}\n段名本质上是一个字面值，不能直接将其存入段寄存器中\n{%endwrong%}\n```\n    mov ax,data\n    mov ds,ax\n    ;而不是\n    mov ds,data\n```\n***\n### 2.转移\n#### 2.1引言\n**①转移指令**\n>可以修改`IP`寄存器或者**同时**修改`CS`和`IP`寄存器的指令\n{%right%}\n转移指令可以控制CPU执行某一处代码\n{%endright%}\n**②分类**\n>**段内转移**：只修改`IP`\n**段间转移**：同时修改`CS`和`IP`\n{%list%}\n段内转移也可分为短转移和近转移\n{%endlist%}\n>**短转移**：`IP`修改范围为`-128~127`\n**近转移**：`IP`修改范围为`-32768~32767`\n{%wrong%}\n注意这个范围限制，如果超出了对应的范围，会出错\n{%endwrong%}\n**③`offset`操作符**\n>取得**标号**的**偏移地址**\n```\nassume cs:codesg\ncodesg segment\nstart: mov ax,offset start ;相当于mov ax，0，代码段的偏移地址从0开始\ns:     mov ax,offset s ;相当于mov ax，3，因为前一条指令占两个字节\n```\n{%list%}\nseg会取得标号的段地址\n{%endlist%}\n\n#### 2.2跳转指令\n**①格式**\n>**标号转移**\n`jmp short 标号`：**段内短转移**\n`jmp near ptr 标号`：**段内近转移**\n`jmp far ptr 标号`：**段间转移**\n{%right%}\n标号实际上标识了一个地址\n{%endright%}\n>**地址转移**\n`jmp 段地址：偏移地址`：将`CS:IP`修改为对应的地址\n`jmp 寄存器名`：将`IP`的值改为**寄存器中数据**\n`jmp word ptr 内存单元地址`：从对应地址处读取**一个字**，用于修改`IP`\n`jmp dword ptr 内存单元地址`从对应地址处读取**两个字**，**高地址**的字用于修改`CS`，**低地址**的字用于修改`IP`\n\n>**条件转移**\n`jcxz 标号`：如果`cx`**寄存器**的值为0，则跳转到**标号**处，只能**段内短转移**\n\n\n**②段内转移原理**\n```\nassume cs:codesg\ncodesg segment\n\nstart: mov ax,0\n       jmp short s\n       add ax,1\ns:     inc ax\n\ncodesg ends\n\nend start\n```\n>在`debug`中将上述程序其翻译为**机器指令**，可知`jmp short s`对应**机器指令**为`EB03`\n\n![对应机器指令](/image/HB_21.png)\n![转移原理](/image/HB_22.png)\n{%list%}\n段内转移对应机器指令并不包含目的地址信息，段内短转移是对IP进行八位位移，段内近转移是对IP进行十六位位移\n{%endlist%}\n\n\n**③段间转移原理**\n```\nassume cs:codesg\n\ncodesg segment\nstart: mov ax,0\n       mov bx,0\n       jmp far ptr s\n       db 256 dup (0)\ns:     add ax,1\n       inc ax\ncodesg ends\n\nend start\n```\n>对应**机器指令**如下，`jmp far ptr s`对应机器指令为`EA0B01BD0B`\n\n![对应机器指令](/image/HB_23.png)\n{%list%}\n段间转移对应机器指令包含目的地址信息，BD0B为对应段地址0BBDH，0B01为对应偏移地址010BH\n{%endlist%}\n\n#### 2.3循环指令\n**①格式**：`loop 标号`\n>当cpu执行到`loop`指令时，首先将**循环寄存器**`cx`中的值**减一**，若cx中的值**不为零**，则**返回标号处**执行程序，反之向下执行\n{%list%}\n循环指令本质上是一个短转移\n{%endlist%}\n\n**②实例**\n>以下汇编程序计算了`2^12`的值\n```\nassume cs:code\ncode segment\n    mov ax,2\n\n    mov cx,11\ns:  add ax.ax\n    loop s\n    mov ax,4c00h\n    int 21h\ncode ends\nend\n```\n**③多重循环**\n{%list%}\n因为只有一个循环寄存器，若要多重循环，则每次开始内层循环时，将外层循环的cx中的数值保存起来，在执行外层的循环时，再恢复外层循环的cx数\n{%endlist%}\n{%right%}\n可以用栈、寄存器和某块特定内存（数据域中申请）存储数据\n{%endright%}\n```\nassume cs:codesg,ds:datasg,ss:stacksg\n\ndatasg segment\ndb 'ibm             '\ndb 'dec             '\ndb 'dos             '\ndb 'vax             '\ndatasg ends\n\nstacksg segment\ndw 0,0,0,0,0,0,0,0 ;定义一个栈段，容量为16字节\nstacksg ends\n\ncodesg segment\nstart:mov ax,stacksg ;将栈寄存器指向定义的栈段\n    mov ss,ax\n    mov sp,16\n\n    mov ax datasg ;找到对应的数据段\n    mov ds,ax\n    mov bx,0\n\n    mov cx,4\n\ns0: push cx ;保存外层循环的值\n    mov si,0\n    mov cx,3 ;将cx设置为内层循环的次数\n\ns:  mov al,[bx+si]\n    and al,11011111b ;将对应字母转化为大写\n    mov [bx+si],al\n    inc si ;si每次加1，进行精定位\n    loop s\n\n    add bx,16 ;bx每次加16，进行粗定位，移动到下一行\n    pop cx\n    \n    loop s0\n\n    mov ax,4c00H\n    int 21H\n\ncodesg ends\nend start\n```\n![图解](/image/HB_20.png)\n\n#### 2.4栈跳转\n**①相关指令**\n>`ret`：使用**栈中的数据**修改`IP`\n{%list%}\n相当于pop IP\n{%endlist%}\n>`retf`：使用**栈中的数据**修改`CS`和`IP`\n{%list%}\n相当于pop IP和pop CS\n{%endlist%}\n>`call 标号`：将当前`IP`**压入栈**中，并**转移到标号处**\n{%list%}\n相当于push IP和jmp near ptr 标号\n{%endlist%}\n>`call 16位寄存器`：将当前`IP`**压入栈**中，并将`IP`设置为**对应寄存器值**\n{%list%}\n相当于push IP和jmp 16位寄存器\n{%endlist%}\n>`call word ptr 内存单元地址`：将当前`IP`**压入栈**中，并将`IP`设置为**对应内存单元数据**\n{%list%}\n相当于push IP和jmp word ptr 内存单元地址\n{%endlist%}\n>`call dword ptr 内存单元地址`：将当前`CS`和`IP`**压入栈**中，并将`CS`和`IP`设置为**对应内存单元数据**\n{%list%}\n相当于push CS、push IP和jmp dword ptr 内存单元地址\n{%endlist%}\n\n**②`call`和`ret`的配合使用**\n```\nassume cs:code\ncode segment\nstart: mov ax,1\n       mov cx,3\n       call s\n       mov bx,ax\n       mov ax,4c00h\n       int 21\ns:     add ax,ax\n       loop s\n       ret\ncode ends\nend start\n```\n>**程序过程概述**\n\n>**（1）**当CPU读取`call s`指令后，`IP`指向了**其后面**的指令`mov bx,ax`，随后执行`call s`指令，将**当前的`IP`值**（`mov bx,ax`的偏移地址）**压栈**，并将`IP`指向标号`s`\n**（2）**执行标号`s`处的循环，即`2^3`\n**（3）**CPU读取`ret`指令，`IP`指向`ret`指令后的内存单元，CPU执行`ret`指令，此时`IP`指向`mov bx,ax`，随后执行至完成\n\n### 3.模块化\n#### 3.1模板\n```\nassume cd:code\ncode segment\nmain:\n\n    ... ;主程序内容\n    mov ax,4c00h\n    int 21h\n\nsub1:\n\n    ... ;子程序1内容\n    \nsub2:\n\n    ... ;子程序2内容\n\n```\n#### 3.2实例\n>计算**一组数据**的三次方，并保存在**其后**\n```\nassume cs:code\ndata segment\n    dw 1,2,3,4,5,6,7,8\n    dd 0,0,0,0,0,0,0,0\ndata ends\n\ncode segement\nstart: mov ax,data\n       mov ds,ax\n       mov si,0\n       mov di,16\n\n       mov cx,8\ns:     mov bx,[si]\n       call cube\n       mov [di],ax\n       mov [di].2,dx\n       add si,2\n       add di,4\n       loop s\n\n       mov ax,4c00h\n       int 21h\n\ncube:  mov ax,bx\n       mul bx\n       mul bx\n       ret\ncode ends\nend start\n```\n#### 3.3批量数据传递\n{%right%}\n利用循环以及寄存器\n{%endright%}\n>将一段数据全部转化为**大写**\n```\nassume cs:code\n\ndata segment\n    db 'conversation'\ndata ends\n\ncode segment\nstart: mov ax,data\n       mov ds,ax\n       mov si,0\n\n       mov cx,12\n       call capital\n       mov ax,4c00h\n       int 21h\n\ncapital: and byte ptr [si],11011111b\n         inc si\n         loop capital\n         ret\ncode ends\nend start\n```\n#### 3.4寄存器冲突\n{%right%}\n子程序和主程序寄存器冲突，在子程序开始之前将所有用到的寄存器中的内容保存起来，在子程序返回前在恢复\n{%endright%}\n```\nassume cs:code\ndata segment\n    db 'word',0\n    db 'unix',0\n    db 'wind',0\n    db 'good',0\ndata ends\n\ncode segment\nstart: mov ax,data\n       mov ds,ax\n       mov bx,0\n\n       mov cx,4\ns:     mov si,bx\n       call capital\n       add bx,5\n       loop s\n\ncapital: push cx\n         push si\n\nchange:  mov cl,[si]\n         mov ch,0\n         jcxz ok\n         and byte ptr [si],11011111b\n         inc si\n         jmp short change\n\nok:      pop si\n         pop cx\n         ret\n\ncode ends\nend start\n```\n\n\n\n","source":"_posts/汇编语言（二）.md","raw":"---\ntitle: 汇编语言（二）\nseo_title: seo名称\ntoc: true\nindent: true\ntop: false\ncomments: true\narchive: true\ncover: false\nmathjax: false\npin: false\ntop_meta: false\nbottom_meta: false\nsidebar:\n  - toc\ntag:\n  - 汇编语言\n  - 《汇编语言》\ncategories: 编程语言\nkeywords: 文章关键词\nupdated: ''\nimg: /medias/featureimages/27.webp\ndate:\nsummary: 汇编语言\n---\n\n# 汇编语言（二）\n## 汇编语言基础\n### 1.程序分段\n>主要可分为**数据段、栈段和程序段**\n\n#### 1.1内存申请\n{%right%}\n定义了多少数据，就相当于申请了对应长度的内存空间\n{%endright%}\n**①相关指令**\n>`db`：定义**字节型数据**\n`db 数据1,数据2,...,数据N`\n\n>`dw`：定义**字型数据**\n`dw 数据1,数据2,...,数据N`\n\n>`dd`：定义**双字数据**\n`dd 数据1,数据2,...,数据N`\n\n>`dup`：配合`db`、`dw`、`dd`进行**重复数据的定义**\n`dd 重复次数 dup (重复数据列表)`\n{%list%}\ndd 3 dup (0,1,2)相当于dd 0,1,2,0,1,2,0,1,2\n{%endlist%}\n\n**②实例**\n{%list%}\n由于dw指令在程序开头，故这些数据的地址从CS:0开始\n{%endlist%}\n```\nassume cs:code\ncode segment\ndw 0123h,0456h,0789h,0abch,0defh,0fedh,0cbah,0987h\n\n    mov bx,0\n    mov ax,0\n\n    mov cx,8\n  s: add ax.cs:[bx]\n    add bx,2\n    loop s\n\n    mov ax,400ch\n    int 21h\n  code ends\n  end\n```\n**③程序跟踪**\n>使用`-u`查看程序内容，这些内容实际上是`dw`**定义的数据**，但是被`debug`程序**强行翻译为指令**\n\n![查看程序](/image/HB_18.png)\n>使用`-r`查看**前十六个字节**的详细内容\n\n![查看](/image/HB_19.png)\n\n#### 1.2设置程序入口\n**①`start`伪指令**：将`CS:IP`指向对应地址\n>上述程序**不能正常运行**，因为程序入口是**数据强行翻译的指令**\n\n**②实例**\n>`end start`伪指令不仅仅描述**程序的结束**，也描述了**程序的入口**\n```\nassume cs:code\ncode segment\ndw 0123h,0456h,0789h,0abch,0defh,0fedh,0cbah,0987h\nstart: mov bx,0\n    mov ax,0\n\n    mov cx,8\n s: add ax.cs:[bx]\n    add bx,2\n    loop s\n\n    mov ax,400ch\n    int 21h\n  code ends\n  end start\n```\n\n#### 1.3栈机制\n**①引言**\n>**概述**：可以把**一段内存**当作**栈**来使用\n`push 容器`：将容器中数据放入**栈顶**\n`pop 容器`：将栈顶数据弹出并**存入容器**中\n\n>**相关寄存器**\n段寄存器`SS`和寄存器`SP`\n{%list%}\nSS:SP指向栈顶的物理地址\n{%endlist%}\n{%right%}\n指定了SS，也就相当于指定了一段内存作为栈，一个栈段最大为64KB\n{%endright%}\n\n![CPU的栈机制](/image/HB_2.png)\n**②push和pop的详细过程**\n![push](/image/HB_3.png)\n![pop](/image/HB_4.png)\n{%list%}\n执行pop后，原来的栈顶元素并不会消失，直到被新push的元素覆盖\n{%endlist%}\n{%wrong%}\n当栈满时push元素以及当栈空时pop元素，都会发生越界问题，需要自己注意\n{%endwrong%}\n\n**③实例**\n>**概述**：将一段内存中数据**反序排列**\n```\nassume cs:codesg\ncodesg segment\n\n;定义16个字型数据，其中0为字节型数据，将这段空间当作栈来使用\ndw 0123h,0456h,0789h,0abch,0defh,0fedh,0cbah,0987h\ndw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\n\n;设置栈顶指针，注意栈是从高地址向低地址增长\nstart: mov ax,cs\n    mov ss,ax\n    mov sp,30h\n\n    mov bx,0\n    mov cx,8\n\n;将对应元素放入栈中\ns:  push cs:[bx]\n    add bx,2\n    loop s\n\n;重置循环相关寄存器\n    mov bx,0\n    mov cs,8\n\n;将栈中元素依次放入原来的位置，但是顺序颠倒\ns0: pop cs:[bx]\n    add bx,2\n    loop s0\n\n    mov ax,4c00h\n    int 21h\ncodesg ends\nend start\n```\n{%list%}\n栈的地址空间需要自己申请，并将ss:sp指向对应位置\n{%endlist%}\n{%right%}\n栈从高地址向低地址增长\n{%endright%}\n{%warning%}\n使用栈时要注意出栈、入栈顺序\n{%endwarning%}\n\n#### 1.4使用多个段\n**①意义**\n>将**不同的类型数据**放入**不同的段**中\n>使用**更大的内存空间**\n\n**②实例**\n\n```\nassume cs:code,ds:data,ss:stack\n\ndata segment\n;定义8个字型数据\ndw 0123h,0456h,0789h,0abch,0defh,0fedh,0cbah,0987h\ndata ends\n\nstack segment\n;申请栈空间\ndw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\nstack ends\n\ncode segment\n;设置栈顶指针，注意栈是从高地址向低地址增长\nstart: mov ax,stack ;注意段寄存器名换为段名\n    mov ss,ax\n    mov sp,20h ;为什么变为20h？\n\n;ds指向data段\n    mov ax,data\n    mov ds,ax\n\n    mov bx,0\n    mov cx,8\n\n;将对应元素放入栈中\ns:  push [bx]\n    add bx,2\n    loop s\n\n;重置循环相关寄存器\n    mov bx,0\n    mov cs,8\n\n;将栈中元素依次放入原来的位置，但是顺序颠倒\ns0: pop [bx]\n    add bx,2\n    loop s0\n\n    mov ax,4c00h\n    int 21h\ncode ends\nend start\n```\n{%right%}\n定义段，还需要申请一定大小的的内存\n{%endright%}\n{%warning%}\nassume指令只是将段寄存器和对应段的名称联系到一起，并没有设定段寄存器的值，因为assume本质上还是一个伪指令，伪指令并不能控制cpu，还是需要修改ds、ss的值以访问对应段\n{%endwarning%}\n{%wrong%}\n段名本质上是一个字面值，不能直接将其存入段寄存器中\n{%endwrong%}\n```\n    mov ax,data\n    mov ds,ax\n    ;而不是\n    mov ds,data\n```\n***\n### 2.转移\n#### 2.1引言\n**①转移指令**\n>可以修改`IP`寄存器或者**同时**修改`CS`和`IP`寄存器的指令\n{%right%}\n转移指令可以控制CPU执行某一处代码\n{%endright%}\n**②分类**\n>**段内转移**：只修改`IP`\n**段间转移**：同时修改`CS`和`IP`\n{%list%}\n段内转移也可分为短转移和近转移\n{%endlist%}\n>**短转移**：`IP`修改范围为`-128~127`\n**近转移**：`IP`修改范围为`-32768~32767`\n{%wrong%}\n注意这个范围限制，如果超出了对应的范围，会出错\n{%endwrong%}\n**③`offset`操作符**\n>取得**标号**的**偏移地址**\n```\nassume cs:codesg\ncodesg segment\nstart: mov ax,offset start ;相当于mov ax，0，代码段的偏移地址从0开始\ns:     mov ax,offset s ;相当于mov ax，3，因为前一条指令占两个字节\n```\n{%list%}\nseg会取得标号的段地址\n{%endlist%}\n\n#### 2.2跳转指令\n**①格式**\n>**标号转移**\n`jmp short 标号`：**段内短转移**\n`jmp near ptr 标号`：**段内近转移**\n`jmp far ptr 标号`：**段间转移**\n{%right%}\n标号实际上标识了一个地址\n{%endright%}\n>**地址转移**\n`jmp 段地址：偏移地址`：将`CS:IP`修改为对应的地址\n`jmp 寄存器名`：将`IP`的值改为**寄存器中数据**\n`jmp word ptr 内存单元地址`：从对应地址处读取**一个字**，用于修改`IP`\n`jmp dword ptr 内存单元地址`从对应地址处读取**两个字**，**高地址**的字用于修改`CS`，**低地址**的字用于修改`IP`\n\n>**条件转移**\n`jcxz 标号`：如果`cx`**寄存器**的值为0，则跳转到**标号**处，只能**段内短转移**\n\n\n**②段内转移原理**\n```\nassume cs:codesg\ncodesg segment\n\nstart: mov ax,0\n       jmp short s\n       add ax,1\ns:     inc ax\n\ncodesg ends\n\nend start\n```\n>在`debug`中将上述程序其翻译为**机器指令**，可知`jmp short s`对应**机器指令**为`EB03`\n\n![对应机器指令](/image/HB_21.png)\n![转移原理](/image/HB_22.png)\n{%list%}\n段内转移对应机器指令并不包含目的地址信息，段内短转移是对IP进行八位位移，段内近转移是对IP进行十六位位移\n{%endlist%}\n\n\n**③段间转移原理**\n```\nassume cs:codesg\n\ncodesg segment\nstart: mov ax,0\n       mov bx,0\n       jmp far ptr s\n       db 256 dup (0)\ns:     add ax,1\n       inc ax\ncodesg ends\n\nend start\n```\n>对应**机器指令**如下，`jmp far ptr s`对应机器指令为`EA0B01BD0B`\n\n![对应机器指令](/image/HB_23.png)\n{%list%}\n段间转移对应机器指令包含目的地址信息，BD0B为对应段地址0BBDH，0B01为对应偏移地址010BH\n{%endlist%}\n\n#### 2.3循环指令\n**①格式**：`loop 标号`\n>当cpu执行到`loop`指令时，首先将**循环寄存器**`cx`中的值**减一**，若cx中的值**不为零**，则**返回标号处**执行程序，反之向下执行\n{%list%}\n循环指令本质上是一个短转移\n{%endlist%}\n\n**②实例**\n>以下汇编程序计算了`2^12`的值\n```\nassume cs:code\ncode segment\n    mov ax,2\n\n    mov cx,11\ns:  add ax.ax\n    loop s\n    mov ax,4c00h\n    int 21h\ncode ends\nend\n```\n**③多重循环**\n{%list%}\n因为只有一个循环寄存器，若要多重循环，则每次开始内层循环时，将外层循环的cx中的数值保存起来，在执行外层的循环时，再恢复外层循环的cx数\n{%endlist%}\n{%right%}\n可以用栈、寄存器和某块特定内存（数据域中申请）存储数据\n{%endright%}\n```\nassume cs:codesg,ds:datasg,ss:stacksg\n\ndatasg segment\ndb 'ibm             '\ndb 'dec             '\ndb 'dos             '\ndb 'vax             '\ndatasg ends\n\nstacksg segment\ndw 0,0,0,0,0,0,0,0 ;定义一个栈段，容量为16字节\nstacksg ends\n\ncodesg segment\nstart:mov ax,stacksg ;将栈寄存器指向定义的栈段\n    mov ss,ax\n    mov sp,16\n\n    mov ax datasg ;找到对应的数据段\n    mov ds,ax\n    mov bx,0\n\n    mov cx,4\n\ns0: push cx ;保存外层循环的值\n    mov si,0\n    mov cx,3 ;将cx设置为内层循环的次数\n\ns:  mov al,[bx+si]\n    and al,11011111b ;将对应字母转化为大写\n    mov [bx+si],al\n    inc si ;si每次加1，进行精定位\n    loop s\n\n    add bx,16 ;bx每次加16，进行粗定位，移动到下一行\n    pop cx\n    \n    loop s0\n\n    mov ax,4c00H\n    int 21H\n\ncodesg ends\nend start\n```\n![图解](/image/HB_20.png)\n\n#### 2.4栈跳转\n**①相关指令**\n>`ret`：使用**栈中的数据**修改`IP`\n{%list%}\n相当于pop IP\n{%endlist%}\n>`retf`：使用**栈中的数据**修改`CS`和`IP`\n{%list%}\n相当于pop IP和pop CS\n{%endlist%}\n>`call 标号`：将当前`IP`**压入栈**中，并**转移到标号处**\n{%list%}\n相当于push IP和jmp near ptr 标号\n{%endlist%}\n>`call 16位寄存器`：将当前`IP`**压入栈**中，并将`IP`设置为**对应寄存器值**\n{%list%}\n相当于push IP和jmp 16位寄存器\n{%endlist%}\n>`call word ptr 内存单元地址`：将当前`IP`**压入栈**中，并将`IP`设置为**对应内存单元数据**\n{%list%}\n相当于push IP和jmp word ptr 内存单元地址\n{%endlist%}\n>`call dword ptr 内存单元地址`：将当前`CS`和`IP`**压入栈**中，并将`CS`和`IP`设置为**对应内存单元数据**\n{%list%}\n相当于push CS、push IP和jmp dword ptr 内存单元地址\n{%endlist%}\n\n**②`call`和`ret`的配合使用**\n```\nassume cs:code\ncode segment\nstart: mov ax,1\n       mov cx,3\n       call s\n       mov bx,ax\n       mov ax,4c00h\n       int 21\ns:     add ax,ax\n       loop s\n       ret\ncode ends\nend start\n```\n>**程序过程概述**\n\n>**（1）**当CPU读取`call s`指令后，`IP`指向了**其后面**的指令`mov bx,ax`，随后执行`call s`指令，将**当前的`IP`值**（`mov bx,ax`的偏移地址）**压栈**，并将`IP`指向标号`s`\n**（2）**执行标号`s`处的循环，即`2^3`\n**（3）**CPU读取`ret`指令，`IP`指向`ret`指令后的内存单元，CPU执行`ret`指令，此时`IP`指向`mov bx,ax`，随后执行至完成\n\n### 3.模块化\n#### 3.1模板\n```\nassume cd:code\ncode segment\nmain:\n\n    ... ;主程序内容\n    mov ax,4c00h\n    int 21h\n\nsub1:\n\n    ... ;子程序1内容\n    \nsub2:\n\n    ... ;子程序2内容\n\n```\n#### 3.2实例\n>计算**一组数据**的三次方，并保存在**其后**\n```\nassume cs:code\ndata segment\n    dw 1,2,3,4,5,6,7,8\n    dd 0,0,0,0,0,0,0,0\ndata ends\n\ncode segement\nstart: mov ax,data\n       mov ds,ax\n       mov si,0\n       mov di,16\n\n       mov cx,8\ns:     mov bx,[si]\n       call cube\n       mov [di],ax\n       mov [di].2,dx\n       add si,2\n       add di,4\n       loop s\n\n       mov ax,4c00h\n       int 21h\n\ncube:  mov ax,bx\n       mul bx\n       mul bx\n       ret\ncode ends\nend start\n```\n#### 3.3批量数据传递\n{%right%}\n利用循环以及寄存器\n{%endright%}\n>将一段数据全部转化为**大写**\n```\nassume cs:code\n\ndata segment\n    db 'conversation'\ndata ends\n\ncode segment\nstart: mov ax,data\n       mov ds,ax\n       mov si,0\n\n       mov cx,12\n       call capital\n       mov ax,4c00h\n       int 21h\n\ncapital: and byte ptr [si],11011111b\n         inc si\n         loop capital\n         ret\ncode ends\nend start\n```\n#### 3.4寄存器冲突\n{%right%}\n子程序和主程序寄存器冲突，在子程序开始之前将所有用到的寄存器中的内容保存起来，在子程序返回前在恢复\n{%endright%}\n```\nassume cs:code\ndata segment\n    db 'word',0\n    db 'unix',0\n    db 'wind',0\n    db 'good',0\ndata ends\n\ncode segment\nstart: mov ax,data\n       mov ds,ax\n       mov bx,0\n\n       mov cx,4\ns:     mov si,bx\n       call capital\n       add bx,5\n       loop s\n\ncapital: push cx\n         push si\n\nchange:  mov cl,[si]\n         mov ch,0\n         jcxz ok\n         and byte ptr [si],11011111b\n         inc si\n         jmp short change\n\nok:      pop si\n         pop cx\n         ret\n\ncode ends\nend start\n```\n\n\n\n","slug":"汇编语言（二）","published":1,"_id":"clmra3hn80000p0vd0ob98wa4","layout":"post","photos":[],"link":"","content":"<h1 id=\"汇编语言（二）\"><a href=\"#汇编语言（二）\" class=\"headerlink\" title=\"汇编语言（二）\"></a>汇编语言（二）</h1><h2 id=\"汇编语言基础\"><a href=\"#汇编语言基础\" class=\"headerlink\" title=\"汇编语言基础\"></a>汇编语言基础</h2><h3 id=\"1-程序分段\"><a href=\"#1-程序分段\" class=\"headerlink\" title=\"1.程序分段\"></a>1.程序分段</h3><blockquote>\n<p>主要可分为<strong>数据段、栈段和程序段</strong></p>\n</blockquote>\n<h4 id=\"1-1内存申请\"><a href=\"#1-1内存申请\" class=\"headerlink\" title=\"1.1内存申请\"></a>1.1内存申请</h4><div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 定义了多少数据，就相当于申请了对应长度的内存空间</div>\n<p><strong>①相关指令</strong></p>\n<blockquote>\n<p><code>db</code>：定义<strong>字节型数据</strong><br><code>db 数据1,数据2,...,数据N</code></p>\n</blockquote>\n<blockquote>\n<p><code>dw</code>：定义<strong>字型数据</strong><br><code>dw 数据1,数据2,...,数据N</code></p>\n</blockquote>\n<blockquote>\n<p><code>dd</code>：定义<strong>双字数据</strong><br><code>dd 数据1,数据2,...,数据N</code></p>\n</blockquote>\n<blockquote>\n<p><code>dup</code>：配合<code>db</code>、<code>dw</code>、<code>dd</code>进行<strong>重复数据的定义</strong><br><code>dd 重复次数 dup (重复数据列表)</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> dd 3 dup (0,1,2)相当于dd 0,1,2,0,1,2,0,1,2</div>\n\n<p><strong>②实例</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 由于dw指令在程序开头，故这些数据的地址从CS:0开始</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">assume cs:code\ncode segment\ndw 0123h,0456h,0789h,0abch,0defh,0fedh,0cbah,0987h\n\n    mov bx,0\n    mov ax,0\n\n    mov cx,8\n  s: add ax.cs:[bx]\n    add bx,2\n    loop s\n\n    mov ax,400ch\n    int 21h\n  code ends\n  end<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>③程序跟踪</strong></p>\n<blockquote>\n<p>使用<code>-u</code>查看程序内容，这些内容实际上是<code>dw</code><strong>定义的数据</strong>，但是被<code>debug</code>程序<strong>强行翻译为指令</strong></p>\n</blockquote>\n<p><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/HB_18.png\" alt=\"查看程序\"></p>\n<blockquote>\n<p>使用<code>-r</code>查看<strong>前十六个字节</strong>的详细内容</p>\n</blockquote>\n<p><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/HB_19.png\" alt=\"查看\"></p>\n<h4 id=\"1-2设置程序入口\"><a href=\"#1-2设置程序入口\" class=\"headerlink\" title=\"1.2设置程序入口\"></a>1.2设置程序入口</h4><p><strong>①<code>start</code>伪指令</strong>：将<code>CS:IP</code>指向对应地址</p>\n<blockquote>\n<p>上述程序<strong>不能正常运行</strong>，因为程序入口是<strong>数据强行翻译的指令</strong></p>\n</blockquote>\n<p><strong>②实例</strong></p>\n<blockquote>\n<p><code>end start</code>伪指令不仅仅描述<strong>程序的结束</strong>，也描述了<strong>程序的入口</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">assume cs:code\ncode segment\ndw 0123h,0456h,0789h,0abch,0defh,0fedh,0cbah,0987h\nstart: mov bx,0\n    mov ax,0\n\n    mov cx,8\n s: add ax.cs:[bx]\n    add bx,2\n    loop s\n\n    mov ax,400ch\n    int 21h\n  code ends\n  end start<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"1-3栈机制\"><a href=\"#1-3栈机制\" class=\"headerlink\" title=\"1.3栈机制\"></a>1.3栈机制</h4><p><strong>①引言</strong></p>\n<blockquote>\n<p><strong>概述</strong>：可以把<strong>一段内存</strong>当作<strong>栈</strong>来使用<br><code>push 容器</code>：将容器中数据放入<strong>栈顶</strong><br><code>pop 容器</code>：将栈顶数据弹出并<strong>存入容器</strong>中</p>\n</blockquote>\n<blockquote>\n<p><strong>相关寄存器</strong><br>段寄存器<code>SS</code>和寄存器<code>SP</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> SS:SP指向栈顶的物理地址</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 指定了SS，也就相当于指定了一段内存作为栈，一个栈段最大为64KB</div>\n\n<p><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/HB_2.png\" alt=\"CPU的栈机制\"><br><strong>②push和pop的详细过程</strong><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/HB_3.png\" alt=\"push\"><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/HB_4.png\" alt=\"pop\"></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 执行pop后，原来的栈顶元素并不会消失，直到被新push的元素覆盖</div>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 当栈满时push元素以及当栈空时pop元素，都会发生越界问题，需要自己注意</div>\n\n<p><strong>③实例</strong></p>\n<blockquote>\n<p><strong>概述</strong>：将一段内存中数据<strong>反序排列</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">assume cs:codesg\ncodesg segment\n\n;定义16个字型数据，其中0为字节型数据，将这段空间当作栈来使用\ndw 0123h,0456h,0789h,0abch,0defh,0fedh,0cbah,0987h\ndw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\n\n;设置栈顶指针，注意栈是从高地址向低地址增长\nstart: mov ax,cs\n    mov ss,ax\n    mov sp,30h\n\n    mov bx,0\n    mov cx,8\n\n;将对应元素放入栈中\ns:  push cs:[bx]\n    add bx,2\n    loop s\n\n;重置循环相关寄存器\n    mov bx,0\n    mov cs,8\n\n;将栈中元素依次放入原来的位置，但是顺序颠倒\ns0: pop cs:[bx]\n    add bx,2\n    loop s0\n\n    mov ax,4c00h\n    int 21h\ncodesg ends\nend start<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 栈的地址空间需要自己申请，并将ss:sp指向对应位置</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 栈从高地址向低地址增长</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 使用栈时要注意出栈、入栈顺序</div>\n\n<h4 id=\"1-4使用多个段\"><a href=\"#1-4使用多个段\" class=\"headerlink\" title=\"1.4使用多个段\"></a>1.4使用多个段</h4><p><strong>①意义</strong></p>\n<blockquote>\n<p>将<strong>不同的类型数据</strong>放入<strong>不同的段</strong>中<br>使用<strong>更大的内存空间</strong></p>\n</blockquote>\n<p><strong>②实例</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">assume cs:code,ds:data,ss:stack\n\ndata segment\n;定义8个字型数据\ndw 0123h,0456h,0789h,0abch,0defh,0fedh,0cbah,0987h\ndata ends\n\nstack segment\n;申请栈空间\ndw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\nstack ends\n\ncode segment\n;设置栈顶指针，注意栈是从高地址向低地址增长\nstart: mov ax,stack ;注意段寄存器名换为段名\n    mov ss,ax\n    mov sp,20h ;为什么变为20h？\n\n;ds指向data段\n    mov ax,data\n    mov ds,ax\n\n    mov bx,0\n    mov cx,8\n\n;将对应元素放入栈中\ns:  push [bx]\n    add bx,2\n    loop s\n\n;重置循环相关寄存器\n    mov bx,0\n    mov cs,8\n\n;将栈中元素依次放入原来的位置，但是顺序颠倒\ns0: pop [bx]\n    add bx,2\n    loop s0\n\n    mov ax,4c00h\n    int 21h\ncode ends\nend start<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 定义段，还需要申请一定大小的的内存</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> assume指令只是将段寄存器和对应段的名称联系到一起，并没有设定段寄存器的值，因为assume本质上还是一个伪指令，伪指令并不能控制cpu，还是需要修改ds、ss的值以访问对应段</div>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 段名本质上是一个字面值，不能直接将其存入段寄存器中</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mov ax,data\nmov ds,ax\n;而不是\nmov ds,data<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<hr>\n<h3 id=\"2-转移\"><a href=\"#2-转移\" class=\"headerlink\" title=\"2.转移\"></a>2.转移</h3><h4 id=\"2-1引言\"><a href=\"#2-1引言\" class=\"headerlink\" title=\"2.1引言\"></a>2.1引言</h4><p><strong>①转移指令</strong></p>\n<blockquote>\n<p>可以修改<code>IP</code>寄存器或者<strong>同时</strong>修改<code>CS</code>和<code>IP</code>寄存器的指令</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 转移指令可以控制CPU执行某一处代码</div>\n<p><strong>②分类</strong></p>\n<blockquote>\n<p><strong>段内转移</strong>：只修改<code>IP</code><br><strong>段间转移</strong>：同时修改<code>CS</code>和<code>IP</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 段内转移也可分为短转移和近转移</div>\n<blockquote>\n<p><strong>短转移</strong>：<code>IP</code>修改范围为<code>-128~127</code><br><strong>近转移</strong>：<code>IP</code>修改范围为<code>-32768~32767</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 注意这个范围限制，如果超出了对应的范围，会出错</div>\n<p><strong>③<code>offset</code>操作符</strong></p>\n<blockquote>\n<p>取得<strong>标号</strong>的<strong>偏移地址</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">assume cs:codesg\ncodesg segment\nstart: mov ax,offset start ;相当于mov ax，0，代码段的偏移地址从0开始\ns:     mov ax,offset s ;相当于mov ax，3，因为前一条指令占两个字节<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> seg会取得标号的段地址</div>\n\n<h4 id=\"2-2跳转指令\"><a href=\"#2-2跳转指令\" class=\"headerlink\" title=\"2.2跳转指令\"></a>2.2跳转指令</h4><p><strong>①格式</strong></p>\n<blockquote>\n<p><strong>标号转移</strong><br><code>jmp short 标号</code>：<strong>段内短转移</strong><br><code>jmp near ptr 标号</code>：<strong>段内近转移</strong><br><code>jmp far ptr 标号</code>：<strong>段间转移</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 标号实际上标识了一个地址</div>\n<blockquote>\n<p><strong>地址转移</strong><br><code>jmp 段地址：偏移地址</code>：将<code>CS:IP</code>修改为对应的地址<br><code>jmp 寄存器名</code>：将<code>IP</code>的值改为<strong>寄存器中数据</strong><br><code>jmp word ptr 内存单元地址</code>：从对应地址处读取<strong>一个字</strong>，用于修改<code>IP</code><br><code>jmp dword ptr 内存单元地址</code>从对应地址处读取<strong>两个字</strong>，<strong>高地址</strong>的字用于修改<code>CS</code>，<strong>低地址</strong>的字用于修改<code>IP</code></p>\n</blockquote>\n<blockquote>\n<p><strong>条件转移</strong><br><code>jcxz 标号</code>：如果<code>cx</code><strong>寄存器</strong>的值为0，则跳转到<strong>标号</strong>处，只能<strong>段内短转移</strong></p>\n</blockquote>\n<p><strong>②段内转移原理</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">assume cs:codesg\ncodesg segment\n\nstart: mov ax,0\n       jmp short s\n       add ax,1\ns:     inc ax\n\ncodesg ends\n\nend start<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>在<code>debug</code>中将上述程序其翻译为<strong>机器指令</strong>，可知<code>jmp short s</code>对应<strong>机器指令</strong>为<code>EB03</code></p>\n</blockquote>\n<p><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/HB_21.png\" alt=\"对应机器指令\"><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/HB_22.png\" alt=\"转移原理\"></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 段内转移对应机器指令并不包含目的地址信息，段内短转移是对IP进行八位位移，段内近转移是对IP进行十六位位移</div>\n\n\n<p><strong>③段间转移原理</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">assume cs:codesg\n\ncodesg segment\nstart: mov ax,0\n       mov bx,0\n       jmp far ptr s\n       db 256 dup (0)\ns:     add ax,1\n       inc ax\ncodesg ends\n\nend start<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>对应<strong>机器指令</strong>如下，<code>jmp far ptr s</code>对应机器指令为<code>EA0B01BD0B</code></p>\n</blockquote>\n<p><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/HB_23.png\" alt=\"对应机器指令\"></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 段间转移对应机器指令包含目的地址信息，BD0B为对应段地址0BBDH，0B01为对应偏移地址010BH</div>\n\n<h4 id=\"2-3循环指令\"><a href=\"#2-3循环指令\" class=\"headerlink\" title=\"2.3循环指令\"></a>2.3循环指令</h4><p><strong>①格式</strong>：<code>loop 标号</code></p>\n<blockquote>\n<p>当cpu执行到<code>loop</code>指令时，首先将<strong>循环寄存器</strong><code>cx</code>中的值<strong>减一</strong>，若cx中的值<strong>不为零</strong>，则<strong>返回标号处</strong>执行程序，反之向下执行</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 循环指令本质上是一个短转移</div>\n\n<p><strong>②实例</strong></p>\n<blockquote>\n<p>以下汇编程序计算了<code>2^12</code>的值</p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">assume cs:code\ncode segment\n    mov ax,2\n\n    mov cx,11\ns:  add ax.ax\n    loop s\n    mov ax,4c00h\n    int 21h\ncode ends\nend<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>③多重循环</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 因为只有一个循环寄存器，若要多重循环，则每次开始内层循环时，将外层循环的cx中的数值保存起来，在执行外层的循环时，再恢复外层循环的cx数</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 可以用栈、寄存器和某块特定内存（数据域中申请）存储数据</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">assume cs:codesg,ds:datasg,ss:stacksg\n\ndatasg segment\ndb 'ibm             '\ndb 'dec             '\ndb 'dos             '\ndb 'vax             '\ndatasg ends\n\nstacksg segment\ndw 0,0,0,0,0,0,0,0 ;定义一个栈段，容量为16字节\nstacksg ends\n\ncodesg segment\nstart:mov ax,stacksg ;将栈寄存器指向定义的栈段\n    mov ss,ax\n    mov sp,16\n\n    mov ax datasg ;找到对应的数据段\n    mov ds,ax\n    mov bx,0\n\n    mov cx,4\n\ns0: push cx ;保存外层循环的值\n    mov si,0\n    mov cx,3 ;将cx设置为内层循环的次数\n\ns:  mov al,[bx+si]\n    and al,11011111b ;将对应字母转化为大写\n    mov [bx+si],al\n    inc si ;si每次加1，进行精定位\n    loop s\n\n    add bx,16 ;bx每次加16，进行粗定位，移动到下一行\n    pop cx\n    \n    loop s0\n\n    mov ax,4c00H\n    int 21H\n\ncodesg ends\nend start<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/HB_20.png\" alt=\"图解\"></p>\n<h4 id=\"2-4栈跳转\"><a href=\"#2-4栈跳转\" class=\"headerlink\" title=\"2.4栈跳转\"></a>2.4栈跳转</h4><p><strong>①相关指令</strong></p>\n<blockquote>\n<p><code>ret</code>：使用<strong>栈中的数据</strong>修改<code>IP</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 相当于pop IP</div>\n<blockquote>\n<p><code>retf</code>：使用<strong>栈中的数据</strong>修改<code>CS</code>和<code>IP</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 相当于pop IP和pop CS</div>\n<blockquote>\n<p><code>call 标号</code>：将当前<code>IP</code><strong>压入栈</strong>中，并<strong>转移到标号处</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 相当于push IP和jmp near ptr 标号</div>\n<blockquote>\n<p><code>call 16位寄存器</code>：将当前<code>IP</code><strong>压入栈</strong>中，并将<code>IP</code>设置为<strong>对应寄存器值</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 相当于push IP和jmp 16位寄存器</div>\n<blockquote>\n<p><code>call word ptr 内存单元地址</code>：将当前<code>IP</code><strong>压入栈</strong>中，并将<code>IP</code>设置为<strong>对应内存单元数据</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 相当于push IP和jmp word ptr 内存单元地址</div>\n<blockquote>\n<p><code>call dword ptr 内存单元地址</code>：将当前<code>CS</code>和<code>IP</code><strong>压入栈</strong>中，并将<code>CS</code>和<code>IP</code>设置为<strong>对应内存单元数据</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 相当于push CS、push IP和jmp dword ptr 内存单元地址</div>\n\n<p><strong>②<code>call</code>和<code>ret</code>的配合使用</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">assume cs:code\ncode segment\nstart: mov ax,1\n       mov cx,3\n       call s\n       mov bx,ax\n       mov ax,4c00h\n       int 21\ns:     add ax,ax\n       loop s\n       ret\ncode ends\nend start<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><strong>程序过程概述</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>（1）</strong>当CPU读取<code>call s</code>指令后，<code>IP</code>指向了<strong>其后面</strong>的指令<code>mov bx,ax</code>，随后执行<code>call s</code>指令，将<strong>当前的<code>IP</code>值</strong>（<code>mov bx,ax</code>的偏移地址）<strong>压栈</strong>，并将<code>IP</code>指向标号<code>s</code><br><strong>（2）</strong>执行标号<code>s</code>处的循环，即<code>2^3</code><br><strong>（3）</strong>CPU读取<code>ret</code>指令，<code>IP</code>指向<code>ret</code>指令后的内存单元，CPU执行<code>ret</code>指令，此时<code>IP</code>指向<code>mov bx,ax</code>，随后执行至完成</p>\n</blockquote>\n<h3 id=\"3-模块化\"><a href=\"#3-模块化\" class=\"headerlink\" title=\"3.模块化\"></a>3.模块化</h3><h4 id=\"3-1模板\"><a href=\"#3-1模板\" class=\"headerlink\" title=\"3.1模板\"></a>3.1模板</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">assume cd:code\ncode segment\nmain:\n\n    ... ;主程序内容\n    mov ax,4c00h\n    int 21h\n\nsub1:\n\n    ... ;子程序1内容\n    \nsub2:\n\n    ... ;子程序2内容\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"3-2实例\"><a href=\"#3-2实例\" class=\"headerlink\" title=\"3.2实例\"></a>3.2实例</h4><blockquote>\n<p>计算<strong>一组数据</strong>的三次方，并保存在<strong>其后</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">assume cs:code\ndata segment\n    dw 1,2,3,4,5,6,7,8\n    dd 0,0,0,0,0,0,0,0\ndata ends\n\ncode segement\nstart: mov ax,data\n       mov ds,ax\n       mov si,0\n       mov di,16\n\n       mov cx,8\ns:     mov bx,[si]\n       call cube\n       mov [di],ax\n       mov [di].2,dx\n       add si,2\n       add di,4\n       loop s\n\n       mov ax,4c00h\n       int 21h\n\ncube:  mov ax,bx\n       mul bx\n       mul bx\n       ret\ncode ends\nend start<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"3-3批量数据传递\"><a href=\"#3-3批量数据传递\" class=\"headerlink\" title=\"3.3批量数据传递\"></a>3.3批量数据传递</h4><div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 利用循环以及寄存器</div>\n<blockquote>\n<p>将一段数据全部转化为<strong>大写</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">assume cs:code\n\ndata segment\n    db 'conversation'\ndata ends\n\ncode segment\nstart: mov ax,data\n       mov ds,ax\n       mov si,0\n\n       mov cx,12\n       call capital\n       mov ax,4c00h\n       int 21h\n\ncapital: and byte ptr [si],11011111b\n         inc si\n         loop capital\n         ret\ncode ends\nend start<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"3-4寄存器冲突\"><a href=\"#3-4寄存器冲突\" class=\"headerlink\" title=\"3.4寄存器冲突\"></a>3.4寄存器冲突</h4><div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 子程序和主程序寄存器冲突，在子程序开始之前将所有用到的寄存器中的内容保存起来，在子程序返回前在恢复</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">assume cs:code\ndata segment\n    db 'word',0\n    db 'unix',0\n    db 'wind',0\n    db 'good',0\ndata ends\n\ncode segment\nstart: mov ax,data\n       mov ds,ax\n       mov bx,0\n\n       mov cx,4\ns:     mov si,bx\n       call capital\n       add bx,5\n       loop s\n\ncapital: push cx\n         push si\n\nchange:  mov cl,[si]\n         mov ch,0\n         jcxz ok\n         and byte ptr [si],11011111b\n         inc si\n         jmp short change\n\nok:      pop si\n         pop cx\n         ret\n\ncode ends\nend start<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"汇编语言（二）\"><a href=\"#汇编语言（二）\" class=\"headerlink\" title=\"汇编语言（二）\"></a>汇编语言（二）</h1><h2 id=\"汇编语言基础\"><a href=\"#汇编语言基础\" class=\"headerlink\" title=\"汇编语言基础\"></a>汇编语言基础</h2><h3 id=\"1-程序分段\"><a href=\"#1-程序分段\" class=\"headerlink\" title=\"1.程序分段\"></a>1.程序分段</h3><blockquote>\n<p>主要可分为<strong>数据段、栈段和程序段</strong></p>\n</blockquote>\n<h4 id=\"1-1内存申请\"><a href=\"#1-1内存申请\" class=\"headerlink\" title=\"1.1内存申请\"></a>1.1内存申请</h4><div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 定义了多少数据，就相当于申请了对应长度的内存空间</div>\n<p><strong>①相关指令</strong></p>\n<blockquote>\n<p><code>db</code>：定义<strong>字节型数据</strong><br><code>db 数据1,数据2,...,数据N</code></p>\n</blockquote>\n<blockquote>\n<p><code>dw</code>：定义<strong>字型数据</strong><br><code>dw 数据1,数据2,...,数据N</code></p>\n</blockquote>\n<blockquote>\n<p><code>dd</code>：定义<strong>双字数据</strong><br><code>dd 数据1,数据2,...,数据N</code></p>\n</blockquote>\n<blockquote>\n<p><code>dup</code>：配合<code>db</code>、<code>dw</code>、<code>dd</code>进行<strong>重复数据的定义</strong><br><code>dd 重复次数 dup (重复数据列表)</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> dd 3 dup (0,1,2)相当于dd 0,1,2,0,1,2,0,1,2</div>\n\n<p><strong>②实例</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 由于dw指令在程序开头，故这些数据的地址从CS:0开始</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">assume cs:code\ncode segment\ndw 0123h,0456h,0789h,0abch,0defh,0fedh,0cbah,0987h\n\n    mov bx,0\n    mov ax,0\n\n    mov cx,8\n  s: add ax.cs:[bx]\n    add bx,2\n    loop s\n\n    mov ax,400ch\n    int 21h\n  code ends\n  end<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>③程序跟踪</strong></p>\n<blockquote>\n<p>使用<code>-u</code>查看程序内容，这些内容实际上是<code>dw</code><strong>定义的数据</strong>，但是被<code>debug</code>程序<strong>强行翻译为指令</strong></p>\n</blockquote>\n<p><img src=\"/image/HB_18.png\" alt=\"查看程序\"></p>\n<blockquote>\n<p>使用<code>-r</code>查看<strong>前十六个字节</strong>的详细内容</p>\n</blockquote>\n<p><img src=\"/image/HB_19.png\" alt=\"查看\"></p>\n<h4 id=\"1-2设置程序入口\"><a href=\"#1-2设置程序入口\" class=\"headerlink\" title=\"1.2设置程序入口\"></a>1.2设置程序入口</h4><p><strong>①<code>start</code>伪指令</strong>：将<code>CS:IP</code>指向对应地址</p>\n<blockquote>\n<p>上述程序<strong>不能正常运行</strong>，因为程序入口是<strong>数据强行翻译的指令</strong></p>\n</blockquote>\n<p><strong>②实例</strong></p>\n<blockquote>\n<p><code>end start</code>伪指令不仅仅描述<strong>程序的结束</strong>，也描述了<strong>程序的入口</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">assume cs:code\ncode segment\ndw 0123h,0456h,0789h,0abch,0defh,0fedh,0cbah,0987h\nstart: mov bx,0\n    mov ax,0\n\n    mov cx,8\n s: add ax.cs:[bx]\n    add bx,2\n    loop s\n\n    mov ax,400ch\n    int 21h\n  code ends\n  end start<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"1-3栈机制\"><a href=\"#1-3栈机制\" class=\"headerlink\" title=\"1.3栈机制\"></a>1.3栈机制</h4><p><strong>①引言</strong></p>\n<blockquote>\n<p><strong>概述</strong>：可以把<strong>一段内存</strong>当作<strong>栈</strong>来使用<br><code>push 容器</code>：将容器中数据放入<strong>栈顶</strong><br><code>pop 容器</code>：将栈顶数据弹出并<strong>存入容器</strong>中</p>\n</blockquote>\n<blockquote>\n<p><strong>相关寄存器</strong><br>段寄存器<code>SS</code>和寄存器<code>SP</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> SS:SP指向栈顶的物理地址</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 指定了SS，也就相当于指定了一段内存作为栈，一个栈段最大为64KB</div>\n\n<p><img src=\"/image/HB_2.png\" alt=\"CPU的栈机制\"><br><strong>②push和pop的详细过程</strong><br><img src=\"/image/HB_3.png\" alt=\"push\"><br><img src=\"/image/HB_4.png\" alt=\"pop\"></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 执行pop后，原来的栈顶元素并不会消失，直到被新push的元素覆盖</div>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 当栈满时push元素以及当栈空时pop元素，都会发生越界问题，需要自己注意</div>\n\n<p><strong>③实例</strong></p>\n<blockquote>\n<p><strong>概述</strong>：将一段内存中数据<strong>反序排列</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">assume cs:codesg\ncodesg segment\n\n;定义16个字型数据，其中0为字节型数据，将这段空间当作栈来使用\ndw 0123h,0456h,0789h,0abch,0defh,0fedh,0cbah,0987h\ndw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\n\n;设置栈顶指针，注意栈是从高地址向低地址增长\nstart: mov ax,cs\n    mov ss,ax\n    mov sp,30h\n\n    mov bx,0\n    mov cx,8\n\n;将对应元素放入栈中\ns:  push cs:[bx]\n    add bx,2\n    loop s\n\n;重置循环相关寄存器\n    mov bx,0\n    mov cs,8\n\n;将栈中元素依次放入原来的位置，但是顺序颠倒\ns0: pop cs:[bx]\n    add bx,2\n    loop s0\n\n    mov ax,4c00h\n    int 21h\ncodesg ends\nend start<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 栈的地址空间需要自己申请，并将ss:sp指向对应位置</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 栈从高地址向低地址增长</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 使用栈时要注意出栈、入栈顺序</div>\n\n<h4 id=\"1-4使用多个段\"><a href=\"#1-4使用多个段\" class=\"headerlink\" title=\"1.4使用多个段\"></a>1.4使用多个段</h4><p><strong>①意义</strong></p>\n<blockquote>\n<p>将<strong>不同的类型数据</strong>放入<strong>不同的段</strong>中<br>使用<strong>更大的内存空间</strong></p>\n</blockquote>\n<p><strong>②实例</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">assume cs:code,ds:data,ss:stack\n\ndata segment\n;定义8个字型数据\ndw 0123h,0456h,0789h,0abch,0defh,0fedh,0cbah,0987h\ndata ends\n\nstack segment\n;申请栈空间\ndw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\nstack ends\n\ncode segment\n;设置栈顶指针，注意栈是从高地址向低地址增长\nstart: mov ax,stack ;注意段寄存器名换为段名\n    mov ss,ax\n    mov sp,20h ;为什么变为20h？\n\n;ds指向data段\n    mov ax,data\n    mov ds,ax\n\n    mov bx,0\n    mov cx,8\n\n;将对应元素放入栈中\ns:  push [bx]\n    add bx,2\n    loop s\n\n;重置循环相关寄存器\n    mov bx,0\n    mov cs,8\n\n;将栈中元素依次放入原来的位置，但是顺序颠倒\ns0: pop [bx]\n    add bx,2\n    loop s0\n\n    mov ax,4c00h\n    int 21h\ncode ends\nend start<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 定义段，还需要申请一定大小的的内存</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> assume指令只是将段寄存器和对应段的名称联系到一起，并没有设定段寄存器的值，因为assume本质上还是一个伪指令，伪指令并不能控制cpu，还是需要修改ds、ss的值以访问对应段</div>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 段名本质上是一个字面值，不能直接将其存入段寄存器中</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mov ax,data\nmov ds,ax\n;而不是\nmov ds,data<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<hr>\n<h3 id=\"2-转移\"><a href=\"#2-转移\" class=\"headerlink\" title=\"2.转移\"></a>2.转移</h3><h4 id=\"2-1引言\"><a href=\"#2-1引言\" class=\"headerlink\" title=\"2.1引言\"></a>2.1引言</h4><p><strong>①转移指令</strong></p>\n<blockquote>\n<p>可以修改<code>IP</code>寄存器或者<strong>同时</strong>修改<code>CS</code>和<code>IP</code>寄存器的指令</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 转移指令可以控制CPU执行某一处代码</div>\n<p><strong>②分类</strong></p>\n<blockquote>\n<p><strong>段内转移</strong>：只修改<code>IP</code><br><strong>段间转移</strong>：同时修改<code>CS</code>和<code>IP</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 段内转移也可分为短转移和近转移</div>\n<blockquote>\n<p><strong>短转移</strong>：<code>IP</code>修改范围为<code>-128~127</code><br><strong>近转移</strong>：<code>IP</code>修改范围为<code>-32768~32767</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 注意这个范围限制，如果超出了对应的范围，会出错</div>\n<p><strong>③<code>offset</code>操作符</strong></p>\n<blockquote>\n<p>取得<strong>标号</strong>的<strong>偏移地址</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">assume cs:codesg\ncodesg segment\nstart: mov ax,offset start ;相当于mov ax，0，代码段的偏移地址从0开始\ns:     mov ax,offset s ;相当于mov ax，3，因为前一条指令占两个字节<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> seg会取得标号的段地址</div>\n\n<h4 id=\"2-2跳转指令\"><a href=\"#2-2跳转指令\" class=\"headerlink\" title=\"2.2跳转指令\"></a>2.2跳转指令</h4><p><strong>①格式</strong></p>\n<blockquote>\n<p><strong>标号转移</strong><br><code>jmp short 标号</code>：<strong>段内短转移</strong><br><code>jmp near ptr 标号</code>：<strong>段内近转移</strong><br><code>jmp far ptr 标号</code>：<strong>段间转移</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 标号实际上标识了一个地址</div>\n<blockquote>\n<p><strong>地址转移</strong><br><code>jmp 段地址：偏移地址</code>：将<code>CS:IP</code>修改为对应的地址<br><code>jmp 寄存器名</code>：将<code>IP</code>的值改为<strong>寄存器中数据</strong><br><code>jmp word ptr 内存单元地址</code>：从对应地址处读取<strong>一个字</strong>，用于修改<code>IP</code><br><code>jmp dword ptr 内存单元地址</code>从对应地址处读取<strong>两个字</strong>，<strong>高地址</strong>的字用于修改<code>CS</code>，<strong>低地址</strong>的字用于修改<code>IP</code></p>\n</blockquote>\n<blockquote>\n<p><strong>条件转移</strong><br><code>jcxz 标号</code>：如果<code>cx</code><strong>寄存器</strong>的值为0，则跳转到<strong>标号</strong>处，只能<strong>段内短转移</strong></p>\n</blockquote>\n<p><strong>②段内转移原理</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">assume cs:codesg\ncodesg segment\n\nstart: mov ax,0\n       jmp short s\n       add ax,1\ns:     inc ax\n\ncodesg ends\n\nend start<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>在<code>debug</code>中将上述程序其翻译为<strong>机器指令</strong>，可知<code>jmp short s</code>对应<strong>机器指令</strong>为<code>EB03</code></p>\n</blockquote>\n<p><img src=\"/image/HB_21.png\" alt=\"对应机器指令\"><br><img src=\"/image/HB_22.png\" alt=\"转移原理\"></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 段内转移对应机器指令并不包含目的地址信息，段内短转移是对IP进行八位位移，段内近转移是对IP进行十六位位移</div>\n\n\n<p><strong>③段间转移原理</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">assume cs:codesg\n\ncodesg segment\nstart: mov ax,0\n       mov bx,0\n       jmp far ptr s\n       db 256 dup (0)\ns:     add ax,1\n       inc ax\ncodesg ends\n\nend start<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>对应<strong>机器指令</strong>如下，<code>jmp far ptr s</code>对应机器指令为<code>EA0B01BD0B</code></p>\n</blockquote>\n<p><img src=\"/image/HB_23.png\" alt=\"对应机器指令\"></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 段间转移对应机器指令包含目的地址信息，BD0B为对应段地址0BBDH，0B01为对应偏移地址010BH</div>\n\n<h4 id=\"2-3循环指令\"><a href=\"#2-3循环指令\" class=\"headerlink\" title=\"2.3循环指令\"></a>2.3循环指令</h4><p><strong>①格式</strong>：<code>loop 标号</code></p>\n<blockquote>\n<p>当cpu执行到<code>loop</code>指令时，首先将<strong>循环寄存器</strong><code>cx</code>中的值<strong>减一</strong>，若cx中的值<strong>不为零</strong>，则<strong>返回标号处</strong>执行程序，反之向下执行</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 循环指令本质上是一个短转移</div>\n\n<p><strong>②实例</strong></p>\n<blockquote>\n<p>以下汇编程序计算了<code>2^12</code>的值</p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">assume cs:code\ncode segment\n    mov ax,2\n\n    mov cx,11\ns:  add ax.ax\n    loop s\n    mov ax,4c00h\n    int 21h\ncode ends\nend<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>③多重循环</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 因为只有一个循环寄存器，若要多重循环，则每次开始内层循环时，将外层循环的cx中的数值保存起来，在执行外层的循环时，再恢复外层循环的cx数</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 可以用栈、寄存器和某块特定内存（数据域中申请）存储数据</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">assume cs:codesg,ds:datasg,ss:stacksg\n\ndatasg segment\ndb &#39;ibm             &#39;\ndb &#39;dec             &#39;\ndb &#39;dos             &#39;\ndb &#39;vax             &#39;\ndatasg ends\n\nstacksg segment\ndw 0,0,0,0,0,0,0,0 ;定义一个栈段，容量为16字节\nstacksg ends\n\ncodesg segment\nstart:mov ax,stacksg ;将栈寄存器指向定义的栈段\n    mov ss,ax\n    mov sp,16\n\n    mov ax datasg ;找到对应的数据段\n    mov ds,ax\n    mov bx,0\n\n    mov cx,4\n\ns0: push cx ;保存外层循环的值\n    mov si,0\n    mov cx,3 ;将cx设置为内层循环的次数\n\ns:  mov al,[bx+si]\n    and al,11011111b ;将对应字母转化为大写\n    mov [bx+si],al\n    inc si ;si每次加1，进行精定位\n    loop s\n\n    add bx,16 ;bx每次加16，进行粗定位，移动到下一行\n    pop cx\n    \n    loop s0\n\n    mov ax,4c00H\n    int 21H\n\ncodesg ends\nend start<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"/image/HB_20.png\" alt=\"图解\"></p>\n<h4 id=\"2-4栈跳转\"><a href=\"#2-4栈跳转\" class=\"headerlink\" title=\"2.4栈跳转\"></a>2.4栈跳转</h4><p><strong>①相关指令</strong></p>\n<blockquote>\n<p><code>ret</code>：使用<strong>栈中的数据</strong>修改<code>IP</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 相当于pop IP</div>\n<blockquote>\n<p><code>retf</code>：使用<strong>栈中的数据</strong>修改<code>CS</code>和<code>IP</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 相当于pop IP和pop CS</div>\n<blockquote>\n<p><code>call 标号</code>：将当前<code>IP</code><strong>压入栈</strong>中，并<strong>转移到标号处</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 相当于push IP和jmp near ptr 标号</div>\n<blockquote>\n<p><code>call 16位寄存器</code>：将当前<code>IP</code><strong>压入栈</strong>中，并将<code>IP</code>设置为<strong>对应寄存器值</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 相当于push IP和jmp 16位寄存器</div>\n<blockquote>\n<p><code>call word ptr 内存单元地址</code>：将当前<code>IP</code><strong>压入栈</strong>中，并将<code>IP</code>设置为<strong>对应内存单元数据</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 相当于push IP和jmp word ptr 内存单元地址</div>\n<blockquote>\n<p><code>call dword ptr 内存单元地址</code>：将当前<code>CS</code>和<code>IP</code><strong>压入栈</strong>中，并将<code>CS</code>和<code>IP</code>设置为<strong>对应内存单元数据</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 相当于push CS、push IP和jmp dword ptr 内存单元地址</div>\n\n<p><strong>②<code>call</code>和<code>ret</code>的配合使用</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">assume cs:code\ncode segment\nstart: mov ax,1\n       mov cx,3\n       call s\n       mov bx,ax\n       mov ax,4c00h\n       int 21\ns:     add ax,ax\n       loop s\n       ret\ncode ends\nend start<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><strong>程序过程概述</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>（1）</strong>当CPU读取<code>call s</code>指令后，<code>IP</code>指向了<strong>其后面</strong>的指令<code>mov bx,ax</code>，随后执行<code>call s</code>指令，将<strong>当前的<code>IP</code>值</strong>（<code>mov bx,ax</code>的偏移地址）<strong>压栈</strong>，并将<code>IP</code>指向标号<code>s</code><br><strong>（2）</strong>执行标号<code>s</code>处的循环，即<code>2^3</code><br><strong>（3）</strong>CPU读取<code>ret</code>指令，<code>IP</code>指向<code>ret</code>指令后的内存单元，CPU执行<code>ret</code>指令，此时<code>IP</code>指向<code>mov bx,ax</code>，随后执行至完成</p>\n</blockquote>\n<h3 id=\"3-模块化\"><a href=\"#3-模块化\" class=\"headerlink\" title=\"3.模块化\"></a>3.模块化</h3><h4 id=\"3-1模板\"><a href=\"#3-1模板\" class=\"headerlink\" title=\"3.1模板\"></a>3.1模板</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">assume cd:code\ncode segment\nmain:\n\n    ... ;主程序内容\n    mov ax,4c00h\n    int 21h\n\nsub1:\n\n    ... ;子程序1内容\n    \nsub2:\n\n    ... ;子程序2内容\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"3-2实例\"><a href=\"#3-2实例\" class=\"headerlink\" title=\"3.2实例\"></a>3.2实例</h4><blockquote>\n<p>计算<strong>一组数据</strong>的三次方，并保存在<strong>其后</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">assume cs:code\ndata segment\n    dw 1,2,3,4,5,6,7,8\n    dd 0,0,0,0,0,0,0,0\ndata ends\n\ncode segement\nstart: mov ax,data\n       mov ds,ax\n       mov si,0\n       mov di,16\n\n       mov cx,8\ns:     mov bx,[si]\n       call cube\n       mov [di],ax\n       mov [di].2,dx\n       add si,2\n       add di,4\n       loop s\n\n       mov ax,4c00h\n       int 21h\n\ncube:  mov ax,bx\n       mul bx\n       mul bx\n       ret\ncode ends\nend start<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"3-3批量数据传递\"><a href=\"#3-3批量数据传递\" class=\"headerlink\" title=\"3.3批量数据传递\"></a>3.3批量数据传递</h4><div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 利用循环以及寄存器</div>\n<blockquote>\n<p>将一段数据全部转化为<strong>大写</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">assume cs:code\n\ndata segment\n    db &#39;conversation&#39;\ndata ends\n\ncode segment\nstart: mov ax,data\n       mov ds,ax\n       mov si,0\n\n       mov cx,12\n       call capital\n       mov ax,4c00h\n       int 21h\n\ncapital: and byte ptr [si],11011111b\n         inc si\n         loop capital\n         ret\ncode ends\nend start<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"3-4寄存器冲突\"><a href=\"#3-4寄存器冲突\" class=\"headerlink\" title=\"3.4寄存器冲突\"></a>3.4寄存器冲突</h4><div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 子程序和主程序寄存器冲突，在子程序开始之前将所有用到的寄存器中的内容保存起来，在子程序返回前在恢复</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">assume cs:code\ndata segment\n    db &#39;word&#39;,0\n    db &#39;unix&#39;,0\n    db &#39;wind&#39;,0\n    db &#39;good&#39;,0\ndata ends\n\ncode segment\nstart: mov ax,data\n       mov ds,ax\n       mov bx,0\n\n       mov cx,4\ns:     mov si,bx\n       call capital\n       add bx,5\n       loop s\n\ncapital: push cx\n         push si\n\nchange:  mov cl,[si]\n         mov ch,0\n         jcxz ok\n         and byte ptr [si],11011111b\n         inc si\n         jmp short change\n\nok:      pop si\n         pop cx\n         ret\n\ncode ends\nend start<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n"},{"title":"C语言学习笔记（二）","seo_title":"seo名称","toc":true,"indent":true,"top":false,"comments":1,"archive":true,"cover":false,"mathjax":false,"pin":false,"top_meta":false,"bottom_meta":false,"sidebar":["toc"],"keywords":"文章关键词","updated":"2023-11-07T14:10:58.014Z","date":"2023-11-07T14:10:58.014Z","img":"/medias/featureimages/0.webp","summary":"指针","_content":"# C语言学习笔记（二）\n## C语言基础\n### 1.指针\n#### 1.1内存和地址\n**①比特/位**\n>计算机的**最小存储单位**，可以存储1和0\n\n**②字节**\n>一个字节包含**8个比特**，包含存储**一个字符**所需要的位数，是计算机的**最小寻址单位**\n\n**③字**\n>每个字由**2（16位机器）或者4（32位机器）个字节**组成，每个字的地址是其**最左边或者最右边**的字节的地址，每台机器规定不同\n\n**④寻址**\n>高级语言一般通过**变量名**而不是地址访问内存位置，**变量名和地址的关系由编译器提供**，**硬件还是通过地址**访问内存位置\n{%list%}\n边界对齐：整型值存储的起始位置只能是某些特定的字节，通常是2和4的倍数\n{%endlist%}\n{%warning%}\n每个内存位置中存储的时一连串1和0，被解释为什么数据类型取决于我们的使用方式和声明方式，有些时候值可能是一样的但是被解释为了不同的数据类型\n{%endwarning%}\n\n#### 1.2指针变量\n**①声明格式**\n>`[指向变量的数据类型] *[指针变量名] = &[指向的变量]`\n>`*`为**间接访问操作符**，可以通过它**访问指针指向的地址**\n`&`为**取址符**，通过它可以**获得变量的地址**\n{%list%}\n对*指针变量进行操作相当于对其指向的变量进行操作\n{%endlist%}\n{%warning%}\n指针数据类型取决于指向的变量的数据类型，比如假设整数a的地址是100，不能使用*100 = 10对a进行赋值，因为100是字面量，缺省情况下是整型而不是指针变量，应该写为*（int*）100 = 10，该技巧只有在需要访问特定地址时才使用\n{%endwarning%}\n**②未初始化的指针**\n```\nint *a;\n*a = 12;\n```\n{%warning%}\n指针需要进行初始化，因为声明一个指针并不会创建一个存储空间，所以其指向也未知，可能指向非法地址（内存错误）或者导致储存地址处于错误的边界（总线错误），所以一定要对指针进行初始化*可以初始化为空指针，但是要进行空指针检查）\n{%endwarning%}\n**③NULL指针**\n>表示这个指针**没有指向任何地方**\n{%wrong%}\n注意对NULL指针进行引用是错误的，所以在对指针解引用时需要检查其是否为空指针\n{%endwrong%}\n**④指针的指针**\n>`int** a = &b`：其中b是一个指向整型变量的指针，a表示一个指向指向整型变量指针的指针\n\n**1.3指针与左右值**\n```\nint a = 10；\nint* b = &a；\n```\n**①**其中当`a`、`*b`（变量名）作为右值时，代表的是“10”，即对应位置储存的数据，作为左值时代表对应位置的地址\n**②**`&a`作为右值代表a的地址，不能作为左值，因为`&a`**不能代表内存中某一特定位置**\n**③**`b`作为右值是表示的是`a`的地址，作为左值表示的是`b`的地址\n**1.4指针表达式**\n**①**`*b+1`：表示对`a`中的数据加1，只能作为右值，`*（b+1）`相当于`a`后面一个内存的标识符，作为左值代表对应的地址，作为右值代表对应位置存储的数据。\n**②**`++b`：作为右值表示该指针指向位置的后一个位置的地址，作为左值是非法的\n**③**`b++`：作为右值表示的该指针指向位置的地址，随后该指针加一，作为左值是非法的，因为他是一个数值而不是一个容器\n**④**`*++b`：作为右值表示该指针指向位置后一个位置存放的数据，作为的左值表示的是该指针指向位置后一个位置\n**⑤**`*b++`：作为右值表示的是该指针指向位置存放的数据，作为左值表示的是该指针指向变量，随后该指针变量加一\n**⑥**`++*b`：作为右值表示的是b指向变量存放数据的值加一\n{%list%}\n++/--的优先级高于*\n{%endlist%}\n**1.5指针的运算**\n**①与整数加减法**：当对指针加减一个整数n时，该指针会**根据其指向的数据的类型调整自身大小**（也适用于malloc分配的内存）\n>比如某台机器上`float`占4个字节，对一个指向`float`变量的指针+n，该指针的大小会增加4n\n\n**②`==`与`!=`**\n>可以用于任意两个指针，判断两个指针是否相同\n\n**③指针之间的减法**\n>只有当两个指针都指向**同一数组**中的元素时，才允许用一个指针减去另一个指针，得到的数据类型是**ptrdiff_t**，这是一种有符号整数，表示两个指针指向位置的距离（以数组元素的长度为单位）\n\n**④关系运算（大于/小于）**：只能用于**同一个数组**内的元素\n{%warning%}\n③④中同一数组的元素还包括数组末尾后一位元素，但是不包括数组开头前一位元素\n{%endwarning%}\n\n**1.6函数指针**\n**①格式**：`返回类型 (*f)()`\n>可以解释为`f`被间接引用后是一个函数，该函数的返回值是一个整型，所以f为一个函数指针\n`()`为函数调用操作符，`f()`的结果是函数的返回值\n\n**②初始化：**`返回类型 (*f)(参数列表) = 函数名`\n{%warning%}\n在函数指针初始化时，其参数列表需要与之对应\n{%endwarning%}\n{%list%}\n其中函数名在编译时会被转换为函数指针，故可以不用取址符号\n{%endlist%}\n\n**③函数指针数组**：`返回类型 (*f[]) ();`\n>`()`和`[]`均为第一优先级，结合性**从左向右**，优先级均高于`*`\n```\ndouble  (*oper_func[])(double,double) = {a,b,c...};\nresult = oper_func[1](i,j);\n\n```\n\n**④用途**：构造泛型函数\n{%list%}\n泛型函数：可以处理不同数据类型的函数\n{%endlist%}\n{%right%}\n函数指针可以作为一个参数提供给另一个函数，使得该函数可以在另一个函数中使用，这些函数被称为回调函数\n{%endright%}\n>将函数中与数据类型相关的操作替换为**一系列等价的函数**，需要使用哪一类数据类型的对应操作，传递对应的函数指针即可\n将传递给**函数以及回调函数**的数据类型替换`*void`，`*void`用于接收不同数据类型的指针\n{%warning%}\n在使用这些数据的指针时，必须要强制转换为正确的数据类型\n{%endwarning%}\n```\n/*比较函数的整数版本\nint compare_ints(void const *a,void const *b)\n{\n\tif(*(int *)a = *(int *)b)\n\t\treturn 0;\n\telse\n\t\treturn 1;\n}\n```\n\n\n\n### 2.函数\n**2.1源文件格式**\n```\n返回类型 函数名（形参类型1 形参名1，...形参类型n 形参名n）\n{\n\tstatement；\n    return expression；\n}\n```\n>`return`语句不一定出现在末尾，没有`return`语句的函数称为**过程**\n**类型、形参和statement**都不是必须的，因此最简单的函数可以写为\n\n```\nvoid function （void）\n{\n\n}\n```\n{%list%}\n这种函数可以达到存根的目的,即为尚未编写的代码“占好位置”，可以保持程序在结构上的完整性，以便于你编译和测试程序的其他部分\n{%endlist%}\n{%right%}\n函数要考虑异常情况\n{%endright%}\n{%warning%}\n函数中的形参是实参的一个副本，修改形参不能修改实参，如果想要修改实参，需要传递实参的地址\n{%endwarning%}\n{%wrong%}\n当本该有参数的地方没有参数时，必须要使用void占据位置\n{%endwrong%}\n\n**2.2函数声明**\n**①格式**：`返回类型 函数名(形参类型n 形参名n);`\n>向编译器**提供函数相关信息**，如果没有对应的函数声明，函数会被调用，但是传递给函数的参数会进行**缺省参数提升**（`char`和`short`被转换为`int`，`float`被转化为`double`），且默认返回一个**整型**\n函数声明的结尾是有一个**分号**的，而函数定义没有\n\n{%right%}\n大部分时候将函数定义在单独的C文件中，然后将函数声明置于同一个头文件中，主函数文件使用include命令调用即可\n{%endright%}\n{%warning%}\n当调用函数时输入的变量类型不匹配，编译器会根据函数声明强制转换变量类型\n{%endwarning%}\n{%wrong%}\n函数原型不要写在代码块中，因为代码块中的函数原型有代码块作用域，可能会覆盖原来的函数声明\n{%endwrong%}\n**2.3利用函数实现黑盒**：利用`static`关键字修饰**函数内置数据和函数**，使其变为函数文件私有，外界不能访问\n**2.4递归函数**：直接或者间接**调用自身**的函数，当递归函数**不再满足某个条件**时，便停止调用自身\n以下为递归函数的例子\n```\nbinary_to_ascii(unsigned int value)\n{\n\tunsigned int a;\n\ta = value/10;\n\tif(a!=0)\n\t\tbinary_to_ascii(a)\n\tputchar(value%10+‘0)’;\n}\n```\n\n>递归的**实现过程**（假设一开始`value`的值为4267）\n①当函数被调用时，变量创建在堆栈中，之前调用函数的变量依旧保持在堆栈之中，但是**被新函数的变量掩盖所以不能被访问**（堆栈的特性）\n②所以当递归函数调用自身时，每次新的调用都会创建一批新的变量掩盖原来的变量\n③函数刚调用时，堆栈中出现了`value[1] = 4267`和`a[1] = 426`\n④当函数判断条件符合，又对函数进行第二次调用，堆栈中`value[2] = 426`、`a[2] = 42`掩盖了原先的`value`和`a`\n⑤第三次调用，`value[3] = 42`，`a[3] = 4`\n⑥第四次调用，`value[4] = 4`，`a[4] = 0`，至此，停止递归，然后函数开始打印输出，并开始释放销毁堆栈中的对应变量，**从顶端的变量开始释放**（堆栈的特性），从`[4]`到`[3]`到`[2]`再到`[1]`\n\n{%list%}\n递归函数需要设置限制条件，且每次递归调用之后就越接近该限制条件\n{%endlist%}\n{%wrong%}\n递归的计算代价非常大，如果可以使用循环等解决问题，不要使用递归\n{%endwrong%}\n**2.5可变参数列表**\n**①实现**：通过宏实现，定义于`stdarg.h`头文件中，该头文件中声明了一个`va_list`类型和三个宏`va_start`、`va_arg`和`va_end`\n**②用法**：\n```\n#include<stdarg.h>\n\n/*用于计算输入数字的平均数\nfloat average (int n_value,...)\n{\n\tva_list number_n;\n\tint count;\n\tfloat sum = 0;\n\tva_start(number_n,n_value);\n\tfor (count=0;count<n_value;count+=1)\n\t{\n\t\tsum = sum+va_arg(number_n,int);\n\t}\n\tva_end(number_n);\n\treturn sum/n_value;\n}\n```\n>在函数体内部定义`va_list`类型参数，该参数代表可变参数列表\n使用`va_statr`初始化`va_list`类型参数，该宏接收的第一个参数是`va_list`类型参数`number_n`，第二个参数是可变参数列表的前一个参数`n_value`\n使用`va_arg`代替可变参数进行计算，该宏接收的第一个参数是`va_list`类型参数`number_n`，第二个参数是可变参数列表的**数据类型**\n使用`va_end`注销可变参数列表\n\n{%list%}\n要使用该宏，则函数必须要有一个已确定的参数（上例中的n_value）\n{%endlist%}\n{%warning%}\n注意函数形参部分的写法，可变参数列表用...代替，在书写函数声明时，也需要注意\n{%endwarning%}\n\n### 3.数组\n**3.1声明格式**：`数据类型 数组名[数组大小]`\n**①数组名**：数组名的值是一个**指针常量**（注意是常量，所以不能改变），指向数组的起始位置\n>数组名不仅仅只是一个指针常量，还包含了**数组长度**等信息，在创建数组的时候编译器会根据其长度为**数组**划分对应的内存空间，随后为数组名划分内存；而创建指针的时候，**只为指针本身划分内存**\n\n{%list%}\n只有数组名在表达式中被使用了，编译器才会创建对应的指针常量\n{%endlist%}\n{%warning%}\n数组名在一些情况下不是一个指针，而是代表整个数组，比如sizeof（数组名）会返回整个数组的长度，&数组名产生的是一个数组的指针，而不是一个指向指针的指针\n{%endwarning%}\n**②下标引用**：`a[b]`相当于`*(a+b)`，**所以下标从0开始**\n>在C语言中，下标引用可以应用于**所有的指针**，不仅仅局限于数组\n\n{%list%}\n指针间接访问的效率大于等于下标引用效率，详细见《C与指针》p145-p150\n{%endlist%}\n{%wrong%}\n注意检查数组越界问题\n{%endwrong%}\n**3.2数组与函数**：数组做为**形参**，格式可以是`(数据类型 数组名[])`也可以是指针类型`(数据类型 *指针名)`\n>函数在声明数组参数时不需要指定他的长度，因为他只接受数组的地址，而不为其分配内存，所以如果需要知道数组的**大小**，还需要**另一个形参**\n\n{%list%}\n数组名传给形参是以传值的形式传递的，所以在函数中，对应指针变量是可以被修改的，但是不会影响到原来的数组名的值\n{%endlist%}\n**3.3初始化**\n**①格式**：`数据类型 数组名[] = {值1,值2,…}`\n>当数组为**静态变量**时，在**程序执行前**便被初始化，缺省情况下为**0**\n数组为**自动变量**（存储在堆栈中），在缺省情况下**无法被初始化**（因为每次程序流经过堆栈，堆栈中变量的位置是不固定的）\n\n{%right%}\n被初始化后，每次执行流经过数组的作用域时，数组又会被初始化一次（因为之前在作用域结束后被销毁），所以，对于那些非常大的数组 ，可以考虑将其设为static，减少其初始化次数\n{%endright%}\n**②不完整的初始化**\n>缺少元素：**优先填充前面的**，缺少的被命名为0\n缺少数组长度：编译器将其设置为刚好能够**容纳所有初始值**的大小\n\n**③字符数组的初始化**:`char a[] = “b”`相当于`char a = {'b',0}`\n{%warning%}\n只有在初始化字符数组时“b”才代表一个初始化列表，其他场合都为字符串常量，如下，message1是一个字符数组，message2是一个指向字符串字面值的指针\n{%endwarning%}\n```\nchar message1[] = \"hello\";\nchar *message2 = \"hello\";\n```\n\n**3.4多维数组**\n**①声明**：`数据类型 数组名 [维度1][维度2]…[维度N]`\n>`int a [3][6][9]`：可以解读为a数组有包含3个变量，这3个变量是个包含6个变量的数组，同时这6个变量又是包含9个变量的数组\n\n**②存储形式**：按照**最右边的下标**率先变化，比如`int *b = &a[1][3]`,`b++`为`a[2][0]`\n![a[3][4]](/image/C_1.png)\n**③数组名**：类比一维数组，将n维数组看为一个**元素是n-1维数组的一维数组**，数组名即**指向第一个n-1维数组的指针**\n>`int a[3][4]`，将其看成有三个包含四个元素的一维数组\n`a`：一个指向第一个包含**四个整型元素的数组**的指针\n`a+1`:指向的**第二个四元素的一维数组**的指针（指针的加减法法则是根据指针的类型决定的）\n`*(a+1)`：指向第二个包含四个元素数组的**第一个整型元素的指针**,注意这个还不是其中所包含的数据\n`*a+1`:指向第一个包含四个元素数组的第二个元素的指针\n`*(*a+1)`：为第一个包含四个元素数组的**第二个元素**\n\n{%right%}\n一层一层解引用，n维数组要解引用n次，才能获得数据\n{%endright%}\n**④多维数组的初始化**\n>以二维数组为例\n`int a[][] = {元素1、元素2…};`\n定义后，通过`a[i][j] = 数值;`，一个一个赋值\n`int a[][] = {{数组1}，{数组2}…};` \n{%right%}\n层层套娃\n{%endright%}\n\n**3.5多维数组与指针**\n**①指向数组的指针**：`数组元素数据类型 (*指针名)[数组元素个数] = 二维数组名`\n>**下标引用的优先级比间接访问高**，但是由于括号的存在，先执行的是间接访问，这样就将`p`定义为一个指针，**它指向的对象进行下标引用得到的是一个整型**，所以他是一个指向一维数组的指针，指向二维数组的第一行，该指针进行加法时，是**以一个数组为单位移动**的\n{%warning%}\n这里的数组元素个数与之对应，如int (*p)[4] = a;\n{%endwarning%}\n{%right%}\n将数组传递给一个函数，本质上是传递一个对应的指针，对于多维数组，就是传递一个指向数组的指针，对应函数原型应写为`void func1(int (*a)[4])`或者`void func1(int a[][4])`\n{%endright%}\n**②指向元素的指针**：`数组元素数据类型 *p = &数组名[0][0]`或者`数组元素数据类型 *p = 数组名[0]`（以二维数组为例）\n{%list%}\n注意后者是没有&符号的，因为后者就是一个指向元素的指针！\n{%endlist%}\n**③指针数组**：`数据类型* 数组名[个数]`\n{%warning%}\n与指向数组的指针仅仅只有一个括号之差\n{%endwarning%}\n\n\n### 4.结构\n**4.1格式**\n**①定义**\n```\nstruct [结构类型名称]\n{\n\t结构成员表(每个成员的类型和名字);\n};\n```\n{%list%}\n结构变量是标量类型，所以相同的结构变量可以相互赋值\n{%endlist%}\n{%right%}\n可以将结构定义在一个头文件中，使用include包含即可\n{%endright%}\n\n**②声明**：`struct 结构类型名称 结构名`\n{%right%}\n可以使用typedef关键字为结构定义新的名字\n{%endright%}\n\n```\ntypedef struct\n{\n\t结构成员表(每个成员的类型和名字);\n}[结构类型名称];\n```\n**③初始化与赋值**：`struct 结构名 变量名 = {成员1，成员2，成员3}`\n```\nstruct X\n{\n\tint a;\n\tshort b[3];\n\tsimple c;\n};\nstruct X x1 = {10,{1,2,3},{25,'x'}};\n```\n**④结构成员的访问**\n>`.`操作符：`结构名.成员名`\n`->`操作符：`对应结构指针->成员名`\n{%list%}\n这两个操作符优先级相同，比*和[]高，结合性从左向右\n{%endlist%}\n{%warning%}\n假设px是结构x的指针，px指向的地址和结构第一个成员的地址是一样的，但是*px代表的是整个结构\n{%endwarning%}\n{%right%}\n当结构需要作为函数参数时，可以传递该结构的指针，效率较高，可以用const关键词防止对结构体的修改\n{%endright%}\n**4.2结构的引用**\n**①结构的自引用**：结构内部成员为自己本身是非法的，但是可以**包含自己的指针类型**\n```\n//非法，因为在声明next成员时，Node还有没被声明\ntypedef struct\n{\n  ElemType data;\n  struct Node *next;\n}Node;\n//合法\ntypedef struct Node\n{\n  ElemType data;\n  struct Node *next;\n}Node;\n```\n{%list%}\n因为结构在定义时内存大小是不确定的，而结构指针的内存大小在结构创建前就已经确定\n{%endlist%}\n{%wrong%}\n注意不能使用之前没有定义的结构标签\n{%endwrong%}\n\n**②结构之间的引用**：当需要定义几种之间**存在联系**的结构，可以采用不完整声明\n```\nstruct B; //B的不完整声明\nstruct A\n{\n\tstruct *B;\n};\nstruct B\n{\n\tstruct A;\n};\n```\n{%wrong%}\n注意，A中不能以B为成员，只能以B的指针为成员，因为不完整声明导致B的大小不能确定\n{%endwrong%}\n\n\n**4.3结构的存储分配**\n**①**正常情况下，编译器按照**成员列表顺序**一个一个给每个成员分配内存\n**②**当成员的存储需要满足正确的边界对齐条件，成员之间会出现未填充的内存空间\n{%list%}\n边界对齐：访问特定类型变量的时候经常在特定的内存地址访问\n{%endlist%}\n>假设一台机器的整型值长度为4字节，且要求其**起始存储位置**必须能被4整除，而结构的起始位置也必须满足**成员中边界要求最严格**的对齐条件，则以下结构在内存中的存储情况如下\n```\nstruct X\n{\n\tchar a;\n\tint b;\n\tchar c;\n}\n```\n![内存分配情况](/image/C_3.png)\n**③对边界要求最严格的成员应该首先出现**，这样可以**节省内存**\n```\nstruct X\n{\n\n\tint b;\n\tchar a;\n\tchar c;\n}\n```\n![内存分配情况](/image/C_4.png)\n**④常用函数**：`sizeof`可以得到一个结构的整体长度，**包括因为边界对齐跳过的字节**，`offsetof`可以确定结构中某个成员的位置（偏离结构存储起始位置的字节数）\n**4.4位段**\n**①声明格式**：一种特殊的结构，成员必须是`int`、`signed`、`unsigned`类型，成员名后面是**一个冒号和一个整数，该整数表示该成员占用的位的数目**\n```\nstruct WeiDuan\n{\n\tunsigned a : 7;\n\tunsigned b : 6;\n\tunsigned c : 19;\n};\n```\n{%right%}\n位段可以将长度为奇数的数据包装在一起，并且可以访问一个整型值的部分内容（这些部分内容可能有特定的含义）\n{%endright%}\n{%warning%}\n显示的用signed和unsigned声明位段比较好，如果仅仅将位段声明为int类型，被解释为有符号数还是无符号数由编译器决定\n{%endwarning%}\n**②位段的移植性问题**\n>很多编译器将位段**成员**的长度限制在**一个整型值**之内，32位机器上可以使用的位段声明可能在16位机器上无法使用\n位段的内存是**从左向右**分配还是**从右向左**分配由机器决定\n当位段的**总位数不是8的倍数时**，其内存分配是否要“边界对齐”取决于编译器\n{%list%}\n任何使用位段实现的任务，都可以通过移位和屏蔽实现，但是会麻烦一些\n{%endlist%}\n\n**4.5联合**\n**①声明格式**\n```\nunion\n{\n\tfloat f;\n\tint i;\n}fi;\n```\n>联合各个成员**共用内存中的一个位置以及数据**，当联合的某个成员被访问时，则将该联合所在位置的位以该成员类型解释被访问，换句话说，**联合的各个成员决定了这些位是如何被解释的**\n\n**②联合的变体**：联合各个成员的长度可以不同，比如说两个结构\n{%list%}\n当联合中各个成员具有不同的长度，联合的长度就是它最长成员的长度\n{%endlist%}\n{%right%}\n当成员之间大小相差太大时，可以将联合的成员修改为不同数据类型的指针，这样就不会造成空间浪费\n{%endright%}\n**③联合的初始化**\n```\nunion\n{\n\tint a;\n\tfloat b;\n\tchar c[4];\n}x = {5};\n```\n{%list%}\n联合变量的初始值只有一个，且必须是联合第一个成员类型的数据\n{%endlist%}\n### 5.动态内存分配\n**5.1内存分配**\n**①**`malloc()`:从**内存池**中提取一块**连续**的内存，并返回一个**指向这块内存的指针**，如果内存池没有合适的内存则返回**NULL**，这块内存**没有被初始化**\n>格式：`p = malloc（size）;`\n`malloc()`返回值是`void *`，可以转化为任何类型的指针\n`size`为需要分配的**字节数**，其类型是`size_t`，一个**无符号类型**\n{%list%}\nmalloc()返回内存的起始位置始终满足边界对齐条件\n{%endlist%}\n{%right%}\n可以将size替换为n*sizeof（数据类型），n为数量，还可以提高程序的可移植性\n{%endright%}\n**②**`calloc()`：和`malloc`一样用于分配内存，但是`calloc`会将内存内所有元素初始化为0，会消耗一定的时间\n>格式：`p = calloc(num,size);`\n其中`num`为元素的个数，`size`为每个元素的大小，类型均为size_t\n\n**③**`realloc()`：**修改**一个已经分配的内存块的大小，新增加的内存添加到原先内存块的**尾部**，没有被初始化，如果用于缩小原来的内存块，则将**尾部**的内存块拿掉\n>格式：`p = realloc(ptr,size);`\n其中`ptr`是需要调整大小的指针，`size`是调整后内存的大小\n\n{%list%}\nC语言中，void*可以赋值给其他类型指针，但是在其他语言如C++中不行，故最好在前面加一个强制类型转换\n{%endlist%}\n{%warning%}\n若原先的内存块大小无法改变，则realloc会重新划分一块内存，并释放原来的内存，所以要使用realloc返回的指针\n{%endwarning%}\n{%wrong%}\n动态分配得到的指针是变量，但是我们不希望他改变，因为最后还需要释放掉，故有需要可以构建该指针的副本对内存进行操作\n{%endwrong%}\n\n**5.2内存释放**：当分配的内存不再使用时，需要使用`free()`将其释放\n**①函数原型**：`void free (void *pointer)`\n**②使用格式**：`free (p)`\n**5.3常见错误**\n**①**对NULL指针进行解引用\n**②**对分配的内存操作时越界\n**③**释放并为动态分配的内存\n**④**释放动态内存的一部分\n**⑤**访问一块已经被释放的内存，尤其是当内存分配指针被备份时\n**⑥**内存释放不及时，导致内存泄漏\n\n**5.4内存操作函数**\n{%list%}\n和字符串的一些操作函数很像，但是遇到NUL字节不会停止\n{%endlist%}\n**①**`memcpy()`：**直接复制**一块内存中数据到另一块内存中\n>函数原型`void *memcpy(void *dst,void const *src,size_t length)`\n{%list%}\n如上，内存操作函数接收和返回的参数都是void*，且会规定操作的内存长度\n{%endlist%}\n{%right%}\nlength是字节的个数，可以使用sizeof便捷计算\n{%endright%}\n{%warning%}\n两块内存不能重叠\n{%endwarning%}\n**②**`memmove()`：类似于`memcpy()`，但是`memmove()`在转移时会经过一块**临时内存**\n**③**`memcmp()`：比较两块内存的内容（按照无符号字符逐字节比较）\n{%warning%}\n不能用于比较非单字节数据\n{%endwarning%}\n**④**`memchr()`：查找某块内存某个字符**第一次出现**的位置\n**⑤**`memset()`：将一段内存**都设置**为某个字符","source":"_posts/C语言学习笔记（二）.md","raw":"---\ntitle: C语言学习笔记（二）\nseo_title: seo名称\ntoc: true\nindent: true\ntop: false\ncomments: true\narchive: true\ncover: false\nmathjax: false\npin: false\ntop_meta: false\nbottom_meta: false\nsidebar:\n  - toc\ntag:\n  - C语言\n  - 《C和指针》\ncategories: 编程语言\nkeywords: 文章关键词\nupdated: ''\ndate:\nimg: /medias/featureimages/0.webp\nsummary: 指针\n---\n# C语言学习笔记（二）\n## C语言基础\n### 1.指针\n#### 1.1内存和地址\n**①比特/位**\n>计算机的**最小存储单位**，可以存储1和0\n\n**②字节**\n>一个字节包含**8个比特**，包含存储**一个字符**所需要的位数，是计算机的**最小寻址单位**\n\n**③字**\n>每个字由**2（16位机器）或者4（32位机器）个字节**组成，每个字的地址是其**最左边或者最右边**的字节的地址，每台机器规定不同\n\n**④寻址**\n>高级语言一般通过**变量名**而不是地址访问内存位置，**变量名和地址的关系由编译器提供**，**硬件还是通过地址**访问内存位置\n{%list%}\n边界对齐：整型值存储的起始位置只能是某些特定的字节，通常是2和4的倍数\n{%endlist%}\n{%warning%}\n每个内存位置中存储的时一连串1和0，被解释为什么数据类型取决于我们的使用方式和声明方式，有些时候值可能是一样的但是被解释为了不同的数据类型\n{%endwarning%}\n\n#### 1.2指针变量\n**①声明格式**\n>`[指向变量的数据类型] *[指针变量名] = &[指向的变量]`\n>`*`为**间接访问操作符**，可以通过它**访问指针指向的地址**\n`&`为**取址符**，通过它可以**获得变量的地址**\n{%list%}\n对*指针变量进行操作相当于对其指向的变量进行操作\n{%endlist%}\n{%warning%}\n指针数据类型取决于指向的变量的数据类型，比如假设整数a的地址是100，不能使用*100 = 10对a进行赋值，因为100是字面量，缺省情况下是整型而不是指针变量，应该写为*（int*）100 = 10，该技巧只有在需要访问特定地址时才使用\n{%endwarning%}\n**②未初始化的指针**\n```\nint *a;\n*a = 12;\n```\n{%warning%}\n指针需要进行初始化，因为声明一个指针并不会创建一个存储空间，所以其指向也未知，可能指向非法地址（内存错误）或者导致储存地址处于错误的边界（总线错误），所以一定要对指针进行初始化*可以初始化为空指针，但是要进行空指针检查）\n{%endwarning%}\n**③NULL指针**\n>表示这个指针**没有指向任何地方**\n{%wrong%}\n注意对NULL指针进行引用是错误的，所以在对指针解引用时需要检查其是否为空指针\n{%endwrong%}\n**④指针的指针**\n>`int** a = &b`：其中b是一个指向整型变量的指针，a表示一个指向指向整型变量指针的指针\n\n**1.3指针与左右值**\n```\nint a = 10；\nint* b = &a；\n```\n**①**其中当`a`、`*b`（变量名）作为右值时，代表的是“10”，即对应位置储存的数据，作为左值时代表对应位置的地址\n**②**`&a`作为右值代表a的地址，不能作为左值，因为`&a`**不能代表内存中某一特定位置**\n**③**`b`作为右值是表示的是`a`的地址，作为左值表示的是`b`的地址\n**1.4指针表达式**\n**①**`*b+1`：表示对`a`中的数据加1，只能作为右值，`*（b+1）`相当于`a`后面一个内存的标识符，作为左值代表对应的地址，作为右值代表对应位置存储的数据。\n**②**`++b`：作为右值表示该指针指向位置的后一个位置的地址，作为左值是非法的\n**③**`b++`：作为右值表示的该指针指向位置的地址，随后该指针加一，作为左值是非法的，因为他是一个数值而不是一个容器\n**④**`*++b`：作为右值表示该指针指向位置后一个位置存放的数据，作为的左值表示的是该指针指向位置后一个位置\n**⑤**`*b++`：作为右值表示的是该指针指向位置存放的数据，作为左值表示的是该指针指向变量，随后该指针变量加一\n**⑥**`++*b`：作为右值表示的是b指向变量存放数据的值加一\n{%list%}\n++/--的优先级高于*\n{%endlist%}\n**1.5指针的运算**\n**①与整数加减法**：当对指针加减一个整数n时，该指针会**根据其指向的数据的类型调整自身大小**（也适用于malloc分配的内存）\n>比如某台机器上`float`占4个字节，对一个指向`float`变量的指针+n，该指针的大小会增加4n\n\n**②`==`与`!=`**\n>可以用于任意两个指针，判断两个指针是否相同\n\n**③指针之间的减法**\n>只有当两个指针都指向**同一数组**中的元素时，才允许用一个指针减去另一个指针，得到的数据类型是**ptrdiff_t**，这是一种有符号整数，表示两个指针指向位置的距离（以数组元素的长度为单位）\n\n**④关系运算（大于/小于）**：只能用于**同一个数组**内的元素\n{%warning%}\n③④中同一数组的元素还包括数组末尾后一位元素，但是不包括数组开头前一位元素\n{%endwarning%}\n\n**1.6函数指针**\n**①格式**：`返回类型 (*f)()`\n>可以解释为`f`被间接引用后是一个函数，该函数的返回值是一个整型，所以f为一个函数指针\n`()`为函数调用操作符，`f()`的结果是函数的返回值\n\n**②初始化：**`返回类型 (*f)(参数列表) = 函数名`\n{%warning%}\n在函数指针初始化时，其参数列表需要与之对应\n{%endwarning%}\n{%list%}\n其中函数名在编译时会被转换为函数指针，故可以不用取址符号\n{%endlist%}\n\n**③函数指针数组**：`返回类型 (*f[]) ();`\n>`()`和`[]`均为第一优先级，结合性**从左向右**，优先级均高于`*`\n```\ndouble  (*oper_func[])(double,double) = {a,b,c...};\nresult = oper_func[1](i,j);\n\n```\n\n**④用途**：构造泛型函数\n{%list%}\n泛型函数：可以处理不同数据类型的函数\n{%endlist%}\n{%right%}\n函数指针可以作为一个参数提供给另一个函数，使得该函数可以在另一个函数中使用，这些函数被称为回调函数\n{%endright%}\n>将函数中与数据类型相关的操作替换为**一系列等价的函数**，需要使用哪一类数据类型的对应操作，传递对应的函数指针即可\n将传递给**函数以及回调函数**的数据类型替换`*void`，`*void`用于接收不同数据类型的指针\n{%warning%}\n在使用这些数据的指针时，必须要强制转换为正确的数据类型\n{%endwarning%}\n```\n/*比较函数的整数版本\nint compare_ints(void const *a,void const *b)\n{\n\tif(*(int *)a = *(int *)b)\n\t\treturn 0;\n\telse\n\t\treturn 1;\n}\n```\n\n\n\n### 2.函数\n**2.1源文件格式**\n```\n返回类型 函数名（形参类型1 形参名1，...形参类型n 形参名n）\n{\n\tstatement；\n    return expression；\n}\n```\n>`return`语句不一定出现在末尾，没有`return`语句的函数称为**过程**\n**类型、形参和statement**都不是必须的，因此最简单的函数可以写为\n\n```\nvoid function （void）\n{\n\n}\n```\n{%list%}\n这种函数可以达到存根的目的,即为尚未编写的代码“占好位置”，可以保持程序在结构上的完整性，以便于你编译和测试程序的其他部分\n{%endlist%}\n{%right%}\n函数要考虑异常情况\n{%endright%}\n{%warning%}\n函数中的形参是实参的一个副本，修改形参不能修改实参，如果想要修改实参，需要传递实参的地址\n{%endwarning%}\n{%wrong%}\n当本该有参数的地方没有参数时，必须要使用void占据位置\n{%endwrong%}\n\n**2.2函数声明**\n**①格式**：`返回类型 函数名(形参类型n 形参名n);`\n>向编译器**提供函数相关信息**，如果没有对应的函数声明，函数会被调用，但是传递给函数的参数会进行**缺省参数提升**（`char`和`short`被转换为`int`，`float`被转化为`double`），且默认返回一个**整型**\n函数声明的结尾是有一个**分号**的，而函数定义没有\n\n{%right%}\n大部分时候将函数定义在单独的C文件中，然后将函数声明置于同一个头文件中，主函数文件使用include命令调用即可\n{%endright%}\n{%warning%}\n当调用函数时输入的变量类型不匹配，编译器会根据函数声明强制转换变量类型\n{%endwarning%}\n{%wrong%}\n函数原型不要写在代码块中，因为代码块中的函数原型有代码块作用域，可能会覆盖原来的函数声明\n{%endwrong%}\n**2.3利用函数实现黑盒**：利用`static`关键字修饰**函数内置数据和函数**，使其变为函数文件私有，外界不能访问\n**2.4递归函数**：直接或者间接**调用自身**的函数，当递归函数**不再满足某个条件**时，便停止调用自身\n以下为递归函数的例子\n```\nbinary_to_ascii(unsigned int value)\n{\n\tunsigned int a;\n\ta = value/10;\n\tif(a!=0)\n\t\tbinary_to_ascii(a)\n\tputchar(value%10+‘0)’;\n}\n```\n\n>递归的**实现过程**（假设一开始`value`的值为4267）\n①当函数被调用时，变量创建在堆栈中，之前调用函数的变量依旧保持在堆栈之中，但是**被新函数的变量掩盖所以不能被访问**（堆栈的特性）\n②所以当递归函数调用自身时，每次新的调用都会创建一批新的变量掩盖原来的变量\n③函数刚调用时，堆栈中出现了`value[1] = 4267`和`a[1] = 426`\n④当函数判断条件符合，又对函数进行第二次调用，堆栈中`value[2] = 426`、`a[2] = 42`掩盖了原先的`value`和`a`\n⑤第三次调用，`value[3] = 42`，`a[3] = 4`\n⑥第四次调用，`value[4] = 4`，`a[4] = 0`，至此，停止递归，然后函数开始打印输出，并开始释放销毁堆栈中的对应变量，**从顶端的变量开始释放**（堆栈的特性），从`[4]`到`[3]`到`[2]`再到`[1]`\n\n{%list%}\n递归函数需要设置限制条件，且每次递归调用之后就越接近该限制条件\n{%endlist%}\n{%wrong%}\n递归的计算代价非常大，如果可以使用循环等解决问题，不要使用递归\n{%endwrong%}\n**2.5可变参数列表**\n**①实现**：通过宏实现，定义于`stdarg.h`头文件中，该头文件中声明了一个`va_list`类型和三个宏`va_start`、`va_arg`和`va_end`\n**②用法**：\n```\n#include<stdarg.h>\n\n/*用于计算输入数字的平均数\nfloat average (int n_value,...)\n{\n\tva_list number_n;\n\tint count;\n\tfloat sum = 0;\n\tva_start(number_n,n_value);\n\tfor (count=0;count<n_value;count+=1)\n\t{\n\t\tsum = sum+va_arg(number_n,int);\n\t}\n\tva_end(number_n);\n\treturn sum/n_value;\n}\n```\n>在函数体内部定义`va_list`类型参数，该参数代表可变参数列表\n使用`va_statr`初始化`va_list`类型参数，该宏接收的第一个参数是`va_list`类型参数`number_n`，第二个参数是可变参数列表的前一个参数`n_value`\n使用`va_arg`代替可变参数进行计算，该宏接收的第一个参数是`va_list`类型参数`number_n`，第二个参数是可变参数列表的**数据类型**\n使用`va_end`注销可变参数列表\n\n{%list%}\n要使用该宏，则函数必须要有一个已确定的参数（上例中的n_value）\n{%endlist%}\n{%warning%}\n注意函数形参部分的写法，可变参数列表用...代替，在书写函数声明时，也需要注意\n{%endwarning%}\n\n### 3.数组\n**3.1声明格式**：`数据类型 数组名[数组大小]`\n**①数组名**：数组名的值是一个**指针常量**（注意是常量，所以不能改变），指向数组的起始位置\n>数组名不仅仅只是一个指针常量，还包含了**数组长度**等信息，在创建数组的时候编译器会根据其长度为**数组**划分对应的内存空间，随后为数组名划分内存；而创建指针的时候，**只为指针本身划分内存**\n\n{%list%}\n只有数组名在表达式中被使用了，编译器才会创建对应的指针常量\n{%endlist%}\n{%warning%}\n数组名在一些情况下不是一个指针，而是代表整个数组，比如sizeof（数组名）会返回整个数组的长度，&数组名产生的是一个数组的指针，而不是一个指向指针的指针\n{%endwarning%}\n**②下标引用**：`a[b]`相当于`*(a+b)`，**所以下标从0开始**\n>在C语言中，下标引用可以应用于**所有的指针**，不仅仅局限于数组\n\n{%list%}\n指针间接访问的效率大于等于下标引用效率，详细见《C与指针》p145-p150\n{%endlist%}\n{%wrong%}\n注意检查数组越界问题\n{%endwrong%}\n**3.2数组与函数**：数组做为**形参**，格式可以是`(数据类型 数组名[])`也可以是指针类型`(数据类型 *指针名)`\n>函数在声明数组参数时不需要指定他的长度，因为他只接受数组的地址，而不为其分配内存，所以如果需要知道数组的**大小**，还需要**另一个形参**\n\n{%list%}\n数组名传给形参是以传值的形式传递的，所以在函数中，对应指针变量是可以被修改的，但是不会影响到原来的数组名的值\n{%endlist%}\n**3.3初始化**\n**①格式**：`数据类型 数组名[] = {值1,值2,…}`\n>当数组为**静态变量**时，在**程序执行前**便被初始化，缺省情况下为**0**\n数组为**自动变量**（存储在堆栈中），在缺省情况下**无法被初始化**（因为每次程序流经过堆栈，堆栈中变量的位置是不固定的）\n\n{%right%}\n被初始化后，每次执行流经过数组的作用域时，数组又会被初始化一次（因为之前在作用域结束后被销毁），所以，对于那些非常大的数组 ，可以考虑将其设为static，减少其初始化次数\n{%endright%}\n**②不完整的初始化**\n>缺少元素：**优先填充前面的**，缺少的被命名为0\n缺少数组长度：编译器将其设置为刚好能够**容纳所有初始值**的大小\n\n**③字符数组的初始化**:`char a[] = “b”`相当于`char a = {'b',0}`\n{%warning%}\n只有在初始化字符数组时“b”才代表一个初始化列表，其他场合都为字符串常量，如下，message1是一个字符数组，message2是一个指向字符串字面值的指针\n{%endwarning%}\n```\nchar message1[] = \"hello\";\nchar *message2 = \"hello\";\n```\n\n**3.4多维数组**\n**①声明**：`数据类型 数组名 [维度1][维度2]…[维度N]`\n>`int a [3][6][9]`：可以解读为a数组有包含3个变量，这3个变量是个包含6个变量的数组，同时这6个变量又是包含9个变量的数组\n\n**②存储形式**：按照**最右边的下标**率先变化，比如`int *b = &a[1][3]`,`b++`为`a[2][0]`\n![a[3][4]](/image/C_1.png)\n**③数组名**：类比一维数组，将n维数组看为一个**元素是n-1维数组的一维数组**，数组名即**指向第一个n-1维数组的指针**\n>`int a[3][4]`，将其看成有三个包含四个元素的一维数组\n`a`：一个指向第一个包含**四个整型元素的数组**的指针\n`a+1`:指向的**第二个四元素的一维数组**的指针（指针的加减法法则是根据指针的类型决定的）\n`*(a+1)`：指向第二个包含四个元素数组的**第一个整型元素的指针**,注意这个还不是其中所包含的数据\n`*a+1`:指向第一个包含四个元素数组的第二个元素的指针\n`*(*a+1)`：为第一个包含四个元素数组的**第二个元素**\n\n{%right%}\n一层一层解引用，n维数组要解引用n次，才能获得数据\n{%endright%}\n**④多维数组的初始化**\n>以二维数组为例\n`int a[][] = {元素1、元素2…};`\n定义后，通过`a[i][j] = 数值;`，一个一个赋值\n`int a[][] = {{数组1}，{数组2}…};` \n{%right%}\n层层套娃\n{%endright%}\n\n**3.5多维数组与指针**\n**①指向数组的指针**：`数组元素数据类型 (*指针名)[数组元素个数] = 二维数组名`\n>**下标引用的优先级比间接访问高**，但是由于括号的存在，先执行的是间接访问，这样就将`p`定义为一个指针，**它指向的对象进行下标引用得到的是一个整型**，所以他是一个指向一维数组的指针，指向二维数组的第一行，该指针进行加法时，是**以一个数组为单位移动**的\n{%warning%}\n这里的数组元素个数与之对应，如int (*p)[4] = a;\n{%endwarning%}\n{%right%}\n将数组传递给一个函数，本质上是传递一个对应的指针，对于多维数组，就是传递一个指向数组的指针，对应函数原型应写为`void func1(int (*a)[4])`或者`void func1(int a[][4])`\n{%endright%}\n**②指向元素的指针**：`数组元素数据类型 *p = &数组名[0][0]`或者`数组元素数据类型 *p = 数组名[0]`（以二维数组为例）\n{%list%}\n注意后者是没有&符号的，因为后者就是一个指向元素的指针！\n{%endlist%}\n**③指针数组**：`数据类型* 数组名[个数]`\n{%warning%}\n与指向数组的指针仅仅只有一个括号之差\n{%endwarning%}\n\n\n### 4.结构\n**4.1格式**\n**①定义**\n```\nstruct [结构类型名称]\n{\n\t结构成员表(每个成员的类型和名字);\n};\n```\n{%list%}\n结构变量是标量类型，所以相同的结构变量可以相互赋值\n{%endlist%}\n{%right%}\n可以将结构定义在一个头文件中，使用include包含即可\n{%endright%}\n\n**②声明**：`struct 结构类型名称 结构名`\n{%right%}\n可以使用typedef关键字为结构定义新的名字\n{%endright%}\n\n```\ntypedef struct\n{\n\t结构成员表(每个成员的类型和名字);\n}[结构类型名称];\n```\n**③初始化与赋值**：`struct 结构名 变量名 = {成员1，成员2，成员3}`\n```\nstruct X\n{\n\tint a;\n\tshort b[3];\n\tsimple c;\n};\nstruct X x1 = {10,{1,2,3},{25,'x'}};\n```\n**④结构成员的访问**\n>`.`操作符：`结构名.成员名`\n`->`操作符：`对应结构指针->成员名`\n{%list%}\n这两个操作符优先级相同，比*和[]高，结合性从左向右\n{%endlist%}\n{%warning%}\n假设px是结构x的指针，px指向的地址和结构第一个成员的地址是一样的，但是*px代表的是整个结构\n{%endwarning%}\n{%right%}\n当结构需要作为函数参数时，可以传递该结构的指针，效率较高，可以用const关键词防止对结构体的修改\n{%endright%}\n**4.2结构的引用**\n**①结构的自引用**：结构内部成员为自己本身是非法的，但是可以**包含自己的指针类型**\n```\n//非法，因为在声明next成员时，Node还有没被声明\ntypedef struct\n{\n  ElemType data;\n  struct Node *next;\n}Node;\n//合法\ntypedef struct Node\n{\n  ElemType data;\n  struct Node *next;\n}Node;\n```\n{%list%}\n因为结构在定义时内存大小是不确定的，而结构指针的内存大小在结构创建前就已经确定\n{%endlist%}\n{%wrong%}\n注意不能使用之前没有定义的结构标签\n{%endwrong%}\n\n**②结构之间的引用**：当需要定义几种之间**存在联系**的结构，可以采用不完整声明\n```\nstruct B; //B的不完整声明\nstruct A\n{\n\tstruct *B;\n};\nstruct B\n{\n\tstruct A;\n};\n```\n{%wrong%}\n注意，A中不能以B为成员，只能以B的指针为成员，因为不完整声明导致B的大小不能确定\n{%endwrong%}\n\n\n**4.3结构的存储分配**\n**①**正常情况下，编译器按照**成员列表顺序**一个一个给每个成员分配内存\n**②**当成员的存储需要满足正确的边界对齐条件，成员之间会出现未填充的内存空间\n{%list%}\n边界对齐：访问特定类型变量的时候经常在特定的内存地址访问\n{%endlist%}\n>假设一台机器的整型值长度为4字节，且要求其**起始存储位置**必须能被4整除，而结构的起始位置也必须满足**成员中边界要求最严格**的对齐条件，则以下结构在内存中的存储情况如下\n```\nstruct X\n{\n\tchar a;\n\tint b;\n\tchar c;\n}\n```\n![内存分配情况](/image/C_3.png)\n**③对边界要求最严格的成员应该首先出现**，这样可以**节省内存**\n```\nstruct X\n{\n\n\tint b;\n\tchar a;\n\tchar c;\n}\n```\n![内存分配情况](/image/C_4.png)\n**④常用函数**：`sizeof`可以得到一个结构的整体长度，**包括因为边界对齐跳过的字节**，`offsetof`可以确定结构中某个成员的位置（偏离结构存储起始位置的字节数）\n**4.4位段**\n**①声明格式**：一种特殊的结构，成员必须是`int`、`signed`、`unsigned`类型，成员名后面是**一个冒号和一个整数，该整数表示该成员占用的位的数目**\n```\nstruct WeiDuan\n{\n\tunsigned a : 7;\n\tunsigned b : 6;\n\tunsigned c : 19;\n};\n```\n{%right%}\n位段可以将长度为奇数的数据包装在一起，并且可以访问一个整型值的部分内容（这些部分内容可能有特定的含义）\n{%endright%}\n{%warning%}\n显示的用signed和unsigned声明位段比较好，如果仅仅将位段声明为int类型，被解释为有符号数还是无符号数由编译器决定\n{%endwarning%}\n**②位段的移植性问题**\n>很多编译器将位段**成员**的长度限制在**一个整型值**之内，32位机器上可以使用的位段声明可能在16位机器上无法使用\n位段的内存是**从左向右**分配还是**从右向左**分配由机器决定\n当位段的**总位数不是8的倍数时**，其内存分配是否要“边界对齐”取决于编译器\n{%list%}\n任何使用位段实现的任务，都可以通过移位和屏蔽实现，但是会麻烦一些\n{%endlist%}\n\n**4.5联合**\n**①声明格式**\n```\nunion\n{\n\tfloat f;\n\tint i;\n}fi;\n```\n>联合各个成员**共用内存中的一个位置以及数据**，当联合的某个成员被访问时，则将该联合所在位置的位以该成员类型解释被访问，换句话说，**联合的各个成员决定了这些位是如何被解释的**\n\n**②联合的变体**：联合各个成员的长度可以不同，比如说两个结构\n{%list%}\n当联合中各个成员具有不同的长度，联合的长度就是它最长成员的长度\n{%endlist%}\n{%right%}\n当成员之间大小相差太大时，可以将联合的成员修改为不同数据类型的指针，这样就不会造成空间浪费\n{%endright%}\n**③联合的初始化**\n```\nunion\n{\n\tint a;\n\tfloat b;\n\tchar c[4];\n}x = {5};\n```\n{%list%}\n联合变量的初始值只有一个，且必须是联合第一个成员类型的数据\n{%endlist%}\n### 5.动态内存分配\n**5.1内存分配**\n**①**`malloc()`:从**内存池**中提取一块**连续**的内存，并返回一个**指向这块内存的指针**，如果内存池没有合适的内存则返回**NULL**，这块内存**没有被初始化**\n>格式：`p = malloc（size）;`\n`malloc()`返回值是`void *`，可以转化为任何类型的指针\n`size`为需要分配的**字节数**，其类型是`size_t`，一个**无符号类型**\n{%list%}\nmalloc()返回内存的起始位置始终满足边界对齐条件\n{%endlist%}\n{%right%}\n可以将size替换为n*sizeof（数据类型），n为数量，还可以提高程序的可移植性\n{%endright%}\n**②**`calloc()`：和`malloc`一样用于分配内存，但是`calloc`会将内存内所有元素初始化为0，会消耗一定的时间\n>格式：`p = calloc(num,size);`\n其中`num`为元素的个数，`size`为每个元素的大小，类型均为size_t\n\n**③**`realloc()`：**修改**一个已经分配的内存块的大小，新增加的内存添加到原先内存块的**尾部**，没有被初始化，如果用于缩小原来的内存块，则将**尾部**的内存块拿掉\n>格式：`p = realloc(ptr,size);`\n其中`ptr`是需要调整大小的指针，`size`是调整后内存的大小\n\n{%list%}\nC语言中，void*可以赋值给其他类型指针，但是在其他语言如C++中不行，故最好在前面加一个强制类型转换\n{%endlist%}\n{%warning%}\n若原先的内存块大小无法改变，则realloc会重新划分一块内存，并释放原来的内存，所以要使用realloc返回的指针\n{%endwarning%}\n{%wrong%}\n动态分配得到的指针是变量，但是我们不希望他改变，因为最后还需要释放掉，故有需要可以构建该指针的副本对内存进行操作\n{%endwrong%}\n\n**5.2内存释放**：当分配的内存不再使用时，需要使用`free()`将其释放\n**①函数原型**：`void free (void *pointer)`\n**②使用格式**：`free (p)`\n**5.3常见错误**\n**①**对NULL指针进行解引用\n**②**对分配的内存操作时越界\n**③**释放并为动态分配的内存\n**④**释放动态内存的一部分\n**⑤**访问一块已经被释放的内存，尤其是当内存分配指针被备份时\n**⑥**内存释放不及时，导致内存泄漏\n\n**5.4内存操作函数**\n{%list%}\n和字符串的一些操作函数很像，但是遇到NUL字节不会停止\n{%endlist%}\n**①**`memcpy()`：**直接复制**一块内存中数据到另一块内存中\n>函数原型`void *memcpy(void *dst,void const *src,size_t length)`\n{%list%}\n如上，内存操作函数接收和返回的参数都是void*，且会规定操作的内存长度\n{%endlist%}\n{%right%}\nlength是字节的个数，可以使用sizeof便捷计算\n{%endright%}\n{%warning%}\n两块内存不能重叠\n{%endwarning%}\n**②**`memmove()`：类似于`memcpy()`，但是`memmove()`在转移时会经过一块**临时内存**\n**③**`memcmp()`：比较两块内存的内容（按照无符号字符逐字节比较）\n{%warning%}\n不能用于比较非单字节数据\n{%endwarning%}\n**④**`memchr()`：查找某块内存某个字符**第一次出现**的位置\n**⑤**`memset()`：将一段内存**都设置**为某个字符","slug":"C语言学习笔记（二）","published":1,"_id":"clmru730l0000osvdhqlhe0uz","layout":"post","photos":[],"link":"","content":"<h1 id=\"C语言学习笔记（二）\"><a href=\"#C语言学习笔记（二）\" class=\"headerlink\" title=\"C语言学习笔记（二）\"></a>C语言学习笔记（二）</h1><h2 id=\"C语言基础\"><a href=\"#C语言基础\" class=\"headerlink\" title=\"C语言基础\"></a>C语言基础</h2><h3 id=\"1-指针\"><a href=\"#1-指针\" class=\"headerlink\" title=\"1.指针\"></a>1.指针</h3><h4 id=\"1-1内存和地址\"><a href=\"#1-1内存和地址\" class=\"headerlink\" title=\"1.1内存和地址\"></a>1.1内存和地址</h4><p><strong>①比特/位</strong></p>\n<blockquote>\n<p>计算机的<strong>最小存储单位</strong>，可以存储1和0</p>\n</blockquote>\n<p><strong>②字节</strong></p>\n<blockquote>\n<p>一个字节包含<strong>8个比特</strong>，包含存储<strong>一个字符</strong>所需要的位数，是计算机的<strong>最小寻址单位</strong></p>\n</blockquote>\n<p><strong>③字</strong></p>\n<blockquote>\n<p>每个字由<strong>2（16位机器）或者4（32位机器）个字节</strong>组成，每个字的地址是其<strong>最左边或者最右边</strong>的字节的地址，每台机器规定不同</p>\n</blockquote>\n<p><strong>④寻址</strong></p>\n<blockquote>\n<p>高级语言一般通过<strong>变量名</strong>而不是地址访问内存位置，<strong>变量名和地址的关系由编译器提供</strong>，<strong>硬件还是通过地址</strong>访问内存位置</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 边界对齐：整型值存储的起始位置只能是某些特定的字节，通常是2和4的倍数</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 每个内存位置中存储的时一连串1和0，被解释为什么数据类型取决于我们的使用方式和声明方式，有些时候值可能是一样的但是被解释为了不同的数据类型</div>\n\n<h4 id=\"1-2指针变量\"><a href=\"#1-2指针变量\" class=\"headerlink\" title=\"1.2指针变量\"></a>1.2指针变量</h4><p><strong>①声明格式</strong></p>\n<blockquote>\n<p><code>[指向变量的数据类型] *[指针变量名] = &amp;[指向的变量]</code><br><code>*</code>为<strong>间接访问操作符</strong>，可以通过它<strong>访问指针指向的地址</strong><br><code>&amp;</code>为<strong>取址符</strong>，通过它可以<strong>获得变量的地址</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 对*指针变量进行操作相当于对其指向的变量进行操作</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 指针数据类型取决于指向的变量的数据类型，比如假设整数a的地址是100，不能使用*100 = 10对a进行赋值，因为100是字面量，缺省情况下是整型而不是指针变量，应该写为*（int*）100 = 10，该技巧只有在需要访问特定地址时才使用</div>\n<p><strong>②未初始化的指针</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">int *a;\n*a = 12;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 指针需要进行初始化，因为声明一个指针并不会创建一个存储空间，所以其指向也未知，可能指向非法地址（内存错误）或者导致储存地址处于错误的边界（总线错误），所以一定要对指针进行初始化*可以初始化为空指针，但是要进行空指针检查）</div>\n<p><strong>③NULL指针</strong></p>\n<blockquote>\n<p>表示这个指针<strong>没有指向任何地方</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 注意对NULL指针进行引用是错误的，所以在对指针解引用时需要检查其是否为空指针</div>\n<p><strong>④指针的指针</strong></p>\n<blockquote>\n<p><code>int** a = &amp;b</code>：其中b是一个指向整型变量的指针，a表示一个指向指向整型变量指针的指针</p>\n</blockquote>\n<p><strong>1.3指针与左右值</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">int a = 10；\nint* b = &amp;a；<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><strong>①</strong>其中当<code>a</code>、<code>*b</code>（变量名）作为右值时，代表的是“10”，即对应位置储存的数据，作为左值时代表对应位置的地址<br><strong>②</strong><code>&amp;a</code>作为右值代表a的地址，不能作为左值，因为<code>&amp;a</code><strong>不能代表内存中某一特定位置</strong><br><strong>③</strong><code>b</code>作为右值是表示的是<code>a</code>的地址，作为左值表示的是<code>b</code>的地址<br><strong>1.4指针表达式</strong><br><strong>①</strong><code>*b+1</code>：表示对<code>a</code>中的数据加1，只能作为右值，<code>*（b+1）</code>相当于<code>a</code>后面一个内存的标识符，作为左值代表对应的地址，作为右值代表对应位置存储的数据。<br><strong>②</strong><code>++b</code>：作为右值表示该指针指向位置的后一个位置的地址，作为左值是非法的<br><strong>③</strong><code>b++</code>：作为右值表示的该指针指向位置的地址，随后该指针加一，作为左值是非法的，因为他是一个数值而不是一个容器<br><strong>④</strong><code>*++b</code>：作为右值表示该指针指向位置后一个位置存放的数据，作为的左值表示的是该指针指向位置后一个位置<br><strong>⑤</strong><code>*b++</code>：作为右值表示的是该指针指向位置存放的数据，作为左值表示的是该指针指向变量，随后该指针变量加一<br><strong>⑥</strong><code>++*b</code>：作为右值表示的是b指向变量存放数据的值加一</p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> ++/--的优先级高于*</div>\n<p><strong>1.5指针的运算</strong><br><strong>①与整数加减法</strong>：当对指针加减一个整数n时，该指针会<strong>根据其指向的数据的类型调整自身大小</strong>（也适用于malloc分配的内存）</p>\n<blockquote>\n<p>比如某台机器上<code>float</code>占4个字节，对一个指向<code>float</code>变量的指针+n，该指针的大小会增加4n</p>\n</blockquote>\n<p><strong>②<code>==</code>与<code>!=</code></strong></p>\n<blockquote>\n<p>可以用于任意两个指针，判断两个指针是否相同</p>\n</blockquote>\n<p><strong>③指针之间的减法</strong></p>\n<blockquote>\n<p>只有当两个指针都指向<strong>同一数组</strong>中的元素时，才允许用一个指针减去另一个指针，得到的数据类型是<strong>ptrdiff_t</strong>，这是一种有符号整数，表示两个指针指向位置的距离（以数组元素的长度为单位）</p>\n</blockquote>\n<p><strong>④关系运算（大于/小于）</strong>：只能用于<strong>同一个数组</strong>内的元素</p>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> ③④中同一数组的元素还包括数组末尾后一位元素，但是不包括数组开头前一位元素</div>\n\n<p><strong>1.6函数指针</strong><br><strong>①格式</strong>：<code>返回类型 (*f)()</code></p>\n<blockquote>\n<p>可以解释为<code>f</code>被间接引用后是一个函数，该函数的返回值是一个整型，所以f为一个函数指针<br><code>()</code>为函数调用操作符，<code>f()</code>的结果是函数的返回值</p>\n</blockquote>\n<p><strong>②初始化：</strong><code>返回类型 (*f)(参数列表) = 函数名</code></p>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 在函数指针初始化时，其参数列表需要与之对应</div>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 其中函数名在编译时会被转换为函数指针，故可以不用取址符号</div>\n\n<p><strong>③函数指针数组</strong>：<code>返回类型 (*f[]) ();</code></p>\n<blockquote>\n<p><code>()</code>和<code>[]</code>均为第一优先级，结合性<strong>从左向右</strong>，优先级均高于<code>*</code></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">double  (*oper_func[])(double,double) = {a,b,c...};\nresult = oper_func[1](i,j);\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>④用途</strong>：构造泛型函数</p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 泛型函数：可以处理不同数据类型的函数</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 函数指针可以作为一个参数提供给另一个函数，使得该函数可以在另一个函数中使用，这些函数被称为回调函数</div>\n<blockquote>\n<p>将函数中与数据类型相关的操作替换为<strong>一系列等价的函数</strong>，需要使用哪一类数据类型的对应操作，传递对应的函数指针即可<br>将传递给<strong>函数以及回调函数</strong>的数据类型替换<code>*void</code>，<code>*void</code>用于接收不同数据类型的指针</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 在使用这些数据的指针时，必须要强制转换为正确的数据类型</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">/*比较函数的整数版本\nint compare_ints(void const *a,void const *b)\n{\n\tif(*(int *)a = *(int *)b)\n\t\treturn 0;\n\telse\n\t\treturn 1;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"2-函数\"><a href=\"#2-函数\" class=\"headerlink\" title=\"2.函数\"></a>2.函数</h3><p><strong>2.1源文件格式</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">返回类型 函数名（形参类型1 形参名1，...形参类型n 形参名n）\n{\n\tstatement；\n    return expression；\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><code>return</code>语句不一定出现在末尾，没有<code>return</code>语句的函数称为<strong>过程</strong><br><strong>类型、形参和statement</strong>都不是必须的，因此最简单的函数可以写为</p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">void function （void）\n{\n\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 这种函数可以达到存根的目的,即为尚未编写的代码“占好位置”，可以保持程序在结构上的完整性，以便于你编译和测试程序的其他部分</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 函数要考虑异常情况</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 函数中的形参是实参的一个副本，修改形参不能修改实参，如果想要修改实参，需要传递实参的地址</div>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 当本该有参数的地方没有参数时，必须要使用void占据位置</div>\n\n<p><strong>2.2函数声明</strong><br><strong>①格式</strong>：<code>返回类型 函数名(形参类型n 形参名n);</code></p>\n<blockquote>\n<p>向编译器<strong>提供函数相关信息</strong>，如果没有对应的函数声明，函数会被调用，但是传递给函数的参数会进行<strong>缺省参数提升</strong>（<code>char</code>和<code>short</code>被转换为<code>int</code>，<code>float</code>被转化为<code>double</code>），且默认返回一个<strong>整型</strong><br>函数声明的结尾是有一个<strong>分号</strong>的，而函数定义没有</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 大部分时候将函数定义在单独的C文件中，然后将函数声明置于同一个头文件中，主函数文件使用include命令调用即可</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 当调用函数时输入的变量类型不匹配，编译器会根据函数声明强制转换变量类型</div>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 函数原型不要写在代码块中，因为代码块中的函数原型有代码块作用域，可能会覆盖原来的函数声明</div>\n<p><strong>2.3利用函数实现黑盒</strong>：利用<code>static</code>关键字修饰<strong>函数内置数据和函数</strong>，使其变为函数文件私有，外界不能访问<br><strong>2.4递归函数</strong>：直接或者间接<strong>调用自身</strong>的函数，当递归函数<strong>不再满足某个条件</strong>时，便停止调用自身<br>以下为递归函数的例子</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">binary_to_ascii(unsigned int value)\n{\n\tunsigned int a;\n\ta = value/10;\n\tif(a!=0)\n\t\tbinary_to_ascii(a)\n\tputchar(value%10+‘0)’;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>递归的<strong>实现过程</strong>（假设一开始<code>value</code>的值为4267）<br>①当函数被调用时，变量创建在堆栈中，之前调用函数的变量依旧保持在堆栈之中，但是<strong>被新函数的变量掩盖所以不能被访问</strong>（堆栈的特性）<br>②所以当递归函数调用自身时，每次新的调用都会创建一批新的变量掩盖原来的变量<br>③函数刚调用时，堆栈中出现了<code>value[1] = 4267</code>和<code>a[1] = 426</code><br>④当函数判断条件符合，又对函数进行第二次调用，堆栈中<code>value[2] = 426</code>、<code>a[2] = 42</code>掩盖了原先的<code>value</code>和<code>a</code><br>⑤第三次调用，<code>value[3] = 42</code>，<code>a[3] = 4</code><br>⑥第四次调用，<code>value[4] = 4</code>，<code>a[4] = 0</code>，至此，停止递归，然后函数开始打印输出，并开始释放销毁堆栈中的对应变量，<strong>从顶端的变量开始释放</strong>（堆栈的特性），从<code>[4]</code>到<code>[3]</code>到<code>[2]</code>再到<code>[1]</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 递归函数需要设置限制条件，且每次递归调用之后就越接近该限制条件</div>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 递归的计算代价非常大，如果可以使用循环等解决问题，不要使用递归</div>\n<p><strong>2.5可变参数列表</strong><br><strong>①实现</strong>：通过宏实现，定义于<code>stdarg.h</code>头文件中，该头文件中声明了一个<code>va_list</code>类型和三个宏<code>va_start</code>、<code>va_arg</code>和<code>va_end</code><br><strong>②用法</strong>：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#include&lt;stdarg.h&gt;\n\n/*用于计算输入数字的平均数\nfloat average (int n_value,...)\n{\n\tva_list number_n;\n\tint count;\n\tfloat sum = 0;\n\tva_start(number_n,n_value);\n\tfor (count=0;count&lt;n_value;count+=1)\n\t{\n\t\tsum = sum+va_arg(number_n,int);\n\t}\n\tva_end(number_n);\n\treturn sum/n_value;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>在函数体内部定义<code>va_list</code>类型参数，该参数代表可变参数列表<br>使用<code>va_statr</code>初始化<code>va_list</code>类型参数，该宏接收的第一个参数是<code>va_list</code>类型参数<code>number_n</code>，第二个参数是可变参数列表的前一个参数<code>n_value</code><br>使用<code>va_arg</code>代替可变参数进行计算，该宏接收的第一个参数是<code>va_list</code>类型参数<code>number_n</code>，第二个参数是可变参数列表的<strong>数据类型</strong><br>使用<code>va_end</code>注销可变参数列表</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 要使用该宏，则函数必须要有一个已确定的参数（上例中的n_value）</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 注意函数形参部分的写法，可变参数列表用...代替，在书写函数声明时，也需要注意</div>\n\n<h3 id=\"3-数组\"><a href=\"#3-数组\" class=\"headerlink\" title=\"3.数组\"></a>3.数组</h3><p><strong>3.1声明格式</strong>：<code>数据类型 数组名[数组大小]</code><br><strong>①数组名</strong>：数组名的值是一个<strong>指针常量</strong>（注意是常量，所以不能改变），指向数组的起始位置</p>\n<blockquote>\n<p>数组名不仅仅只是一个指针常量，还包含了<strong>数组长度</strong>等信息，在创建数组的时候编译器会根据其长度为<strong>数组</strong>划分对应的内存空间，随后为数组名划分内存；而创建指针的时候，<strong>只为指针本身划分内存</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 只有数组名在表达式中被使用了，编译器才会创建对应的指针常量</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 数组名在一些情况下不是一个指针，而是代表整个数组，比如sizeof（数组名）会返回整个数组的长度，&amp;数组名产生的是一个数组的指针，而不是一个指向指针的指针</div>\n<p><strong>②下标引用</strong>：<code>a[b]</code>相当于<code>*(a+b)</code>，<strong>所以下标从0开始</strong></p>\n<blockquote>\n<p>在C语言中，下标引用可以应用于<strong>所有的指针</strong>，不仅仅局限于数组</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 指针间接访问的效率大于等于下标引用效率，详细见《C与指针》p145-p150</div>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 注意检查数组越界问题</div>\n<p><strong>3.2数组与函数</strong>：数组做为<strong>形参</strong>，格式可以是<code>(数据类型 数组名[])</code>也可以是指针类型<code>(数据类型 *指针名)</code></p>\n<blockquote>\n<p>函数在声明数组参数时不需要指定他的长度，因为他只接受数组的地址，而不为其分配内存，所以如果需要知道数组的<strong>大小</strong>，还需要<strong>另一个形参</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 数组名传给形参是以传值的形式传递的，所以在函数中，对应指针变量是可以被修改的，但是不会影响到原来的数组名的值</div>\n<p><strong>3.3初始化</strong><br><strong>①格式</strong>：<code>数据类型 数组名[] = {值1,值2,…}</code></p>\n<blockquote>\n<p>当数组为<strong>静态变量</strong>时，在<strong>程序执行前</strong>便被初始化，缺省情况下为<strong>0</strong><br>数组为<strong>自动变量</strong>（存储在堆栈中），在缺省情况下<strong>无法被初始化</strong>（因为每次程序流经过堆栈，堆栈中变量的位置是不固定的）</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 被初始化后，每次执行流经过数组的作用域时，数组又会被初始化一次（因为之前在作用域结束后被销毁），所以，对于那些非常大的数组 ，可以考虑将其设为static，减少其初始化次数</div>\n<p><strong>②不完整的初始化</strong></p>\n<blockquote>\n<p>缺少元素：<strong>优先填充前面的</strong>，缺少的被命名为0<br>缺少数组长度：编译器将其设置为刚好能够<strong>容纳所有初始值</strong>的大小</p>\n</blockquote>\n<p><strong>③字符数组的初始化</strong>:<code>char a[] = “b”</code>相当于<code>char a = {'b',0}</code></p>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 只有在初始化字符数组时“b”才代表一个初始化列表，其他场合都为字符串常量，如下，message1是一个字符数组，message2是一个指向字符串字面值的指针</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">char message1[] = \"hello\";\nchar *message2 = \"hello\";<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>3.4多维数组</strong><br><strong>①声明</strong>：<code>数据类型 数组名 [维度1][维度2]…[维度N]</code></p>\n<blockquote>\n<p><code>int a [3][6][9]</code>：可以解读为a数组有包含3个变量，这3个变量是个包含6个变量的数组，同时这6个变量又是包含9个变量的数组</p>\n</blockquote>\n<p><strong>②存储形式</strong>：按照<strong>最右边的下标</strong>率先变化，比如<code>int *b = &amp;a[1][3]</code>,<code>b++</code>为<code>a[2][0]</code><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/C_1.png\" alt=\"a[3][4]\"><br><strong>③数组名</strong>：类比一维数组，将n维数组看为一个<strong>元素是n-1维数组的一维数组</strong>，数组名即<strong>指向第一个n-1维数组的指针</strong></p>\n<blockquote>\n<p><code>int a[3][4]</code>，将其看成有三个包含四个元素的一维数组<br><code>a</code>：一个指向第一个包含<strong>四个整型元素的数组</strong>的指针<br><code>a+1</code>:指向的<strong>第二个四元素的一维数组</strong>的指针（指针的加减法法则是根据指针的类型决定的）<br><code>*(a+1)</code>：指向第二个包含四个元素数组的<strong>第一个整型元素的指针</strong>,注意这个还不是其中所包含的数据<br><code>*a+1</code>:指向第一个包含四个元素数组的第二个元素的指针<br><code>*(*a+1)</code>：为第一个包含四个元素数组的<strong>第二个元素</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 一层一层解引用，n维数组要解引用n次，才能获得数据</div>\n<p><strong>④多维数组的初始化</strong></p>\n<blockquote>\n<p>以二维数组为例<br><code>int a[][] = {元素1、元素2…};</code><br>定义后，通过<code>a[i][j] = 数值;</code>，一个一个赋值<br><code>int a[][] = {{数组1}，{数组2}…};</code> </p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 层层套娃</div>\n\n<p><strong>3.5多维数组与指针</strong><br><strong>①指向数组的指针</strong>：<code>数组元素数据类型 (*指针名)[数组元素个数] = 二维数组名</code></p>\n<blockquote>\n<p><strong>下标引用的优先级比间接访问高</strong>，但是由于括号的存在，先执行的是间接访问，这样就将<code>p</code>定义为一个指针，<strong>它指向的对象进行下标引用得到的是一个整型</strong>，所以他是一个指向一维数组的指针，指向二维数组的第一行，该指针进行加法时，是<strong>以一个数组为单位移动</strong>的</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 这里的数组元素个数与之对应，如int (*p)[4] = a;</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 将数组传递给一个函数，本质上是传递一个对应的指针，对于多维数组，就是传递一个指向数组的指针，对应函数原型应写为`void func1(int (*a)[4])`或者`void func1(int a[][4])`</div>\n<p><strong>②指向元素的指针</strong>：<code>数组元素数据类型 *p = &amp;数组名[0][0]</code>或者<code>数组元素数据类型 *p = 数组名[0]</code>（以二维数组为例）</p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 注意后者是没有&amp;符号的，因为后者就是一个指向元素的指针！</div>\n<p><strong>③指针数组</strong>：<code>数据类型* 数组名[个数]</code></p>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 与指向数组的指针仅仅只有一个括号之差</div>\n\n\n<h3 id=\"4-结构\"><a href=\"#4-结构\" class=\"headerlink\" title=\"4.结构\"></a>4.结构</h3><p><strong>4.1格式</strong><br><strong>①定义</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">struct [结构类型名称]\n{\n\t结构成员表(每个成员的类型和名字);\n};<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 结构变量是标量类型，所以相同的结构变量可以相互赋值</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 可以将结构定义在一个头文件中，使用include包含即可</div>\n\n<p><strong>②声明</strong>：<code>struct 结构类型名称 结构名</code></p>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 可以使用typedef关键字为结构定义新的名字</div>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">typedef struct\n{\n\t结构成员表(每个成员的类型和名字);\n}[结构类型名称];<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>③初始化与赋值</strong>：<code>struct 结构名 变量名 = {成员1，成员2，成员3}</code></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">struct X\n{\n\tint a;\n\tshort b[3];\n\tsimple c;\n};\nstruct X x1 = {10,{1,2,3},{25,'x'}};<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>④结构成员的访问</strong></p>\n<blockquote>\n<p><code>.</code>操作符：<code>结构名.成员名</code><br><code>-&gt;</code>操作符：<code>对应结构指针-&gt;成员名</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 这两个操作符优先级相同，比*和[]高，结合性从左向右</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 假设px是结构x的指针，px指向的地址和结构第一个成员的地址是一样的，但是*px代表的是整个结构</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 当结构需要作为函数参数时，可以传递该结构的指针，效率较高，可以用const关键词防止对结构体的修改</div>\n<p><strong>4.2结构的引用</strong><br><strong>①结构的自引用</strong>：结构内部成员为自己本身是非法的，但是可以<strong>包含自己的指针类型</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">//非法，因为在声明next成员时，Node还有没被声明\ntypedef struct\n{\n  ElemType data;\n  struct Node *next;\n}Node;\n//合法\ntypedef struct Node\n{\n  ElemType data;\n  struct Node *next;\n}Node;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 因为结构在定义时内存大小是不确定的，而结构指针的内存大小在结构创建前就已经确定</div>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 注意不能使用之前没有定义的结构标签</div>\n\n<p><strong>②结构之间的引用</strong>：当需要定义几种之间<strong>存在联系</strong>的结构，可以采用不完整声明</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">struct B; //B的不完整声明\nstruct A\n{\n\tstruct *B;\n};\nstruct B\n{\n\tstruct A;\n};<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 注意，A中不能以B为成员，只能以B的指针为成员，因为不完整声明导致B的大小不能确定</div>\n\n\n<p><strong>4.3结构的存储分配</strong><br><strong>①</strong>正常情况下，编译器按照<strong>成员列表顺序</strong>一个一个给每个成员分配内存<br><strong>②</strong>当成员的存储需要满足正确的边界对齐条件，成员之间会出现未填充的内存空间</p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 边界对齐：访问特定类型变量的时候经常在特定的内存地址访问</div>\n<blockquote>\n<p>假设一台机器的整型值长度为4字节，且要求其<strong>起始存储位置</strong>必须能被4整除，而结构的起始位置也必须满足<strong>成员中边界要求最严格</strong>的对齐条件，则以下结构在内存中的存储情况如下</p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">struct X\n{\n\tchar a;\n\tint b;\n\tchar c;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/C_3.png\" alt=\"内存分配情况\"><br><strong>③对边界要求最严格的成员应该首先出现</strong>，这样可以<strong>节省内存</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">struct X\n{\n\n\tint b;\n\tchar a;\n\tchar c;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/C_4.png\" alt=\"内存分配情况\"><br><strong>④常用函数</strong>：<code>sizeof</code>可以得到一个结构的整体长度，<strong>包括因为边界对齐跳过的字节</strong>，<code>offsetof</code>可以确定结构中某个成员的位置（偏离结构存储起始位置的字节数）<br><strong>4.4位段</strong><br><strong>①声明格式</strong>：一种特殊的结构，成员必须是<code>int</code>、<code>signed</code>、<code>unsigned</code>类型，成员名后面是<strong>一个冒号和一个整数，该整数表示该成员占用的位的数目</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">struct WeiDuan\n{\n\tunsigned a : 7;\n\tunsigned b : 6;\n\tunsigned c : 19;\n};<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 位段可以将长度为奇数的数据包装在一起，并且可以访问一个整型值的部分内容（这些部分内容可能有特定的含义）</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 显示的用signed和unsigned声明位段比较好，如果仅仅将位段声明为int类型，被解释为有符号数还是无符号数由编译器决定</div>\n<p><strong>②位段的移植性问题</strong></p>\n<blockquote>\n<p>很多编译器将位段<strong>成员</strong>的长度限制在<strong>一个整型值</strong>之内，32位机器上可以使用的位段声明可能在16位机器上无法使用<br>位段的内存是<strong>从左向右</strong>分配还是<strong>从右向左</strong>分配由机器决定<br>当位段的<strong>总位数不是8的倍数时</strong>，其内存分配是否要“边界对齐”取决于编译器</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 任何使用位段实现的任务，都可以通过移位和屏蔽实现，但是会麻烦一些</div>\n\n<p><strong>4.5联合</strong><br><strong>①声明格式</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">union\n{\n\tfloat f;\n\tint i;\n}fi;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>联合各个成员<strong>共用内存中的一个位置以及数据</strong>，当联合的某个成员被访问时，则将该联合所在位置的位以该成员类型解释被访问，换句话说，<strong>联合的各个成员决定了这些位是如何被解释的</strong></p>\n</blockquote>\n<p><strong>②联合的变体</strong>：联合各个成员的长度可以不同，比如说两个结构</p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 当联合中各个成员具有不同的长度，联合的长度就是它最长成员的长度</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 当成员之间大小相差太大时，可以将联合的成员修改为不同数据类型的指针，这样就不会造成空间浪费</div>\n<p><strong>③联合的初始化</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">union\n{\n\tint a;\n\tfloat b;\n\tchar c[4];\n}x = {5};<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 联合变量的初始值只有一个，且必须是联合第一个成员类型的数据</div>\n<h3 id=\"5-动态内存分配\"><a href=\"#5-动态内存分配\" class=\"headerlink\" title=\"5.动态内存分配\"></a>5.动态内存分配</h3><p><strong>5.1内存分配</strong><br><strong>①</strong><code>malloc()</code>:从<strong>内存池</strong>中提取一块<strong>连续</strong>的内存，并返回一个<strong>指向这块内存的指针</strong>，如果内存池没有合适的内存则返回<strong>NULL</strong>，这块内存<strong>没有被初始化</strong></p>\n<blockquote>\n<p>格式：<code>p = malloc（size）;</code><br><code>malloc()</code>返回值是<code>void *</code>，可以转化为任何类型的指针<br><code>size</code>为需要分配的<strong>字节数</strong>，其类型是<code>size_t</code>，一个<strong>无符号类型</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> malloc()返回内存的起始位置始终满足边界对齐条件</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 可以将size替换为n*sizeof（数据类型），n为数量，还可以提高程序的可移植性</div>\n<p><strong>②</strong><code>calloc()</code>：和<code>malloc</code>一样用于分配内存，但是<code>calloc</code>会将内存内所有元素初始化为0，会消耗一定的时间</p>\n<blockquote>\n<p>格式：<code>p = calloc(num,size);</code><br>其中<code>num</code>为元素的个数，<code>size</code>为每个元素的大小，类型均为size_t</p>\n</blockquote>\n<p><strong>③</strong><code>realloc()</code>：<strong>修改</strong>一个已经分配的内存块的大小，新增加的内存添加到原先内存块的<strong>尾部</strong>，没有被初始化，如果用于缩小原来的内存块，则将<strong>尾部</strong>的内存块拿掉</p>\n<blockquote>\n<p>格式：<code>p = realloc(ptr,size);</code><br>其中<code>ptr</code>是需要调整大小的指针，<code>size</code>是调整后内存的大小</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> C语言中，void*可以赋值给其他类型指针，但是在其他语言如C++中不行，故最好在前面加一个强制类型转换</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 若原先的内存块大小无法改变，则realloc会重新划分一块内存，并释放原来的内存，所以要使用realloc返回的指针</div>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 动态分配得到的指针是变量，但是我们不希望他改变，因为最后还需要释放掉，故有需要可以构建该指针的副本对内存进行操作</div>\n\n<p><strong>5.2内存释放</strong>：当分配的内存不再使用时，需要使用<code>free()</code>将其释放<br><strong>①函数原型</strong>：<code>void free (void *pointer)</code><br><strong>②使用格式</strong>：<code>free (p)</code><br><strong>5.3常见错误</strong><br><strong>①</strong>对NULL指针进行解引用<br><strong>②</strong>对分配的内存操作时越界<br><strong>③</strong>释放并为动态分配的内存<br><strong>④</strong>释放动态内存的一部分<br><strong>⑤</strong>访问一块已经被释放的内存，尤其是当内存分配指针被备份时<br><strong>⑥</strong>内存释放不及时，导致内存泄漏</p>\n<p><strong>5.4内存操作函数</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 和字符串的一些操作函数很像，但是遇到NUL字节不会停止</div>\n<p><strong>①</strong><code>memcpy()</code>：<strong>直接复制</strong>一块内存中数据到另一块内存中</p>\n<blockquote>\n<p>函数原型<code>void *memcpy(void *dst,void const *src,size_t length)</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 如上，内存操作函数接收和返回的参数都是void*，且会规定操作的内存长度</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> length是字节的个数，可以使用sizeof便捷计算</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 两块内存不能重叠</div>\n<p><strong>②</strong><code>memmove()</code>：类似于<code>memcpy()</code>，但是<code>memmove()</code>在转移时会经过一块<strong>临时内存</strong><br><strong>③</strong><code>memcmp()</code>：比较两块内存的内容（按照无符号字符逐字节比较）</p>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 不能用于比较非单字节数据</div>\n<p><strong>④</strong><code>memchr()</code>：查找某块内存某个字符<strong>第一次出现</strong>的位置<br><strong>⑤</strong><code>memset()</code>：将一段内存<strong>都设置</strong>为某个字符</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"C语言学习笔记（二）\"><a href=\"#C语言学习笔记（二）\" class=\"headerlink\" title=\"C语言学习笔记（二）\"></a>C语言学习笔记（二）</h1><h2 id=\"C语言基础\"><a href=\"#C语言基础\" class=\"headerlink\" title=\"C语言基础\"></a>C语言基础</h2><h3 id=\"1-指针\"><a href=\"#1-指针\" class=\"headerlink\" title=\"1.指针\"></a>1.指针</h3><h4 id=\"1-1内存和地址\"><a href=\"#1-1内存和地址\" class=\"headerlink\" title=\"1.1内存和地址\"></a>1.1内存和地址</h4><p><strong>①比特&#x2F;位</strong></p>\n<blockquote>\n<p>计算机的<strong>最小存储单位</strong>，可以存储1和0</p>\n</blockquote>\n<p><strong>②字节</strong></p>\n<blockquote>\n<p>一个字节包含<strong>8个比特</strong>，包含存储<strong>一个字符</strong>所需要的位数，是计算机的<strong>最小寻址单位</strong></p>\n</blockquote>\n<p><strong>③字</strong></p>\n<blockquote>\n<p>每个字由<strong>2（16位机器）或者4（32位机器）个字节</strong>组成，每个字的地址是其<strong>最左边或者最右边</strong>的字节的地址，每台机器规定不同</p>\n</blockquote>\n<p><strong>④寻址</strong></p>\n<blockquote>\n<p>高级语言一般通过<strong>变量名</strong>而不是地址访问内存位置，<strong>变量名和地址的关系由编译器提供</strong>，<strong>硬件还是通过地址</strong>访问内存位置</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 边界对齐：整型值存储的起始位置只能是某些特定的字节，通常是2和4的倍数</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 每个内存位置中存储的时一连串1和0，被解释为什么数据类型取决于我们的使用方式和声明方式，有些时候值可能是一样的但是被解释为了不同的数据类型</div>\n\n<h4 id=\"1-2指针变量\"><a href=\"#1-2指针变量\" class=\"headerlink\" title=\"1.2指针变量\"></a>1.2指针变量</h4><p><strong>①声明格式</strong></p>\n<blockquote>\n<p><code>[指向变量的数据类型] *[指针变量名] = &amp;[指向的变量]</code><br><code>*</code>为<strong>间接访问操作符</strong>，可以通过它<strong>访问指针指向的地址</strong><br><code>&amp;</code>为<strong>取址符</strong>，通过它可以<strong>获得变量的地址</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 对*指针变量进行操作相当于对其指向的变量进行操作</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 指针数据类型取决于指向的变量的数据类型，比如假设整数a的地址是100，不能使用*100 = 10对a进行赋值，因为100是字面量，缺省情况下是整型而不是指针变量，应该写为*（int*）100 = 10，该技巧只有在需要访问特定地址时才使用</div>\n<p><strong>②未初始化的指针</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">int *a;\n*a &#x3D; 12;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 指针需要进行初始化，因为声明一个指针并不会创建一个存储空间，所以其指向也未知，可能指向非法地址（内存错误）或者导致储存地址处于错误的边界（总线错误），所以一定要对指针进行初始化*可以初始化为空指针，但是要进行空指针检查）</div>\n<p><strong>③NULL指针</strong></p>\n<blockquote>\n<p>表示这个指针<strong>没有指向任何地方</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 注意对NULL指针进行引用是错误的，所以在对指针解引用时需要检查其是否为空指针</div>\n<p><strong>④指针的指针</strong></p>\n<blockquote>\n<p><code>int** a = &amp;b</code>：其中b是一个指向整型变量的指针，a表示一个指向指向整型变量指针的指针</p>\n</blockquote>\n<p><strong>1.3指针与左右值</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">int a &#x3D; 10；\nint* b &#x3D; &amp;a；<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><strong>①</strong>其中当<code>a</code>、<code>*b</code>（变量名）作为右值时，代表的是“10”，即对应位置储存的数据，作为左值时代表对应位置的地址<br><strong>②</strong><code>&amp;a</code>作为右值代表a的地址，不能作为左值，因为<code>&amp;a</code><strong>不能代表内存中某一特定位置</strong><br><strong>③</strong><code>b</code>作为右值是表示的是<code>a</code>的地址，作为左值表示的是<code>b</code>的地址<br><strong>1.4指针表达式</strong><br><strong>①</strong><code>*b+1</code>：表示对<code>a</code>中的数据加1，只能作为右值，<code>*（b+1）</code>相当于<code>a</code>后面一个内存的标识符，作为左值代表对应的地址，作为右值代表对应位置存储的数据。<br><strong>②</strong><code>++b</code>：作为右值表示该指针指向位置的后一个位置的地址，作为左值是非法的<br><strong>③</strong><code>b++</code>：作为右值表示的该指针指向位置的地址，随后该指针加一，作为左值是非法的，因为他是一个数值而不是一个容器<br><strong>④</strong><code>*++b</code>：作为右值表示该指针指向位置后一个位置存放的数据，作为的左值表示的是该指针指向位置后一个位置<br><strong>⑤</strong><code>*b++</code>：作为右值表示的是该指针指向位置存放的数据，作为左值表示的是该指针指向变量，随后该指针变量加一<br><strong>⑥</strong><code>++*b</code>：作为右值表示的是b指向变量存放数据的值加一</p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> ++/--的优先级高于*</div>\n<p><strong>1.5指针的运算</strong><br><strong>①与整数加减法</strong>：当对指针加减一个整数n时，该指针会<strong>根据其指向的数据的类型调整自身大小</strong>（也适用于malloc分配的内存）</p>\n<blockquote>\n<p>比如某台机器上<code>float</code>占4个字节，对一个指向<code>float</code>变量的指针+n，该指针的大小会增加4n</p>\n</blockquote>\n<p><strong>②<code>==</code>与<code>!=</code></strong></p>\n<blockquote>\n<p>可以用于任意两个指针，判断两个指针是否相同</p>\n</blockquote>\n<p><strong>③指针之间的减法</strong></p>\n<blockquote>\n<p>只有当两个指针都指向<strong>同一数组</strong>中的元素时，才允许用一个指针减去另一个指针，得到的数据类型是<strong>ptrdiff_t</strong>，这是一种有符号整数，表示两个指针指向位置的距离（以数组元素的长度为单位）</p>\n</blockquote>\n<p><strong>④关系运算（大于&#x2F;小于）</strong>：只能用于<strong>同一个数组</strong>内的元素</p>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> ③④中同一数组的元素还包括数组末尾后一位元素，但是不包括数组开头前一位元素</div>\n\n<p><strong>1.6函数指针</strong><br><strong>①格式</strong>：<code>返回类型 (*f)()</code></p>\n<blockquote>\n<p>可以解释为<code>f</code>被间接引用后是一个函数，该函数的返回值是一个整型，所以f为一个函数指针<br><code>()</code>为函数调用操作符，<code>f()</code>的结果是函数的返回值</p>\n</blockquote>\n<p><strong>②初始化：</strong><code>返回类型 (*f)(参数列表) = 函数名</code></p>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 在函数指针初始化时，其参数列表需要与之对应</div>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 其中函数名在编译时会被转换为函数指针，故可以不用取址符号</div>\n\n<p><strong>③函数指针数组</strong>：<code>返回类型 (*f[]) ();</code></p>\n<blockquote>\n<p><code>()</code>和<code>[]</code>均为第一优先级，结合性<strong>从左向右</strong>，优先级均高于<code>*</code></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">double  (*oper_func[])(double,double) &#x3D; &#123;a,b,c...&#125;;\nresult &#x3D; oper_func[1](i,j);\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>④用途</strong>：构造泛型函数</p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 泛型函数：可以处理不同数据类型的函数</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 函数指针可以作为一个参数提供给另一个函数，使得该函数可以在另一个函数中使用，这些函数被称为回调函数</div>\n<blockquote>\n<p>将函数中与数据类型相关的操作替换为<strong>一系列等价的函数</strong>，需要使用哪一类数据类型的对应操作，传递对应的函数指针即可<br>将传递给<strong>函数以及回调函数</strong>的数据类型替换<code>*void</code>，<code>*void</code>用于接收不同数据类型的指针</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 在使用这些数据的指针时，必须要强制转换为正确的数据类型</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;*比较函数的整数版本\nint compare_ints(void const *a,void const *b)\n&#123;\n\tif(*(int *)a &#x3D; *(int *)b)\n\t\treturn 0;\n\telse\n\t\treturn 1;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"2-函数\"><a href=\"#2-函数\" class=\"headerlink\" title=\"2.函数\"></a>2.函数</h3><p><strong>2.1源文件格式</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">返回类型 函数名（形参类型1 形参名1，...形参类型n 形参名n）\n&#123;\n\tstatement；\n    return expression；\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><code>return</code>语句不一定出现在末尾，没有<code>return</code>语句的函数称为<strong>过程</strong><br><strong>类型、形参和statement</strong>都不是必须的，因此最简单的函数可以写为</p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">void function （void）\n&#123;\n\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 这种函数可以达到存根的目的,即为尚未编写的代码“占好位置”，可以保持程序在结构上的完整性，以便于你编译和测试程序的其他部分</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 函数要考虑异常情况</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 函数中的形参是实参的一个副本，修改形参不能修改实参，如果想要修改实参，需要传递实参的地址</div>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 当本该有参数的地方没有参数时，必须要使用void占据位置</div>\n\n<p><strong>2.2函数声明</strong><br><strong>①格式</strong>：<code>返回类型 函数名(形参类型n 形参名n);</code></p>\n<blockquote>\n<p>向编译器<strong>提供函数相关信息</strong>，如果没有对应的函数声明，函数会被调用，但是传递给函数的参数会进行<strong>缺省参数提升</strong>（<code>char</code>和<code>short</code>被转换为<code>int</code>，<code>float</code>被转化为<code>double</code>），且默认返回一个<strong>整型</strong><br>函数声明的结尾是有一个<strong>分号</strong>的，而函数定义没有</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 大部分时候将函数定义在单独的C文件中，然后将函数声明置于同一个头文件中，主函数文件使用include命令调用即可</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 当调用函数时输入的变量类型不匹配，编译器会根据函数声明强制转换变量类型</div>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 函数原型不要写在代码块中，因为代码块中的函数原型有代码块作用域，可能会覆盖原来的函数声明</div>\n<p><strong>2.3利用函数实现黑盒</strong>：利用<code>static</code>关键字修饰<strong>函数内置数据和函数</strong>，使其变为函数文件私有，外界不能访问<br><strong>2.4递归函数</strong>：直接或者间接<strong>调用自身</strong>的函数，当递归函数<strong>不再满足某个条件</strong>时，便停止调用自身<br>以下为递归函数的例子</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">binary_to_ascii(unsigned int value)\n&#123;\n\tunsigned int a;\n\ta &#x3D; value&#x2F;10;\n\tif(a!&#x3D;0)\n\t\tbinary_to_ascii(a)\n\tputchar(value%10+‘0)’;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>递归的<strong>实现过程</strong>（假设一开始<code>value</code>的值为4267）<br>①当函数被调用时，变量创建在堆栈中，之前调用函数的变量依旧保持在堆栈之中，但是<strong>被新函数的变量掩盖所以不能被访问</strong>（堆栈的特性）<br>②所以当递归函数调用自身时，每次新的调用都会创建一批新的变量掩盖原来的变量<br>③函数刚调用时，堆栈中出现了<code>value[1] = 4267</code>和<code>a[1] = 426</code><br>④当函数判断条件符合，又对函数进行第二次调用，堆栈中<code>value[2] = 426</code>、<code>a[2] = 42</code>掩盖了原先的<code>value</code>和<code>a</code><br>⑤第三次调用，<code>value[3] = 42</code>，<code>a[3] = 4</code><br>⑥第四次调用，<code>value[4] = 4</code>，<code>a[4] = 0</code>，至此，停止递归，然后函数开始打印输出，并开始释放销毁堆栈中的对应变量，<strong>从顶端的变量开始释放</strong>（堆栈的特性），从<code>[4]</code>到<code>[3]</code>到<code>[2]</code>再到<code>[1]</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 递归函数需要设置限制条件，且每次递归调用之后就越接近该限制条件</div>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 递归的计算代价非常大，如果可以使用循环等解决问题，不要使用递归</div>\n<p><strong>2.5可变参数列表</strong><br><strong>①实现</strong>：通过宏实现，定义于<code>stdarg.h</code>头文件中，该头文件中声明了一个<code>va_list</code>类型和三个宏<code>va_start</code>、<code>va_arg</code>和<code>va_end</code><br><strong>②用法</strong>：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#include&lt;stdarg.h&gt;\n\n&#x2F;*用于计算输入数字的平均数\nfloat average (int n_value,...)\n&#123;\n\tva_list number_n;\n\tint count;\n\tfloat sum &#x3D; 0;\n\tva_start(number_n,n_value);\n\tfor (count&#x3D;0;count&lt;n_value;count+&#x3D;1)\n\t&#123;\n\t\tsum &#x3D; sum+va_arg(number_n,int);\n\t&#125;\n\tva_end(number_n);\n\treturn sum&#x2F;n_value;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>在函数体内部定义<code>va_list</code>类型参数，该参数代表可变参数列表<br>使用<code>va_statr</code>初始化<code>va_list</code>类型参数，该宏接收的第一个参数是<code>va_list</code>类型参数<code>number_n</code>，第二个参数是可变参数列表的前一个参数<code>n_value</code><br>使用<code>va_arg</code>代替可变参数进行计算，该宏接收的第一个参数是<code>va_list</code>类型参数<code>number_n</code>，第二个参数是可变参数列表的<strong>数据类型</strong><br>使用<code>va_end</code>注销可变参数列表</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 要使用该宏，则函数必须要有一个已确定的参数（上例中的n_value）</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 注意函数形参部分的写法，可变参数列表用...代替，在书写函数声明时，也需要注意</div>\n\n<h3 id=\"3-数组\"><a href=\"#3-数组\" class=\"headerlink\" title=\"3.数组\"></a>3.数组</h3><p><strong>3.1声明格式</strong>：<code>数据类型 数组名[数组大小]</code><br><strong>①数组名</strong>：数组名的值是一个<strong>指针常量</strong>（注意是常量，所以不能改变），指向数组的起始位置</p>\n<blockquote>\n<p>数组名不仅仅只是一个指针常量，还包含了<strong>数组长度</strong>等信息，在创建数组的时候编译器会根据其长度为<strong>数组</strong>划分对应的内存空间，随后为数组名划分内存；而创建指针的时候，<strong>只为指针本身划分内存</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 只有数组名在表达式中被使用了，编译器才会创建对应的指针常量</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 数组名在一些情况下不是一个指针，而是代表整个数组，比如sizeof（数组名）会返回整个数组的长度，&数组名产生的是一个数组的指针，而不是一个指向指针的指针</div>\n<p><strong>②下标引用</strong>：<code>a[b]</code>相当于<code>*(a+b)</code>，<strong>所以下标从0开始</strong></p>\n<blockquote>\n<p>在C语言中，下标引用可以应用于<strong>所有的指针</strong>，不仅仅局限于数组</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 指针间接访问的效率大于等于下标引用效率，详细见《C与指针》p145-p150</div>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 注意检查数组越界问题</div>\n<p><strong>3.2数组与函数</strong>：数组做为<strong>形参</strong>，格式可以是<code>(数据类型 数组名[])</code>也可以是指针类型<code>(数据类型 *指针名)</code></p>\n<blockquote>\n<p>函数在声明数组参数时不需要指定他的长度，因为他只接受数组的地址，而不为其分配内存，所以如果需要知道数组的<strong>大小</strong>，还需要<strong>另一个形参</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 数组名传给形参是以传值的形式传递的，所以在函数中，对应指针变量是可以被修改的，但是不会影响到原来的数组名的值</div>\n<p><strong>3.3初始化</strong><br><strong>①格式</strong>：<code>数据类型 数组名[] = &#123;值1,值2,…&#125;</code></p>\n<blockquote>\n<p>当数组为<strong>静态变量</strong>时，在<strong>程序执行前</strong>便被初始化，缺省情况下为<strong>0</strong><br>数组为<strong>自动变量</strong>（存储在堆栈中），在缺省情况下<strong>无法被初始化</strong>（因为每次程序流经过堆栈，堆栈中变量的位置是不固定的）</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 被初始化后，每次执行流经过数组的作用域时，数组又会被初始化一次（因为之前在作用域结束后被销毁），所以，对于那些非常大的数组 ，可以考虑将其设为static，减少其初始化次数</div>\n<p><strong>②不完整的初始化</strong></p>\n<blockquote>\n<p>缺少元素：<strong>优先填充前面的</strong>，缺少的被命名为0<br>缺少数组长度：编译器将其设置为刚好能够<strong>容纳所有初始值</strong>的大小</p>\n</blockquote>\n<p><strong>③字符数组的初始化</strong>:<code>char a[] = “b”</code>相当于<code>char a = &#123;&#39;b&#39;,0&#125;</code></p>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 只有在初始化字符数组时“b”才代表一个初始化列表，其他场合都为字符串常量，如下，message1是一个字符数组，message2是一个指向字符串字面值的指针</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">char message1[] &#x3D; &quot;hello&quot;;\nchar *message2 &#x3D; &quot;hello&quot;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>3.4多维数组</strong><br><strong>①声明</strong>：<code>数据类型 数组名 [维度1][维度2]…[维度N]</code></p>\n<blockquote>\n<p><code>int a [3][6][9]</code>：可以解读为a数组有包含3个变量，这3个变量是个包含6个变量的数组，同时这6个变量又是包含9个变量的数组</p>\n</blockquote>\n<p><strong>②存储形式</strong>：按照<strong>最右边的下标</strong>率先变化，比如<code>int *b = &amp;a[1][3]</code>,<code>b++</code>为<code>a[2][0]</code><br><img src=\"/image/C_1.png\" alt=\"a[3][4]\"><br><strong>③数组名</strong>：类比一维数组，将n维数组看为一个<strong>元素是n-1维数组的一维数组</strong>，数组名即<strong>指向第一个n-1维数组的指针</strong></p>\n<blockquote>\n<p><code>int a[3][4]</code>，将其看成有三个包含四个元素的一维数组<br><code>a</code>：一个指向第一个包含<strong>四个整型元素的数组</strong>的指针<br><code>a+1</code>:指向的<strong>第二个四元素的一维数组</strong>的指针（指针的加减法法则是根据指针的类型决定的）<br><code>*(a+1)</code>：指向第二个包含四个元素数组的<strong>第一个整型元素的指针</strong>,注意这个还不是其中所包含的数据<br><code>*a+1</code>:指向第一个包含四个元素数组的第二个元素的指针<br><code>*(*a+1)</code>：为第一个包含四个元素数组的<strong>第二个元素</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 一层一层解引用，n维数组要解引用n次，才能获得数据</div>\n<p><strong>④多维数组的初始化</strong></p>\n<blockquote>\n<p>以二维数组为例<br><code>int a[][] = &#123;元素1、元素2…&#125;;</code><br>定义后，通过<code>a[i][j] = 数值;</code>，一个一个赋值<br><code>int a[][] = &#123;&#123;数组1&#125;，&#123;数组2&#125;…&#125;;</code> </p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 层层套娃</div>\n\n<p><strong>3.5多维数组与指针</strong><br><strong>①指向数组的指针</strong>：<code>数组元素数据类型 (*指针名)[数组元素个数] = 二维数组名</code></p>\n<blockquote>\n<p><strong>下标引用的优先级比间接访问高</strong>，但是由于括号的存在，先执行的是间接访问，这样就将<code>p</code>定义为一个指针，<strong>它指向的对象进行下标引用得到的是一个整型</strong>，所以他是一个指向一维数组的指针，指向二维数组的第一行，该指针进行加法时，是<strong>以一个数组为单位移动</strong>的</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 这里的数组元素个数与之对应，如int (*p)[4] = a;</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 将数组传递给一个函数，本质上是传递一个对应的指针，对于多维数组，就是传递一个指向数组的指针，对应函数原型应写为`void func1(int (*a)[4])`或者`void func1(int a[][4])`</div>\n<p><strong>②指向元素的指针</strong>：<code>数组元素数据类型 *p = &amp;数组名[0][0]</code>或者<code>数组元素数据类型 *p = 数组名[0]</code>（以二维数组为例）</p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 注意后者是没有&符号的，因为后者就是一个指向元素的指针！</div>\n<p><strong>③指针数组</strong>：<code>数据类型* 数组名[个数]</code></p>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 与指向数组的指针仅仅只有一个括号之差</div>\n\n\n<h3 id=\"4-结构\"><a href=\"#4-结构\" class=\"headerlink\" title=\"4.结构\"></a>4.结构</h3><p><strong>4.1格式</strong><br><strong>①定义</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">struct [结构类型名称]\n&#123;\n\t结构成员表(每个成员的类型和名字);\n&#125;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 结构变量是标量类型，所以相同的结构变量可以相互赋值</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 可以将结构定义在一个头文件中，使用include包含即可</div>\n\n<p><strong>②声明</strong>：<code>struct 结构类型名称 结构名</code></p>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 可以使用typedef关键字为结构定义新的名字</div>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">typedef struct\n&#123;\n\t结构成员表(每个成员的类型和名字);\n&#125;[结构类型名称];<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>③初始化与赋值</strong>：<code>struct 结构名 变量名 = &#123;成员1，成员2，成员3&#125;</code></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">struct X\n&#123;\n\tint a;\n\tshort b[3];\n\tsimple c;\n&#125;;\nstruct X x1 &#x3D; &#123;10,&#123;1,2,3&#125;,&#123;25,&#39;x&#39;&#125;&#125;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>④结构成员的访问</strong></p>\n<blockquote>\n<p><code>.</code>操作符：<code>结构名.成员名</code><br><code>-&gt;</code>操作符：<code>对应结构指针-&gt;成员名</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 这两个操作符优先级相同，比*和[]高，结合性从左向右</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 假设px是结构x的指针，px指向的地址和结构第一个成员的地址是一样的，但是*px代表的是整个结构</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 当结构需要作为函数参数时，可以传递该结构的指针，效率较高，可以用const关键词防止对结构体的修改</div>\n<p><strong>4.2结构的引用</strong><br><strong>①结构的自引用</strong>：结构内部成员为自己本身是非法的，但是可以<strong>包含自己的指针类型</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F;非法，因为在声明next成员时，Node还有没被声明\ntypedef struct\n&#123;\n  ElemType data;\n  struct Node *next;\n&#125;Node;\n&#x2F;&#x2F;合法\ntypedef struct Node\n&#123;\n  ElemType data;\n  struct Node *next;\n&#125;Node;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 因为结构在定义时内存大小是不确定的，而结构指针的内存大小在结构创建前就已经确定</div>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 注意不能使用之前没有定义的结构标签</div>\n\n<p><strong>②结构之间的引用</strong>：当需要定义几种之间<strong>存在联系</strong>的结构，可以采用不完整声明</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">struct B; &#x2F;&#x2F;B的不完整声明\nstruct A\n&#123;\n\tstruct *B;\n&#125;;\nstruct B\n&#123;\n\tstruct A;\n&#125;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 注意，A中不能以B为成员，只能以B的指针为成员，因为不完整声明导致B的大小不能确定</div>\n\n\n<p><strong>4.3结构的存储分配</strong><br><strong>①</strong>正常情况下，编译器按照<strong>成员列表顺序</strong>一个一个给每个成员分配内存<br><strong>②</strong>当成员的存储需要满足正确的边界对齐条件，成员之间会出现未填充的内存空间</p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 边界对齐：访问特定类型变量的时候经常在特定的内存地址访问</div>\n<blockquote>\n<p>假设一台机器的整型值长度为4字节，且要求其<strong>起始存储位置</strong>必须能被4整除，而结构的起始位置也必须满足<strong>成员中边界要求最严格</strong>的对齐条件，则以下结构在内存中的存储情况如下</p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">struct X\n&#123;\n\tchar a;\n\tint b;\n\tchar c;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"/image/C_3.png\" alt=\"内存分配情况\"><br><strong>③对边界要求最严格的成员应该首先出现</strong>，这样可以<strong>节省内存</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">struct X\n&#123;\n\n\tint b;\n\tchar a;\n\tchar c;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"/image/C_4.png\" alt=\"内存分配情况\"><br><strong>④常用函数</strong>：<code>sizeof</code>可以得到一个结构的整体长度，<strong>包括因为边界对齐跳过的字节</strong>，<code>offsetof</code>可以确定结构中某个成员的位置（偏离结构存储起始位置的字节数）<br><strong>4.4位段</strong><br><strong>①声明格式</strong>：一种特殊的结构，成员必须是<code>int</code>、<code>signed</code>、<code>unsigned</code>类型，成员名后面是<strong>一个冒号和一个整数，该整数表示该成员占用的位的数目</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">struct WeiDuan\n&#123;\n\tunsigned a : 7;\n\tunsigned b : 6;\n\tunsigned c : 19;\n&#125;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 位段可以将长度为奇数的数据包装在一起，并且可以访问一个整型值的部分内容（这些部分内容可能有特定的含义）</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 显示的用signed和unsigned声明位段比较好，如果仅仅将位段声明为int类型，被解释为有符号数还是无符号数由编译器决定</div>\n<p><strong>②位段的移植性问题</strong></p>\n<blockquote>\n<p>很多编译器将位段<strong>成员</strong>的长度限制在<strong>一个整型值</strong>之内，32位机器上可以使用的位段声明可能在16位机器上无法使用<br>位段的内存是<strong>从左向右</strong>分配还是<strong>从右向左</strong>分配由机器决定<br>当位段的<strong>总位数不是8的倍数时</strong>，其内存分配是否要“边界对齐”取决于编译器</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 任何使用位段实现的任务，都可以通过移位和屏蔽实现，但是会麻烦一些</div>\n\n<p><strong>4.5联合</strong><br><strong>①声明格式</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">union\n&#123;\n\tfloat f;\n\tint i;\n&#125;fi;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>联合各个成员<strong>共用内存中的一个位置以及数据</strong>，当联合的某个成员被访问时，则将该联合所在位置的位以该成员类型解释被访问，换句话说，<strong>联合的各个成员决定了这些位是如何被解释的</strong></p>\n</blockquote>\n<p><strong>②联合的变体</strong>：联合各个成员的长度可以不同，比如说两个结构</p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 当联合中各个成员具有不同的长度，联合的长度就是它最长成员的长度</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 当成员之间大小相差太大时，可以将联合的成员修改为不同数据类型的指针，这样就不会造成空间浪费</div>\n<p><strong>③联合的初始化</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">union\n&#123;\n\tint a;\n\tfloat b;\n\tchar c[4];\n&#125;x &#x3D; &#123;5&#125;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 联合变量的初始值只有一个，且必须是联合第一个成员类型的数据</div>\n<h3 id=\"5-动态内存分配\"><a href=\"#5-动态内存分配\" class=\"headerlink\" title=\"5.动态内存分配\"></a>5.动态内存分配</h3><p><strong>5.1内存分配</strong><br><strong>①</strong><code>malloc()</code>:从<strong>内存池</strong>中提取一块<strong>连续</strong>的内存，并返回一个<strong>指向这块内存的指针</strong>，如果内存池没有合适的内存则返回<strong>NULL</strong>，这块内存<strong>没有被初始化</strong></p>\n<blockquote>\n<p>格式：<code>p = malloc（size）;</code><br><code>malloc()</code>返回值是<code>void *</code>，可以转化为任何类型的指针<br><code>size</code>为需要分配的<strong>字节数</strong>，其类型是<code>size_t</code>，一个<strong>无符号类型</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> malloc()返回内存的起始位置始终满足边界对齐条件</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 可以将size替换为n*sizeof（数据类型），n为数量，还可以提高程序的可移植性</div>\n<p><strong>②</strong><code>calloc()</code>：和<code>malloc</code>一样用于分配内存，但是<code>calloc</code>会将内存内所有元素初始化为0，会消耗一定的时间</p>\n<blockquote>\n<p>格式：<code>p = calloc(num,size);</code><br>其中<code>num</code>为元素的个数，<code>size</code>为每个元素的大小，类型均为size_t</p>\n</blockquote>\n<p><strong>③</strong><code>realloc()</code>：<strong>修改</strong>一个已经分配的内存块的大小，新增加的内存添加到原先内存块的<strong>尾部</strong>，没有被初始化，如果用于缩小原来的内存块，则将<strong>尾部</strong>的内存块拿掉</p>\n<blockquote>\n<p>格式：<code>p = realloc(ptr,size);</code><br>其中<code>ptr</code>是需要调整大小的指针，<code>size</code>是调整后内存的大小</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> C语言中，void*可以赋值给其他类型指针，但是在其他语言如C++中不行，故最好在前面加一个强制类型转换</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 若原先的内存块大小无法改变，则realloc会重新划分一块内存，并释放原来的内存，所以要使用realloc返回的指针</div>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 动态分配得到的指针是变量，但是我们不希望他改变，因为最后还需要释放掉，故有需要可以构建该指针的副本对内存进行操作</div>\n\n<p><strong>5.2内存释放</strong>：当分配的内存不再使用时，需要使用<code>free()</code>将其释放<br><strong>①函数原型</strong>：<code>void free (void *pointer)</code><br><strong>②使用格式</strong>：<code>free (p)</code><br><strong>5.3常见错误</strong><br><strong>①</strong>对NULL指针进行解引用<br><strong>②</strong>对分配的内存操作时越界<br><strong>③</strong>释放并为动态分配的内存<br><strong>④</strong>释放动态内存的一部分<br><strong>⑤</strong>访问一块已经被释放的内存，尤其是当内存分配指针被备份时<br><strong>⑥</strong>内存释放不及时，导致内存泄漏</p>\n<p><strong>5.4内存操作函数</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 和字符串的一些操作函数很像，但是遇到NUL字节不会停止</div>\n<p><strong>①</strong><code>memcpy()</code>：<strong>直接复制</strong>一块内存中数据到另一块内存中</p>\n<blockquote>\n<p>函数原型<code>void *memcpy(void *dst,void const *src,size_t length)</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 如上，内存操作函数接收和返回的参数都是void*，且会规定操作的内存长度</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> length是字节的个数，可以使用sizeof便捷计算</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 两块内存不能重叠</div>\n<p><strong>②</strong><code>memmove()</code>：类似于<code>memcpy()</code>，但是<code>memmove()</code>在转移时会经过一块<strong>临时内存</strong><br><strong>③</strong><code>memcmp()</code>：比较两块内存的内容（按照无符号字符逐字节比较）</p>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 不能用于比较非单字节数据</div>\n<p><strong>④</strong><code>memchr()</code>：查找某块内存某个字符<strong>第一次出现</strong>的位置<br><strong>⑤</strong><code>memset()</code>：将一段内存<strong>都设置</strong>为某个字符</p>\n"},{"title":"C语言学习笔记（一）","seo_title":"seo名称","toc":true,"indent":true,"top":false,"comments":1,"archive":true,"cover":false,"mathjax":false,"pin":false,"top_meta":false,"bottom_meta":false,"sidebar":["toc"],"keywords":"文章关键词","updated":"2023-11-07T14:10:58.014Z","date":"2023-11-07T14:10:58.014Z","img":"/medias/featureimages/0.webp","summary":"C语言基础","_content":"# C语言学习笔记（一）\n## C语言启蒙\n### 1.C语言程序组成简介\n#### 1.1空白\n>换行、`tab`和空格键，使得程序更加美观\n\n#### 1.2注释\n>解释程序，debug\n**①单行注释**：以`//`开始、以换行符结束\n**②多行注释**：以`/*`开始，以`*/`结束\n**③预处理注释**：用于注释**包含注释**的代码块\n```\n#if 0\n  statement\n#endif\n```\n{%wrong%}\n多行注释不能嵌套，第一个/*到第一个*/之间都视为注释\n{%endwrong%}\n\n#### 1.3预处理命令\n**①**`#include<文件名>`：将对应文件内容逐字写到对应位置\n**②**`#define 变量名 值`：将变量名（**大写**）对应位置替换为对应值\n\n#### 1.4函数原型（声明）\n>告诉编译器调用函数的**特征**（参数和返回值的个数和类型）\n{%right%}\n如果有一些函数声明经常需要使用，可以将他们的函数声明写到一个头文件中，再调用#include宏将该头文件写入即可\n{%endright%}\n\n#### 1.5main函数\n>程序执行的**起点**和**终点**（无异常）\n```\nint main (void)\n{\n  statement;\n  return 0;\n}\n```\n*** \n### 2.简单数据类型\n{%list%}\n基本数据类型有整型、浮点数、指针和聚合类型，这里只介绍整型和浮点型\n{%endlist%}\n#### 2.1整型\n**①字符**：`char`\n>`char`本质上是一个小整型，占**一个字节（8位）**\n\n**②整型**\n>**短整型**：`short int`\n**整型**：`int`\n**长整型**：`long int`\n`short int`至少占**16位**，`long int`至少占**32位**，`int`位数**由编译器决定**，通常是这种机器**最为高效的位数**，32位系统最可能是32位，64位系统最可能是64位，一些嵌入式系统可能是16位或者更小\n{%wrong%}\n在长度上，长整型≥整型≥短整型，但是他们能表示的范围是不同的\n{%endwrong%}\n{%right%}\n在C11的标准中追加stdint.h避免了位数的不确定如：int32_t就是指4个字节的，int8_t就是一个字节\n{%endright%}\n\n**③有符号数（signed）和无符号数（unsigned）**\n>对于`int`、`short int`、`long int`来说，缺省情况下为**有符号数**，有符号数可表示正负数和0，无符号数**只能表示正数**\n对于`char`来说，分为`char`、`singed char`和`unsigned char`，其中`char`的带符号与否**取决于编译器**\n{%right%}\n为了提高程序的可移植性，需要将char限制在其余两者的交集（0~127）内，且只对显式声明为有符号数和无符号数再对其进行数值运算\n{%endright%}\n\n#### 2.2浮点类型\n>**`float`单精度浮点数**\n**`double`双精度浮点数**\n**`long double`扩展精度浮点数，只有某些机器支持扩展精度**\n{%list%}\nANSI C没有规定浮点类型的长度，long double≥doubl≥float，字面量在缺省情况下一般为double，除非在后面添加l、f后缀\n{%endlist%}\n\n#### 2.3字面值\n>**整型字面值**：在缺省情况下，字面值类型就是**能表示**该字面量的**最短的类型**，也可以通过**添加后缀**改变字面值的类型，一般采用**十进制**写法，也可采用其他进制（需要特殊前缀）\n**字符型字面值**：`‘内容’`，类型总是`int`，不能添加后缀改变\n**字符串字面值**：`“内容”`，以`NUL`字节结尾，所以内容中不能存在`NUL`\n**浮点数字面值**：通常是`double`，可以通过后缀改变其类型\n{%list%}\n字面值被创建后就不能改变\n{%endlist%}\n\n#### 2.4枚举类型\n{%list%}\n本质上还是int，相当于被命名的int集合\n{%endlist%}\n>**命名格式**：`enum 枚举类型名{枚举1,枚举2,枚举3…} ；`\n如果不对枚举进行赋值，则枚举从0开始，依次增大1，如果对有的被赋值，有的没有，则没有被赋值的枚举**比前者大1**\n\n\n***\n\n### 3.变量\n#### 3.1声明与定义\n**①格式**：`说明符 声明表达式列表`\n>**说明符**：用于指明变量的**基本类型**、**存储类型**和**作用域**，可以有一个，也可以有多个\n**声明表达式**：命名变量、赋值\n\n**②声明和定义**\n>**声明**：用于向程序表明变量的**类型和名字**\n**定义**：用于为变量**分配存储空间**，还可为变量**指定初始值**\n{%list%}\n对于int a;，如果a是全局变量的话就是声明，是局部变量的话就是定义\n{%endlist%}\n>可以利用`extern`修饰**局部变量**表明是变量的**声明**，该关键词含义是此变量/函数是**在别处定义**的，要在此处引用\n\n{%right%}\n在实际开发中，经常会在函数或变量定义之前就使用它们，这个时候就需要提前声明（extern）\n{%endright%}\n{%warning%}\n变量可以声明多次，而只能定义一次\n{%endwarning%}\n{%wrong%}\n在声明变量时不要赋值，否则就是定义了\n{%endwrong%}\n**③实例**\n```\ninclude <stdio.h>\nint a;\nint a;\nint main()\n{\n\treturn 0;\n}\n```\n>该程序正常工作\n```\ninclude <stdio.h>\n\nint main()\n{\n\tint a;\n    int a;\n\treturn 0;\n}\n```\n>该程序由于**重复定义**错误\n\n**④声明/定义的解释**\n{%right%}\n变量的声明可以理解为，变量通过声明表达式的运算得到说明符，如int a[]可以理解为变量a通过下标运算得到一个整数，则a就是一个数组，本质上是一个指向整型的指针\n{%endright%}\n\n#### 3.2typedef\n**①格式**：只要在**变量声明**前面加上`typedef`，就成了**类型定义**，对应变量名即称为新的类型名\n>如`typedef int (*function_t) (int param);`，在这里`function_t`则称为了对应的函数指针的类型名\n\n**②与define的区别**：`define`只是简单的替换，如下，`a`被定义为一个指针，而`b`被定义为一个字符\n```\n#define char* ptr_to_char\nptr_to_char a,b;\n```\n{%wrong%}\n在进行句法分析的时候，typedef和存储类型指示符是等价的，故该关键词不能和static等存储类型指示符一起用\n{%endwrong%}\n\n#### 3.3const常量\n>使得变量被**初始化后不得被更改**\n\n**①修饰对象**\n>`const`修饰指针时，需要注意`const`修饰的是**指针**还是**指针指向的值**\n```\nint const *a：指针指向的值不能被修改\nint * const a：指针无法被修改\n```\n**②`const`与`define`**\n>`const`只能用于允许使用变量的地方，比如数组的大小就最好使用`define`\n{%right%}\n函数中被const修饰的形参获得对应的实参的值后无法被改变，当你不希望函数改变该值时，可以使用const修饰该形参\n{%endright%}\n\n#### 3.4作用域\n>变量只能在一定的区域中才能被访问，即变量**能被访问的区域**\n\n**①代码块作用域**\n>代码块中变量的作用域**于代码块开头开始，到代码块结尾结束**\n\n>**嵌套**的代码块中，**同名**内层变量会**覆盖**外层变量，包括全局变量\n**非嵌套**的代码块，每个代码块的变量无法被另一个代码块访问，**代码块之间变量隔离**\n{%list%}\n在ANSI C中，函数形参的作用域在函数最外层代码块内（动态变量）\n{%endlist%}\n\n**②文件作用域**\n>在**代码块外**声明的变量都具有文件作用域（`extern`属性），从他们**声明之处到所处源文件结尾**都可以访问\n{%list%}\n使用include包含到该文件的变量属于文件作用域\n{%endlist%}\n**③原型作用域**\n>只适用于**函数原型（不是函数定义）**中声明的参数名，只存在那个括号内\n\n**④函数作用域**\n>只适用于语句标签，一个函数中所有**语句标签必须唯一**\n\n#### 3.5链接属性（如果使用extern修饰局部变量的效果是什么？？？）\n>变量的链接属性决定如何处理在**不同文件中的同名变量**\n\n**①`none`**\n>只能在其**所在代码块中**被访问。\n\n**②`internal`**\n>**同一个源文件**中的所有同名变量都是同一个实体，可以在**该源文件**中被访问\n\n**③`external`**\n>**所有源文件**的所有同名变量是**同一个实体**，可以被所有源文件访问\n\n{%list%}\n在缺省情况下，在代码块外的链接属性为external，其余none\n{%endlist%}\n{%right%}\n拥有extern属性的变量在单个源文件中，从头到尾都可以访问，在有多个源文件时，其他源文件也可以访问\n{%endright%}\n{%warning%}\n注意拥有extern属性的变量只是可以被其他文件访问，若要在其他源文件中使用，需要在使用的源文件中添加对应变量的声明（需要加上extern关键词）\n{%endwarning%}\n{%wrong%}\n在多个文件中定义同名的全局变量会导致链接错误，因此建议在一个文件中定义一个全局变量，并通过extern关键字在其他文件中进行引用（可以声明在头文件中）\n{%endwrong%}\n\n\n\n#### 3.6存储类型（静态变量和全局变量的区别？？？？）\n\n**①静态内存**\n>在**代码块之外**声明的变量被称为**静态变量**，无法改变其存储类型，在**程序运行之前**创建，在程序的**整个执行期间**始终存在\n{%list%}\n全局变量总是静态变量\n{%endlist%}\n**②堆栈**\n>在**代码块内**声明的变量被称为**动态变量**，存储在**堆栈**中，当**程序执行流到达该代码块时，才被创建，执行流离开该代码块时，该变量被销毁**，当该代码块重复执行时（比如循环），**内存位置不固定**\n\n**③硬件寄存器**\n>称为**寄存器变量**，**访问效率更高**，可以把**高频使用**的变量声明为寄存器变量，寄存器变量的**生命周期和动态变量**相同\n{%warning%}\n寄存器变量是一种请求，编译器可能忽略该请求，同时，当寄存器数量不足是，寄存器变量也可能转变为自动变量，且只要声明为寄存器变量，就不能对其取址\n{%endwarning%}\n\n#### 3.7相关属性修改\n**①`static`**\n>对**缺省属性**为`extern`属性的的变量，`static`将改变其**链接属性**，变为`internal`\n对**缺省属性**为`none`属性的的变量，`static`将改变其**存储类型**，由动态变量变为**静态变量**\n{%list%}\n用static将动态变量转化为静态变量，其作用域不会改变，原先的值也不会改变\n{%endlist%}\n{%warning%}\nstatic不能修饰形参\n{%endwarning%}\n\n**②`extern`**\n可以给标识符赋予`external`链接属性（只需要在声明处添加即可），则**所有源文件都能访问该变量**\n{%warning%}\n如果标识符在第一次声明中已经指定了链接属性，那么extern在后面的第二次或以后的声明中，不会更改第一次声明所指定的链接属性\n{%endwarning%}\n\n**③`register`**\n>将**动态变量**转化为**寄存器变量**\n\n\n#### 3.8C程序内存分布\n**①代码段**\n>存放**程序执行代码**的内存区域，在**程序运行前**就已经确定，同时其中也包括一些只读的常量\n\n**②初始化数据段**\n>存放**已初始化的全局变量**，在进程运行时**静态分配**\n\n**③未初始化数据段**\n>存放程序中**未初始化的全局变量**和**静态变量**，默认为0，在进程运行时静态分配\n\n**④栈**\n>按内存地址**由高到低**扩张，最大长度编译时确定，**自动变量以及函数调用时所需的信息**（如每次函数调用返回地址、寄存器的值）存放在此段。递归函数每次调用自身时，就会使用一个新的栈帧存放其数据\n\n**⑤堆**\n>自由申请的空间，按内存地址**由低到高**方向扩张，其长度由系统内存/虚拟内存上限决定，通常在堆中进行**动态存储分配**\n{%list%}\n每个线程都会有自己的栈，但是堆空间是共用的。\n{%endlist%}\n{%warning%}\n自动变量因为其地址只有在其创建时确定，故其缺省情况下的初始值是垃圾\n{%endwarning%}\n![C程序内存分布](/image/C_2.png)\n\n### 4.语句\n#### 4.1空语句\n>本身**只包含一个分号**，用于**不需要操作但是语法要求出现一条完整语句**的场合\n\n#### 4.2表达式语句\n>每个表达式语句都有其**对应返回值**，但是没有其他操作的情况下，该返回值**不被保存**\n\n#### 4.3代码块\n>被一对花括号囊括的多条语句，在语法上相当于**一条语句**\n\n#### 4.4条件语句\n```\nif （expression）\n\t{\n\tstatement;\n\t}\nelse if (expression)\n\t{\n\tstatement;\n\t}\nelse \n\t{\n\tstatement；\n\t}\n  ```\n>出现`if`嵌套时，`else`从句属于**最靠近**他的**不完整**的`if`从句\n\n#### 4.5循环语句\n**①`while`循环**\n```\nwhile （expression）\n\t{\n\tstatement;\n\t}\n```\n\n**②f`or`循环**\n```\nfor （初始化语句; 条件语句;调整语句）\n\t{\n\tstatement;\n\t}\n```\n>**初始化语句在循环一开始执行，条件语句在每一次循环开始之前执行，调整语句在每一次循环后执行**\n\n**③`do while`循环**\n```\ndo{\n\tstatement;\n\t}while(expression);\n```\n>`while`语句相比，`do while`语句会先执行语句然后再判断条件是否成立\n\n**④`switch`循环**\n```\nswitch（expression）\n\t{\n    case expression_n：\n\t  statement；\n      break；\n    default：\n      statement；\n      break；\n\t}\n```\n\n{%list%}\nexpression的结果必须是整数，C语言中没有布尔类型，非零值为真，零值为假，缺省情况下，真值为1，假值为0\n{%endlist%}\n{%right%}\n在循环中可以使用break语句，用于永久终止循环，使用continue语句终止当前的循环\n{%endright%}\n{%warning%}\n若循环是嵌套的，则break和continue语句，只能终止其所在的循环\n{%endwarning%}\n{%wrong%}\n当执行到匹配到case语句后，执行流会一直往下直到switch语句结束(包括default子句)，所以要在每个case语句下添加break及时退出，同时这也是一种特性，可以加以利用\n{%endwrong%}\n\n#### 4.6跳转语句\n```\nbiaoqian:\ngoto biaoqian;\n```\n>标签就是**标识符后面加一个冒号**\n可以通过goto语句**跳出嵌套循环**\n{%wrong%}\n非必要不使用goto语句\n{%endwrong%}\n\n### 5.操作符\n#### 5.1基本操作符\n**①算术操作符**\n>`+`、`-`、`*`、`/`、`%`（取余）\n{%warning%}\n/操作符只有当两个操作数都为整型时，才做整型运算，%只能接受两个整型\n{%endwarning%}\n**②关系操作符**\n>`>`、`<`、`>=`、`<=`、`!=`、`==`\n\n**③逻辑操作符**\n>`&&`（与）、`||`（或）、`^`（异）、`！`（否）\n{%list%}\n短路求值，通过第一个操作数能判断结果就不会判断后面的操作数，且要求操作数均为整数\n{%endlist%}\n**④赋值操作符**\n>**基本赋值操作符**：`=`\n**复合赋值符**：比如`+=`，`a += （expression）`代表` a = a+（expression）`\n{%list%}\n赋值表达式语句的返回值是左操作数的新值，所以可以连等a=b=10\n{%endlist%}\n{%right%}\n当a比较复杂或者其中有需要编译器实时计算的项，采用复合赋值符可以提高效率\n{%endright%}\n\n**⑤逗号操作符**\n>`expression1,expression2,...,expressionN`,`expression`都会被求值，但是整个表达式的值是**最后一个表达式**的值\n\n**⑥条件操作符**\n>`expression1 ？ expression2 ： expression3`：如果`expression1`值为真，则该表达式结果为`expression2`，反之为`expression3`\n\n**⑦单目操作符**\n>`&`（取址）、`*`（引用）、`sizeof()`（判断类型长度）、`~`（求补，位取相反）、`++/--`（递增/递减）\n{%list%}\n++/--为前缀时，先递加/减，再进行相关操作，为后缀时，先进行相关操作，再递加/减\n{%endlist%}\n{%wrong%}\n强制类型转换的优先级非常高\n{%endwrong%}\n\n#### 5.2位操作符\n**①移位操作符**\n>**左移`<<`**：最左边的几位被丢弃，右边多出来的几位**由0补齐**\n**右移`>>`**：可以选择两种移位方案，一种是**逻辑移位**，用**0**补充，一种是**算数移位**，补充的**取决于符号数**，对于**无符号数**，采用的都是**逻辑移位**，对于**有符号数**，采用逻辑移位还是算数移位**取决于编译器**，可能会影响程序的移植性\n{%warning%}\n两边的操作数都必须是整型，需要移动的位数必须正数，且不能超过被操作数的位数\n{%endwarning%}\n**②逻辑位操作符**\n>对操作数的**各个位**执行逻辑运算（`&`与，`|`或，异或`^`）\n`value = value | 1 << bit_number;`即将`bit_number`对应位置转换为1\n{%list%}\n位操作符优先级比移位操作符高\n{%endlist%}\n\n#### 5.3左值和右值\n>左值相当于一个**容器**，可以储存结果的地方，一个内存位置，右值则是一个**可以被储存的数据**\n变量`a`可以表示一个容器，也可以表示一个数据，`a+1`只能是一个数据\n{%warning%}\n左值是一个确切知道地址的容器\n{%endwarning%}\n\n#### 5.4类型转换\n**①隐式类型转换**\n>在C中的整型算数运算总是以**缺省整型类型精度**进行的，所以操作数是**字符型**和**短整型**时，在使用之前会先被**转化为普通整型**再进行运算，如果要将结果存储到字符型和短整型中，则会将结果进行截短。\n\n**②算数转换**\n>当多操作数进行运算时，且操作数属于不同的类型，则会**将精度低的数据类型转化为精度高的数据类型进行运算**\n\n**③强制类型转换**\n>`(类型) [操作数/表达式]`\n{%warning%}\n在16位机器上，第三个算式可能会产生溢出，可以在运算前将 a、b中的一个或者两个转化为long即可\n{%endwarning%}\n```\nint a = 5000；\nint b = 25；\nlong c = a*b；\n```\n{%warning%}\n强制类型转换可能会导致精度的损失，因为位数不同\n{%endwarning%}\n#### 5.4优先级和结合性\n**①优先级**\n>标识运算符在表达式中的**运算顺序**\n\n**②结合性**\n>当一个运算对象两侧运算符的**优先级别相同时**, 运算对象与运算符的结合顺序\n>比如`*a++`，其中`*`和`++`为同一优先级，结合性为右到左，先进行`a++`，再进行`*(a++)`\n{%warning%}\n表达式的求值顺序不一定完全按照优先级和结合性求值，如c + --c，我们并不知道c是否是在执行了--c后再与其相加，结果取决于编译器，面对有副作用的操作符需要小心\n{%endwarning%}\n\n### 6.字符串\n\n**6.1定义**：一串以`'/0'`结尾的字符 \n>`'/0'`的位模式全为0，也叫**NUL字节**，是字符串的**终止符**\n{%list%}\nNUL字节不是字符串的一部分，字符串长度不包括终止符的长度\n{%endlist%}\n\n**6.2基本操作**\n{%list%}\n需要包含string.h头文件\n{%endlist%}\n**①**`strlen()`：**测量字符串长度**，即字符串包含的**字符个数**\n>该函数返回的长度的数据类型为`size_t`，是一个**无符号数**\n{%warning%}\n两个无符号数a、b相互比较时，应该使用a>b，而不是a-b>0，因为无符号数运算结果为无符号数，无符号数永远大于0\n{%endwarning%}\n{%wrong%}\n大部分字符串相关函数都是根据终止符判断字符串长度，所以使用者要确保操作后字符串不会溢出，否则会缺少终止符\n{%endwrong%}\n**②**`strcpy()`：**复制字符串**，但是如果复制的字符串长度**超出了容器的限度**，则会**覆盖其后面的内存空间**\n{%wrong%}\n大部分字符串函数不允许两个数组参数重叠，否则函数的返回值是未定义的\n{%endwrong%}\n**③**`strcat()`：**连接字符串**，将一个字符串添加到另一个字符串后面\n**④**`strcmp()`：**字符串比较**，进行的是**字典比较**\n>**字典比较**：对两个字符串的逐个字符从头进行比较，只要比较出一个字符大小即可判断结果，`'/0'`小于任何字符\n**⑤长度受限的字符串函数**：为了**防止目标数组溢出**，定义了对应函数的长度受限版本，接受一个长度参数，用于限制操作的字符个数，如`strncpy()`\n{%wrong%}\n但是这些函数可能导致目标数组**不是以“/0”结尾**，可能会**导致程序崩溃**\n{%endwrong%}\n{%right%}\n可以在函数调用完后将字符数组的最后一个元素改为NUL\n{%endright%}\n\n\n**6.3字符串查找**\n**①字符查找**\n>`strchr()`：返回对应字符**第一次**出现的位置\n`strrchr()`：返回对应字符**最后一次**出现的位置\n`strpbrk()`：返回**一组字符中任意一个字符**第一次出现的位置\n\n**②字串查找**\n>`strstr()`：返回**子串**第一次出现的起始位置\n`strtok()`：删除字符串中的所有**标记字符**，其第二个参数是一个字符串，也就是**标记字符的集合**\n`strspn()`：检索字符串str1（第一个参数）中**第一个不在字符串str2（第二个参数）中出现的字符下标**\n`strcspn()`:检索字符串str1（第一个参数）中**第一个出现在字符串str2（第二个参数）中出现的字符下标**\n\n\n**6.4字符操作**\n{%list%}\n需要包含ctype.h头文件\n{%endlist%}\n**①字符分类**：根据对应分类函数定义，判断该字符是否为该类型\n>`isspace()`：是否为空白字符\n`isdigit()`：是否为数字\n{%list%}\n还有很多类似函数，可自行查询\n{%endlist%}\n**②字符转换**：转换字符的大小写\n>`tolower()`：转换为小写形式\n`toupper()`：转化为大写形式\n{%right%}\n直接测试或者操纵字符可能会影响程序的移植性，比如if(ch>='A' && ch<='Z')判断ch是否为大写字母，在使用EBCDIC字符集上的机器上将失败，但是使用isupper(ch)则无限制\n{%endright%}\n\n\n\n\n\n\n\n\n\n","source":"_posts/C语言学习笔记（一）.md","raw":"---\ntitle: C语言学习笔记（一）\nseo_title: seo名称\ntoc: true\nindent: true\ntop: false\ncomments: true\narchive: true\ncover: false\nmathjax: false\npin: false\ntop_meta: false\nbottom_meta: false\nsidebar:\n  - toc\ntag:\n  - C语言\n  - 《C和指针》        \ncategories: 编程语言\nkeywords: 文章关键词\nupdated: ''\ndate:\nimg: /medias/featureimages/0.webp\nsummary: C语言基础\n---\n# C语言学习笔记（一）\n## C语言启蒙\n### 1.C语言程序组成简介\n#### 1.1空白\n>换行、`tab`和空格键，使得程序更加美观\n\n#### 1.2注释\n>解释程序，debug\n**①单行注释**：以`//`开始、以换行符结束\n**②多行注释**：以`/*`开始，以`*/`结束\n**③预处理注释**：用于注释**包含注释**的代码块\n```\n#if 0\n  statement\n#endif\n```\n{%wrong%}\n多行注释不能嵌套，第一个/*到第一个*/之间都视为注释\n{%endwrong%}\n\n#### 1.3预处理命令\n**①**`#include<文件名>`：将对应文件内容逐字写到对应位置\n**②**`#define 变量名 值`：将变量名（**大写**）对应位置替换为对应值\n\n#### 1.4函数原型（声明）\n>告诉编译器调用函数的**特征**（参数和返回值的个数和类型）\n{%right%}\n如果有一些函数声明经常需要使用，可以将他们的函数声明写到一个头文件中，再调用#include宏将该头文件写入即可\n{%endright%}\n\n#### 1.5main函数\n>程序执行的**起点**和**终点**（无异常）\n```\nint main (void)\n{\n  statement;\n  return 0;\n}\n```\n*** \n### 2.简单数据类型\n{%list%}\n基本数据类型有整型、浮点数、指针和聚合类型，这里只介绍整型和浮点型\n{%endlist%}\n#### 2.1整型\n**①字符**：`char`\n>`char`本质上是一个小整型，占**一个字节（8位）**\n\n**②整型**\n>**短整型**：`short int`\n**整型**：`int`\n**长整型**：`long int`\n`short int`至少占**16位**，`long int`至少占**32位**，`int`位数**由编译器决定**，通常是这种机器**最为高效的位数**，32位系统最可能是32位，64位系统最可能是64位，一些嵌入式系统可能是16位或者更小\n{%wrong%}\n在长度上，长整型≥整型≥短整型，但是他们能表示的范围是不同的\n{%endwrong%}\n{%right%}\n在C11的标准中追加stdint.h避免了位数的不确定如：int32_t就是指4个字节的，int8_t就是一个字节\n{%endright%}\n\n**③有符号数（signed）和无符号数（unsigned）**\n>对于`int`、`short int`、`long int`来说，缺省情况下为**有符号数**，有符号数可表示正负数和0，无符号数**只能表示正数**\n对于`char`来说，分为`char`、`singed char`和`unsigned char`，其中`char`的带符号与否**取决于编译器**\n{%right%}\n为了提高程序的可移植性，需要将char限制在其余两者的交集（0~127）内，且只对显式声明为有符号数和无符号数再对其进行数值运算\n{%endright%}\n\n#### 2.2浮点类型\n>**`float`单精度浮点数**\n**`double`双精度浮点数**\n**`long double`扩展精度浮点数，只有某些机器支持扩展精度**\n{%list%}\nANSI C没有规定浮点类型的长度，long double≥doubl≥float，字面量在缺省情况下一般为double，除非在后面添加l、f后缀\n{%endlist%}\n\n#### 2.3字面值\n>**整型字面值**：在缺省情况下，字面值类型就是**能表示**该字面量的**最短的类型**，也可以通过**添加后缀**改变字面值的类型，一般采用**十进制**写法，也可采用其他进制（需要特殊前缀）\n**字符型字面值**：`‘内容’`，类型总是`int`，不能添加后缀改变\n**字符串字面值**：`“内容”`，以`NUL`字节结尾，所以内容中不能存在`NUL`\n**浮点数字面值**：通常是`double`，可以通过后缀改变其类型\n{%list%}\n字面值被创建后就不能改变\n{%endlist%}\n\n#### 2.4枚举类型\n{%list%}\n本质上还是int，相当于被命名的int集合\n{%endlist%}\n>**命名格式**：`enum 枚举类型名{枚举1,枚举2,枚举3…} ；`\n如果不对枚举进行赋值，则枚举从0开始，依次增大1，如果对有的被赋值，有的没有，则没有被赋值的枚举**比前者大1**\n\n\n***\n\n### 3.变量\n#### 3.1声明与定义\n**①格式**：`说明符 声明表达式列表`\n>**说明符**：用于指明变量的**基本类型**、**存储类型**和**作用域**，可以有一个，也可以有多个\n**声明表达式**：命名变量、赋值\n\n**②声明和定义**\n>**声明**：用于向程序表明变量的**类型和名字**\n**定义**：用于为变量**分配存储空间**，还可为变量**指定初始值**\n{%list%}\n对于int a;，如果a是全局变量的话就是声明，是局部变量的话就是定义\n{%endlist%}\n>可以利用`extern`修饰**局部变量**表明是变量的**声明**，该关键词含义是此变量/函数是**在别处定义**的，要在此处引用\n\n{%right%}\n在实际开发中，经常会在函数或变量定义之前就使用它们，这个时候就需要提前声明（extern）\n{%endright%}\n{%warning%}\n变量可以声明多次，而只能定义一次\n{%endwarning%}\n{%wrong%}\n在声明变量时不要赋值，否则就是定义了\n{%endwrong%}\n**③实例**\n```\ninclude <stdio.h>\nint a;\nint a;\nint main()\n{\n\treturn 0;\n}\n```\n>该程序正常工作\n```\ninclude <stdio.h>\n\nint main()\n{\n\tint a;\n    int a;\n\treturn 0;\n}\n```\n>该程序由于**重复定义**错误\n\n**④声明/定义的解释**\n{%right%}\n变量的声明可以理解为，变量通过声明表达式的运算得到说明符，如int a[]可以理解为变量a通过下标运算得到一个整数，则a就是一个数组，本质上是一个指向整型的指针\n{%endright%}\n\n#### 3.2typedef\n**①格式**：只要在**变量声明**前面加上`typedef`，就成了**类型定义**，对应变量名即称为新的类型名\n>如`typedef int (*function_t) (int param);`，在这里`function_t`则称为了对应的函数指针的类型名\n\n**②与define的区别**：`define`只是简单的替换，如下，`a`被定义为一个指针，而`b`被定义为一个字符\n```\n#define char* ptr_to_char\nptr_to_char a,b;\n```\n{%wrong%}\n在进行句法分析的时候，typedef和存储类型指示符是等价的，故该关键词不能和static等存储类型指示符一起用\n{%endwrong%}\n\n#### 3.3const常量\n>使得变量被**初始化后不得被更改**\n\n**①修饰对象**\n>`const`修饰指针时，需要注意`const`修饰的是**指针**还是**指针指向的值**\n```\nint const *a：指针指向的值不能被修改\nint * const a：指针无法被修改\n```\n**②`const`与`define`**\n>`const`只能用于允许使用变量的地方，比如数组的大小就最好使用`define`\n{%right%}\n函数中被const修饰的形参获得对应的实参的值后无法被改变，当你不希望函数改变该值时，可以使用const修饰该形参\n{%endright%}\n\n#### 3.4作用域\n>变量只能在一定的区域中才能被访问，即变量**能被访问的区域**\n\n**①代码块作用域**\n>代码块中变量的作用域**于代码块开头开始，到代码块结尾结束**\n\n>**嵌套**的代码块中，**同名**内层变量会**覆盖**外层变量，包括全局变量\n**非嵌套**的代码块，每个代码块的变量无法被另一个代码块访问，**代码块之间变量隔离**\n{%list%}\n在ANSI C中，函数形参的作用域在函数最外层代码块内（动态变量）\n{%endlist%}\n\n**②文件作用域**\n>在**代码块外**声明的变量都具有文件作用域（`extern`属性），从他们**声明之处到所处源文件结尾**都可以访问\n{%list%}\n使用include包含到该文件的变量属于文件作用域\n{%endlist%}\n**③原型作用域**\n>只适用于**函数原型（不是函数定义）**中声明的参数名，只存在那个括号内\n\n**④函数作用域**\n>只适用于语句标签，一个函数中所有**语句标签必须唯一**\n\n#### 3.5链接属性（如果使用extern修饰局部变量的效果是什么？？？）\n>变量的链接属性决定如何处理在**不同文件中的同名变量**\n\n**①`none`**\n>只能在其**所在代码块中**被访问。\n\n**②`internal`**\n>**同一个源文件**中的所有同名变量都是同一个实体，可以在**该源文件**中被访问\n\n**③`external`**\n>**所有源文件**的所有同名变量是**同一个实体**，可以被所有源文件访问\n\n{%list%}\n在缺省情况下，在代码块外的链接属性为external，其余none\n{%endlist%}\n{%right%}\n拥有extern属性的变量在单个源文件中，从头到尾都可以访问，在有多个源文件时，其他源文件也可以访问\n{%endright%}\n{%warning%}\n注意拥有extern属性的变量只是可以被其他文件访问，若要在其他源文件中使用，需要在使用的源文件中添加对应变量的声明（需要加上extern关键词）\n{%endwarning%}\n{%wrong%}\n在多个文件中定义同名的全局变量会导致链接错误，因此建议在一个文件中定义一个全局变量，并通过extern关键字在其他文件中进行引用（可以声明在头文件中）\n{%endwrong%}\n\n\n\n#### 3.6存储类型（静态变量和全局变量的区别？？？？）\n\n**①静态内存**\n>在**代码块之外**声明的变量被称为**静态变量**，无法改变其存储类型，在**程序运行之前**创建，在程序的**整个执行期间**始终存在\n{%list%}\n全局变量总是静态变量\n{%endlist%}\n**②堆栈**\n>在**代码块内**声明的变量被称为**动态变量**，存储在**堆栈**中，当**程序执行流到达该代码块时，才被创建，执行流离开该代码块时，该变量被销毁**，当该代码块重复执行时（比如循环），**内存位置不固定**\n\n**③硬件寄存器**\n>称为**寄存器变量**，**访问效率更高**，可以把**高频使用**的变量声明为寄存器变量，寄存器变量的**生命周期和动态变量**相同\n{%warning%}\n寄存器变量是一种请求，编译器可能忽略该请求，同时，当寄存器数量不足是，寄存器变量也可能转变为自动变量，且只要声明为寄存器变量，就不能对其取址\n{%endwarning%}\n\n#### 3.7相关属性修改\n**①`static`**\n>对**缺省属性**为`extern`属性的的变量，`static`将改变其**链接属性**，变为`internal`\n对**缺省属性**为`none`属性的的变量，`static`将改变其**存储类型**，由动态变量变为**静态变量**\n{%list%}\n用static将动态变量转化为静态变量，其作用域不会改变，原先的值也不会改变\n{%endlist%}\n{%warning%}\nstatic不能修饰形参\n{%endwarning%}\n\n**②`extern`**\n可以给标识符赋予`external`链接属性（只需要在声明处添加即可），则**所有源文件都能访问该变量**\n{%warning%}\n如果标识符在第一次声明中已经指定了链接属性，那么extern在后面的第二次或以后的声明中，不会更改第一次声明所指定的链接属性\n{%endwarning%}\n\n**③`register`**\n>将**动态变量**转化为**寄存器变量**\n\n\n#### 3.8C程序内存分布\n**①代码段**\n>存放**程序执行代码**的内存区域，在**程序运行前**就已经确定，同时其中也包括一些只读的常量\n\n**②初始化数据段**\n>存放**已初始化的全局变量**，在进程运行时**静态分配**\n\n**③未初始化数据段**\n>存放程序中**未初始化的全局变量**和**静态变量**，默认为0，在进程运行时静态分配\n\n**④栈**\n>按内存地址**由高到低**扩张，最大长度编译时确定，**自动变量以及函数调用时所需的信息**（如每次函数调用返回地址、寄存器的值）存放在此段。递归函数每次调用自身时，就会使用一个新的栈帧存放其数据\n\n**⑤堆**\n>自由申请的空间，按内存地址**由低到高**方向扩张，其长度由系统内存/虚拟内存上限决定，通常在堆中进行**动态存储分配**\n{%list%}\n每个线程都会有自己的栈，但是堆空间是共用的。\n{%endlist%}\n{%warning%}\n自动变量因为其地址只有在其创建时确定，故其缺省情况下的初始值是垃圾\n{%endwarning%}\n![C程序内存分布](/image/C_2.png)\n\n### 4.语句\n#### 4.1空语句\n>本身**只包含一个分号**，用于**不需要操作但是语法要求出现一条完整语句**的场合\n\n#### 4.2表达式语句\n>每个表达式语句都有其**对应返回值**，但是没有其他操作的情况下，该返回值**不被保存**\n\n#### 4.3代码块\n>被一对花括号囊括的多条语句，在语法上相当于**一条语句**\n\n#### 4.4条件语句\n```\nif （expression）\n\t{\n\tstatement;\n\t}\nelse if (expression)\n\t{\n\tstatement;\n\t}\nelse \n\t{\n\tstatement；\n\t}\n  ```\n>出现`if`嵌套时，`else`从句属于**最靠近**他的**不完整**的`if`从句\n\n#### 4.5循环语句\n**①`while`循环**\n```\nwhile （expression）\n\t{\n\tstatement;\n\t}\n```\n\n**②f`or`循环**\n```\nfor （初始化语句; 条件语句;调整语句）\n\t{\n\tstatement;\n\t}\n```\n>**初始化语句在循环一开始执行，条件语句在每一次循环开始之前执行，调整语句在每一次循环后执行**\n\n**③`do while`循环**\n```\ndo{\n\tstatement;\n\t}while(expression);\n```\n>`while`语句相比，`do while`语句会先执行语句然后再判断条件是否成立\n\n**④`switch`循环**\n```\nswitch（expression）\n\t{\n    case expression_n：\n\t  statement；\n      break；\n    default：\n      statement；\n      break；\n\t}\n```\n\n{%list%}\nexpression的结果必须是整数，C语言中没有布尔类型，非零值为真，零值为假，缺省情况下，真值为1，假值为0\n{%endlist%}\n{%right%}\n在循环中可以使用break语句，用于永久终止循环，使用continue语句终止当前的循环\n{%endright%}\n{%warning%}\n若循环是嵌套的，则break和continue语句，只能终止其所在的循环\n{%endwarning%}\n{%wrong%}\n当执行到匹配到case语句后，执行流会一直往下直到switch语句结束(包括default子句)，所以要在每个case语句下添加break及时退出，同时这也是一种特性，可以加以利用\n{%endwrong%}\n\n#### 4.6跳转语句\n```\nbiaoqian:\ngoto biaoqian;\n```\n>标签就是**标识符后面加一个冒号**\n可以通过goto语句**跳出嵌套循环**\n{%wrong%}\n非必要不使用goto语句\n{%endwrong%}\n\n### 5.操作符\n#### 5.1基本操作符\n**①算术操作符**\n>`+`、`-`、`*`、`/`、`%`（取余）\n{%warning%}\n/操作符只有当两个操作数都为整型时，才做整型运算，%只能接受两个整型\n{%endwarning%}\n**②关系操作符**\n>`>`、`<`、`>=`、`<=`、`!=`、`==`\n\n**③逻辑操作符**\n>`&&`（与）、`||`（或）、`^`（异）、`！`（否）\n{%list%}\n短路求值，通过第一个操作数能判断结果就不会判断后面的操作数，且要求操作数均为整数\n{%endlist%}\n**④赋值操作符**\n>**基本赋值操作符**：`=`\n**复合赋值符**：比如`+=`，`a += （expression）`代表` a = a+（expression）`\n{%list%}\n赋值表达式语句的返回值是左操作数的新值，所以可以连等a=b=10\n{%endlist%}\n{%right%}\n当a比较复杂或者其中有需要编译器实时计算的项，采用复合赋值符可以提高效率\n{%endright%}\n\n**⑤逗号操作符**\n>`expression1,expression2,...,expressionN`,`expression`都会被求值，但是整个表达式的值是**最后一个表达式**的值\n\n**⑥条件操作符**\n>`expression1 ？ expression2 ： expression3`：如果`expression1`值为真，则该表达式结果为`expression2`，反之为`expression3`\n\n**⑦单目操作符**\n>`&`（取址）、`*`（引用）、`sizeof()`（判断类型长度）、`~`（求补，位取相反）、`++/--`（递增/递减）\n{%list%}\n++/--为前缀时，先递加/减，再进行相关操作，为后缀时，先进行相关操作，再递加/减\n{%endlist%}\n{%wrong%}\n强制类型转换的优先级非常高\n{%endwrong%}\n\n#### 5.2位操作符\n**①移位操作符**\n>**左移`<<`**：最左边的几位被丢弃，右边多出来的几位**由0补齐**\n**右移`>>`**：可以选择两种移位方案，一种是**逻辑移位**，用**0**补充，一种是**算数移位**，补充的**取决于符号数**，对于**无符号数**，采用的都是**逻辑移位**，对于**有符号数**，采用逻辑移位还是算数移位**取决于编译器**，可能会影响程序的移植性\n{%warning%}\n两边的操作数都必须是整型，需要移动的位数必须正数，且不能超过被操作数的位数\n{%endwarning%}\n**②逻辑位操作符**\n>对操作数的**各个位**执行逻辑运算（`&`与，`|`或，异或`^`）\n`value = value | 1 << bit_number;`即将`bit_number`对应位置转换为1\n{%list%}\n位操作符优先级比移位操作符高\n{%endlist%}\n\n#### 5.3左值和右值\n>左值相当于一个**容器**，可以储存结果的地方，一个内存位置，右值则是一个**可以被储存的数据**\n变量`a`可以表示一个容器，也可以表示一个数据，`a+1`只能是一个数据\n{%warning%}\n左值是一个确切知道地址的容器\n{%endwarning%}\n\n#### 5.4类型转换\n**①隐式类型转换**\n>在C中的整型算数运算总是以**缺省整型类型精度**进行的，所以操作数是**字符型**和**短整型**时，在使用之前会先被**转化为普通整型**再进行运算，如果要将结果存储到字符型和短整型中，则会将结果进行截短。\n\n**②算数转换**\n>当多操作数进行运算时，且操作数属于不同的类型，则会**将精度低的数据类型转化为精度高的数据类型进行运算**\n\n**③强制类型转换**\n>`(类型) [操作数/表达式]`\n{%warning%}\n在16位机器上，第三个算式可能会产生溢出，可以在运算前将 a、b中的一个或者两个转化为long即可\n{%endwarning%}\n```\nint a = 5000；\nint b = 25；\nlong c = a*b；\n```\n{%warning%}\n强制类型转换可能会导致精度的损失，因为位数不同\n{%endwarning%}\n#### 5.4优先级和结合性\n**①优先级**\n>标识运算符在表达式中的**运算顺序**\n\n**②结合性**\n>当一个运算对象两侧运算符的**优先级别相同时**, 运算对象与运算符的结合顺序\n>比如`*a++`，其中`*`和`++`为同一优先级，结合性为右到左，先进行`a++`，再进行`*(a++)`\n{%warning%}\n表达式的求值顺序不一定完全按照优先级和结合性求值，如c + --c，我们并不知道c是否是在执行了--c后再与其相加，结果取决于编译器，面对有副作用的操作符需要小心\n{%endwarning%}\n\n### 6.字符串\n\n**6.1定义**：一串以`'/0'`结尾的字符 \n>`'/0'`的位模式全为0，也叫**NUL字节**，是字符串的**终止符**\n{%list%}\nNUL字节不是字符串的一部分，字符串长度不包括终止符的长度\n{%endlist%}\n\n**6.2基本操作**\n{%list%}\n需要包含string.h头文件\n{%endlist%}\n**①**`strlen()`：**测量字符串长度**，即字符串包含的**字符个数**\n>该函数返回的长度的数据类型为`size_t`，是一个**无符号数**\n{%warning%}\n两个无符号数a、b相互比较时，应该使用a>b，而不是a-b>0，因为无符号数运算结果为无符号数，无符号数永远大于0\n{%endwarning%}\n{%wrong%}\n大部分字符串相关函数都是根据终止符判断字符串长度，所以使用者要确保操作后字符串不会溢出，否则会缺少终止符\n{%endwrong%}\n**②**`strcpy()`：**复制字符串**，但是如果复制的字符串长度**超出了容器的限度**，则会**覆盖其后面的内存空间**\n{%wrong%}\n大部分字符串函数不允许两个数组参数重叠，否则函数的返回值是未定义的\n{%endwrong%}\n**③**`strcat()`：**连接字符串**，将一个字符串添加到另一个字符串后面\n**④**`strcmp()`：**字符串比较**，进行的是**字典比较**\n>**字典比较**：对两个字符串的逐个字符从头进行比较，只要比较出一个字符大小即可判断结果，`'/0'`小于任何字符\n**⑤长度受限的字符串函数**：为了**防止目标数组溢出**，定义了对应函数的长度受限版本，接受一个长度参数，用于限制操作的字符个数，如`strncpy()`\n{%wrong%}\n但是这些函数可能导致目标数组**不是以“/0”结尾**，可能会**导致程序崩溃**\n{%endwrong%}\n{%right%}\n可以在函数调用完后将字符数组的最后一个元素改为NUL\n{%endright%}\n\n\n**6.3字符串查找**\n**①字符查找**\n>`strchr()`：返回对应字符**第一次**出现的位置\n`strrchr()`：返回对应字符**最后一次**出现的位置\n`strpbrk()`：返回**一组字符中任意一个字符**第一次出现的位置\n\n**②字串查找**\n>`strstr()`：返回**子串**第一次出现的起始位置\n`strtok()`：删除字符串中的所有**标记字符**，其第二个参数是一个字符串，也就是**标记字符的集合**\n`strspn()`：检索字符串str1（第一个参数）中**第一个不在字符串str2（第二个参数）中出现的字符下标**\n`strcspn()`:检索字符串str1（第一个参数）中**第一个出现在字符串str2（第二个参数）中出现的字符下标**\n\n\n**6.4字符操作**\n{%list%}\n需要包含ctype.h头文件\n{%endlist%}\n**①字符分类**：根据对应分类函数定义，判断该字符是否为该类型\n>`isspace()`：是否为空白字符\n`isdigit()`：是否为数字\n{%list%}\n还有很多类似函数，可自行查询\n{%endlist%}\n**②字符转换**：转换字符的大小写\n>`tolower()`：转换为小写形式\n`toupper()`：转化为大写形式\n{%right%}\n直接测试或者操纵字符可能会影响程序的移植性，比如if(ch>='A' && ch<='Z')判断ch是否为大写字母，在使用EBCDIC字符集上的机器上将失败，但是使用isupper(ch)则无限制\n{%endright%}\n\n\n\n\n\n\n\n\n\n","slug":"C语言学习笔记（一）","published":1,"_id":"clmrufa6h0000pkvd3m8r0063","layout":"post","photos":[],"link":"","content":"<h1 id=\"C语言学习笔记（一）\"><a href=\"#C语言学习笔记（一）\" class=\"headerlink\" title=\"C语言学习笔记（一）\"></a>C语言学习笔记（一）</h1><h2 id=\"C语言启蒙\"><a href=\"#C语言启蒙\" class=\"headerlink\" title=\"C语言启蒙\"></a>C语言启蒙</h2><h3 id=\"1-C语言程序组成简介\"><a href=\"#1-C语言程序组成简介\" class=\"headerlink\" title=\"1.C语言程序组成简介\"></a>1.C语言程序组成简介</h3><h4 id=\"1-1空白\"><a href=\"#1-1空白\" class=\"headerlink\" title=\"1.1空白\"></a>1.1空白</h4><blockquote>\n<p>换行、<code>tab</code>和空格键，使得程序更加美观</p>\n</blockquote>\n<h4 id=\"1-2注释\"><a href=\"#1-2注释\" class=\"headerlink\" title=\"1.2注释\"></a>1.2注释</h4><blockquote>\n<p>解释程序，debug<br><strong>①单行注释</strong>：以<code>//</code>开始、以换行符结束<br><strong>②多行注释</strong>：以<code>/*</code>开始，以<code>*/</code>结束<br><strong>③预处理注释</strong>：用于注释<strong>包含注释</strong>的代码块</p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#if 0\n  statement\n#endif<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 多行注释不能嵌套，第一个/*到第一个*/之间都视为注释</div>\n\n<h4 id=\"1-3预处理命令\"><a href=\"#1-3预处理命令\" class=\"headerlink\" title=\"1.3预处理命令\"></a>1.3预处理命令</h4><p><strong>①</strong><code>#include&lt;文件名&gt;</code>：将对应文件内容逐字写到对应位置<br><strong>②</strong><code>#define 变量名 值</code>：将变量名（<strong>大写</strong>）对应位置替换为对应值</p>\n<h4 id=\"1-4函数原型（声明）\"><a href=\"#1-4函数原型（声明）\" class=\"headerlink\" title=\"1.4函数原型（声明）\"></a>1.4函数原型（声明）</h4><blockquote>\n<p>告诉编译器调用函数的<strong>特征</strong>（参数和返回值的个数和类型）</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 如果有一些函数声明经常需要使用，可以将他们的函数声明写到一个头文件中，再调用#include宏将该头文件写入即可</div>\n\n<h4 id=\"1-5main函数\"><a href=\"#1-5main函数\" class=\"headerlink\" title=\"1.5main函数\"></a>1.5main函数</h4><blockquote>\n<p>程序执行的<strong>起点</strong>和<strong>终点</strong>（无异常）</p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">int main (void)\n{\n  statement;\n  return 0;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<hr>\n<h3 id=\"2-简单数据类型\"><a href=\"#2-简单数据类型\" class=\"headerlink\" title=\"2.简单数据类型\"></a>2.简单数据类型</h3><div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 基本数据类型有整型、浮点数、指针和聚合类型，这里只介绍整型和浮点型</div>\n<h4 id=\"2-1整型\"><a href=\"#2-1整型\" class=\"headerlink\" title=\"2.1整型\"></a>2.1整型</h4><p><strong>①字符</strong>：<code>char</code></p>\n<blockquote>\n<p><code>char</code>本质上是一个小整型，占<strong>一个字节（8位）</strong></p>\n</blockquote>\n<p><strong>②整型</strong></p>\n<blockquote>\n<p><strong>短整型</strong>：<code>short int</code><br><strong>整型</strong>：<code>int</code><br><strong>长整型</strong>：<code>long int</code><br><code>short int</code>至少占<strong>16位</strong>，<code>long int</code>至少占<strong>32位</strong>，<code>int</code>位数<strong>由编译器决定</strong>，通常是这种机器<strong>最为高效的位数</strong>，32位系统最可能是32位，64位系统最可能是64位，一些嵌入式系统可能是16位或者更小</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 在长度上，长整型≥整型≥短整型，但是他们能表示的范围是不同的</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 在C11的标准中追加stdint.h避免了位数的不确定如：int32_t就是指4个字节的，int8_t就是一个字节</div>\n\n<p><strong>③有符号数（signed）和无符号数（unsigned）</strong></p>\n<blockquote>\n<p>对于<code>int</code>、<code>short int</code>、<code>long int</code>来说，缺省情况下为<strong>有符号数</strong>，有符号数可表示正负数和0，无符号数<strong>只能表示正数</strong><br>对于<code>char</code>来说，分为<code>char</code>、<code>singed char</code>和<code>unsigned char</code>，其中<code>char</code>的带符号与否<strong>取决于编译器</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 为了提高程序的可移植性，需要将char限制在其余两者的交集（0~127）内，且只对显式声明为有符号数和无符号数再对其进行数值运算</div>\n\n<h4 id=\"2-2浮点类型\"><a href=\"#2-2浮点类型\" class=\"headerlink\" title=\"2.2浮点类型\"></a>2.2浮点类型</h4><blockquote>\n<p><strong><code>float</code>单精度浮点数</strong><br><strong><code>double</code>双精度浮点数</strong><br><strong><code>long double</code>扩展精度浮点数，只有某些机器支持扩展精度</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> ANSI C没有规定浮点类型的长度，long double≥doubl≥float，字面量在缺省情况下一般为double，除非在后面添加l、f后缀</div>\n\n<h4 id=\"2-3字面值\"><a href=\"#2-3字面值\" class=\"headerlink\" title=\"2.3字面值\"></a>2.3字面值</h4><blockquote>\n<p><strong>整型字面值</strong>：在缺省情况下，字面值类型就是<strong>能表示</strong>该字面量的<strong>最短的类型</strong>，也可以通过<strong>添加后缀</strong>改变字面值的类型，一般采用<strong>十进制</strong>写法，也可采用其他进制（需要特殊前缀）<br><strong>字符型字面值</strong>：<code>‘内容’</code>，类型总是<code>int</code>，不能添加后缀改变<br><strong>字符串字面值</strong>：<code>“内容”</code>，以<code>NUL</code>字节结尾，所以内容中不能存在<code>NUL</code><br><strong>浮点数字面值</strong>：通常是<code>double</code>，可以通过后缀改变其类型</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 字面值被创建后就不能改变</div>\n\n<h4 id=\"2-4枚举类型\"><a href=\"#2-4枚举类型\" class=\"headerlink\" title=\"2.4枚举类型\"></a>2.4枚举类型</h4><div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 本质上还是int，相当于被命名的int集合</div>\n<blockquote>\n<p><strong>命名格式</strong>：<code>enum 枚举类型名{枚举1,枚举2,枚举3…} ；</code><br>如果不对枚举进行赋值，则枚举从0开始，依次增大1，如果对有的被赋值，有的没有，则没有被赋值的枚举<strong>比前者大1</strong></p>\n</blockquote>\n<hr>\n<h3 id=\"3-变量\"><a href=\"#3-变量\" class=\"headerlink\" title=\"3.变量\"></a>3.变量</h3><h4 id=\"3-1声明与定义\"><a href=\"#3-1声明与定义\" class=\"headerlink\" title=\"3.1声明与定义\"></a>3.1声明与定义</h4><p><strong>①格式</strong>：<code>说明符 声明表达式列表</code></p>\n<blockquote>\n<p><strong>说明符</strong>：用于指明变量的<strong>基本类型</strong>、<strong>存储类型</strong>和<strong>作用域</strong>，可以有一个，也可以有多个<br><strong>声明表达式</strong>：命名变量、赋值</p>\n</blockquote>\n<p><strong>②声明和定义</strong></p>\n<blockquote>\n<p><strong>声明</strong>：用于向程序表明变量的<strong>类型和名字</strong><br><strong>定义</strong>：用于为变量<strong>分配存储空间</strong>，还可为变量<strong>指定初始值</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 对于int a;，如果a是全局变量的话就是声明，是局部变量的话就是定义</div>\n<blockquote>\n<p>可以利用<code>extern</code>修饰<strong>局部变量</strong>表明是变量的<strong>声明</strong>，该关键词含义是此变量/函数是<strong>在别处定义</strong>的，要在此处引用</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 在实际开发中，经常会在函数或变量定义之前就使用它们，这个时候就需要提前声明（extern）</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 变量可以声明多次，而只能定义一次</div>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 在声明变量时不要赋值，否则就是定义了</div>\n<p><strong>③实例</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">include &lt;stdio.h&gt;\nint a;\nint a;\nint main()\n{\n\treturn 0;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>该程序正常工作</p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">include &lt;stdio.h&gt;\n\nint main()\n{\n\tint a;\n    int a;\n\treturn 0;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>该程序由于<strong>重复定义</strong>错误</p>\n</blockquote>\n<p><strong>④声明/定义的解释</strong></p>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 变量的声明可以理解为，变量通过声明表达式的运算得到说明符，如int a[]可以理解为变量a通过下标运算得到一个整数，则a就是一个数组，本质上是一个指向整型的指针</div>\n\n<h4 id=\"3-2typedef\"><a href=\"#3-2typedef\" class=\"headerlink\" title=\"3.2typedef\"></a>3.2typedef</h4><p><strong>①格式</strong>：只要在<strong>变量声明</strong>前面加上<code>typedef</code>，就成了<strong>类型定义</strong>，对应变量名即称为新的类型名</p>\n<blockquote>\n<p>如<code>typedef int (*function_t) (int param);</code>，在这里<code>function_t</code>则称为了对应的函数指针的类型名</p>\n</blockquote>\n<p><strong>②与define的区别</strong>：<code>define</code>只是简单的替换，如下，<code>a</code>被定义为一个指针，而<code>b</code>被定义为一个字符</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#define char* ptr_to_char\nptr_to_char a,b;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 在进行句法分析的时候，typedef和存储类型指示符是等价的，故该关键词不能和static等存储类型指示符一起用</div>\n\n<h4 id=\"3-3const常量\"><a href=\"#3-3const常量\" class=\"headerlink\" title=\"3.3const常量\"></a>3.3const常量</h4><blockquote>\n<p>使得变量被<strong>初始化后不得被更改</strong></p>\n</blockquote>\n<p><strong>①修饰对象</strong></p>\n<blockquote>\n<p><code>const</code>修饰指针时，需要注意<code>const</code>修饰的是<strong>指针</strong>还是<strong>指针指向的值</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">int const *a：指针指向的值不能被修改\nint * const a：指针无法被修改<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><strong>②<code>const</code>与<code>define</code></strong></p>\n<blockquote>\n<p><code>const</code>只能用于允许使用变量的地方，比如数组的大小就最好使用<code>define</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 函数中被const修饰的形参获得对应的实参的值后无法被改变，当你不希望函数改变该值时，可以使用const修饰该形参</div>\n\n<h4 id=\"3-4作用域\"><a href=\"#3-4作用域\" class=\"headerlink\" title=\"3.4作用域\"></a>3.4作用域</h4><blockquote>\n<p>变量只能在一定的区域中才能被访问，即变量<strong>能被访问的区域</strong></p>\n</blockquote>\n<p><strong>①代码块作用域</strong></p>\n<blockquote>\n<p>代码块中变量的作用域<strong>于代码块开头开始，到代码块结尾结束</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>嵌套</strong>的代码块中，<strong>同名</strong>内层变量会<strong>覆盖</strong>外层变量，包括全局变量<br><strong>非嵌套</strong>的代码块，每个代码块的变量无法被另一个代码块访问，<strong>代码块之间变量隔离</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 在ANSI C中，函数形参的作用域在函数最外层代码块内（动态变量）</div>\n\n<p><strong>②文件作用域</strong></p>\n<blockquote>\n<p>在<strong>代码块外</strong>声明的变量都具有文件作用域（<code>extern</code>属性），从他们<strong>声明之处到所处源文件结尾</strong>都可以访问</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 使用include包含到该文件的变量属于文件作用域</div>\n<p><strong>③原型作用域</strong></p>\n<blockquote>\n<p>只适用于<strong>函数原型（不是函数定义）</strong>中声明的参数名，只存在那个括号内</p>\n</blockquote>\n<p><strong>④函数作用域</strong></p>\n<blockquote>\n<p>只适用于语句标签，一个函数中所有<strong>语句标签必须唯一</strong></p>\n</blockquote>\n<h4 id=\"3-5链接属性（如果使用extern修饰局部变量的效果是什么？？？）\"><a href=\"#3-5链接属性（如果使用extern修饰局部变量的效果是什么？？？）\" class=\"headerlink\" title=\"3.5链接属性（如果使用extern修饰局部变量的效果是什么？？？）\"></a>3.5链接属性（如果使用extern修饰局部变量的效果是什么？？？）</h4><blockquote>\n<p>变量的链接属性决定如何处理在<strong>不同文件中的同名变量</strong></p>\n</blockquote>\n<p><strong>①<code>none</code></strong></p>\n<blockquote>\n<p>只能在其<strong>所在代码块中</strong>被访问。</p>\n</blockquote>\n<p><strong>②<code>internal</code></strong></p>\n<blockquote>\n<p><strong>同一个源文件</strong>中的所有同名变量都是同一个实体，可以在<strong>该源文件</strong>中被访问</p>\n</blockquote>\n<p><strong>③<code>external</code></strong></p>\n<blockquote>\n<p><strong>所有源文件</strong>的所有同名变量是<strong>同一个实体</strong>，可以被所有源文件访问</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 在缺省情况下，在代码块外的链接属性为external，其余none</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 拥有extern属性的变量在单个源文件中，从头到尾都可以访问，在有多个源文件时，其他源文件也可以访问</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 注意拥有extern属性的变量只是可以被其他文件访问，若要在其他源文件中使用，需要在使用的源文件中添加对应变量的声明（需要加上extern关键词）</div>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 在多个文件中定义同名的全局变量会导致链接错误，因此建议在一个文件中定义一个全局变量，并通过extern关键字在其他文件中进行引用（可以声明在头文件中）</div>\n\n\n\n<h4 id=\"3-6存储类型（静态变量和全局变量的区别？？？？）\"><a href=\"#3-6存储类型（静态变量和全局变量的区别？？？？）\" class=\"headerlink\" title=\"3.6存储类型（静态变量和全局变量的区别？？？？）\"></a>3.6存储类型（静态变量和全局变量的区别？？？？）</h4><p><strong>①静态内存</strong></p>\n<blockquote>\n<p>在<strong>代码块之外</strong>声明的变量被称为<strong>静态变量</strong>，无法改变其存储类型，在<strong>程序运行之前</strong>创建，在程序的<strong>整个执行期间</strong>始终存在</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 全局变量总是静态变量</div>\n<p><strong>②堆栈</strong></p>\n<blockquote>\n<p>在<strong>代码块内</strong>声明的变量被称为<strong>动态变量</strong>，存储在<strong>堆栈</strong>中，当<strong>程序执行流到达该代码块时，才被创建，执行流离开该代码块时，该变量被销毁</strong>，当该代码块重复执行时（比如循环），<strong>内存位置不固定</strong></p>\n</blockquote>\n<p><strong>③硬件寄存器</strong></p>\n<blockquote>\n<p>称为<strong>寄存器变量</strong>，<strong>访问效率更高</strong>，可以把<strong>高频使用</strong>的变量声明为寄存器变量，寄存器变量的<strong>生命周期和动态变量</strong>相同</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 寄存器变量是一种请求，编译器可能忽略该请求，同时，当寄存器数量不足是，寄存器变量也可能转变为自动变量，且只要声明为寄存器变量，就不能对其取址</div>\n\n<h4 id=\"3-7相关属性修改\"><a href=\"#3-7相关属性修改\" class=\"headerlink\" title=\"3.7相关属性修改\"></a>3.7相关属性修改</h4><p><strong>①<code>static</code></strong></p>\n<blockquote>\n<p>对<strong>缺省属性</strong>为<code>extern</code>属性的的变量，<code>static</code>将改变其<strong>链接属性</strong>，变为<code>internal</code><br>对<strong>缺省属性</strong>为<code>none</code>属性的的变量，<code>static</code>将改变其<strong>存储类型</strong>，由动态变量变为<strong>静态变量</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 用static将动态变量转化为静态变量，其作用域不会改变，原先的值也不会改变</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> static不能修饰形参</div>\n\n<p><strong>②<code>extern</code></strong><br>可以给标识符赋予<code>external</code>链接属性（只需要在声明处添加即可），则<strong>所有源文件都能访问该变量</strong></p>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 如果标识符在第一次声明中已经指定了链接属性，那么extern在后面的第二次或以后的声明中，不会更改第一次声明所指定的链接属性</div>\n\n<p><strong>③<code>register</code></strong></p>\n<blockquote>\n<p>将<strong>动态变量</strong>转化为<strong>寄存器变量</strong></p>\n</blockquote>\n<h4 id=\"3-8C程序内存分布\"><a href=\"#3-8C程序内存分布\" class=\"headerlink\" title=\"3.8C程序内存分布\"></a>3.8C程序内存分布</h4><p><strong>①代码段</strong></p>\n<blockquote>\n<p>存放<strong>程序执行代码</strong>的内存区域，在<strong>程序运行前</strong>就已经确定，同时其中也包括一些只读的常量</p>\n</blockquote>\n<p><strong>②初始化数据段</strong></p>\n<blockquote>\n<p>存放<strong>已初始化的全局变量</strong>，在进程运行时<strong>静态分配</strong></p>\n</blockquote>\n<p><strong>③未初始化数据段</strong></p>\n<blockquote>\n<p>存放程序中<strong>未初始化的全局变量</strong>和<strong>静态变量</strong>，默认为0，在进程运行时静态分配</p>\n</blockquote>\n<p><strong>④栈</strong></p>\n<blockquote>\n<p>按内存地址<strong>由高到低</strong>扩张，最大长度编译时确定，<strong>自动变量以及函数调用时所需的信息</strong>（如每次函数调用返回地址、寄存器的值）存放在此段。递归函数每次调用自身时，就会使用一个新的栈帧存放其数据</p>\n</blockquote>\n<p><strong>⑤堆</strong></p>\n<blockquote>\n<p>自由申请的空间，按内存地址<strong>由低到高</strong>方向扩张，其长度由系统内存/虚拟内存上限决定，通常在堆中进行<strong>动态存储分配</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 每个线程都会有自己的栈，但是堆空间是共用的。</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 自动变量因为其地址只有在其创建时确定，故其缺省情况下的初始值是垃圾</div>\n<p><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/C_2.png\" alt=\"C程序内存分布\"></p>\n<h3 id=\"4-语句\"><a href=\"#4-语句\" class=\"headerlink\" title=\"4.语句\"></a>4.语句</h3><h4 id=\"4-1空语句\"><a href=\"#4-1空语句\" class=\"headerlink\" title=\"4.1空语句\"></a>4.1空语句</h4><blockquote>\n<p>本身<strong>只包含一个分号</strong>，用于<strong>不需要操作但是语法要求出现一条完整语句</strong>的场合</p>\n</blockquote>\n<h4 id=\"4-2表达式语句\"><a href=\"#4-2表达式语句\" class=\"headerlink\" title=\"4.2表达式语句\"></a>4.2表达式语句</h4><blockquote>\n<p>每个表达式语句都有其<strong>对应返回值</strong>，但是没有其他操作的情况下，该返回值<strong>不被保存</strong></p>\n</blockquote>\n<h4 id=\"4-3代码块\"><a href=\"#4-3代码块\" class=\"headerlink\" title=\"4.3代码块\"></a>4.3代码块</h4><blockquote>\n<p>被一对花括号囊括的多条语句，在语法上相当于<strong>一条语句</strong></p>\n</blockquote>\n<h4 id=\"4-4条件语句\"><a href=\"#4-4条件语句\" class=\"headerlink\" title=\"4.4条件语句\"></a>4.4条件语句</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">if （expression）\n\t{\n\tstatement;\n\t}\nelse if (expression)\n\t{\n\tstatement;\n\t}\nelse \n\t{\n\tstatement；\n\t}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>出现<code>if</code>嵌套时，<code>else</code>从句属于<strong>最靠近</strong>他的<strong>不完整</strong>的<code>if</code>从句</p>\n</blockquote>\n<h4 id=\"4-5循环语句\"><a href=\"#4-5循环语句\" class=\"headerlink\" title=\"4.5循环语句\"></a>4.5循环语句</h4><p><strong>①<code>while</code>循环</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">while （expression）\n\t{\n\tstatement;\n\t}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>②f<code>or</code>循环</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">for （初始化语句; 条件语句;调整语句）\n\t{\n\tstatement;\n\t}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><strong>初始化语句在循环一开始执行，条件语句在每一次循环开始之前执行，调整语句在每一次循环后执行</strong></p>\n</blockquote>\n<p><strong>③<code>do while</code>循环</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">do{\n\tstatement;\n\t}while(expression);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><code>while</code>语句相比，<code>do while</code>语句会先执行语句然后再判断条件是否成立</p>\n</blockquote>\n<p><strong>④<code>switch</code>循环</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">switch（expression）\n\t{\n    case expression_n：\n\t  statement；\n      break；\n    default：\n      statement；\n      break；\n\t}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> expression的结果必须是整数，C语言中没有布尔类型，非零值为真，零值为假，缺省情况下，真值为1，假值为0</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 在循环中可以使用break语句，用于永久终止循环，使用continue语句终止当前的循环</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 若循环是嵌套的，则break和continue语句，只能终止其所在的循环</div>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 当执行到匹配到case语句后，执行流会一直往下直到switch语句结束(包括default子句)，所以要在每个case语句下添加break及时退出，同时这也是一种特性，可以加以利用</div>\n\n<h4 id=\"4-6跳转语句\"><a href=\"#4-6跳转语句\" class=\"headerlink\" title=\"4.6跳转语句\"></a>4.6跳转语句</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">biaoqian:\ngoto biaoqian;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<blockquote>\n<p>标签就是<strong>标识符后面加一个冒号</strong><br>可以通过goto语句<strong>跳出嵌套循环</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 非必要不使用goto语句</div>\n\n<h3 id=\"5-操作符\"><a href=\"#5-操作符\" class=\"headerlink\" title=\"5.操作符\"></a>5.操作符</h3><h4 id=\"5-1基本操作符\"><a href=\"#5-1基本操作符\" class=\"headerlink\" title=\"5.1基本操作符\"></a>5.1基本操作符</h4><p><strong>①算术操作符</strong></p>\n<blockquote>\n<p><code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>、<code>%</code>（取余）</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> /操作符只有当两个操作数都为整型时，才做整型运算，%只能接受两个整型</div>\n<p><strong>②关系操作符</strong></p>\n<blockquote>\n<p><code>&gt;</code>、<code>&lt;</code>、<code>&gt;=</code>、<code>&lt;=</code>、<code>!=</code>、<code>==</code></p>\n</blockquote>\n<p><strong>③逻辑操作符</strong></p>\n<blockquote>\n<p><code>&amp;&amp;</code>（与）、<code>||</code>（或）、<code>^</code>（异）、<code>！</code>（否）</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 短路求值，通过第一个操作数能判断结果就不会判断后面的操作数，且要求操作数均为整数</div>\n<p><strong>④赋值操作符</strong></p>\n<blockquote>\n<p><strong>基本赋值操作符</strong>：<code>=</code><br><strong>复合赋值符</strong>：比如<code>+=</code>，<code>a += （expression）</code>代表<code> a = a+（expression）</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 赋值表达式语句的返回值是左操作数的新值，所以可以连等a=b=10</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 当a比较复杂或者其中有需要编译器实时计算的项，采用复合赋值符可以提高效率</div>\n\n<p><strong>⑤逗号操作符</strong></p>\n<blockquote>\n<p><code>expression1,expression2,...,expressionN</code>,<code>expression</code>都会被求值，但是整个表达式的值是<strong>最后一个表达式</strong>的值</p>\n</blockquote>\n<p><strong>⑥条件操作符</strong></p>\n<blockquote>\n<p><code>expression1 ？ expression2 ： expression3</code>：如果<code>expression1</code>值为真，则该表达式结果为<code>expression2</code>，反之为<code>expression3</code></p>\n</blockquote>\n<p><strong>⑦单目操作符</strong></p>\n<blockquote>\n<p><code>&amp;</code>（取址）、<code>*</code>（引用）、<code>sizeof()</code>（判断类型长度）、<code>~</code>（求补，位取相反）、<code>++/--</code>（递增/递减）</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> ++/--为前缀时，先递加/减，再进行相关操作，为后缀时，先进行相关操作，再递加/减</div>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 强制类型转换的优先级非常高</div>\n\n<h4 id=\"5-2位操作符\"><a href=\"#5-2位操作符\" class=\"headerlink\" title=\"5.2位操作符\"></a>5.2位操作符</h4><p><strong>①移位操作符</strong></p>\n<blockquote>\n<p><strong>左移<code>&lt;&lt;</code><strong>：最左边的几位被丢弃，右边多出来的几位</strong>由0补齐</strong><br><strong>右移<code>&gt;&gt;</code><strong>：可以选择两种移位方案，一种是</strong>逻辑移位</strong>，用<strong>0</strong>补充，一种是<strong>算数移位</strong>，补充的<strong>取决于符号数</strong>，对于<strong>无符号数</strong>，采用的都是<strong>逻辑移位</strong>，对于<strong>有符号数</strong>，采用逻辑移位还是算数移位<strong>取决于编译器</strong>，可能会影响程序的移植性</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 两边的操作数都必须是整型，需要移动的位数必须正数，且不能超过被操作数的位数</div>\n<p><strong>②逻辑位操作符</strong></p>\n<blockquote>\n<p>对操作数的<strong>各个位</strong>执行逻辑运算（<code>&amp;</code>与，<code>|</code>或，异或<code>^</code>）<br><code>value = value | 1 &lt;&lt; bit_number;</code>即将<code>bit_number</code>对应位置转换为1</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 位操作符优先级比移位操作符高</div>\n\n<h4 id=\"5-3左值和右值\"><a href=\"#5-3左值和右值\" class=\"headerlink\" title=\"5.3左值和右值\"></a>5.3左值和右值</h4><blockquote>\n<p>左值相当于一个<strong>容器</strong>，可以储存结果的地方，一个内存位置，右值则是一个<strong>可以被储存的数据</strong><br>变量<code>a</code>可以表示一个容器，也可以表示一个数据，<code>a+1</code>只能是一个数据</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 左值是一个确切知道地址的容器</div>\n\n<h4 id=\"5-4类型转换\"><a href=\"#5-4类型转换\" class=\"headerlink\" title=\"5.4类型转换\"></a>5.4类型转换</h4><p><strong>①隐式类型转换</strong></p>\n<blockquote>\n<p>在C中的整型算数运算总是以<strong>缺省整型类型精度</strong>进行的，所以操作数是<strong>字符型</strong>和<strong>短整型</strong>时，在使用之前会先被<strong>转化为普通整型</strong>再进行运算，如果要将结果存储到字符型和短整型中，则会将结果进行截短。</p>\n</blockquote>\n<p><strong>②算数转换</strong></p>\n<blockquote>\n<p>当多操作数进行运算时，且操作数属于不同的类型，则会<strong>将精度低的数据类型转化为精度高的数据类型进行运算</strong></p>\n</blockquote>\n<p><strong>③强制类型转换</strong></p>\n<blockquote>\n<p><code>(类型) [操作数/表达式]</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 在16位机器上，第三个算式可能会产生溢出，可以在运算前将 a、b中的一个或者两个转化为long即可</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">int a = 5000；\nint b = 25；\nlong c = a*b；<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 强制类型转换可能会导致精度的损失，因为位数不同</div>\n<h4 id=\"5-4优先级和结合性\"><a href=\"#5-4优先级和结合性\" class=\"headerlink\" title=\"5.4优先级和结合性\"></a>5.4优先级和结合性</h4><p><strong>①优先级</strong></p>\n<blockquote>\n<p>标识运算符在表达式中的<strong>运算顺序</strong></p>\n</blockquote>\n<p><strong>②结合性</strong></p>\n<blockquote>\n<p>当一个运算对象两侧运算符的<strong>优先级别相同时</strong>, 运算对象与运算符的结合顺序<br>比如<code>*a++</code>，其中<code>*</code>和<code>++</code>为同一优先级，结合性为右到左，先进行<code>a++</code>，再进行<code>*(a++)</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 表达式的求值顺序不一定完全按照优先级和结合性求值，如c + --c，我们并不知道c是否是在执行了--c后再与其相加，结果取决于编译器，面对有副作用的操作符需要小心</div>\n\n<h3 id=\"6-字符串\"><a href=\"#6-字符串\" class=\"headerlink\" title=\"6.字符串\"></a>6.字符串</h3><p><strong>6.1定义</strong>：一串以<code>'/0'</code>结尾的字符 </p>\n<blockquote>\n<p><code>'/0'</code>的位模式全为0，也叫<strong>NUL字节</strong>，是字符串的<strong>终止符</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> NUL字节不是字符串的一部分，字符串长度不包括终止符的长度</div>\n\n<p><strong>6.2基本操作</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 需要包含string.h头文件</div>\n<p><strong>①</strong><code>strlen()</code>：<strong>测量字符串长度</strong>，即字符串包含的<strong>字符个数</strong></p>\n<blockquote>\n<p>该函数返回的长度的数据类型为<code>size_t</code>，是一个<strong>无符号数</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 两个无符号数a、b相互比较时，应该使用a&gt;b，而不是a-b&gt;0，因为无符号数运算结果为无符号数，无符号数永远大于0</div>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 大部分字符串相关函数都是根据终止符判断字符串长度，所以使用者要确保操作后字符串不会溢出，否则会缺少终止符</div>\n<p><strong>②</strong><code>strcpy()</code>：<strong>复制字符串</strong>，但是如果复制的字符串长度<strong>超出了容器的限度</strong>，则会<strong>覆盖其后面的内存空间</strong></p>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 大部分字符串函数不允许两个数组参数重叠，否则函数的返回值是未定义的</div>\n<p><strong>③</strong><code>strcat()</code>：<strong>连接字符串</strong>，将一个字符串添加到另一个字符串后面<br><strong>④</strong><code>strcmp()</code>：<strong>字符串比较</strong>，进行的是<strong>字典比较</strong></p>\n<blockquote>\n<p><strong>字典比较</strong>：对两个字符串的逐个字符从头进行比较，只要比较出一个字符大小即可判断结果，<code>'/0'</code>小于任何字符<br><strong>⑤长度受限的字符串函数</strong>：为了<strong>防止目标数组溢出</strong>，定义了对应函数的长度受限版本，接受一个长度参数，用于限制操作的字符个数，如<code>strncpy()</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 但是这些函数可能导致目标数组**不是以“/0”结尾**，可能会**导致程序崩溃**</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 可以在函数调用完后将字符数组的最后一个元素改为NUL</div>\n\n\n<p><strong>6.3字符串查找</strong><br><strong>①字符查找</strong></p>\n<blockquote>\n<p><code>strchr()</code>：返回对应字符<strong>第一次</strong>出现的位置<br><code>strrchr()</code>：返回对应字符<strong>最后一次</strong>出现的位置<br><code>strpbrk()</code>：返回<strong>一组字符中任意一个字符</strong>第一次出现的位置</p>\n</blockquote>\n<p><strong>②字串查找</strong></p>\n<blockquote>\n<p><code>strstr()</code>：返回<strong>子串</strong>第一次出现的起始位置<br><code>strtok()</code>：删除字符串中的所有<strong>标记字符</strong>，其第二个参数是一个字符串，也就是<strong>标记字符的集合</strong><br><code>strspn()</code>：检索字符串str1（第一个参数）中<strong>第一个不在字符串str2（第二个参数）中出现的字符下标</strong><br><code>strcspn()</code>:检索字符串str1（第一个参数）中<strong>第一个出现在字符串str2（第二个参数）中出现的字符下标</strong></p>\n</blockquote>\n<p><strong>6.4字符操作</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 需要包含ctype.h头文件</div>\n<p><strong>①字符分类</strong>：根据对应分类函数定义，判断该字符是否为该类型</p>\n<blockquote>\n<p><code>isspace()</code>：是否为空白字符<br><code>isdigit()</code>：是否为数字</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 还有很多类似函数，可自行查询</div>\n<p><strong>②字符转换</strong>：转换字符的大小写</p>\n<blockquote>\n<p><code>tolower()</code>：转换为小写形式<br><code>toupper()</code>：转化为大写形式</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 直接测试或者操纵字符可能会影响程序的移植性，比如if(ch&gt;='A' &amp;&amp; ch&lt;='Z')判断ch是否为大写字母，在使用EBCDIC字符集上的机器上将失败，但是使用isupper(ch)则无限制</div>\n\n\n\n\n\n\n\n\n\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"C语言学习笔记（一）\"><a href=\"#C语言学习笔记（一）\" class=\"headerlink\" title=\"C语言学习笔记（一）\"></a>C语言学习笔记（一）</h1><h2 id=\"C语言启蒙\"><a href=\"#C语言启蒙\" class=\"headerlink\" title=\"C语言启蒙\"></a>C语言启蒙</h2><h3 id=\"1-C语言程序组成简介\"><a href=\"#1-C语言程序组成简介\" class=\"headerlink\" title=\"1.C语言程序组成简介\"></a>1.C语言程序组成简介</h3><h4 id=\"1-1空白\"><a href=\"#1-1空白\" class=\"headerlink\" title=\"1.1空白\"></a>1.1空白</h4><blockquote>\n<p>换行、<code>tab</code>和空格键，使得程序更加美观</p>\n</blockquote>\n<h4 id=\"1-2注释\"><a href=\"#1-2注释\" class=\"headerlink\" title=\"1.2注释\"></a>1.2注释</h4><blockquote>\n<p>解释程序，debug<br><strong>①单行注释</strong>：以<code>//</code>开始、以换行符结束<br><strong>②多行注释</strong>：以<code>/*</code>开始，以<code>*/</code>结束<br><strong>③预处理注释</strong>：用于注释<strong>包含注释</strong>的代码块</p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#if 0\n  statement\n#endif<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 多行注释不能嵌套，第一个/*到第一个*/之间都视为注释</div>\n\n<h4 id=\"1-3预处理命令\"><a href=\"#1-3预处理命令\" class=\"headerlink\" title=\"1.3预处理命令\"></a>1.3预处理命令</h4><p><strong>①</strong><code>#include&lt;文件名&gt;</code>：将对应文件内容逐字写到对应位置<br><strong>②</strong><code>#define 变量名 值</code>：将变量名（<strong>大写</strong>）对应位置替换为对应值</p>\n<h4 id=\"1-4函数原型（声明）\"><a href=\"#1-4函数原型（声明）\" class=\"headerlink\" title=\"1.4函数原型（声明）\"></a>1.4函数原型（声明）</h4><blockquote>\n<p>告诉编译器调用函数的<strong>特征</strong>（参数和返回值的个数和类型）</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 如果有一些函数声明经常需要使用，可以将他们的函数声明写到一个头文件中，再调用#include宏将该头文件写入即可</div>\n\n<h4 id=\"1-5main函数\"><a href=\"#1-5main函数\" class=\"headerlink\" title=\"1.5main函数\"></a>1.5main函数</h4><blockquote>\n<p>程序执行的<strong>起点</strong>和<strong>终点</strong>（无异常）</p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">int main (void)\n&#123;\n  statement;\n  return 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<hr>\n<h3 id=\"2-简单数据类型\"><a href=\"#2-简单数据类型\" class=\"headerlink\" title=\"2.简单数据类型\"></a>2.简单数据类型</h3><div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 基本数据类型有整型、浮点数、指针和聚合类型，这里只介绍整型和浮点型</div>\n<h4 id=\"2-1整型\"><a href=\"#2-1整型\" class=\"headerlink\" title=\"2.1整型\"></a>2.1整型</h4><p><strong>①字符</strong>：<code>char</code></p>\n<blockquote>\n<p><code>char</code>本质上是一个小整型，占<strong>一个字节（8位）</strong></p>\n</blockquote>\n<p><strong>②整型</strong></p>\n<blockquote>\n<p><strong>短整型</strong>：<code>short int</code><br><strong>整型</strong>：<code>int</code><br><strong>长整型</strong>：<code>long int</code><br><code>short int</code>至少占<strong>16位</strong>，<code>long int</code>至少占<strong>32位</strong>，<code>int</code>位数<strong>由编译器决定</strong>，通常是这种机器<strong>最为高效的位数</strong>，32位系统最可能是32位，64位系统最可能是64位，一些嵌入式系统可能是16位或者更小</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 在长度上，长整型≥整型≥短整型，但是他们能表示的范围是不同的</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 在C11的标准中追加stdint.h避免了位数的不确定如：int32_t就是指4个字节的，int8_t就是一个字节</div>\n\n<p><strong>③有符号数（signed）和无符号数（unsigned）</strong></p>\n<blockquote>\n<p>对于<code>int</code>、<code>short int</code>、<code>long int</code>来说，缺省情况下为<strong>有符号数</strong>，有符号数可表示正负数和0，无符号数<strong>只能表示正数</strong><br>对于<code>char</code>来说，分为<code>char</code>、<code>singed char</code>和<code>unsigned char</code>，其中<code>char</code>的带符号与否<strong>取决于编译器</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 为了提高程序的可移植性，需要将char限制在其余两者的交集（0~127）内，且只对显式声明为有符号数和无符号数再对其进行数值运算</div>\n\n<h4 id=\"2-2浮点类型\"><a href=\"#2-2浮点类型\" class=\"headerlink\" title=\"2.2浮点类型\"></a>2.2浮点类型</h4><blockquote>\n<p><strong><code>float</code>单精度浮点数</strong><br><strong><code>double</code>双精度浮点数</strong><br><strong><code>long double</code>扩展精度浮点数，只有某些机器支持扩展精度</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> ANSI C没有规定浮点类型的长度，long double≥doubl≥float，字面量在缺省情况下一般为double，除非在后面添加l、f后缀</div>\n\n<h4 id=\"2-3字面值\"><a href=\"#2-3字面值\" class=\"headerlink\" title=\"2.3字面值\"></a>2.3字面值</h4><blockquote>\n<p><strong>整型字面值</strong>：在缺省情况下，字面值类型就是<strong>能表示</strong>该字面量的<strong>最短的类型</strong>，也可以通过<strong>添加后缀</strong>改变字面值的类型，一般采用<strong>十进制</strong>写法，也可采用其他进制（需要特殊前缀）<br><strong>字符型字面值</strong>：<code>‘内容’</code>，类型总是<code>int</code>，不能添加后缀改变<br><strong>字符串字面值</strong>：<code>“内容”</code>，以<code>NUL</code>字节结尾，所以内容中不能存在<code>NUL</code><br><strong>浮点数字面值</strong>：通常是<code>double</code>，可以通过后缀改变其类型</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 字面值被创建后就不能改变</div>\n\n<h4 id=\"2-4枚举类型\"><a href=\"#2-4枚举类型\" class=\"headerlink\" title=\"2.4枚举类型\"></a>2.4枚举类型</h4><div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 本质上还是int，相当于被命名的int集合</div>\n<blockquote>\n<p><strong>命名格式</strong>：<code>enum 枚举类型名&#123;枚举1,枚举2,枚举3…&#125; ；</code><br>如果不对枚举进行赋值，则枚举从0开始，依次增大1，如果对有的被赋值，有的没有，则没有被赋值的枚举<strong>比前者大1</strong></p>\n</blockquote>\n<hr>\n<h3 id=\"3-变量\"><a href=\"#3-变量\" class=\"headerlink\" title=\"3.变量\"></a>3.变量</h3><h4 id=\"3-1声明与定义\"><a href=\"#3-1声明与定义\" class=\"headerlink\" title=\"3.1声明与定义\"></a>3.1声明与定义</h4><p><strong>①格式</strong>：<code>说明符 声明表达式列表</code></p>\n<blockquote>\n<p><strong>说明符</strong>：用于指明变量的<strong>基本类型</strong>、<strong>存储类型</strong>和<strong>作用域</strong>，可以有一个，也可以有多个<br><strong>声明表达式</strong>：命名变量、赋值</p>\n</blockquote>\n<p><strong>②声明和定义</strong></p>\n<blockquote>\n<p><strong>声明</strong>：用于向程序表明变量的<strong>类型和名字</strong><br><strong>定义</strong>：用于为变量<strong>分配存储空间</strong>，还可为变量<strong>指定初始值</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 对于int a;，如果a是全局变量的话就是声明，是局部变量的话就是定义</div>\n<blockquote>\n<p>可以利用<code>extern</code>修饰<strong>局部变量</strong>表明是变量的<strong>声明</strong>，该关键词含义是此变量&#x2F;函数是<strong>在别处定义</strong>的，要在此处引用</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 在实际开发中，经常会在函数或变量定义之前就使用它们，这个时候就需要提前声明（extern）</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 变量可以声明多次，而只能定义一次</div>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 在声明变量时不要赋值，否则就是定义了</div>\n<p><strong>③实例</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">include &lt;stdio.h&gt;\nint a;\nint a;\nint main()\n&#123;\n\treturn 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>该程序正常工作</p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">include &lt;stdio.h&gt;\n\nint main()\n&#123;\n\tint a;\n    int a;\n\treturn 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>该程序由于<strong>重复定义</strong>错误</p>\n</blockquote>\n<p><strong>④声明&#x2F;定义的解释</strong></p>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 变量的声明可以理解为，变量通过声明表达式的运算得到说明符，如int a[]可以理解为变量a通过下标运算得到一个整数，则a就是一个数组，本质上是一个指向整型的指针</div>\n\n<h4 id=\"3-2typedef\"><a href=\"#3-2typedef\" class=\"headerlink\" title=\"3.2typedef\"></a>3.2typedef</h4><p><strong>①格式</strong>：只要在<strong>变量声明</strong>前面加上<code>typedef</code>，就成了<strong>类型定义</strong>，对应变量名即称为新的类型名</p>\n<blockquote>\n<p>如<code>typedef int (*function_t) (int param);</code>，在这里<code>function_t</code>则称为了对应的函数指针的类型名</p>\n</blockquote>\n<p><strong>②与define的区别</strong>：<code>define</code>只是简单的替换，如下，<code>a</code>被定义为一个指针，而<code>b</code>被定义为一个字符</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#define char* ptr_to_char\nptr_to_char a,b;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 在进行句法分析的时候，typedef和存储类型指示符是等价的，故该关键词不能和static等存储类型指示符一起用</div>\n\n<h4 id=\"3-3const常量\"><a href=\"#3-3const常量\" class=\"headerlink\" title=\"3.3const常量\"></a>3.3const常量</h4><blockquote>\n<p>使得变量被<strong>初始化后不得被更改</strong></p>\n</blockquote>\n<p><strong>①修饰对象</strong></p>\n<blockquote>\n<p><code>const</code>修饰指针时，需要注意<code>const</code>修饰的是<strong>指针</strong>还是<strong>指针指向的值</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">int const *a：指针指向的值不能被修改\nint * const a：指针无法被修改<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><strong>②<code>const</code>与<code>define</code></strong></p>\n<blockquote>\n<p><code>const</code>只能用于允许使用变量的地方，比如数组的大小就最好使用<code>define</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 函数中被const修饰的形参获得对应的实参的值后无法被改变，当你不希望函数改变该值时，可以使用const修饰该形参</div>\n\n<h4 id=\"3-4作用域\"><a href=\"#3-4作用域\" class=\"headerlink\" title=\"3.4作用域\"></a>3.4作用域</h4><blockquote>\n<p>变量只能在一定的区域中才能被访问，即变量<strong>能被访问的区域</strong></p>\n</blockquote>\n<p><strong>①代码块作用域</strong></p>\n<blockquote>\n<p>代码块中变量的作用域<strong>于代码块开头开始，到代码块结尾结束</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>嵌套</strong>的代码块中，<strong>同名</strong>内层变量会<strong>覆盖</strong>外层变量，包括全局变量<br><strong>非嵌套</strong>的代码块，每个代码块的变量无法被另一个代码块访问，<strong>代码块之间变量隔离</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 在ANSI C中，函数形参的作用域在函数最外层代码块内（动态变量）</div>\n\n<p><strong>②文件作用域</strong></p>\n<blockquote>\n<p>在<strong>代码块外</strong>声明的变量都具有文件作用域（<code>extern</code>属性），从他们<strong>声明之处到所处源文件结尾</strong>都可以访问</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 使用include包含到该文件的变量属于文件作用域</div>\n<p><strong>③原型作用域</strong></p>\n<blockquote>\n<p>只适用于<strong>函数原型（不是函数定义）</strong>中声明的参数名，只存在那个括号内</p>\n</blockquote>\n<p><strong>④函数作用域</strong></p>\n<blockquote>\n<p>只适用于语句标签，一个函数中所有<strong>语句标签必须唯一</strong></p>\n</blockquote>\n<h4 id=\"3-5链接属性（如果使用extern修饰局部变量的效果是什么？？？）\"><a href=\"#3-5链接属性（如果使用extern修饰局部变量的效果是什么？？？）\" class=\"headerlink\" title=\"3.5链接属性（如果使用extern修饰局部变量的效果是什么？？？）\"></a>3.5链接属性（如果使用extern修饰局部变量的效果是什么？？？）</h4><blockquote>\n<p>变量的链接属性决定如何处理在<strong>不同文件中的同名变量</strong></p>\n</blockquote>\n<p><strong>①<code>none</code></strong></p>\n<blockquote>\n<p>只能在其<strong>所在代码块中</strong>被访问。</p>\n</blockquote>\n<p><strong>②<code>internal</code></strong></p>\n<blockquote>\n<p><strong>同一个源文件</strong>中的所有同名变量都是同一个实体，可以在<strong>该源文件</strong>中被访问</p>\n</blockquote>\n<p><strong>③<code>external</code></strong></p>\n<blockquote>\n<p><strong>所有源文件</strong>的所有同名变量是<strong>同一个实体</strong>，可以被所有源文件访问</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 在缺省情况下，在代码块外的链接属性为external，其余none</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 拥有extern属性的变量在单个源文件中，从头到尾都可以访问，在有多个源文件时，其他源文件也可以访问</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 注意拥有extern属性的变量只是可以被其他文件访问，若要在其他源文件中使用，需要在使用的源文件中添加对应变量的声明（需要加上extern关键词）</div>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 在多个文件中定义同名的全局变量会导致链接错误，因此建议在一个文件中定义一个全局变量，并通过extern关键字在其他文件中进行引用（可以声明在头文件中）</div>\n\n\n\n<h4 id=\"3-6存储类型（静态变量和全局变量的区别？？？？）\"><a href=\"#3-6存储类型（静态变量和全局变量的区别？？？？）\" class=\"headerlink\" title=\"3.6存储类型（静态变量和全局变量的区别？？？？）\"></a>3.6存储类型（静态变量和全局变量的区别？？？？）</h4><p><strong>①静态内存</strong></p>\n<blockquote>\n<p>在<strong>代码块之外</strong>声明的变量被称为<strong>静态变量</strong>，无法改变其存储类型，在<strong>程序运行之前</strong>创建，在程序的<strong>整个执行期间</strong>始终存在</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 全局变量总是静态变量</div>\n<p><strong>②堆栈</strong></p>\n<blockquote>\n<p>在<strong>代码块内</strong>声明的变量被称为<strong>动态变量</strong>，存储在<strong>堆栈</strong>中，当<strong>程序执行流到达该代码块时，才被创建，执行流离开该代码块时，该变量被销毁</strong>，当该代码块重复执行时（比如循环），<strong>内存位置不固定</strong></p>\n</blockquote>\n<p><strong>③硬件寄存器</strong></p>\n<blockquote>\n<p>称为<strong>寄存器变量</strong>，<strong>访问效率更高</strong>，可以把<strong>高频使用</strong>的变量声明为寄存器变量，寄存器变量的<strong>生命周期和动态变量</strong>相同</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 寄存器变量是一种请求，编译器可能忽略该请求，同时，当寄存器数量不足是，寄存器变量也可能转变为自动变量，且只要声明为寄存器变量，就不能对其取址</div>\n\n<h4 id=\"3-7相关属性修改\"><a href=\"#3-7相关属性修改\" class=\"headerlink\" title=\"3.7相关属性修改\"></a>3.7相关属性修改</h4><p><strong>①<code>static</code></strong></p>\n<blockquote>\n<p>对<strong>缺省属性</strong>为<code>extern</code>属性的的变量，<code>static</code>将改变其<strong>链接属性</strong>，变为<code>internal</code><br>对<strong>缺省属性</strong>为<code>none</code>属性的的变量，<code>static</code>将改变其<strong>存储类型</strong>，由动态变量变为<strong>静态变量</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 用static将动态变量转化为静态变量，其作用域不会改变，原先的值也不会改变</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> static不能修饰形参</div>\n\n<p><strong>②<code>extern</code></strong><br>可以给标识符赋予<code>external</code>链接属性（只需要在声明处添加即可），则<strong>所有源文件都能访问该变量</strong></p>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 如果标识符在第一次声明中已经指定了链接属性，那么extern在后面的第二次或以后的声明中，不会更改第一次声明所指定的链接属性</div>\n\n<p><strong>③<code>register</code></strong></p>\n<blockquote>\n<p>将<strong>动态变量</strong>转化为<strong>寄存器变量</strong></p>\n</blockquote>\n<h4 id=\"3-8C程序内存分布\"><a href=\"#3-8C程序内存分布\" class=\"headerlink\" title=\"3.8C程序内存分布\"></a>3.8C程序内存分布</h4><p><strong>①代码段</strong></p>\n<blockquote>\n<p>存放<strong>程序执行代码</strong>的内存区域，在<strong>程序运行前</strong>就已经确定，同时其中也包括一些只读的常量</p>\n</blockquote>\n<p><strong>②初始化数据段</strong></p>\n<blockquote>\n<p>存放<strong>已初始化的全局变量</strong>，在进程运行时<strong>静态分配</strong></p>\n</blockquote>\n<p><strong>③未初始化数据段</strong></p>\n<blockquote>\n<p>存放程序中<strong>未初始化的全局变量</strong>和<strong>静态变量</strong>，默认为0，在进程运行时静态分配</p>\n</blockquote>\n<p><strong>④栈</strong></p>\n<blockquote>\n<p>按内存地址<strong>由高到低</strong>扩张，最大长度编译时确定，<strong>自动变量以及函数调用时所需的信息</strong>（如每次函数调用返回地址、寄存器的值）存放在此段。递归函数每次调用自身时，就会使用一个新的栈帧存放其数据</p>\n</blockquote>\n<p><strong>⑤堆</strong></p>\n<blockquote>\n<p>自由申请的空间，按内存地址<strong>由低到高</strong>方向扩张，其长度由系统内存&#x2F;虚拟内存上限决定，通常在堆中进行<strong>动态存储分配</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 每个线程都会有自己的栈，但是堆空间是共用的。</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 自动变量因为其地址只有在其创建时确定，故其缺省情况下的初始值是垃圾</div>\n<p><img src=\"/image/C_2.png\" alt=\"C程序内存分布\"></p>\n<h3 id=\"4-语句\"><a href=\"#4-语句\" class=\"headerlink\" title=\"4.语句\"></a>4.语句</h3><h4 id=\"4-1空语句\"><a href=\"#4-1空语句\" class=\"headerlink\" title=\"4.1空语句\"></a>4.1空语句</h4><blockquote>\n<p>本身<strong>只包含一个分号</strong>，用于<strong>不需要操作但是语法要求出现一条完整语句</strong>的场合</p>\n</blockquote>\n<h4 id=\"4-2表达式语句\"><a href=\"#4-2表达式语句\" class=\"headerlink\" title=\"4.2表达式语句\"></a>4.2表达式语句</h4><blockquote>\n<p>每个表达式语句都有其<strong>对应返回值</strong>，但是没有其他操作的情况下，该返回值<strong>不被保存</strong></p>\n</blockquote>\n<h4 id=\"4-3代码块\"><a href=\"#4-3代码块\" class=\"headerlink\" title=\"4.3代码块\"></a>4.3代码块</h4><blockquote>\n<p>被一对花括号囊括的多条语句，在语法上相当于<strong>一条语句</strong></p>\n</blockquote>\n<h4 id=\"4-4条件语句\"><a href=\"#4-4条件语句\" class=\"headerlink\" title=\"4.4条件语句\"></a>4.4条件语句</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">if （expression）\n\t&#123;\n\tstatement;\n\t&#125;\nelse if (expression)\n\t&#123;\n\tstatement;\n\t&#125;\nelse \n\t&#123;\n\tstatement；\n\t&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>出现<code>if</code>嵌套时，<code>else</code>从句属于<strong>最靠近</strong>他的<strong>不完整</strong>的<code>if</code>从句</p>\n</blockquote>\n<h4 id=\"4-5循环语句\"><a href=\"#4-5循环语句\" class=\"headerlink\" title=\"4.5循环语句\"></a>4.5循环语句</h4><p><strong>①<code>while</code>循环</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">while （expression）\n\t&#123;\n\tstatement;\n\t&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>②f<code>or</code>循环</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">for （初始化语句; 条件语句;调整语句）\n\t&#123;\n\tstatement;\n\t&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><strong>初始化语句在循环一开始执行，条件语句在每一次循环开始之前执行，调整语句在每一次循环后执行</strong></p>\n</blockquote>\n<p><strong>③<code>do while</code>循环</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">do&#123;\n\tstatement;\n\t&#125;while(expression);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><code>while</code>语句相比，<code>do while</code>语句会先执行语句然后再判断条件是否成立</p>\n</blockquote>\n<p><strong>④<code>switch</code>循环</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">switch（expression）\n\t&#123;\n    case expression_n：\n\t  statement；\n      break；\n    default：\n      statement；\n      break；\n\t&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> expression的结果必须是整数，C语言中没有布尔类型，非零值为真，零值为假，缺省情况下，真值为1，假值为0</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 在循环中可以使用break语句，用于永久终止循环，使用continue语句终止当前的循环</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 若循环是嵌套的，则break和continue语句，只能终止其所在的循环</div>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 当执行到匹配到case语句后，执行流会一直往下直到switch语句结束(包括default子句)，所以要在每个case语句下添加break及时退出，同时这也是一种特性，可以加以利用</div>\n\n<h4 id=\"4-6跳转语句\"><a href=\"#4-6跳转语句\" class=\"headerlink\" title=\"4.6跳转语句\"></a>4.6跳转语句</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">biaoqian:\ngoto biaoqian;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<blockquote>\n<p>标签就是<strong>标识符后面加一个冒号</strong><br>可以通过goto语句<strong>跳出嵌套循环</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 非必要不使用goto语句</div>\n\n<h3 id=\"5-操作符\"><a href=\"#5-操作符\" class=\"headerlink\" title=\"5.操作符\"></a>5.操作符</h3><h4 id=\"5-1基本操作符\"><a href=\"#5-1基本操作符\" class=\"headerlink\" title=\"5.1基本操作符\"></a>5.1基本操作符</h4><p><strong>①算术操作符</strong></p>\n<blockquote>\n<p><code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>、<code>%</code>（取余）</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> /操作符只有当两个操作数都为整型时，才做整型运算，%只能接受两个整型</div>\n<p><strong>②关系操作符</strong></p>\n<blockquote>\n<p><code>&gt;</code>、<code>&lt;</code>、<code>&gt;=</code>、<code>&lt;=</code>、<code>!=</code>、<code>==</code></p>\n</blockquote>\n<p><strong>③逻辑操作符</strong></p>\n<blockquote>\n<p><code>&amp;&amp;</code>（与）、<code>||</code>（或）、<code>^</code>（异）、<code>！</code>（否）</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 短路求值，通过第一个操作数能判断结果就不会判断后面的操作数，且要求操作数均为整数</div>\n<p><strong>④赋值操作符</strong></p>\n<blockquote>\n<p><strong>基本赋值操作符</strong>：<code>=</code><br><strong>复合赋值符</strong>：比如<code>+=</code>，<code>a += （expression）</code>代表<code> a = a+（expression）</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 赋值表达式语句的返回值是左操作数的新值，所以可以连等a=b=10</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 当a比较复杂或者其中有需要编译器实时计算的项，采用复合赋值符可以提高效率</div>\n\n<p><strong>⑤逗号操作符</strong></p>\n<blockquote>\n<p><code>expression1,expression2,...,expressionN</code>,<code>expression</code>都会被求值，但是整个表达式的值是<strong>最后一个表达式</strong>的值</p>\n</blockquote>\n<p><strong>⑥条件操作符</strong></p>\n<blockquote>\n<p><code>expression1 ？ expression2 ： expression3</code>：如果<code>expression1</code>值为真，则该表达式结果为<code>expression2</code>，反之为<code>expression3</code></p>\n</blockquote>\n<p><strong>⑦单目操作符</strong></p>\n<blockquote>\n<p><code>&amp;</code>（取址）、<code>*</code>（引用）、<code>sizeof()</code>（判断类型长度）、<code>~</code>（求补，位取相反）、<code>++/--</code>（递增&#x2F;递减）</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> ++/--为前缀时，先递加/减，再进行相关操作，为后缀时，先进行相关操作，再递加/减</div>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 强制类型转换的优先级非常高</div>\n\n<h4 id=\"5-2位操作符\"><a href=\"#5-2位操作符\" class=\"headerlink\" title=\"5.2位操作符\"></a>5.2位操作符</h4><p><strong>①移位操作符</strong></p>\n<blockquote>\n<p><strong>左移<code>&lt;&lt;</code><strong>：最左边的几位被丢弃，右边多出来的几位</strong>由0补齐</strong><br><strong>右移<code>&gt;&gt;</code><strong>：可以选择两种移位方案，一种是</strong>逻辑移位</strong>，用<strong>0</strong>补充，一种是<strong>算数移位</strong>，补充的<strong>取决于符号数</strong>，对于<strong>无符号数</strong>，采用的都是<strong>逻辑移位</strong>，对于<strong>有符号数</strong>，采用逻辑移位还是算数移位<strong>取决于编译器</strong>，可能会影响程序的移植性</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 两边的操作数都必须是整型，需要移动的位数必须正数，且不能超过被操作数的位数</div>\n<p><strong>②逻辑位操作符</strong></p>\n<blockquote>\n<p>对操作数的<strong>各个位</strong>执行逻辑运算（<code>&amp;</code>与，<code>|</code>或，异或<code>^</code>）<br><code>value = value | 1 &lt;&lt; bit_number;</code>即将<code>bit_number</code>对应位置转换为1</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 位操作符优先级比移位操作符高</div>\n\n<h4 id=\"5-3左值和右值\"><a href=\"#5-3左值和右值\" class=\"headerlink\" title=\"5.3左值和右值\"></a>5.3左值和右值</h4><blockquote>\n<p>左值相当于一个<strong>容器</strong>，可以储存结果的地方，一个内存位置，右值则是一个<strong>可以被储存的数据</strong><br>变量<code>a</code>可以表示一个容器，也可以表示一个数据，<code>a+1</code>只能是一个数据</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 左值是一个确切知道地址的容器</div>\n\n<h4 id=\"5-4类型转换\"><a href=\"#5-4类型转换\" class=\"headerlink\" title=\"5.4类型转换\"></a>5.4类型转换</h4><p><strong>①隐式类型转换</strong></p>\n<blockquote>\n<p>在C中的整型算数运算总是以<strong>缺省整型类型精度</strong>进行的，所以操作数是<strong>字符型</strong>和<strong>短整型</strong>时，在使用之前会先被<strong>转化为普通整型</strong>再进行运算，如果要将结果存储到字符型和短整型中，则会将结果进行截短。</p>\n</blockquote>\n<p><strong>②算数转换</strong></p>\n<blockquote>\n<p>当多操作数进行运算时，且操作数属于不同的类型，则会<strong>将精度低的数据类型转化为精度高的数据类型进行运算</strong></p>\n</blockquote>\n<p><strong>③强制类型转换</strong></p>\n<blockquote>\n<p><code>(类型) [操作数/表达式]</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 在16位机器上，第三个算式可能会产生溢出，可以在运算前将 a、b中的一个或者两个转化为long即可</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">int a &#x3D; 5000；\nint b &#x3D; 25；\nlong c &#x3D; a*b；<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 强制类型转换可能会导致精度的损失，因为位数不同</div>\n<h4 id=\"5-4优先级和结合性\"><a href=\"#5-4优先级和结合性\" class=\"headerlink\" title=\"5.4优先级和结合性\"></a>5.4优先级和结合性</h4><p><strong>①优先级</strong></p>\n<blockquote>\n<p>标识运算符在表达式中的<strong>运算顺序</strong></p>\n</blockquote>\n<p><strong>②结合性</strong></p>\n<blockquote>\n<p>当一个运算对象两侧运算符的<strong>优先级别相同时</strong>, 运算对象与运算符的结合顺序<br>比如<code>*a++</code>，其中<code>*</code>和<code>++</code>为同一优先级，结合性为右到左，先进行<code>a++</code>，再进行<code>*(a++)</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 表达式的求值顺序不一定完全按照优先级和结合性求值，如c + --c，我们并不知道c是否是在执行了--c后再与其相加，结果取决于编译器，面对有副作用的操作符需要小心</div>\n\n<h3 id=\"6-字符串\"><a href=\"#6-字符串\" class=\"headerlink\" title=\"6.字符串\"></a>6.字符串</h3><p><strong>6.1定义</strong>：一串以<code>&#39;/0&#39;</code>结尾的字符 </p>\n<blockquote>\n<p><code>&#39;/0&#39;</code>的位模式全为0，也叫<strong>NUL字节</strong>，是字符串的<strong>终止符</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> NUL字节不是字符串的一部分，字符串长度不包括终止符的长度</div>\n\n<p><strong>6.2基本操作</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 需要包含string.h头文件</div>\n<p><strong>①</strong><code>strlen()</code>：<strong>测量字符串长度</strong>，即字符串包含的<strong>字符个数</strong></p>\n<blockquote>\n<p>该函数返回的长度的数据类型为<code>size_t</code>，是一个<strong>无符号数</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 两个无符号数a、b相互比较时，应该使用a>b，而不是a-b>0，因为无符号数运算结果为无符号数，无符号数永远大于0</div>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 大部分字符串相关函数都是根据终止符判断字符串长度，所以使用者要确保操作后字符串不会溢出，否则会缺少终止符</div>\n<p><strong>②</strong><code>strcpy()</code>：<strong>复制字符串</strong>，但是如果复制的字符串长度<strong>超出了容器的限度</strong>，则会<strong>覆盖其后面的内存空间</strong></p>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 大部分字符串函数不允许两个数组参数重叠，否则函数的返回值是未定义的</div>\n<p><strong>③</strong><code>strcat()</code>：<strong>连接字符串</strong>，将一个字符串添加到另一个字符串后面<br><strong>④</strong><code>strcmp()</code>：<strong>字符串比较</strong>，进行的是<strong>字典比较</strong></p>\n<blockquote>\n<p><strong>字典比较</strong>：对两个字符串的逐个字符从头进行比较，只要比较出一个字符大小即可判断结果，<code>&#39;/0&#39;</code>小于任何字符<br><strong>⑤长度受限的字符串函数</strong>：为了<strong>防止目标数组溢出</strong>，定义了对应函数的长度受限版本，接受一个长度参数，用于限制操作的字符个数，如<code>strncpy()</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 但是这些函数可能导致目标数组**不是以“/0”结尾**，可能会**导致程序崩溃**</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 可以在函数调用完后将字符数组的最后一个元素改为NUL</div>\n\n\n<p><strong>6.3字符串查找</strong><br><strong>①字符查找</strong></p>\n<blockquote>\n<p><code>strchr()</code>：返回对应字符<strong>第一次</strong>出现的位置<br><code>strrchr()</code>：返回对应字符<strong>最后一次</strong>出现的位置<br><code>strpbrk()</code>：返回<strong>一组字符中任意一个字符</strong>第一次出现的位置</p>\n</blockquote>\n<p><strong>②字串查找</strong></p>\n<blockquote>\n<p><code>strstr()</code>：返回<strong>子串</strong>第一次出现的起始位置<br><code>strtok()</code>：删除字符串中的所有<strong>标记字符</strong>，其第二个参数是一个字符串，也就是<strong>标记字符的集合</strong><br><code>strspn()</code>：检索字符串str1（第一个参数）中<strong>第一个不在字符串str2（第二个参数）中出现的字符下标</strong><br><code>strcspn()</code>:检索字符串str1（第一个参数）中<strong>第一个出现在字符串str2（第二个参数）中出现的字符下标</strong></p>\n</blockquote>\n<p><strong>6.4字符操作</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 需要包含ctype.h头文件</div>\n<p><strong>①字符分类</strong>：根据对应分类函数定义，判断该字符是否为该类型</p>\n<blockquote>\n<p><code>isspace()</code>：是否为空白字符<br><code>isdigit()</code>：是否为数字</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 还有很多类似函数，可自行查询</div>\n<p><strong>②字符转换</strong>：转换字符的大小写</p>\n<blockquote>\n<p><code>tolower()</code>：转换为小写形式<br><code>toupper()</code>：转化为大写形式</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 直接测试或者操纵字符可能会影响程序的移植性，比如if(ch>='A' && ch<='Z')判断ch是否为大写字母，在使用EBCDIC字符集上的机器上将失败，但是使用isupper(ch)则无限制</div>\n\n\n\n\n\n\n\n\n\n"},{"title":"汇编语言（三）","seo_title":"seo名称","toc":true,"indent":true,"top":false,"comments":1,"archive":true,"cover":false,"mathjax":false,"pin":false,"top_meta":false,"bottom_meta":false,"sidebar":["toc"],"keywords":"文章关键词","updated":"2023-11-07T14:10:58.029Z","img":"/medias/featureimages/27.webp","date":"2023-11-07T14:10:58.029Z","summary":"汇编语言","_content":"\n# 汇编语言（三）\n## 汇编语言进阶\n### 1.状态寄存器\n#### 1.1引言\n{%list%}\nCPU内部的一种特殊的寄存器，其中每一位都用于记录特定的信息，主要介绍8086的标志寄存器\n{%endlist%}\n{%warning%}\n每个指令是否影响标志寄存器，以及影响哪些部分，都是不同的\n{%endwarning%}\n>**相关指令**的**执行结果**\n为CPU执行**相关指令**提供**行为依据**\n控制CPU的相关**工作方式**\n\n![8086的标志寄存器](/image/HB_24.png)\n![debug中的8086标志寄存器](/image/HB_26.png)\n#### 1.2标志\n**①ZF标志**\n>记录**相关指令**的计算结果是否为`0`，如果为`0`，则该位为`1`\n{%list%}\n主要是add之类的运算指令以及逻辑运算指令\n{%endlist%}\n\n**②PF标志**\n>记录**相关指令**执行后，其结果`bit`位中`1`的个数是否为**偶数**，若为偶数，则为`1`\n\n**③SF标志**\n>记录**相关指令**执行后，其结果是否为**负**\n{%warning%}\n这个标志的前提是进行有符号运算\n{%endwarning%}\n>计算机常用**补码**描述**有符号数**，如`10000001B`可以看作是**无符号数**`129`，也可以看作**有符号数**`-127`\n\n**④CF标志**\n>记录了**无符号运算**时运算结果的**最高有效位**像**更高位**的**进位值/借位值**\n{%list%}\nCF的含义取决于其被什么指令设置，如果为加法指令，则表示进位值，如果为减法指令，则表示借位值\n{%endlist%}\n![有效位](/image/HB_25.png)\n\n**⑤OF标志**\n>记录**有符号运算**的结果是否发生了**溢出**\n\n{%warning%}\n注意，只要执行了对应的指令，相关标志位就会发生改变，无论是有符号运算还是无符号运算，只是某些标志位只在某种特定情况下有意义罢了\n{%endwarning%}\n>如执行`0F0H+88H`，`CF`会变为`1`，因为如果这是一个**无符号运算**，会产生**进位**，`OF`也会变为`1`，因为如果这是一个**有符号运算**，会发生**溢出**\n\n#### 1.3相关指令\n**①`adc`指令**\n>**格式**：`adc ax,bx`\n{%list%}\n带进位加法指令,adc ax,bx相当于ax+bx+CF\n{%endlist%}\n{%right%}\n可以利用adc指令实现更大数据的加法运算\n{%endright%}\n>计算`1EF0001000H+2010001EF0H`，将**最高16位**放在`ax`中，**次高16位**放在`bx`中，**低16位**放在`cx`中，更大的数据同理\n```\nmov ax,001EH\nmov bx,0F000H\nmov cx,1000H\nadd cx,1EF0H\nadc bx,1000H\nadc ax,0020H\n```\n\n**②`sbb`指令**\n>**格式**：`sbb ax,bx`\n{%list%}\n带进位减法指令，sbb ax,bx相当于ax-bx-CF\n{%endlist%}\n{%right%}\n同上，可以利用sbb实现更大数据的减法运算\n{%endright%}\n\n**③`cmp`指令**\n>**格式**：`cmp ax,bx`\n{%list%}\n比较指令，功能相当于减法指令，但是不保存结果，只影响标志寄存器\n{%endlist%}\n{%right%}\n可以通过标志寄存器状态判断参数大小关系\n{%endright%}\n>`ZF`：判断两者是否**相等**\n\n>**无符号数**\n`CF`：若为`1`，则`ax < bx`，反之则`ax ≥ bx`\n\n>**有符号数**\n`SF`：若为1，则逻辑上`ax < bx`，反之逻辑上`ax ≥ bx`\n`OF`：判断是否溢出，若**溢出**，则真实大小关系和逻辑大小关系**相反**，反之则一致\n\n**④基于比较结果的条件转移**\n{%right%}\n检测相关标志，从而转移到标号处，可以配合cmp指令使用，以下列举无符号数的相关指令\n{%endright%}\n>`je 标号`：**相等**则转移\n{%list%}\nZF标志为1\n{%endlist%}\n>`jne 标号`：**不等**则转移\n{%list%}\nZF标志为0\n{%endlist%}\n>`jb 标号`：**低于**则转移\n{%list%}\nCF标志为1\n{%endlist%}\n>`jnb 标号`：**不低于**则转移\n{%list%}\nCF标志为0\n{%endlist%}\n>`ja 标号`：**高于**则转移\n{%list%}\nCF标志为0且ZF标志为0\n{%endlist%}\n>`jna 标号`：**不高于**则转移\n{%list%}\nCF标志为1且ZF标志为1\n{%endlist%}\n\n**⑤串传送指令**\n>**DF标志**：控制**串处理过程**中相关寄存器（`si`和`di`）**移动方向**，若为`0`，则**增加**，反之则减少\n\n>**串传送指令**\n`movsb`：将`ds:[si]`中数据移动到`es:[di]`，并根据DF标志移动`si`和`di`，每次操作**1个内存单位**\n`movsw`：同上，但是每次操作**2个内存单位**\n\n>**相关辅助指令**\n`rep 串传送指令`：根据`cx`的值，**重复执行**其后的串传送指令\n`cld`：将**DF标志**设为`0`\n`std`：将**DF标志**设为`1`\n\n**⑥访问标志寄存器**\n>`pushf`：将**整个标志寄存器**的值压栈\n`popf`：从栈中弹出数据，送入**标志寄存器**\n***\n### 2.中断\n#### 2.1引言\n**①定义**\n>当CPU接收到**中断信息**后，**执行完**当前正在执行的指令后，**不再向下执行**，转去处理中断信息\n{%warning%}\n中断的优先级不一定是最高的，比如在修改栈顶地址过程中发生中断，他是不会响应中断的\n{%endwarning%}\n**②内中断**\n{%list%}\n以8086CPU为例\n{%endlist%}\n>**除法错误**，中断类型码为`0`\n**单步执行**，中断类型码为`1`\n{%list%}\n当TF标志为1，则产生单步中断\n{%endlist%}\n>**执行`into`指令**，中断类型码为`4`\n**执行`int`指令**，指令格式为`int n`，其中`n`为中断类型码\n{%list%}\n利用int指令主动引发中断\n{%endlist%}\n**③外中断**\n>**可屏蔽外中断**：**可以不响应**的中断，\n{%list%}\n是否相应外中断由IF标志决定，可以通过指令设置其状态\n{%endlist%}\n>**不可屏蔽外中断**：执行完当前指令，**立即响应**\n\n#### 2.2中断处理程序\n**①中断向量表**\n>提供**中断类型码**与其对应**中断处理程序入口地址**的关系，一个表项占**两个内存单元**，**高地址字**存放**段地址**，**低地址字**存放**偏移地址**\n{%list%}\n中断向量表保存在内存特定位置，对于8086CPU，放在内存0000:0000至0000:03FF\n{%endlist%}\n**②中断过程**\n{%list%}\n以8086CPU为例，由CPU自动执行\n{%endlist%}\n>从**中断信息**中获取**中断类型码**\n**标志寄存器**的值**入栈**，并将标志寄存器的**TF标志**和**IF标志**设为`0`\n`CS`和`IP`的值**入栈**\n根据**终端类型码**将`CS:IP`指向**中断程序入口地址**\n\n**③中断程序常规步骤**\n>保存**用到的寄存器**`->`处理中断`->`**恢复**用到的寄存器`->`用`iret`指令返回\n{%list%}\niret指令相当于pop IP、pop CS和popf\n{%endlist%}\n\n**④BIOS**\n{%list%}\n系统板的ROM中存放的程序（基本输入输出系统），主要包括对硬件系统的检测和初始化程序，以及各种中断例程\n{%endlist%}\n{%right%}\n一个中断例程通常包含多个子程序，根据相关寄存器决定执行哪个子程序以及相关效果\n{%endright%}\n>如以下常用的**中断例程**，设置`ax`表示使用**程序返回**功能\n```\n       mov ax,4c00h\n       int 21h\n```\n![BIOS安装过程](/image/HB_27.png)\n\n\n#### 2.3自定义中断处理程序\n{%list%}\n以8086下除法溢出为例，编写程序安装自定义中断程序\n{%endlist%}\n```\nassume cs:code\n\ncode segment\nstart: mov ax,cs\n       mov ds,ax         ;设置ds:si指向中断程序源地址\n       mov si,offset do0 \n\n       mov ax,0\n       mov es,ax         ;设置es:di指向中断程序最终目标地址\n       mov di,200h\n\n       mov cx,offset do0end-offset do0 ;设置串传输的长度\n\n       cld ;设置传输方向\n       rep movsb\n\n       ;设置中断向量表\n       mov ax,0\n       mov es,ax\n       mov word ptr es:[0*4],200h\n       mov word ptr es:[0*4+2],0\n\n\n       mov ax,4c00h\n       int 21h\ndo0：  jmp short do0start\n       db \"overflow\"\n\ndo0start: mov ax,cs\n          mov ds,ax   ;将ds:si指向字符串\n          mov si,202h\n\n          mov ax,0b800h\n          mov es,ax         ;设置es:di指向显存空间的中间位置\n          mov di,12*160+36*2\n\n          mov cx,9\ns:        mov al,[si]\n          mov es:[di],al\n          inc si\n          add di,2\n          loop s\n\n          mov ax 4c00h\n          int 21h\ndo0end: nop\n\ncode ends\nend start\n\n```\n**①申请空间**\n>由于CPU**随时**都有可能收到**中断信息**，所以中断处理程序必须**一直存储在某段内存空间中**，所以需要申请一段**不会被别的程序使用**的空间\n{%list%}\n在这里为了简便，直接使用了0000:0200至0000:02FF这段空间，因为这段空间是8086中断向量表空余空间，不会被使用\n{%endlist%}\n**②安装**\n>**安装中断处理程序**主要分为两步，即将**编写的程序复制到申请的空间中**，并将对应**中断向量表项设置为申请空间起始地址**\n\n**③编写中断程序**\n{%list%}\n在中断程序中使用寄存器，需要先将其中内容保存字栈中\n{%endlist%}\n{%warning%}\n本例中直接退出程序，如果中断过后还需要返回程序，则需要将mov ax 4c00h和int 21h替换为iret指令\n{%endwarning%}\n{%wrong%}\n中断处理程序用到的数据(如overflow)需要在中断处理程序中申请，并记得设置程序的执行起点\n{%endwrong%}\n\n### 3.子程序\n#### 3.1引言\n**①带长度信息的标号**\n>**标号**实质上就是**对应位置的起始地址**，一些标号**不带长度信息（如`a`）**，一些标号**带长度信息（如`b`）**，格式上表现为**后面**是否跟一个**冒号**`:`，以及对应**描述大小的伪指令**\n```\nassume ds:data\ndata segment\na: dw 1,2,3,4,5,6,7,8\nb  dw 1,2,3,4,5,6,7,8\nc  dw a,b\ndata ends\n```\n{%list%}\n带有长度的标号相当于一个对应长度的内存单元\n{%endlist%}\n```\nmov a,2 ;错误，没有指定长度信息\nmov word ptr a,2\nmov b,2 ;相当于mov word ptr cs:[16],2\n```\n**②`assume`详解**\n>`assume`将**对应段寄存器**和**对应段**联系在一起，表现为位于**对应段**的**标号**自动取**对应段寄存器**中的内容作为**段地址**\n{%list%}\n以下三条指令是等价的，因为标号b在data段中，会默认取ds寄存器中内容为段地址\n{%endlist%}\n```\nmov ax,b[bx+si+3]\nmov ax,ds:0[bx+si+3]\nmov ax,0[bx+si+3]\n```\n{%warning%}\n若想使用标号访问数据，需要使用使用伪指令assume将标号所在段和一个段寄存器联系起来，否则编译器无法确定标号的段地址处于哪个寄存器中，但是并没有直接将对应寄存器的值修改为关联地址\n{%endwarning%}\n{%wrong%}\n后面有:的地址标号，只能在代码段中使用\n{%endwrong%}\n\n#### 3.2直接定址表\n{%list%}\n一种映射关系，如0~15和十六进制的0~F，本质上是一种以空间换时间的做法\n{%endlist%}\n>以下为利用**直接定址表**求对应`sin`值的**子程序**\n\n```\nshowsin: jmp short show\n         ;存放各个标号的地址\n         table dw ag0,ag30,ag60,ag90,ag120,ag150,ag180\n         ;各个角度对应的sin值的字符串\n         ag0  db '0',0\n         ag30 db '0.5',0\n         ag60 db '0.866',0\n         ag90 db '1',0\n         ag120 db '0.866',0\n         ag150 db '0.5',0\n         ag180 ad '0',0\n\nshow:    push bx\n         push es\n         push si\n         mov bx,0b800h\n         mov es,bx\n         ;用ax传递的角度除以30作为相对于table的偏移量，取得对应字符串的偏移地址，放在bx中\n         mov ah,0\n         mov bl,30\n         div bl\n         mov bl,al\n         mov bh,0\n         add bx,bx\n         mov bx,table[bx]\n\n         ;显示对应字符串\n         mov si,160*12+40*2\nshows:   mov ah,cs:[bx]\n         cmp ah,0\n         je showret\n         mov es:[si],ah\n         inc bx\n         add si,2\n         jmp short shows\n\nshowret: pop si\n         pop es\n         pop bx\n         ret\n```\n\n#### 3.3可选效果的程序\n{%right%}\n利用直接定址表实现程序不同功能\n{%endright%}\n>一个子程序`setscreen`，当`ah`为**不同的值**时，实现4种**不同的功能**\n```\nsetscreen: jmp short set\n           table dw sub1,sub2,sub3,sub4\n\nset:       push bx\n\n           cmp ah,3 ;判断异常情况，即是否超出了功能号范围\n           ja sret\n           mov bl,ah\n           mov bh,0\n           add bx,bx ;计算ah功能号对应位置\n\n           call word ptr table[bx]\n\nsret:      pop bx\n           ret\n\n;清空屏幕：将显存中当前屏幕中字符全部设为空格符\nsub1:      push bx\n           push cx\n           push es\n\n           mov bx,0b800h\n           mov es,bx\n           mov bx,0\n           mov cx,2000\n\nsub1s:     mov byte ptr es:[bx],' '\n           add bx,2\n           loop sub1s\n           pop es\n           pop cx\n           pop bx\n           ret\n\n;设置前景色：将显存中当前屏幕处于奇地址属性字节的0、1、2位设置为al对应值\nsub2:      push bx\n           push cx\n           push es\n\n           mov bx,0b800h\n           mov es,bx\n           mov bx,1\n           mov cx,2000\n\nsub2s:     and byte ptr es:[bx],11111000b\n           or es:[bx],al\n           add bx,2\n           loop sub2s\n\n           pop es\n           pop cx\n           pop bx\n           ret\n\n;设置背景色：将显存中当前屏幕处于奇地址属性字节的4、5、6位设置为al对应值\n sub3:     push bx\n           push cx\n           push es\n\n           mov cl,4\n           shl al,cl\n           mov bx,0b800h\n           mov es,bx\n           mov bx,1\n           mov cx,2000\n\nsub3s:     and byte ptr es:[bx],10001111b\n           or es:[bx],al\n           add bx,2\n           loop sub2s\n\n           pop es\n           pop cx\n           pop bx\n           ret  \n;向上滚动一行：依次将n+1行的内容复制到第n行，最后一行为空\nsub4:      push cx\n           push si\n           push di\n           push es\n           push ds\n\n           mov si,0b800h\n           mov es,si\n           mov ds,si\n           mov si,160 ;将ds:si指向n+1行\n           mov di,0 ;将es:di指向n行\n           cld\n           mov cx,24 ;共复制24行\n\nsub4s:     push cx\n           mov cx,160\n           rep movsb  ;复制\n           pop cx\n           loop sub4s\n\n           mov cx,80\n           mov si,0\n\nsub4s1:    mov byte ptr [160*24+si],' '\n           add si,2\n           loop sub4s1\n\n           pop ds\n           pop es\n           pop di\n           pop si\n           pop cx\n           ret\n```\n\n\n","source":"_posts/汇编语言（三）.md","raw":"---\ntitle: 汇编语言（三）\nseo_title: seo名称\ntoc: true\nindent: true\ntop: false\ncomments: true\narchive: true\ncover: false\nmathjax: false\npin: false\ntop_meta: false\nbottom_meta: false\nsidebar:\n  - toc\ntag:\n  - 汇编语言\n  - 《汇编语言》\ncategories: 编程语言\nkeywords: 文章关键词\nupdated: ''\nimg: /medias/featureimages/27.webp\ndate:\nsummary: 汇编语言\n---\n\n# 汇编语言（三）\n## 汇编语言进阶\n### 1.状态寄存器\n#### 1.1引言\n{%list%}\nCPU内部的一种特殊的寄存器，其中每一位都用于记录特定的信息，主要介绍8086的标志寄存器\n{%endlist%}\n{%warning%}\n每个指令是否影响标志寄存器，以及影响哪些部分，都是不同的\n{%endwarning%}\n>**相关指令**的**执行结果**\n为CPU执行**相关指令**提供**行为依据**\n控制CPU的相关**工作方式**\n\n![8086的标志寄存器](/image/HB_24.png)\n![debug中的8086标志寄存器](/image/HB_26.png)\n#### 1.2标志\n**①ZF标志**\n>记录**相关指令**的计算结果是否为`0`，如果为`0`，则该位为`1`\n{%list%}\n主要是add之类的运算指令以及逻辑运算指令\n{%endlist%}\n\n**②PF标志**\n>记录**相关指令**执行后，其结果`bit`位中`1`的个数是否为**偶数**，若为偶数，则为`1`\n\n**③SF标志**\n>记录**相关指令**执行后，其结果是否为**负**\n{%warning%}\n这个标志的前提是进行有符号运算\n{%endwarning%}\n>计算机常用**补码**描述**有符号数**，如`10000001B`可以看作是**无符号数**`129`，也可以看作**有符号数**`-127`\n\n**④CF标志**\n>记录了**无符号运算**时运算结果的**最高有效位**像**更高位**的**进位值/借位值**\n{%list%}\nCF的含义取决于其被什么指令设置，如果为加法指令，则表示进位值，如果为减法指令，则表示借位值\n{%endlist%}\n![有效位](/image/HB_25.png)\n\n**⑤OF标志**\n>记录**有符号运算**的结果是否发生了**溢出**\n\n{%warning%}\n注意，只要执行了对应的指令，相关标志位就会发生改变，无论是有符号运算还是无符号运算，只是某些标志位只在某种特定情况下有意义罢了\n{%endwarning%}\n>如执行`0F0H+88H`，`CF`会变为`1`，因为如果这是一个**无符号运算**，会产生**进位**，`OF`也会变为`1`，因为如果这是一个**有符号运算**，会发生**溢出**\n\n#### 1.3相关指令\n**①`adc`指令**\n>**格式**：`adc ax,bx`\n{%list%}\n带进位加法指令,adc ax,bx相当于ax+bx+CF\n{%endlist%}\n{%right%}\n可以利用adc指令实现更大数据的加法运算\n{%endright%}\n>计算`1EF0001000H+2010001EF0H`，将**最高16位**放在`ax`中，**次高16位**放在`bx`中，**低16位**放在`cx`中，更大的数据同理\n```\nmov ax,001EH\nmov bx,0F000H\nmov cx,1000H\nadd cx,1EF0H\nadc bx,1000H\nadc ax,0020H\n```\n\n**②`sbb`指令**\n>**格式**：`sbb ax,bx`\n{%list%}\n带进位减法指令，sbb ax,bx相当于ax-bx-CF\n{%endlist%}\n{%right%}\n同上，可以利用sbb实现更大数据的减法运算\n{%endright%}\n\n**③`cmp`指令**\n>**格式**：`cmp ax,bx`\n{%list%}\n比较指令，功能相当于减法指令，但是不保存结果，只影响标志寄存器\n{%endlist%}\n{%right%}\n可以通过标志寄存器状态判断参数大小关系\n{%endright%}\n>`ZF`：判断两者是否**相等**\n\n>**无符号数**\n`CF`：若为`1`，则`ax < bx`，反之则`ax ≥ bx`\n\n>**有符号数**\n`SF`：若为1，则逻辑上`ax < bx`，反之逻辑上`ax ≥ bx`\n`OF`：判断是否溢出，若**溢出**，则真实大小关系和逻辑大小关系**相反**，反之则一致\n\n**④基于比较结果的条件转移**\n{%right%}\n检测相关标志，从而转移到标号处，可以配合cmp指令使用，以下列举无符号数的相关指令\n{%endright%}\n>`je 标号`：**相等**则转移\n{%list%}\nZF标志为1\n{%endlist%}\n>`jne 标号`：**不等**则转移\n{%list%}\nZF标志为0\n{%endlist%}\n>`jb 标号`：**低于**则转移\n{%list%}\nCF标志为1\n{%endlist%}\n>`jnb 标号`：**不低于**则转移\n{%list%}\nCF标志为0\n{%endlist%}\n>`ja 标号`：**高于**则转移\n{%list%}\nCF标志为0且ZF标志为0\n{%endlist%}\n>`jna 标号`：**不高于**则转移\n{%list%}\nCF标志为1且ZF标志为1\n{%endlist%}\n\n**⑤串传送指令**\n>**DF标志**：控制**串处理过程**中相关寄存器（`si`和`di`）**移动方向**，若为`0`，则**增加**，反之则减少\n\n>**串传送指令**\n`movsb`：将`ds:[si]`中数据移动到`es:[di]`，并根据DF标志移动`si`和`di`，每次操作**1个内存单位**\n`movsw`：同上，但是每次操作**2个内存单位**\n\n>**相关辅助指令**\n`rep 串传送指令`：根据`cx`的值，**重复执行**其后的串传送指令\n`cld`：将**DF标志**设为`0`\n`std`：将**DF标志**设为`1`\n\n**⑥访问标志寄存器**\n>`pushf`：将**整个标志寄存器**的值压栈\n`popf`：从栈中弹出数据，送入**标志寄存器**\n***\n### 2.中断\n#### 2.1引言\n**①定义**\n>当CPU接收到**中断信息**后，**执行完**当前正在执行的指令后，**不再向下执行**，转去处理中断信息\n{%warning%}\n中断的优先级不一定是最高的，比如在修改栈顶地址过程中发生中断，他是不会响应中断的\n{%endwarning%}\n**②内中断**\n{%list%}\n以8086CPU为例\n{%endlist%}\n>**除法错误**，中断类型码为`0`\n**单步执行**，中断类型码为`1`\n{%list%}\n当TF标志为1，则产生单步中断\n{%endlist%}\n>**执行`into`指令**，中断类型码为`4`\n**执行`int`指令**，指令格式为`int n`，其中`n`为中断类型码\n{%list%}\n利用int指令主动引发中断\n{%endlist%}\n**③外中断**\n>**可屏蔽外中断**：**可以不响应**的中断，\n{%list%}\n是否相应外中断由IF标志决定，可以通过指令设置其状态\n{%endlist%}\n>**不可屏蔽外中断**：执行完当前指令，**立即响应**\n\n#### 2.2中断处理程序\n**①中断向量表**\n>提供**中断类型码**与其对应**中断处理程序入口地址**的关系，一个表项占**两个内存单元**，**高地址字**存放**段地址**，**低地址字**存放**偏移地址**\n{%list%}\n中断向量表保存在内存特定位置，对于8086CPU，放在内存0000:0000至0000:03FF\n{%endlist%}\n**②中断过程**\n{%list%}\n以8086CPU为例，由CPU自动执行\n{%endlist%}\n>从**中断信息**中获取**中断类型码**\n**标志寄存器**的值**入栈**，并将标志寄存器的**TF标志**和**IF标志**设为`0`\n`CS`和`IP`的值**入栈**\n根据**终端类型码**将`CS:IP`指向**中断程序入口地址**\n\n**③中断程序常规步骤**\n>保存**用到的寄存器**`->`处理中断`->`**恢复**用到的寄存器`->`用`iret`指令返回\n{%list%}\niret指令相当于pop IP、pop CS和popf\n{%endlist%}\n\n**④BIOS**\n{%list%}\n系统板的ROM中存放的程序（基本输入输出系统），主要包括对硬件系统的检测和初始化程序，以及各种中断例程\n{%endlist%}\n{%right%}\n一个中断例程通常包含多个子程序，根据相关寄存器决定执行哪个子程序以及相关效果\n{%endright%}\n>如以下常用的**中断例程**，设置`ax`表示使用**程序返回**功能\n```\n       mov ax,4c00h\n       int 21h\n```\n![BIOS安装过程](/image/HB_27.png)\n\n\n#### 2.3自定义中断处理程序\n{%list%}\n以8086下除法溢出为例，编写程序安装自定义中断程序\n{%endlist%}\n```\nassume cs:code\n\ncode segment\nstart: mov ax,cs\n       mov ds,ax         ;设置ds:si指向中断程序源地址\n       mov si,offset do0 \n\n       mov ax,0\n       mov es,ax         ;设置es:di指向中断程序最终目标地址\n       mov di,200h\n\n       mov cx,offset do0end-offset do0 ;设置串传输的长度\n\n       cld ;设置传输方向\n       rep movsb\n\n       ;设置中断向量表\n       mov ax,0\n       mov es,ax\n       mov word ptr es:[0*4],200h\n       mov word ptr es:[0*4+2],0\n\n\n       mov ax,4c00h\n       int 21h\ndo0：  jmp short do0start\n       db \"overflow\"\n\ndo0start: mov ax,cs\n          mov ds,ax   ;将ds:si指向字符串\n          mov si,202h\n\n          mov ax,0b800h\n          mov es,ax         ;设置es:di指向显存空间的中间位置\n          mov di,12*160+36*2\n\n          mov cx,9\ns:        mov al,[si]\n          mov es:[di],al\n          inc si\n          add di,2\n          loop s\n\n          mov ax 4c00h\n          int 21h\ndo0end: nop\n\ncode ends\nend start\n\n```\n**①申请空间**\n>由于CPU**随时**都有可能收到**中断信息**，所以中断处理程序必须**一直存储在某段内存空间中**，所以需要申请一段**不会被别的程序使用**的空间\n{%list%}\n在这里为了简便，直接使用了0000:0200至0000:02FF这段空间，因为这段空间是8086中断向量表空余空间，不会被使用\n{%endlist%}\n**②安装**\n>**安装中断处理程序**主要分为两步，即将**编写的程序复制到申请的空间中**，并将对应**中断向量表项设置为申请空间起始地址**\n\n**③编写中断程序**\n{%list%}\n在中断程序中使用寄存器，需要先将其中内容保存字栈中\n{%endlist%}\n{%warning%}\n本例中直接退出程序，如果中断过后还需要返回程序，则需要将mov ax 4c00h和int 21h替换为iret指令\n{%endwarning%}\n{%wrong%}\n中断处理程序用到的数据(如overflow)需要在中断处理程序中申请，并记得设置程序的执行起点\n{%endwrong%}\n\n### 3.子程序\n#### 3.1引言\n**①带长度信息的标号**\n>**标号**实质上就是**对应位置的起始地址**，一些标号**不带长度信息（如`a`）**，一些标号**带长度信息（如`b`）**，格式上表现为**后面**是否跟一个**冒号**`:`，以及对应**描述大小的伪指令**\n```\nassume ds:data\ndata segment\na: dw 1,2,3,4,5,6,7,8\nb  dw 1,2,3,4,5,6,7,8\nc  dw a,b\ndata ends\n```\n{%list%}\n带有长度的标号相当于一个对应长度的内存单元\n{%endlist%}\n```\nmov a,2 ;错误，没有指定长度信息\nmov word ptr a,2\nmov b,2 ;相当于mov word ptr cs:[16],2\n```\n**②`assume`详解**\n>`assume`将**对应段寄存器**和**对应段**联系在一起，表现为位于**对应段**的**标号**自动取**对应段寄存器**中的内容作为**段地址**\n{%list%}\n以下三条指令是等价的，因为标号b在data段中，会默认取ds寄存器中内容为段地址\n{%endlist%}\n```\nmov ax,b[bx+si+3]\nmov ax,ds:0[bx+si+3]\nmov ax,0[bx+si+3]\n```\n{%warning%}\n若想使用标号访问数据，需要使用使用伪指令assume将标号所在段和一个段寄存器联系起来，否则编译器无法确定标号的段地址处于哪个寄存器中，但是并没有直接将对应寄存器的值修改为关联地址\n{%endwarning%}\n{%wrong%}\n后面有:的地址标号，只能在代码段中使用\n{%endwrong%}\n\n#### 3.2直接定址表\n{%list%}\n一种映射关系，如0~15和十六进制的0~F，本质上是一种以空间换时间的做法\n{%endlist%}\n>以下为利用**直接定址表**求对应`sin`值的**子程序**\n\n```\nshowsin: jmp short show\n         ;存放各个标号的地址\n         table dw ag0,ag30,ag60,ag90,ag120,ag150,ag180\n         ;各个角度对应的sin值的字符串\n         ag0  db '0',0\n         ag30 db '0.5',0\n         ag60 db '0.866',0\n         ag90 db '1',0\n         ag120 db '0.866',0\n         ag150 db '0.5',0\n         ag180 ad '0',0\n\nshow:    push bx\n         push es\n         push si\n         mov bx,0b800h\n         mov es,bx\n         ;用ax传递的角度除以30作为相对于table的偏移量，取得对应字符串的偏移地址，放在bx中\n         mov ah,0\n         mov bl,30\n         div bl\n         mov bl,al\n         mov bh,0\n         add bx,bx\n         mov bx,table[bx]\n\n         ;显示对应字符串\n         mov si,160*12+40*2\nshows:   mov ah,cs:[bx]\n         cmp ah,0\n         je showret\n         mov es:[si],ah\n         inc bx\n         add si,2\n         jmp short shows\n\nshowret: pop si\n         pop es\n         pop bx\n         ret\n```\n\n#### 3.3可选效果的程序\n{%right%}\n利用直接定址表实现程序不同功能\n{%endright%}\n>一个子程序`setscreen`，当`ah`为**不同的值**时，实现4种**不同的功能**\n```\nsetscreen: jmp short set\n           table dw sub1,sub2,sub3,sub4\n\nset:       push bx\n\n           cmp ah,3 ;判断异常情况，即是否超出了功能号范围\n           ja sret\n           mov bl,ah\n           mov bh,0\n           add bx,bx ;计算ah功能号对应位置\n\n           call word ptr table[bx]\n\nsret:      pop bx\n           ret\n\n;清空屏幕：将显存中当前屏幕中字符全部设为空格符\nsub1:      push bx\n           push cx\n           push es\n\n           mov bx,0b800h\n           mov es,bx\n           mov bx,0\n           mov cx,2000\n\nsub1s:     mov byte ptr es:[bx],' '\n           add bx,2\n           loop sub1s\n           pop es\n           pop cx\n           pop bx\n           ret\n\n;设置前景色：将显存中当前屏幕处于奇地址属性字节的0、1、2位设置为al对应值\nsub2:      push bx\n           push cx\n           push es\n\n           mov bx,0b800h\n           mov es,bx\n           mov bx,1\n           mov cx,2000\n\nsub2s:     and byte ptr es:[bx],11111000b\n           or es:[bx],al\n           add bx,2\n           loop sub2s\n\n           pop es\n           pop cx\n           pop bx\n           ret\n\n;设置背景色：将显存中当前屏幕处于奇地址属性字节的4、5、6位设置为al对应值\n sub3:     push bx\n           push cx\n           push es\n\n           mov cl,4\n           shl al,cl\n           mov bx,0b800h\n           mov es,bx\n           mov bx,1\n           mov cx,2000\n\nsub3s:     and byte ptr es:[bx],10001111b\n           or es:[bx],al\n           add bx,2\n           loop sub2s\n\n           pop es\n           pop cx\n           pop bx\n           ret  \n;向上滚动一行：依次将n+1行的内容复制到第n行，最后一行为空\nsub4:      push cx\n           push si\n           push di\n           push es\n           push ds\n\n           mov si,0b800h\n           mov es,si\n           mov ds,si\n           mov si,160 ;将ds:si指向n+1行\n           mov di,0 ;将es:di指向n行\n           cld\n           mov cx,24 ;共复制24行\n\nsub4s:     push cx\n           mov cx,160\n           rep movsb  ;复制\n           pop cx\n           loop sub4s\n\n           mov cx,80\n           mov si,0\n\nsub4s1:    mov byte ptr [160*24+si],' '\n           add si,2\n           loop sub4s1\n\n           pop ds\n           pop es\n           pop di\n           pop si\n           pop cx\n           ret\n```\n\n\n","slug":"汇编语言（三）","published":1,"_id":"clngwzrbo0000awvdhz9kcfzj","layout":"post","photos":[],"link":"","content":"<h1 id=\"汇编语言（三）\"><a href=\"#汇编语言（三）\" class=\"headerlink\" title=\"汇编语言（三）\"></a>汇编语言（三）</h1><h2 id=\"汇编语言进阶\"><a href=\"#汇编语言进阶\" class=\"headerlink\" title=\"汇编语言进阶\"></a>汇编语言进阶</h2><h3 id=\"1-状态寄存器\"><a href=\"#1-状态寄存器\" class=\"headerlink\" title=\"1.状态寄存器\"></a>1.状态寄存器</h3><h4 id=\"1-1引言\"><a href=\"#1-1引言\" class=\"headerlink\" title=\"1.1引言\"></a>1.1引言</h4><div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> CPU内部的一种特殊的寄存器，其中每一位都用于记录特定的信息，主要介绍8086的标志寄存器</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 每个指令是否影响标志寄存器，以及影响哪些部分，都是不同的</div>\n<blockquote>\n<p><strong>相关指令</strong>的<strong>执行结果</strong><br>为CPU执行<strong>相关指令</strong>提供<strong>行为依据</strong><br>控制CPU的相关<strong>工作方式</strong></p>\n</blockquote>\n<p><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/HB_24.png\" alt=\"8086的标志寄存器\"><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/HB_26.png\" alt=\"debug中的8086标志寄存器\"></p>\n<h4 id=\"1-2标志\"><a href=\"#1-2标志\" class=\"headerlink\" title=\"1.2标志\"></a>1.2标志</h4><p><strong>①ZF标志</strong></p>\n<blockquote>\n<p>记录<strong>相关指令</strong>的计算结果是否为<code>0</code>，如果为<code>0</code>，则该位为<code>1</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 主要是add之类的运算指令以及逻辑运算指令</div>\n\n<p><strong>②PF标志</strong></p>\n<blockquote>\n<p>记录<strong>相关指令</strong>执行后，其结果<code>bit</code>位中<code>1</code>的个数是否为<strong>偶数</strong>，若为偶数，则为<code>1</code></p>\n</blockquote>\n<p><strong>③SF标志</strong></p>\n<blockquote>\n<p>记录<strong>相关指令</strong>执行后，其结果是否为<strong>负</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 这个标志的前提是进行有符号运算</div>\n<blockquote>\n<p>计算机常用<strong>补码</strong>描述<strong>有符号数</strong>，如<code>10000001B</code>可以看作是<strong>无符号数</strong><code>129</code>，也可以看作<strong>有符号数</strong><code>-127</code></p>\n</blockquote>\n<p><strong>④CF标志</strong></p>\n<blockquote>\n<p>记录了<strong>无符号运算</strong>时运算结果的<strong>最高有效位</strong>像<strong>更高位</strong>的<strong>进位值/借位值</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> CF的含义取决于其被什么指令设置，如果为加法指令，则表示进位值，如果为减法指令，则表示借位值</div>\n<p><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/HB_25.png\" alt=\"有效位\"></p>\n<p><strong>⑤OF标志</strong></p>\n<blockquote>\n<p>记录<strong>有符号运算</strong>的结果是否发生了<strong>溢出</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 注意，只要执行了对应的指令，相关标志位就会发生改变，无论是有符号运算还是无符号运算，只是某些标志位只在某种特定情况下有意义罢了</div>\n<blockquote>\n<p>如执行<code>0F0H+88H</code>，<code>CF</code>会变为<code>1</code>，因为如果这是一个<strong>无符号运算</strong>，会产生<strong>进位</strong>，<code>OF</code>也会变为<code>1</code>，因为如果这是一个<strong>有符号运算</strong>，会发生<strong>溢出</strong></p>\n</blockquote>\n<h4 id=\"1-3相关指令\"><a href=\"#1-3相关指令\" class=\"headerlink\" title=\"1.3相关指令\"></a>1.3相关指令</h4><p><strong>①<code>adc</code>指令</strong></p>\n<blockquote>\n<p><strong>格式</strong>：<code>adc ax,bx</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 带进位加法指令,adc ax,bx相当于ax+bx+CF</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 可以利用adc指令实现更大数据的加法运算</div>\n<blockquote>\n<p>计算<code>1EF0001000H+2010001EF0H</code>，将<strong>最高16位</strong>放在<code>ax</code>中，<strong>次高16位</strong>放在<code>bx</code>中，<strong>低16位</strong>放在<code>cx</code>中，更大的数据同理</p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mov ax,001EH\nmov bx,0F000H\nmov cx,1000H\nadd cx,1EF0H\nadc bx,1000H\nadc ax,0020H<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>②<code>sbb</code>指令</strong></p>\n<blockquote>\n<p><strong>格式</strong>：<code>sbb ax,bx</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 带进位减法指令，sbb ax,bx相当于ax-bx-CF</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 同上，可以利用sbb实现更大数据的减法运算</div>\n\n<p><strong>③<code>cmp</code>指令</strong></p>\n<blockquote>\n<p><strong>格式</strong>：<code>cmp ax,bx</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 比较指令，功能相当于减法指令，但是不保存结果，只影响标志寄存器</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 可以通过标志寄存器状态判断参数大小关系</div>\n<blockquote>\n<p><code>ZF</code>：判断两者是否<strong>相等</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>无符号数</strong><br><code>CF</code>：若为<code>1</code>，则<code>ax &lt; bx</code>，反之则<code>ax ≥ bx</code></p>\n</blockquote>\n<blockquote>\n<p><strong>有符号数</strong><br><code>SF</code>：若为1，则逻辑上<code>ax &lt; bx</code>，反之逻辑上<code>ax ≥ bx</code><br><code>OF</code>：判断是否溢出，若<strong>溢出</strong>，则真实大小关系和逻辑大小关系<strong>相反</strong>，反之则一致</p>\n</blockquote>\n<p><strong>④基于比较结果的条件转移</strong></p>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 检测相关标志，从而转移到标号处，可以配合cmp指令使用，以下列举无符号数的相关指令</div>\n<blockquote>\n<p><code>je 标号</code>：<strong>相等</strong>则转移</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> ZF标志为1</div>\n<blockquote>\n<p><code>jne 标号</code>：<strong>不等</strong>则转移</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> ZF标志为0</div>\n<blockquote>\n<p><code>jb 标号</code>：<strong>低于</strong>则转移</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> CF标志为1</div>\n<blockquote>\n<p><code>jnb 标号</code>：<strong>不低于</strong>则转移</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> CF标志为0</div>\n<blockquote>\n<p><code>ja 标号</code>：<strong>高于</strong>则转移</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> CF标志为0且ZF标志为0</div>\n<blockquote>\n<p><code>jna 标号</code>：<strong>不高于</strong>则转移</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> CF标志为1且ZF标志为1</div>\n\n<p><strong>⑤串传送指令</strong></p>\n<blockquote>\n<p><strong>DF标志</strong>：控制<strong>串处理过程</strong>中相关寄存器（<code>si</code>和<code>di</code>）<strong>移动方向</strong>，若为<code>0</code>，则<strong>增加</strong>，反之则减少</p>\n</blockquote>\n<blockquote>\n<p><strong>串传送指令</strong><br><code>movsb</code>：将<code>ds:[si]</code>中数据移动到<code>es:[di]</code>，并根据DF标志移动<code>si</code>和<code>di</code>，每次操作<strong>1个内存单位</strong><br><code>movsw</code>：同上，但是每次操作<strong>2个内存单位</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>相关辅助指令</strong><br><code>rep 串传送指令</code>：根据<code>cx</code>的值，<strong>重复执行</strong>其后的串传送指令<br><code>cld</code>：将<strong>DF标志</strong>设为<code>0</code><br><code>std</code>：将<strong>DF标志</strong>设为<code>1</code></p>\n</blockquote>\n<p><strong>⑥访问标志寄存器</strong></p>\n<blockquote>\n<p><code>pushf</code>：将<strong>整个标志寄存器</strong>的值压栈<br><code>popf</code>：从栈中弹出数据，送入<strong>标志寄存器</strong></p>\n</blockquote>\n<hr>\n<h3 id=\"2-中断\"><a href=\"#2-中断\" class=\"headerlink\" title=\"2.中断\"></a>2.中断</h3><h4 id=\"2-1引言\"><a href=\"#2-1引言\" class=\"headerlink\" title=\"2.1引言\"></a>2.1引言</h4><p><strong>①定义</strong></p>\n<blockquote>\n<p>当CPU接收到<strong>中断信息</strong>后，<strong>执行完</strong>当前正在执行的指令后，<strong>不再向下执行</strong>，转去处理中断信息</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 中断的优先级不一定是最高的，比如在修改栈顶地址过程中发生中断，他是不会响应中断的</div>\n<p><strong>②内中断</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 以8086CPU为例</div>\n<blockquote>\n<p><strong>除法错误</strong>，中断类型码为<code>0</code><br><strong>单步执行</strong>，中断类型码为<code>1</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 当TF标志为1，则产生单步中断</div>\n<blockquote>\n<p><strong>执行<code>into</code>指令</strong>，中断类型码为<code>4</code><br><strong>执行<code>int</code>指令</strong>，指令格式为<code>int n</code>，其中<code>n</code>为中断类型码</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 利用int指令主动引发中断</div>\n<p><strong>③外中断</strong></p>\n<blockquote>\n<p><strong>可屏蔽外中断</strong>：<strong>可以不响应</strong>的中断，</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 是否相应外中断由IF标志决定，可以通过指令设置其状态</div>\n<blockquote>\n<p><strong>不可屏蔽外中断</strong>：执行完当前指令，<strong>立即响应</strong></p>\n</blockquote>\n<h4 id=\"2-2中断处理程序\"><a href=\"#2-2中断处理程序\" class=\"headerlink\" title=\"2.2中断处理程序\"></a>2.2中断处理程序</h4><p><strong>①中断向量表</strong></p>\n<blockquote>\n<p>提供<strong>中断类型码</strong>与其对应<strong>中断处理程序入口地址</strong>的关系，一个表项占<strong>两个内存单元</strong>，<strong>高地址字</strong>存放<strong>段地址</strong>，<strong>低地址字</strong>存放<strong>偏移地址</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 中断向量表保存在内存特定位置，对于8086CPU，放在内存0000:0000至0000:03FF</div>\n<p><strong>②中断过程</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 以8086CPU为例，由CPU自动执行</div>\n<blockquote>\n<p>从<strong>中断信息</strong>中获取<strong>中断类型码</strong><br><strong>标志寄存器</strong>的值<strong>入栈</strong>，并将标志寄存器的<strong>TF标志</strong>和<strong>IF标志</strong>设为<code>0</code><br><code>CS</code>和<code>IP</code>的值<strong>入栈</strong><br>根据<strong>终端类型码</strong>将<code>CS:IP</code>指向<strong>中断程序入口地址</strong></p>\n</blockquote>\n<p><strong>③中断程序常规步骤</strong></p>\n<blockquote>\n<p>保存<strong>用到的寄存器</strong><code>-&gt;</code>处理中断<code>-&gt;</code><strong>恢复</strong>用到的寄存器<code>-&gt;</code>用<code>iret</code>指令返回</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> iret指令相当于pop IP、pop CS和popf</div>\n\n<p><strong>④BIOS</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 系统板的ROM中存放的程序（基本输入输出系统），主要包括对硬件系统的检测和初始化程序，以及各种中断例程</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 一个中断例程通常包含多个子程序，根据相关寄存器决定执行哪个子程序以及相关效果</div>\n<blockquote>\n<p>如以下常用的<strong>中断例程</strong>，设置<code>ax</code>表示使用<strong>程序返回</strong>功能</p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mov ax,4c00h\nint 21h<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/HB_27.png\" alt=\"BIOS安装过程\"></p>\n<h4 id=\"2-3自定义中断处理程序\"><a href=\"#2-3自定义中断处理程序\" class=\"headerlink\" title=\"2.3自定义中断处理程序\"></a>2.3自定义中断处理程序</h4><div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 以8086下除法溢出为例，编写程序安装自定义中断程序</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">assume cs:code\n\ncode segment\nstart: mov ax,cs\n       mov ds,ax         ;设置ds:si指向中断程序源地址\n       mov si,offset do0 \n\n       mov ax,0\n       mov es,ax         ;设置es:di指向中断程序最终目标地址\n       mov di,200h\n\n       mov cx,offset do0end-offset do0 ;设置串传输的长度\n\n       cld ;设置传输方向\n       rep movsb\n\n       ;设置中断向量表\n       mov ax,0\n       mov es,ax\n       mov word ptr es:[0*4],200h\n       mov word ptr es:[0*4+2],0\n\n\n       mov ax,4c00h\n       int 21h\ndo0：  jmp short do0start\n       db \"overflow\"\n\ndo0start: mov ax,cs\n          mov ds,ax   ;将ds:si指向字符串\n          mov si,202h\n\n          mov ax,0b800h\n          mov es,ax         ;设置es:di指向显存空间的中间位置\n          mov di,12*160+36*2\n\n          mov cx,9\ns:        mov al,[si]\n          mov es:[di],al\n          inc si\n          add di,2\n          loop s\n\n          mov ax 4c00h\n          int 21h\ndo0end: nop\n\ncode ends\nend start\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>①申请空间</strong></p>\n<blockquote>\n<p>由于CPU<strong>随时</strong>都有可能收到<strong>中断信息</strong>，所以中断处理程序必须<strong>一直存储在某段内存空间中</strong>，所以需要申请一段<strong>不会被别的程序使用</strong>的空间</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 在这里为了简便，直接使用了0000:0200至0000:02FF这段空间，因为这段空间是8086中断向量表空余空间，不会被使用</div>\n<p><strong>②安装</strong></p>\n<blockquote>\n<p><strong>安装中断处理程序</strong>主要分为两步，即将<strong>编写的程序复制到申请的空间中</strong>，并将对应<strong>中断向量表项设置为申请空间起始地址</strong></p>\n</blockquote>\n<p><strong>③编写中断程序</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 在中断程序中使用寄存器，需要先将其中内容保存字栈中</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 本例中直接退出程序，如果中断过后还需要返回程序，则需要将mov ax 4c00h和int 21h替换为iret指令</div>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 中断处理程序用到的数据(如overflow)需要在中断处理程序中申请，并记得设置程序的执行起点</div>\n\n<h3 id=\"3-子程序\"><a href=\"#3-子程序\" class=\"headerlink\" title=\"3.子程序\"></a>3.子程序</h3><h4 id=\"3-1引言\"><a href=\"#3-1引言\" class=\"headerlink\" title=\"3.1引言\"></a>3.1引言</h4><p><strong>①带长度信息的标号</strong></p>\n<blockquote>\n<p><strong>标号</strong>实质上就是<strong>对应位置的起始地址</strong>，一些标号<strong>不带长度信息（如<code>a</code>）</strong>，一些标号<strong>带长度信息（如<code>b</code>）</strong>，格式上表现为<strong>后面</strong>是否跟一个<strong>冒号</strong><code>:</code>，以及对应<strong>描述大小的伪指令</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">assume ds:data\ndata segment\na: dw 1,2,3,4,5,6,7,8\nb  dw 1,2,3,4,5,6,7,8\nc  dw a,b\ndata ends<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 带有长度的标号相当于一个对应长度的内存单元</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mov a,2 ;错误，没有指定长度信息\nmov word ptr a,2\nmov b,2 ;相当于mov word ptr cs:[16],2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><strong>②<code>assume</code>详解</strong></p>\n<blockquote>\n<p><code>assume</code>将<strong>对应段寄存器</strong>和<strong>对应段</strong>联系在一起，表现为位于<strong>对应段</strong>的<strong>标号</strong>自动取<strong>对应段寄存器</strong>中的内容作为<strong>段地址</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 以下三条指令是等价的，因为标号b在data段中，会默认取ds寄存器中内容为段地址</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mov ax,b[bx+si+3]\nmov ax,ds:0[bx+si+3]\nmov ax,0[bx+si+3]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 若想使用标号访问数据，需要使用使用伪指令assume将标号所在段和一个段寄存器联系起来，否则编译器无法确定标号的段地址处于哪个寄存器中，但是并没有直接将对应寄存器的值修改为关联地址</div>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 后面有:的地址标号，只能在代码段中使用</div>\n\n<h4 id=\"3-2直接定址表\"><a href=\"#3-2直接定址表\" class=\"headerlink\" title=\"3.2直接定址表\"></a>3.2直接定址表</h4><div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 一种映射关系，如0~15和十六进制的0~F，本质上是一种以空间换时间的做法</div>\n<blockquote>\n<p>以下为利用<strong>直接定址表</strong>求对应<code>sin</code>值的<strong>子程序</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">showsin: jmp short show\n         ;存放各个标号的地址\n         table dw ag0,ag30,ag60,ag90,ag120,ag150,ag180\n         ;各个角度对应的sin值的字符串\n         ag0  db '0',0\n         ag30 db '0.5',0\n         ag60 db '0.866',0\n         ag90 db '1',0\n         ag120 db '0.866',0\n         ag150 db '0.5',0\n         ag180 ad '0',0\n\nshow:    push bx\n         push es\n         push si\n         mov bx,0b800h\n         mov es,bx\n         ;用ax传递的角度除以30作为相对于table的偏移量，取得对应字符串的偏移地址，放在bx中\n         mov ah,0\n         mov bl,30\n         div bl\n         mov bl,al\n         mov bh,0\n         add bx,bx\n         mov bx,table[bx]\n\n         ;显示对应字符串\n         mov si,160*12+40*2\nshows:   mov ah,cs:[bx]\n         cmp ah,0\n         je showret\n         mov es:[si],ah\n         inc bx\n         add si,2\n         jmp short shows\n\nshowret: pop si\n         pop es\n         pop bx\n         ret<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"3-3可选效果的程序\"><a href=\"#3-3可选效果的程序\" class=\"headerlink\" title=\"3.3可选效果的程序\"></a>3.3可选效果的程序</h4><div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 利用直接定址表实现程序不同功能</div>\n<blockquote>\n<p>一个子程序<code>setscreen</code>，当<code>ah</code>为<strong>不同的值</strong>时，实现4种<strong>不同的功能</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">setscreen: jmp short set\n           table dw sub1,sub2,sub3,sub4\n\nset:       push bx\n\n           cmp ah,3 ;判断异常情况，即是否超出了功能号范围\n           ja sret\n           mov bl,ah\n           mov bh,0\n           add bx,bx ;计算ah功能号对应位置\n\n           call word ptr table[bx]\n\nsret:      pop bx\n           ret\n\n;清空屏幕：将显存中当前屏幕中字符全部设为空格符\nsub1:      push bx\n           push cx\n           push es\n\n           mov bx,0b800h\n           mov es,bx\n           mov bx,0\n           mov cx,2000\n\nsub1s:     mov byte ptr es:[bx],' '\n           add bx,2\n           loop sub1s\n           pop es\n           pop cx\n           pop bx\n           ret\n\n;设置前景色：将显存中当前屏幕处于奇地址属性字节的0、1、2位设置为al对应值\nsub2:      push bx\n           push cx\n           push es\n\n           mov bx,0b800h\n           mov es,bx\n           mov bx,1\n           mov cx,2000\n\nsub2s:     and byte ptr es:[bx],11111000b\n           or es:[bx],al\n           add bx,2\n           loop sub2s\n\n           pop es\n           pop cx\n           pop bx\n           ret\n\n;设置背景色：将显存中当前屏幕处于奇地址属性字节的4、5、6位设置为al对应值\n sub3:     push bx\n           push cx\n           push es\n\n           mov cl,4\n           shl al,cl\n           mov bx,0b800h\n           mov es,bx\n           mov bx,1\n           mov cx,2000\n\nsub3s:     and byte ptr es:[bx],10001111b\n           or es:[bx],al\n           add bx,2\n           loop sub2s\n\n           pop es\n           pop cx\n           pop bx\n           ret  \n;向上滚动一行：依次将n+1行的内容复制到第n行，最后一行为空\nsub4:      push cx\n           push si\n           push di\n           push es\n           push ds\n\n           mov si,0b800h\n           mov es,si\n           mov ds,si\n           mov si,160 ;将ds:si指向n+1行\n           mov di,0 ;将es:di指向n行\n           cld\n           mov cx,24 ;共复制24行\n\nsub4s:     push cx\n           mov cx,160\n           rep movsb  ;复制\n           pop cx\n           loop sub4s\n\n           mov cx,80\n           mov si,0\n\nsub4s1:    mov byte ptr [160*24+si],' '\n           add si,2\n           loop sub4s1\n\n           pop ds\n           pop es\n           pop di\n           pop si\n           pop cx\n           ret<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"汇编语言（三）\"><a href=\"#汇编语言（三）\" class=\"headerlink\" title=\"汇编语言（三）\"></a>汇编语言（三）</h1><h2 id=\"汇编语言进阶\"><a href=\"#汇编语言进阶\" class=\"headerlink\" title=\"汇编语言进阶\"></a>汇编语言进阶</h2><h3 id=\"1-状态寄存器\"><a href=\"#1-状态寄存器\" class=\"headerlink\" title=\"1.状态寄存器\"></a>1.状态寄存器</h3><h4 id=\"1-1引言\"><a href=\"#1-1引言\" class=\"headerlink\" title=\"1.1引言\"></a>1.1引言</h4><div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> CPU内部的一种特殊的寄存器，其中每一位都用于记录特定的信息，主要介绍8086的标志寄存器</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 每个指令是否影响标志寄存器，以及影响哪些部分，都是不同的</div>\n<blockquote>\n<p><strong>相关指令</strong>的<strong>执行结果</strong><br>为CPU执行<strong>相关指令</strong>提供<strong>行为依据</strong><br>控制CPU的相关<strong>工作方式</strong></p>\n</blockquote>\n<p><img src=\"/image/HB_24.png\" alt=\"8086的标志寄存器\"><br><img src=\"/image/HB_26.png\" alt=\"debug中的8086标志寄存器\"></p>\n<h4 id=\"1-2标志\"><a href=\"#1-2标志\" class=\"headerlink\" title=\"1.2标志\"></a>1.2标志</h4><p><strong>①ZF标志</strong></p>\n<blockquote>\n<p>记录<strong>相关指令</strong>的计算结果是否为<code>0</code>，如果为<code>0</code>，则该位为<code>1</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 主要是add之类的运算指令以及逻辑运算指令</div>\n\n<p><strong>②PF标志</strong></p>\n<blockquote>\n<p>记录<strong>相关指令</strong>执行后，其结果<code>bit</code>位中<code>1</code>的个数是否为<strong>偶数</strong>，若为偶数，则为<code>1</code></p>\n</blockquote>\n<p><strong>③SF标志</strong></p>\n<blockquote>\n<p>记录<strong>相关指令</strong>执行后，其结果是否为<strong>负</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 这个标志的前提是进行有符号运算</div>\n<blockquote>\n<p>计算机常用<strong>补码</strong>描述<strong>有符号数</strong>，如<code>10000001B</code>可以看作是<strong>无符号数</strong><code>129</code>，也可以看作<strong>有符号数</strong><code>-127</code></p>\n</blockquote>\n<p><strong>④CF标志</strong></p>\n<blockquote>\n<p>记录了<strong>无符号运算</strong>时运算结果的<strong>最高有效位</strong>像<strong>更高位</strong>的<strong>进位值&#x2F;借位值</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> CF的含义取决于其被什么指令设置，如果为加法指令，则表示进位值，如果为减法指令，则表示借位值</div>\n<p><img src=\"/image/HB_25.png\" alt=\"有效位\"></p>\n<p><strong>⑤OF标志</strong></p>\n<blockquote>\n<p>记录<strong>有符号运算</strong>的结果是否发生了<strong>溢出</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 注意，只要执行了对应的指令，相关标志位就会发生改变，无论是有符号运算还是无符号运算，只是某些标志位只在某种特定情况下有意义罢了</div>\n<blockquote>\n<p>如执行<code>0F0H+88H</code>，<code>CF</code>会变为<code>1</code>，因为如果这是一个<strong>无符号运算</strong>，会产生<strong>进位</strong>，<code>OF</code>也会变为<code>1</code>，因为如果这是一个<strong>有符号运算</strong>，会发生<strong>溢出</strong></p>\n</blockquote>\n<h4 id=\"1-3相关指令\"><a href=\"#1-3相关指令\" class=\"headerlink\" title=\"1.3相关指令\"></a>1.3相关指令</h4><p><strong>①<code>adc</code>指令</strong></p>\n<blockquote>\n<p><strong>格式</strong>：<code>adc ax,bx</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 带进位加法指令,adc ax,bx相当于ax+bx+CF</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 可以利用adc指令实现更大数据的加法运算</div>\n<blockquote>\n<p>计算<code>1EF0001000H+2010001EF0H</code>，将<strong>最高16位</strong>放在<code>ax</code>中，<strong>次高16位</strong>放在<code>bx</code>中，<strong>低16位</strong>放在<code>cx</code>中，更大的数据同理</p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mov ax,001EH\nmov bx,0F000H\nmov cx,1000H\nadd cx,1EF0H\nadc bx,1000H\nadc ax,0020H<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>②<code>sbb</code>指令</strong></p>\n<blockquote>\n<p><strong>格式</strong>：<code>sbb ax,bx</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 带进位减法指令，sbb ax,bx相当于ax-bx-CF</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 同上，可以利用sbb实现更大数据的减法运算</div>\n\n<p><strong>③<code>cmp</code>指令</strong></p>\n<blockquote>\n<p><strong>格式</strong>：<code>cmp ax,bx</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 比较指令，功能相当于减法指令，但是不保存结果，只影响标志寄存器</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 可以通过标志寄存器状态判断参数大小关系</div>\n<blockquote>\n<p><code>ZF</code>：判断两者是否<strong>相等</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>无符号数</strong><br><code>CF</code>：若为<code>1</code>，则<code>ax &lt; bx</code>，反之则<code>ax ≥ bx</code></p>\n</blockquote>\n<blockquote>\n<p><strong>有符号数</strong><br><code>SF</code>：若为1，则逻辑上<code>ax &lt; bx</code>，反之逻辑上<code>ax ≥ bx</code><br><code>OF</code>：判断是否溢出，若<strong>溢出</strong>，则真实大小关系和逻辑大小关系<strong>相反</strong>，反之则一致</p>\n</blockquote>\n<p><strong>④基于比较结果的条件转移</strong></p>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 检测相关标志，从而转移到标号处，可以配合cmp指令使用，以下列举无符号数的相关指令</div>\n<blockquote>\n<p><code>je 标号</code>：<strong>相等</strong>则转移</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> ZF标志为1</div>\n<blockquote>\n<p><code>jne 标号</code>：<strong>不等</strong>则转移</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> ZF标志为0</div>\n<blockquote>\n<p><code>jb 标号</code>：<strong>低于</strong>则转移</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> CF标志为1</div>\n<blockquote>\n<p><code>jnb 标号</code>：<strong>不低于</strong>则转移</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> CF标志为0</div>\n<blockquote>\n<p><code>ja 标号</code>：<strong>高于</strong>则转移</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> CF标志为0且ZF标志为0</div>\n<blockquote>\n<p><code>jna 标号</code>：<strong>不高于</strong>则转移</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> CF标志为1且ZF标志为1</div>\n\n<p><strong>⑤串传送指令</strong></p>\n<blockquote>\n<p><strong>DF标志</strong>：控制<strong>串处理过程</strong>中相关寄存器（<code>si</code>和<code>di</code>）<strong>移动方向</strong>，若为<code>0</code>，则<strong>增加</strong>，反之则减少</p>\n</blockquote>\n<blockquote>\n<p><strong>串传送指令</strong><br><code>movsb</code>：将<code>ds:[si]</code>中数据移动到<code>es:[di]</code>，并根据DF标志移动<code>si</code>和<code>di</code>，每次操作<strong>1个内存单位</strong><br><code>movsw</code>：同上，但是每次操作<strong>2个内存单位</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>相关辅助指令</strong><br><code>rep 串传送指令</code>：根据<code>cx</code>的值，<strong>重复执行</strong>其后的串传送指令<br><code>cld</code>：将<strong>DF标志</strong>设为<code>0</code><br><code>std</code>：将<strong>DF标志</strong>设为<code>1</code></p>\n</blockquote>\n<p><strong>⑥访问标志寄存器</strong></p>\n<blockquote>\n<p><code>pushf</code>：将<strong>整个标志寄存器</strong>的值压栈<br><code>popf</code>：从栈中弹出数据，送入<strong>标志寄存器</strong></p>\n</blockquote>\n<hr>\n<h3 id=\"2-中断\"><a href=\"#2-中断\" class=\"headerlink\" title=\"2.中断\"></a>2.中断</h3><h4 id=\"2-1引言\"><a href=\"#2-1引言\" class=\"headerlink\" title=\"2.1引言\"></a>2.1引言</h4><p><strong>①定义</strong></p>\n<blockquote>\n<p>当CPU接收到<strong>中断信息</strong>后，<strong>执行完</strong>当前正在执行的指令后，<strong>不再向下执行</strong>，转去处理中断信息</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 中断的优先级不一定是最高的，比如在修改栈顶地址过程中发生中断，他是不会响应中断的</div>\n<p><strong>②内中断</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 以8086CPU为例</div>\n<blockquote>\n<p><strong>除法错误</strong>，中断类型码为<code>0</code><br><strong>单步执行</strong>，中断类型码为<code>1</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 当TF标志为1，则产生单步中断</div>\n<blockquote>\n<p><strong>执行<code>into</code>指令</strong>，中断类型码为<code>4</code><br><strong>执行<code>int</code>指令</strong>，指令格式为<code>int n</code>，其中<code>n</code>为中断类型码</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 利用int指令主动引发中断</div>\n<p><strong>③外中断</strong></p>\n<blockquote>\n<p><strong>可屏蔽外中断</strong>：<strong>可以不响应</strong>的中断，</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 是否相应外中断由IF标志决定，可以通过指令设置其状态</div>\n<blockquote>\n<p><strong>不可屏蔽外中断</strong>：执行完当前指令，<strong>立即响应</strong></p>\n</blockquote>\n<h4 id=\"2-2中断处理程序\"><a href=\"#2-2中断处理程序\" class=\"headerlink\" title=\"2.2中断处理程序\"></a>2.2中断处理程序</h4><p><strong>①中断向量表</strong></p>\n<blockquote>\n<p>提供<strong>中断类型码</strong>与其对应<strong>中断处理程序入口地址</strong>的关系，一个表项占<strong>两个内存单元</strong>，<strong>高地址字</strong>存放<strong>段地址</strong>，<strong>低地址字</strong>存放<strong>偏移地址</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 中断向量表保存在内存特定位置，对于8086CPU，放在内存0000:0000至0000:03FF</div>\n<p><strong>②中断过程</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 以8086CPU为例，由CPU自动执行</div>\n<blockquote>\n<p>从<strong>中断信息</strong>中获取<strong>中断类型码</strong><br><strong>标志寄存器</strong>的值<strong>入栈</strong>，并将标志寄存器的<strong>TF标志</strong>和<strong>IF标志</strong>设为<code>0</code><br><code>CS</code>和<code>IP</code>的值<strong>入栈</strong><br>根据<strong>终端类型码</strong>将<code>CS:IP</code>指向<strong>中断程序入口地址</strong></p>\n</blockquote>\n<p><strong>③中断程序常规步骤</strong></p>\n<blockquote>\n<p>保存<strong>用到的寄存器</strong><code>-&gt;</code>处理中断<code>-&gt;</code><strong>恢复</strong>用到的寄存器<code>-&gt;</code>用<code>iret</code>指令返回</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> iret指令相当于pop IP、pop CS和popf</div>\n\n<p><strong>④BIOS</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 系统板的ROM中存放的程序（基本输入输出系统），主要包括对硬件系统的检测和初始化程序，以及各种中断例程</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 一个中断例程通常包含多个子程序，根据相关寄存器决定执行哪个子程序以及相关效果</div>\n<blockquote>\n<p>如以下常用的<strong>中断例程</strong>，设置<code>ax</code>表示使用<strong>程序返回</strong>功能</p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mov ax,4c00h\nint 21h<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><img src=\"/image/HB_27.png\" alt=\"BIOS安装过程\"></p>\n<h4 id=\"2-3自定义中断处理程序\"><a href=\"#2-3自定义中断处理程序\" class=\"headerlink\" title=\"2.3自定义中断处理程序\"></a>2.3自定义中断处理程序</h4><div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 以8086下除法溢出为例，编写程序安装自定义中断程序</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">assume cs:code\n\ncode segment\nstart: mov ax,cs\n       mov ds,ax         ;设置ds:si指向中断程序源地址\n       mov si,offset do0 \n\n       mov ax,0\n       mov es,ax         ;设置es:di指向中断程序最终目标地址\n       mov di,200h\n\n       mov cx,offset do0end-offset do0 ;设置串传输的长度\n\n       cld ;设置传输方向\n       rep movsb\n\n       ;设置中断向量表\n       mov ax,0\n       mov es,ax\n       mov word ptr es:[0*4],200h\n       mov word ptr es:[0*4+2],0\n\n\n       mov ax,4c00h\n       int 21h\ndo0：  jmp short do0start\n       db &quot;overflow&quot;\n\ndo0start: mov ax,cs\n          mov ds,ax   ;将ds:si指向字符串\n          mov si,202h\n\n          mov ax,0b800h\n          mov es,ax         ;设置es:di指向显存空间的中间位置\n          mov di,12*160+36*2\n\n          mov cx,9\ns:        mov al,[si]\n          mov es:[di],al\n          inc si\n          add di,2\n          loop s\n\n          mov ax 4c00h\n          int 21h\ndo0end: nop\n\ncode ends\nend start\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>①申请空间</strong></p>\n<blockquote>\n<p>由于CPU<strong>随时</strong>都有可能收到<strong>中断信息</strong>，所以中断处理程序必须<strong>一直存储在某段内存空间中</strong>，所以需要申请一段<strong>不会被别的程序使用</strong>的空间</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 在这里为了简便，直接使用了0000:0200至0000:02FF这段空间，因为这段空间是8086中断向量表空余空间，不会被使用</div>\n<p><strong>②安装</strong></p>\n<blockquote>\n<p><strong>安装中断处理程序</strong>主要分为两步，即将<strong>编写的程序复制到申请的空间中</strong>，并将对应<strong>中断向量表项设置为申请空间起始地址</strong></p>\n</blockquote>\n<p><strong>③编写中断程序</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 在中断程序中使用寄存器，需要先将其中内容保存字栈中</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 本例中直接退出程序，如果中断过后还需要返回程序，则需要将mov ax 4c00h和int 21h替换为iret指令</div>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 中断处理程序用到的数据(如overflow)需要在中断处理程序中申请，并记得设置程序的执行起点</div>\n\n<h3 id=\"3-子程序\"><a href=\"#3-子程序\" class=\"headerlink\" title=\"3.子程序\"></a>3.子程序</h3><h4 id=\"3-1引言\"><a href=\"#3-1引言\" class=\"headerlink\" title=\"3.1引言\"></a>3.1引言</h4><p><strong>①带长度信息的标号</strong></p>\n<blockquote>\n<p><strong>标号</strong>实质上就是<strong>对应位置的起始地址</strong>，一些标号<strong>不带长度信息（如<code>a</code>）</strong>，一些标号<strong>带长度信息（如<code>b</code>）</strong>，格式上表现为<strong>后面</strong>是否跟一个<strong>冒号</strong><code>:</code>，以及对应<strong>描述大小的伪指令</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">assume ds:data\ndata segment\na: dw 1,2,3,4,5,6,7,8\nb  dw 1,2,3,4,5,6,7,8\nc  dw a,b\ndata ends<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 带有长度的标号相当于一个对应长度的内存单元</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mov a,2 ;错误，没有指定长度信息\nmov word ptr a,2\nmov b,2 ;相当于mov word ptr cs:[16],2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><strong>②<code>assume</code>详解</strong></p>\n<blockquote>\n<p><code>assume</code>将<strong>对应段寄存器</strong>和<strong>对应段</strong>联系在一起，表现为位于<strong>对应段</strong>的<strong>标号</strong>自动取<strong>对应段寄存器</strong>中的内容作为<strong>段地址</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 以下三条指令是等价的，因为标号b在data段中，会默认取ds寄存器中内容为段地址</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mov ax,b[bx+si+3]\nmov ax,ds:0[bx+si+3]\nmov ax,0[bx+si+3]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 若想使用标号访问数据，需要使用使用伪指令assume将标号所在段和一个段寄存器联系起来，否则编译器无法确定标号的段地址处于哪个寄存器中，但是并没有直接将对应寄存器的值修改为关联地址</div>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 后面有:的地址标号，只能在代码段中使用</div>\n\n<h4 id=\"3-2直接定址表\"><a href=\"#3-2直接定址表\" class=\"headerlink\" title=\"3.2直接定址表\"></a>3.2直接定址表</h4><div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 一种映射关系，如0~15和十六进制的0~F，本质上是一种以空间换时间的做法</div>\n<blockquote>\n<p>以下为利用<strong>直接定址表</strong>求对应<code>sin</code>值的<strong>子程序</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">showsin: jmp short show\n         ;存放各个标号的地址\n         table dw ag0,ag30,ag60,ag90,ag120,ag150,ag180\n         ;各个角度对应的sin值的字符串\n         ag0  db &#39;0&#39;,0\n         ag30 db &#39;0.5&#39;,0\n         ag60 db &#39;0.866&#39;,0\n         ag90 db &#39;1&#39;,0\n         ag120 db &#39;0.866&#39;,0\n         ag150 db &#39;0.5&#39;,0\n         ag180 ad &#39;0&#39;,0\n\nshow:    push bx\n         push es\n         push si\n         mov bx,0b800h\n         mov es,bx\n         ;用ax传递的角度除以30作为相对于table的偏移量，取得对应字符串的偏移地址，放在bx中\n         mov ah,0\n         mov bl,30\n         div bl\n         mov bl,al\n         mov bh,0\n         add bx,bx\n         mov bx,table[bx]\n\n         ;显示对应字符串\n         mov si,160*12+40*2\nshows:   mov ah,cs:[bx]\n         cmp ah,0\n         je showret\n         mov es:[si],ah\n         inc bx\n         add si,2\n         jmp short shows\n\nshowret: pop si\n         pop es\n         pop bx\n         ret<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"3-3可选效果的程序\"><a href=\"#3-3可选效果的程序\" class=\"headerlink\" title=\"3.3可选效果的程序\"></a>3.3可选效果的程序</h4><div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 利用直接定址表实现程序不同功能</div>\n<blockquote>\n<p>一个子程序<code>setscreen</code>，当<code>ah</code>为<strong>不同的值</strong>时，实现4种<strong>不同的功能</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">setscreen: jmp short set\n           table dw sub1,sub2,sub3,sub4\n\nset:       push bx\n\n           cmp ah,3 ;判断异常情况，即是否超出了功能号范围\n           ja sret\n           mov bl,ah\n           mov bh,0\n           add bx,bx ;计算ah功能号对应位置\n\n           call word ptr table[bx]\n\nsret:      pop bx\n           ret\n\n;清空屏幕：将显存中当前屏幕中字符全部设为空格符\nsub1:      push bx\n           push cx\n           push es\n\n           mov bx,0b800h\n           mov es,bx\n           mov bx,0\n           mov cx,2000\n\nsub1s:     mov byte ptr es:[bx],&#39; &#39;\n           add bx,2\n           loop sub1s\n           pop es\n           pop cx\n           pop bx\n           ret\n\n;设置前景色：将显存中当前屏幕处于奇地址属性字节的0、1、2位设置为al对应值\nsub2:      push bx\n           push cx\n           push es\n\n           mov bx,0b800h\n           mov es,bx\n           mov bx,1\n           mov cx,2000\n\nsub2s:     and byte ptr es:[bx],11111000b\n           or es:[bx],al\n           add bx,2\n           loop sub2s\n\n           pop es\n           pop cx\n           pop bx\n           ret\n\n;设置背景色：将显存中当前屏幕处于奇地址属性字节的4、5、6位设置为al对应值\n sub3:     push bx\n           push cx\n           push es\n\n           mov cl,4\n           shl al,cl\n           mov bx,0b800h\n           mov es,bx\n           mov bx,1\n           mov cx,2000\n\nsub3s:     and byte ptr es:[bx],10001111b\n           or es:[bx],al\n           add bx,2\n           loop sub2s\n\n           pop es\n           pop cx\n           pop bx\n           ret  \n;向上滚动一行：依次将n+1行的内容复制到第n行，最后一行为空\nsub4:      push cx\n           push si\n           push di\n           push es\n           push ds\n\n           mov si,0b800h\n           mov es,si\n           mov ds,si\n           mov si,160 ;将ds:si指向n+1行\n           mov di,0 ;将es:di指向n行\n           cld\n           mov cx,24 ;共复制24行\n\nsub4s:     push cx\n           mov cx,160\n           rep movsb  ;复制\n           pop cx\n           loop sub4s\n\n           mov cx,80\n           mov si,0\n\nsub4s1:    mov byte ptr [160*24+si],&#39; &#39;\n           add si,2\n           loop sub4s1\n\n           pop ds\n           pop es\n           pop di\n           pop si\n           pop cx\n           ret<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n"},{"title":"计算机组成原理（一）","seo_title":"seo名称","toc":true,"indent":true,"top":false,"comments":1,"archive":true,"cover":false,"mathjax":false,"pin":false,"top_meta":false,"bottom_meta":false,"sidebar":["toc"],"keywords":"文章关键词","updated":"2023-11-07T14:10:58.029Z","img":"/medias/featureimages/39.webp","date":"2023-11-07T14:10:58.029Z","summary":"计算机组成原理","_content":"# 计算机组成原理（一）\n## 计算机组成原理启蒙\n### 1.计算机基本组成\n#### 1.1冯诺依曼结构\n**①特点**\n>计算机由**运算器、控制器、存储器、输入/输出设备**五大部分组成\n\n>指令和数据以**同等地位**存储，用**二进制**表示\n\n>指令由**操作码**和**地址码**组成\n\n>以**运算器**为中心\n{%right%}\n以运算器为中心导致运算器成为瓶颈，故再次基础上对其进行改进\n{%endright%}\n**②以存储器为核心**\n![以存储器为核心的冯诺依曼结构](/image/JZ_1.png)\n\n#### 1.2存储器\n**①组成**\n>**存储体**：由多个**存储单元**构成，存储单元存放**一串二进制代码**\n\n>**MAR**：存储器**地址寄存器**，反映存储**单元个数**\n\n>**MDR**：存储器**数据寄存器**，反映存储器**字长**\n{%right%}\nMAR相当于存储器的地址线，MDR相当于存储器的数据线\n{%endright%}\n**②结构图示**\n![存储器结构](/image/JZ_2.png)\n\n#### 1.3运算器\n**①组成**\n>**ALU**：**算数逻辑单元**，主要进行运算的单元\n\n>**相关寄存器**：`ACC`、`MQ`、`X`寄存器，不同的**指令**，这些寄存器的**用途不同**\n{%warning%}\n不同的CPU运算器都是不同的，尤其是寄存器的个数及其用途\n{%endwarning%}\n**②结构**\n![运算器结构](/image/JZ_3.png)\n\n**③乘法指令过程**\n>通过**取数指令**，将**被乘数**放入**ACC**中（由编程者执行）\n根据**乘法指令的地址码**取出**乘数**放在**MQ**中\n将**ACC中数据**送入**X**，并清空**ACC**（设置为0），用于存放乘法指令的**中间结果**\n**ALU**将**结果**放在**ACC**和**MQ**中\n\n#### 1.4控制器\n>**解释**指令，并保证指令的**按序执行**\n\n**①组成**\n>**PC**：存放当前**欲执行指令的地址**\n\n>**IR**：存放当前**欲执行的指令**\n\n>**CU**：**执行**指令\n\n**②结构**\n![控制器结构](/image/JZ_4.png)\n\n#### 1.5一条指令的完成过程\n{%list%}\n以取数指令为例\n{%endlist%}\n>**PC**将**指令地址**送入**MAR**\n**MAR**从存储体中**取出取数指令**放入**MDR**\n**MDR**将**指令**送入**IR**\n**IR**将指令的**操作码**送入**CU**，**地址码**送入**MAR**\n在**CU**的控制下，从存储体中取出**对应数据**放入**MDR**，随后送入**ACC**\n随后**PC+1**等待**下一条指令**\n\n### 2.系统总线\n#### 2.1引言\n**①定义**\n>连接各个部件的**信息传输线**，是各个部件**共享的传输介质**\n{%list%}\n一根总线在同一时间只能被一组设备使用\n{%endlist%}\n\n**②总线的分类**\n>**片内总线**：**芯片内部**的总线\n\n>**系统总线**：**计算机各部件之间**的总线\n{%list%}\n还可细分位数据总线、地址总线和控制总线\n{%endlist%}\n\n>**通信总线**：**计算机系统之间**或者计算机系统**与其他系统**的通信\n{%list%}\n通信总线还可细分位串行通信总线和并行通信总线\n{%endlist%}\n\n**③总线性能指标**\n>**总线宽度**：数据线的**根数**\n\n>**标准传输率**：**每秒**传输的**最大字节数**\n\n>**时钟同步/异步**：是否有**同步时钟**\n\n>**总线复用**：**地址线**与**数据线**是否复用，总线复用能**有效减少芯片的管脚数**\n\n>**信号线数**、**总线控制方式**等\n\n{%list%}\n总线标准：一种对总线性能指标的规定，如USB和PCI等\n{%endlist%}\n\n#### 2.2总线结构\n**①四总线结构**\n>**高速总线**连接**高速设备**，**扩展总线**连接**低速设备**\n`cache`用于解决CPU和主存**处理速度差**\n\n![四总线结构](/image/JZ_5.png)\n\n**②PCI总线结构**\n>其中**设备能接的地方**也能接`PCI桥`，从而实现**设备分级**，经过越多的桥，速度越慢\n\n![PCI总线结构](/image/JZ_6.png)\n\n#### 2.3总线占用控制\n**①设备分类**\n>**主设备**：对总线有**控制权**\n**从设备**：只能**响应主设备**发来的总线命令\n\n**②链式查询方式**\n>**BR线**：设备通过这条线发出**总线占用请求**\n**BS线**：如果**总线被占用**，则通过这条线得知\n**BG线**：总线**授权**线，按照**设备的优先级**依次连接\n{%list%}\n当总线空闲时，多个设备提出了总线占用请求，则通过BG线依次查询部件，优先给优先级高的部件提供总线，并设置总线忙\n{%endlist%}\n{%warning%}\n对电路故障敏感，且靠后的设备很难申请到总线，速度较慢，通常用于简单的系统中\n{%endwarning%}\n\n![链式查询方式](/image/JZ_7.png)\n\n**②计数器定时查询**\n>**总线控制部件**中有一个**计数器**，为某个数`n`（可以人为或者通过程序**控制**），当接收到总线请求后，总线控制部件**根据计数器的值`n`**，通过**设备地址线**从**第n个部件开始**查找，直到找到发出总线请求的部件\n{%list%}\n和链式类似，但是链式的值只能是0，定时器可以设置优先级\n{%endlist%}\n![计数器定时查询](/image/JZ_8.png)\n\n**③独立请求方式**\n>**每个部件**都有对应的**BR线**和**BS线**，总线控制部件中有一个**排队器**设置**设备的优先级**\n\n![独立请求方式](/image/JZ_9.png)\n\n#### 2.4总线通信控制\n**①总线传输周期**\n>**申请分配阶段**：主模块**申请总线**\n\n>**寻址阶段**：**主模块**给出**地址**和**命令**，通过地址**找到从设备**并**传递命令**\n\n>**传数阶段**：主模块和从模块**交换数据**\n\n>**结束阶段**：主模块和从模块**撤销相关信息**\n\n**②同步通信**\n>**统一时标**控制通信过程，需要在**对应的传输周期节点**完成**对应的操作**\n{%list%}\n主从模块是强制统一的，对于速度不一样的模块，选择速度最慢的模块对时标进行设计，即速度快的模块需要等速度慢的模块\n{%endlist%}\n>**以读数据为例**\n**T1时钟上升时**：**主设备**需要给出**地址信号**\n**T2时钟上升时**：**主设备**给出**读信号**\n**T3时钟上升时**：**从设备**给出**数据信号**\n**T4时钟上升时**：从模块**撤销数据**，主模块**撤销命令**\n\n**③异步通信**\n>**不互锁**：主设备发出请求，**一定时间后撤销**，从设备接收到请求后应答，**一段时间后撤销**\n不稳定\n\n>**半互锁**：主设备发出请求，从设备接收到请求后应答，主设备只有**接收到应答信号再撤销请求信号**，从设备**一段时间后撤销应答信号**\n\n>**全互锁**：主设备发出请求，从设备接收到请求后应答，主设备**只有接收到应答信号再撤销请求信号**，从设备**只有知道主设备撤销请求后再撤销应答信号**\n\n**④半同步通信**\n>同步通信中**插入等待周期**\n\n>**以读数据为例**\nT1时钟上升时，主设备需要给出地址信号\nT2时钟上升时，给出读信号\n如果**从设备不能在T3给出数据**，则给出一个**低电平的等待信号**\n当**等待信号为低电平**时，**等待一个周期T_w**\n直到**等待信号为高电平开始执行T3**\nT3时钟上升时，从设备给出数据信号\nT4时钟上升时，从模块撤销数据，主模块撤销命令\n\n**⑤分离式通信**\n>**一个总线传输周期**分为**两个子周期**\n**第一个子周期**：**主模块申请占用总线**，使用完后**放弃总线的使用权**\n**第二个子周期**：当主/从模块**准备好数据**，**从模块在申请占用总线**，将各种信息送至总线上\n{%list%}\n一个总线传输周期会有不使用总线的小周期，比如从设备准备数据，为了提高总线使用效率，可以在此期间将总线给其他设备使用\n{%endlist%}\n\n### 3.存储器\n#### 3.1分类\n**①按照存储介质分类**\n>**半导体存储器**：易失\n\n>**磁表面存储器**：非易失\n\n>**磁芯存储器**：非易失\n\n>**光盘存储器**：非易失\n\n**②按存取方式分类**\n>**存取时间与物理地址无关**：**随机存储器**\n\n>**存取时间与物理地址有关**：**顺序存取存储器**（磁带）、**直接存取存储器**（磁盘）\n\n#### 3.2层次结构\n![层次结构](/image/JZ_10.png)\n![层次结构](/image/JZ_11.png)\n{%list%}\n主存和辅存层次解决容量问题，若程序过大，则会将一部分放入主存，其余部分放入辅存\n{%endlist%}\n{%list%}\n缓存和主存层次解决CPU和主存速度差异问题，缓存中存放CPU经常使用的的主存信息\n{%endlist%}\n\n\n#### 3.3主存\n**①基本构成**\n![主存基本构成](/image/JZ_12.png)\n\n{%list%}\n不同存储器的存储单元存储方式可能不同\n{%endlist%}\n>**大端大尾**：**高位字节地址**为字地址，**高位字节**存储**字的低位**\n\n>**小端小尾**：**低位字节地址**为字地址。**低位字节**存储**字的低位**\n\n\n**②主要技术指标**\n>**存储容量**：存放**二进制代码**的**总位数**\n\n>**存取时间**：存储器的**访问时间**\n\n>**存储周期**：**连续两次独立**的存储器操作所需的**最小间隔时间**\n\n>**存储器带宽**：**单位时间存储读取的长度（位/秒）**\n\n\n#### 各种介质\n半导体存储芯片\n![组成](/image/JZ_21.png)\n片选线表示哪片芯片被访问\n\n![片选法](/image/JZ_22.png)\n地址译码器，四位，表示有16个单元\n读写控制电路，8位，表示每个单元为8位\n\n![重合法](/image/JZ_23.png)\n每次只选择一个位输出到I/O接口中\n\n随机存取存储器\n静态RAM\n![静态RAM基本电路](/image/JZ_24.png)\n利用行列开关选择存储单元，触发器控制存储01，通过写/读放大器与读写信号控制读写\n将每一行分为四组，每一组位16列，其中列地址只有16位，给出一个列地址，每一组对应列地址的单元会被选中，这样就可以同时选中四个单元\n![RAM矩阵读写](/image/JZ_25.png)\n\n动态RAM\n以三管为例\n0/1内容保存在C_g中，如果读选择线有效，则T_2导通，如果写选择线有效，则T_3导通，\n若预充电信号有效，则T_4导通，V_DD对读数据线充电，都数据线变为1，读选择线有效，T_2导通，若C_g保存信号是0（低电平），T_1不会导通，数据线不会放电，读数据线保持为1，反之T_1导通，读数据线放电，变为0\n![动态RAM](/image/JZ_26.png)\n读出信息与原存信息相反\n写入信息与输入信息相同\n每个行地址都有读选择线和写选择线，然后通过列地址精确定位\n![动态RAM芯片](/image/JZ_27.png)\n电容中信息容易丢失（容易漏电），刷新至于行地址有关（每次刷新一行的数据）\n集中刷新：每隔一段时间对所有的行进行刷新，在此期间，动态RAM无法使用（死区）\n![集中刷新](/image/JZ_28.png)\n分散刷新：每隔一段时间对某一行进行刷新，但是这样导致存取周期变长，因为刷新时间也算入到存取周期中了\n![分散刷新](/image/JZ_29.png)\n异步刷新：每个一段时间刷新几行，只要将刷新时间安排在指令译码阶段，可以大大减小死区\n![分散刷新](/image/JZ_30.png)\n动态RAM集成度较高，功耗小，价格低，速度慢，一般用于主存，静态RAM集成度较低，功耗大，一般用于做缓存\n\nROM只读存储器，用于保存系统程序和系统信息\nMROM：只能读，不能进行擦写\nPROM：只能进行一次擦写\nEPROM：能进行多次擦写，紫外线\nEEPROM：能进行多次擦写，电\n闪存：能多次擦写，速度快，且类似于RAM\n\nCPU和存储器的连接\n位扩展：将多个芯片连接成一个芯片，其中片选线和控制线需要共用\n![分散刷新](/image/JZ_31.png)\n字扩展：增加地址线，作为片选线，将两个芯片的地址空间分开\n![分散刷新](/image/JZ_32.png)\n同时扩展\n![分散刷新](/image/JZ_33.png)\nCPU和存储器的连接\n>上面地址范围存储系统，下面存储用户程序，MREQ表示访问的是I/O端口\n![分散刷新](/image/JZ_34.png)\n![分散刷新](/image/JZ_35.png)\n\n存储器的校验\n电子元件可能发生故障，0/1错误\n![分散刷新](/image/JZ_36.png)","source":"_posts/计算机组成原理（一）.md","raw":"---\ntitle: 计算机组成原理（一）\nseo_title: seo名称\ntoc: true\nindent: true\ntop: false\ncomments: true\narchive: true\ncover: false\nmathjax: false\npin: false\ntop_meta: false\nbottom_meta: false\nsidebar:\n  - toc\ntag:\n  - 计算机组成原理\n  - 《计算机组成原理》\ncategories: 计算机基础\nkeywords: 文章关键词\nupdated: ''\nimg: /medias/featureimages/39.webp\ndate:\nsummary: 计算机组成原理\n---\n# 计算机组成原理（一）\n## 计算机组成原理启蒙\n### 1.计算机基本组成\n#### 1.1冯诺依曼结构\n**①特点**\n>计算机由**运算器、控制器、存储器、输入/输出设备**五大部分组成\n\n>指令和数据以**同等地位**存储，用**二进制**表示\n\n>指令由**操作码**和**地址码**组成\n\n>以**运算器**为中心\n{%right%}\n以运算器为中心导致运算器成为瓶颈，故再次基础上对其进行改进\n{%endright%}\n**②以存储器为核心**\n![以存储器为核心的冯诺依曼结构](/image/JZ_1.png)\n\n#### 1.2存储器\n**①组成**\n>**存储体**：由多个**存储单元**构成，存储单元存放**一串二进制代码**\n\n>**MAR**：存储器**地址寄存器**，反映存储**单元个数**\n\n>**MDR**：存储器**数据寄存器**，反映存储器**字长**\n{%right%}\nMAR相当于存储器的地址线，MDR相当于存储器的数据线\n{%endright%}\n**②结构图示**\n![存储器结构](/image/JZ_2.png)\n\n#### 1.3运算器\n**①组成**\n>**ALU**：**算数逻辑单元**，主要进行运算的单元\n\n>**相关寄存器**：`ACC`、`MQ`、`X`寄存器，不同的**指令**，这些寄存器的**用途不同**\n{%warning%}\n不同的CPU运算器都是不同的，尤其是寄存器的个数及其用途\n{%endwarning%}\n**②结构**\n![运算器结构](/image/JZ_3.png)\n\n**③乘法指令过程**\n>通过**取数指令**，将**被乘数**放入**ACC**中（由编程者执行）\n根据**乘法指令的地址码**取出**乘数**放在**MQ**中\n将**ACC中数据**送入**X**，并清空**ACC**（设置为0），用于存放乘法指令的**中间结果**\n**ALU**将**结果**放在**ACC**和**MQ**中\n\n#### 1.4控制器\n>**解释**指令，并保证指令的**按序执行**\n\n**①组成**\n>**PC**：存放当前**欲执行指令的地址**\n\n>**IR**：存放当前**欲执行的指令**\n\n>**CU**：**执行**指令\n\n**②结构**\n![控制器结构](/image/JZ_4.png)\n\n#### 1.5一条指令的完成过程\n{%list%}\n以取数指令为例\n{%endlist%}\n>**PC**将**指令地址**送入**MAR**\n**MAR**从存储体中**取出取数指令**放入**MDR**\n**MDR**将**指令**送入**IR**\n**IR**将指令的**操作码**送入**CU**，**地址码**送入**MAR**\n在**CU**的控制下，从存储体中取出**对应数据**放入**MDR**，随后送入**ACC**\n随后**PC+1**等待**下一条指令**\n\n### 2.系统总线\n#### 2.1引言\n**①定义**\n>连接各个部件的**信息传输线**，是各个部件**共享的传输介质**\n{%list%}\n一根总线在同一时间只能被一组设备使用\n{%endlist%}\n\n**②总线的分类**\n>**片内总线**：**芯片内部**的总线\n\n>**系统总线**：**计算机各部件之间**的总线\n{%list%}\n还可细分位数据总线、地址总线和控制总线\n{%endlist%}\n\n>**通信总线**：**计算机系统之间**或者计算机系统**与其他系统**的通信\n{%list%}\n通信总线还可细分位串行通信总线和并行通信总线\n{%endlist%}\n\n**③总线性能指标**\n>**总线宽度**：数据线的**根数**\n\n>**标准传输率**：**每秒**传输的**最大字节数**\n\n>**时钟同步/异步**：是否有**同步时钟**\n\n>**总线复用**：**地址线**与**数据线**是否复用，总线复用能**有效减少芯片的管脚数**\n\n>**信号线数**、**总线控制方式**等\n\n{%list%}\n总线标准：一种对总线性能指标的规定，如USB和PCI等\n{%endlist%}\n\n#### 2.2总线结构\n**①四总线结构**\n>**高速总线**连接**高速设备**，**扩展总线**连接**低速设备**\n`cache`用于解决CPU和主存**处理速度差**\n\n![四总线结构](/image/JZ_5.png)\n\n**②PCI总线结构**\n>其中**设备能接的地方**也能接`PCI桥`，从而实现**设备分级**，经过越多的桥，速度越慢\n\n![PCI总线结构](/image/JZ_6.png)\n\n#### 2.3总线占用控制\n**①设备分类**\n>**主设备**：对总线有**控制权**\n**从设备**：只能**响应主设备**发来的总线命令\n\n**②链式查询方式**\n>**BR线**：设备通过这条线发出**总线占用请求**\n**BS线**：如果**总线被占用**，则通过这条线得知\n**BG线**：总线**授权**线，按照**设备的优先级**依次连接\n{%list%}\n当总线空闲时，多个设备提出了总线占用请求，则通过BG线依次查询部件，优先给优先级高的部件提供总线，并设置总线忙\n{%endlist%}\n{%warning%}\n对电路故障敏感，且靠后的设备很难申请到总线，速度较慢，通常用于简单的系统中\n{%endwarning%}\n\n![链式查询方式](/image/JZ_7.png)\n\n**②计数器定时查询**\n>**总线控制部件**中有一个**计数器**，为某个数`n`（可以人为或者通过程序**控制**），当接收到总线请求后，总线控制部件**根据计数器的值`n`**，通过**设备地址线**从**第n个部件开始**查找，直到找到发出总线请求的部件\n{%list%}\n和链式类似，但是链式的值只能是0，定时器可以设置优先级\n{%endlist%}\n![计数器定时查询](/image/JZ_8.png)\n\n**③独立请求方式**\n>**每个部件**都有对应的**BR线**和**BS线**，总线控制部件中有一个**排队器**设置**设备的优先级**\n\n![独立请求方式](/image/JZ_9.png)\n\n#### 2.4总线通信控制\n**①总线传输周期**\n>**申请分配阶段**：主模块**申请总线**\n\n>**寻址阶段**：**主模块**给出**地址**和**命令**，通过地址**找到从设备**并**传递命令**\n\n>**传数阶段**：主模块和从模块**交换数据**\n\n>**结束阶段**：主模块和从模块**撤销相关信息**\n\n**②同步通信**\n>**统一时标**控制通信过程，需要在**对应的传输周期节点**完成**对应的操作**\n{%list%}\n主从模块是强制统一的，对于速度不一样的模块，选择速度最慢的模块对时标进行设计，即速度快的模块需要等速度慢的模块\n{%endlist%}\n>**以读数据为例**\n**T1时钟上升时**：**主设备**需要给出**地址信号**\n**T2时钟上升时**：**主设备**给出**读信号**\n**T3时钟上升时**：**从设备**给出**数据信号**\n**T4时钟上升时**：从模块**撤销数据**，主模块**撤销命令**\n\n**③异步通信**\n>**不互锁**：主设备发出请求，**一定时间后撤销**，从设备接收到请求后应答，**一段时间后撤销**\n不稳定\n\n>**半互锁**：主设备发出请求，从设备接收到请求后应答，主设备只有**接收到应答信号再撤销请求信号**，从设备**一段时间后撤销应答信号**\n\n>**全互锁**：主设备发出请求，从设备接收到请求后应答，主设备**只有接收到应答信号再撤销请求信号**，从设备**只有知道主设备撤销请求后再撤销应答信号**\n\n**④半同步通信**\n>同步通信中**插入等待周期**\n\n>**以读数据为例**\nT1时钟上升时，主设备需要给出地址信号\nT2时钟上升时，给出读信号\n如果**从设备不能在T3给出数据**，则给出一个**低电平的等待信号**\n当**等待信号为低电平**时，**等待一个周期T_w**\n直到**等待信号为高电平开始执行T3**\nT3时钟上升时，从设备给出数据信号\nT4时钟上升时，从模块撤销数据，主模块撤销命令\n\n**⑤分离式通信**\n>**一个总线传输周期**分为**两个子周期**\n**第一个子周期**：**主模块申请占用总线**，使用完后**放弃总线的使用权**\n**第二个子周期**：当主/从模块**准备好数据**，**从模块在申请占用总线**，将各种信息送至总线上\n{%list%}\n一个总线传输周期会有不使用总线的小周期，比如从设备准备数据，为了提高总线使用效率，可以在此期间将总线给其他设备使用\n{%endlist%}\n\n### 3.存储器\n#### 3.1分类\n**①按照存储介质分类**\n>**半导体存储器**：易失\n\n>**磁表面存储器**：非易失\n\n>**磁芯存储器**：非易失\n\n>**光盘存储器**：非易失\n\n**②按存取方式分类**\n>**存取时间与物理地址无关**：**随机存储器**\n\n>**存取时间与物理地址有关**：**顺序存取存储器**（磁带）、**直接存取存储器**（磁盘）\n\n#### 3.2层次结构\n![层次结构](/image/JZ_10.png)\n![层次结构](/image/JZ_11.png)\n{%list%}\n主存和辅存层次解决容量问题，若程序过大，则会将一部分放入主存，其余部分放入辅存\n{%endlist%}\n{%list%}\n缓存和主存层次解决CPU和主存速度差异问题，缓存中存放CPU经常使用的的主存信息\n{%endlist%}\n\n\n#### 3.3主存\n**①基本构成**\n![主存基本构成](/image/JZ_12.png)\n\n{%list%}\n不同存储器的存储单元存储方式可能不同\n{%endlist%}\n>**大端大尾**：**高位字节地址**为字地址，**高位字节**存储**字的低位**\n\n>**小端小尾**：**低位字节地址**为字地址。**低位字节**存储**字的低位**\n\n\n**②主要技术指标**\n>**存储容量**：存放**二进制代码**的**总位数**\n\n>**存取时间**：存储器的**访问时间**\n\n>**存储周期**：**连续两次独立**的存储器操作所需的**最小间隔时间**\n\n>**存储器带宽**：**单位时间存储读取的长度（位/秒）**\n\n\n#### 各种介质\n半导体存储芯片\n![组成](/image/JZ_21.png)\n片选线表示哪片芯片被访问\n\n![片选法](/image/JZ_22.png)\n地址译码器，四位，表示有16个单元\n读写控制电路，8位，表示每个单元为8位\n\n![重合法](/image/JZ_23.png)\n每次只选择一个位输出到I/O接口中\n\n随机存取存储器\n静态RAM\n![静态RAM基本电路](/image/JZ_24.png)\n利用行列开关选择存储单元，触发器控制存储01，通过写/读放大器与读写信号控制读写\n将每一行分为四组，每一组位16列，其中列地址只有16位，给出一个列地址，每一组对应列地址的单元会被选中，这样就可以同时选中四个单元\n![RAM矩阵读写](/image/JZ_25.png)\n\n动态RAM\n以三管为例\n0/1内容保存在C_g中，如果读选择线有效，则T_2导通，如果写选择线有效，则T_3导通，\n若预充电信号有效，则T_4导通，V_DD对读数据线充电，都数据线变为1，读选择线有效，T_2导通，若C_g保存信号是0（低电平），T_1不会导通，数据线不会放电，读数据线保持为1，反之T_1导通，读数据线放电，变为0\n![动态RAM](/image/JZ_26.png)\n读出信息与原存信息相反\n写入信息与输入信息相同\n每个行地址都有读选择线和写选择线，然后通过列地址精确定位\n![动态RAM芯片](/image/JZ_27.png)\n电容中信息容易丢失（容易漏电），刷新至于行地址有关（每次刷新一行的数据）\n集中刷新：每隔一段时间对所有的行进行刷新，在此期间，动态RAM无法使用（死区）\n![集中刷新](/image/JZ_28.png)\n分散刷新：每隔一段时间对某一行进行刷新，但是这样导致存取周期变长，因为刷新时间也算入到存取周期中了\n![分散刷新](/image/JZ_29.png)\n异步刷新：每个一段时间刷新几行，只要将刷新时间安排在指令译码阶段，可以大大减小死区\n![分散刷新](/image/JZ_30.png)\n动态RAM集成度较高，功耗小，价格低，速度慢，一般用于主存，静态RAM集成度较低，功耗大，一般用于做缓存\n\nROM只读存储器，用于保存系统程序和系统信息\nMROM：只能读，不能进行擦写\nPROM：只能进行一次擦写\nEPROM：能进行多次擦写，紫外线\nEEPROM：能进行多次擦写，电\n闪存：能多次擦写，速度快，且类似于RAM\n\nCPU和存储器的连接\n位扩展：将多个芯片连接成一个芯片，其中片选线和控制线需要共用\n![分散刷新](/image/JZ_31.png)\n字扩展：增加地址线，作为片选线，将两个芯片的地址空间分开\n![分散刷新](/image/JZ_32.png)\n同时扩展\n![分散刷新](/image/JZ_33.png)\nCPU和存储器的连接\n>上面地址范围存储系统，下面存储用户程序，MREQ表示访问的是I/O端口\n![分散刷新](/image/JZ_34.png)\n![分散刷新](/image/JZ_35.png)\n\n存储器的校验\n电子元件可能发生故障，0/1错误\n![分散刷新](/image/JZ_36.png)","slug":"计算机组成原理（一）","published":1,"_id":"clnig9wty0000l0vde96w4z21","layout":"post","photos":[],"link":"","content":"<h1 id=\"计算机组成原理（一）\"><a href=\"#计算机组成原理（一）\" class=\"headerlink\" title=\"计算机组成原理（一）\"></a>计算机组成原理（一）</h1><h2 id=\"计算机组成原理启蒙\"><a href=\"#计算机组成原理启蒙\" class=\"headerlink\" title=\"计算机组成原理启蒙\"></a>计算机组成原理启蒙</h2><h3 id=\"1-计算机基本组成\"><a href=\"#1-计算机基本组成\" class=\"headerlink\" title=\"1.计算机基本组成\"></a>1.计算机基本组成</h3><h4 id=\"1-1冯诺依曼结构\"><a href=\"#1-1冯诺依曼结构\" class=\"headerlink\" title=\"1.1冯诺依曼结构\"></a>1.1冯诺依曼结构</h4><p><strong>①特点</strong></p>\n<blockquote>\n<p>计算机由<strong>运算器、控制器、存储器、输入/输出设备</strong>五大部分组成</p>\n</blockquote>\n<blockquote>\n<p>指令和数据以<strong>同等地位</strong>存储，用<strong>二进制</strong>表示</p>\n</blockquote>\n<blockquote>\n<p>指令由<strong>操作码</strong>和<strong>地址码</strong>组成</p>\n</blockquote>\n<blockquote>\n<p>以<strong>运算器</strong>为中心</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 以运算器为中心导致运算器成为瓶颈，故再次基础上对其进行改进</div>\n<p><strong>②以存储器为核心</strong><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/JZ_1.png\" alt=\"以存储器为核心的冯诺依曼结构\"></p>\n<h4 id=\"1-2存储器\"><a href=\"#1-2存储器\" class=\"headerlink\" title=\"1.2存储器\"></a>1.2存储器</h4><p><strong>①组成</strong></p>\n<blockquote>\n<p><strong>存储体</strong>：由多个<strong>存储单元</strong>构成，存储单元存放<strong>一串二进制代码</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>MAR</strong>：存储器<strong>地址寄存器</strong>，反映存储<strong>单元个数</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>MDR</strong>：存储器<strong>数据寄存器</strong>，反映存储器<strong>字长</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> MAR相当于存储器的地址线，MDR相当于存储器的数据线</div>\n<p><strong>②结构图示</strong><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/JZ_2.png\" alt=\"存储器结构\"></p>\n<h4 id=\"1-3运算器\"><a href=\"#1-3运算器\" class=\"headerlink\" title=\"1.3运算器\"></a>1.3运算器</h4><p><strong>①组成</strong></p>\n<blockquote>\n<p><strong>ALU</strong>：<strong>算数逻辑单元</strong>，主要进行运算的单元</p>\n</blockquote>\n<blockquote>\n<p><strong>相关寄存器</strong>：<code>ACC</code>、<code>MQ</code>、<code>X</code>寄存器，不同的<strong>指令</strong>，这些寄存器的<strong>用途不同</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 不同的CPU运算器都是不同的，尤其是寄存器的个数及其用途</div>\n<p><strong>②结构</strong><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/JZ_3.png\" alt=\"运算器结构\"></p>\n<p><strong>③乘法指令过程</strong></p>\n<blockquote>\n<p>通过<strong>取数指令</strong>，将<strong>被乘数</strong>放入<strong>ACC</strong>中（由编程者执行）<br>根据<strong>乘法指令的地址码</strong>取出<strong>乘数</strong>放在<strong>MQ</strong>中<br>将<strong>ACC中数据</strong>送入<strong>X</strong>，并清空<strong>ACC</strong>（设置为0），用于存放乘法指令的<strong>中间结果</strong><br><strong>ALU</strong>将<strong>结果</strong>放在<strong>ACC</strong>和<strong>MQ</strong>中</p>\n</blockquote>\n<h4 id=\"1-4控制器\"><a href=\"#1-4控制器\" class=\"headerlink\" title=\"1.4控制器\"></a>1.4控制器</h4><blockquote>\n<p><strong>解释</strong>指令，并保证指令的<strong>按序执行</strong></p>\n</blockquote>\n<p><strong>①组成</strong></p>\n<blockquote>\n<p><strong>PC</strong>：存放当前<strong>欲执行指令的地址</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>IR</strong>：存放当前<strong>欲执行的指令</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>CU</strong>：<strong>执行</strong>指令</p>\n</blockquote>\n<p><strong>②结构</strong><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/JZ_4.png\" alt=\"控制器结构\"></p>\n<h4 id=\"1-5一条指令的完成过程\"><a href=\"#1-5一条指令的完成过程\" class=\"headerlink\" title=\"1.5一条指令的完成过程\"></a>1.5一条指令的完成过程</h4><div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 以取数指令为例</div>\n<blockquote>\n<p><strong>PC</strong>将<strong>指令地址</strong>送入<strong>MAR</strong><br><strong>MAR</strong>从存储体中<strong>取出取数指令</strong>放入<strong>MDR</strong><br><strong>MDR</strong>将<strong>指令</strong>送入<strong>IR</strong><br><strong>IR</strong>将指令的<strong>操作码</strong>送入<strong>CU</strong>，<strong>地址码</strong>送入<strong>MAR</strong><br>在<strong>CU</strong>的控制下，从存储体中取出<strong>对应数据</strong>放入<strong>MDR</strong>，随后送入<strong>ACC</strong><br>随后<strong>PC+1</strong>等待<strong>下一条指令</strong></p>\n</blockquote>\n<h3 id=\"2-系统总线\"><a href=\"#2-系统总线\" class=\"headerlink\" title=\"2.系统总线\"></a>2.系统总线</h3><h4 id=\"2-1引言\"><a href=\"#2-1引言\" class=\"headerlink\" title=\"2.1引言\"></a>2.1引言</h4><p><strong>①定义</strong></p>\n<blockquote>\n<p>连接各个部件的<strong>信息传输线</strong>，是各个部件<strong>共享的传输介质</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 一根总线在同一时间只能被一组设备使用</div>\n\n<p><strong>②总线的分类</strong></p>\n<blockquote>\n<p><strong>片内总线</strong>：<strong>芯片内部</strong>的总线</p>\n</blockquote>\n<blockquote>\n<p><strong>系统总线</strong>：<strong>计算机各部件之间</strong>的总线</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 还可细分位数据总线、地址总线和控制总线</div>\n\n<blockquote>\n<p><strong>通信总线</strong>：<strong>计算机系统之间</strong>或者计算机系统<strong>与其他系统</strong>的通信</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 通信总线还可细分位串行通信总线和并行通信总线</div>\n\n<p><strong>③总线性能指标</strong></p>\n<blockquote>\n<p><strong>总线宽度</strong>：数据线的<strong>根数</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>标准传输率</strong>：<strong>每秒</strong>传输的<strong>最大字节数</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>时钟同步/异步</strong>：是否有<strong>同步时钟</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>总线复用</strong>：<strong>地址线</strong>与<strong>数据线</strong>是否复用，总线复用能<strong>有效减少芯片的管脚数</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>信号线数</strong>、<strong>总线控制方式</strong>等</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 总线标准：一种对总线性能指标的规定，如USB和PCI等</div>\n\n<h4 id=\"2-2总线结构\"><a href=\"#2-2总线结构\" class=\"headerlink\" title=\"2.2总线结构\"></a>2.2总线结构</h4><p><strong>①四总线结构</strong></p>\n<blockquote>\n<p><strong>高速总线</strong>连接<strong>高速设备</strong>，<strong>扩展总线</strong>连接<strong>低速设备</strong><br><code>cache</code>用于解决CPU和主存<strong>处理速度差</strong></p>\n</blockquote>\n<p><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/JZ_5.png\" alt=\"四总线结构\"></p>\n<p><strong>②PCI总线结构</strong></p>\n<blockquote>\n<p>其中<strong>设备能接的地方</strong>也能接<code>PCI桥</code>，从而实现<strong>设备分级</strong>，经过越多的桥，速度越慢</p>\n</blockquote>\n<p><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/JZ_6.png\" alt=\"PCI总线结构\"></p>\n<h4 id=\"2-3总线占用控制\"><a href=\"#2-3总线占用控制\" class=\"headerlink\" title=\"2.3总线占用控制\"></a>2.3总线占用控制</h4><p><strong>①设备分类</strong></p>\n<blockquote>\n<p><strong>主设备</strong>：对总线有<strong>控制权</strong><br><strong>从设备</strong>：只能<strong>响应主设备</strong>发来的总线命令</p>\n</blockquote>\n<p><strong>②链式查询方式</strong></p>\n<blockquote>\n<p><strong>BR线</strong>：设备通过这条线发出<strong>总线占用请求</strong><br><strong>BS线</strong>：如果<strong>总线被占用</strong>，则通过这条线得知<br><strong>BG线</strong>：总线<strong>授权</strong>线，按照<strong>设备的优先级</strong>依次连接</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 当总线空闲时，多个设备提出了总线占用请求，则通过BG线依次查询部件，优先给优先级高的部件提供总线，并设置总线忙</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 对电路故障敏感，且靠后的设备很难申请到总线，速度较慢，通常用于简单的系统中</div>\n\n<p><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/JZ_7.png\" alt=\"链式查询方式\"></p>\n<p><strong>②计数器定时查询</strong></p>\n<blockquote>\n<p><strong>总线控制部件</strong>中有一个<strong>计数器</strong>，为某个数<code>n</code>（可以人为或者通过程序<strong>控制</strong>），当接收到总线请求后，总线控制部件<strong>根据计数器的值<code>n</code><strong>，通过</strong>设备地址线</strong>从<strong>第n个部件开始</strong>查找，直到找到发出总线请求的部件</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 和链式类似，但是链式的值只能是0，定时器可以设置优先级</div>\n<p><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/JZ_8.png\" alt=\"计数器定时查询\"></p>\n<p><strong>③独立请求方式</strong></p>\n<blockquote>\n<p><strong>每个部件</strong>都有对应的<strong>BR线</strong>和<strong>BS线</strong>，总线控制部件中有一个<strong>排队器</strong>设置<strong>设备的优先级</strong></p>\n</blockquote>\n<p><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/JZ_9.png\" alt=\"独立请求方式\"></p>\n<h4 id=\"2-4总线通信控制\"><a href=\"#2-4总线通信控制\" class=\"headerlink\" title=\"2.4总线通信控制\"></a>2.4总线通信控制</h4><p><strong>①总线传输周期</strong></p>\n<blockquote>\n<p><strong>申请分配阶段</strong>：主模块<strong>申请总线</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>寻址阶段</strong>：<strong>主模块</strong>给出<strong>地址</strong>和<strong>命令</strong>，通过地址<strong>找到从设备</strong>并<strong>传递命令</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>传数阶段</strong>：主模块和从模块<strong>交换数据</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>结束阶段</strong>：主模块和从模块<strong>撤销相关信息</strong></p>\n</blockquote>\n<p><strong>②同步通信</strong></p>\n<blockquote>\n<p><strong>统一时标</strong>控制通信过程，需要在<strong>对应的传输周期节点</strong>完成<strong>对应的操作</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 主从模块是强制统一的，对于速度不一样的模块，选择速度最慢的模块对时标进行设计，即速度快的模块需要等速度慢的模块</div>\n<blockquote>\n<p><strong>以读数据为例</strong><br><strong>T1时钟上升时</strong>：<strong>主设备</strong>需要给出<strong>地址信号</strong><br><strong>T2时钟上升时</strong>：<strong>主设备</strong>给出<strong>读信号</strong><br><strong>T3时钟上升时</strong>：<strong>从设备</strong>给出<strong>数据信号</strong><br><strong>T4时钟上升时</strong>：从模块<strong>撤销数据</strong>，主模块<strong>撤销命令</strong></p>\n</blockquote>\n<p><strong>③异步通信</strong></p>\n<blockquote>\n<p><strong>不互锁</strong>：主设备发出请求，<strong>一定时间后撤销</strong>，从设备接收到请求后应答，<strong>一段时间后撤销</strong><br>不稳定</p>\n</blockquote>\n<blockquote>\n<p><strong>半互锁</strong>：主设备发出请求，从设备接收到请求后应答，主设备只有<strong>接收到应答信号再撤销请求信号</strong>，从设备<strong>一段时间后撤销应答信号</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>全互锁</strong>：主设备发出请求，从设备接收到请求后应答，主设备<strong>只有接收到应答信号再撤销请求信号</strong>，从设备<strong>只有知道主设备撤销请求后再撤销应答信号</strong></p>\n</blockquote>\n<p><strong>④半同步通信</strong></p>\n<blockquote>\n<p>同步通信中<strong>插入等待周期</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>以读数据为例</strong><br>T1时钟上升时，主设备需要给出地址信号<br>T2时钟上升时，给出读信号<br>如果<strong>从设备不能在T3给出数据</strong>，则给出一个<strong>低电平的等待信号</strong><br>当<strong>等待信号为低电平</strong>时，<strong>等待一个周期T_w</strong><br>直到<strong>等待信号为高电平开始执行T3</strong><br>T3时钟上升时，从设备给出数据信号<br>T4时钟上升时，从模块撤销数据，主模块撤销命令</p>\n</blockquote>\n<p><strong>⑤分离式通信</strong></p>\n<blockquote>\n<p><strong>一个总线传输周期</strong>分为<strong>两个子周期</strong><br><strong>第一个子周期</strong>：<strong>主模块申请占用总线</strong>，使用完后<strong>放弃总线的使用权</strong><br><strong>第二个子周期</strong>：当主/从模块<strong>准备好数据</strong>，<strong>从模块在申请占用总线</strong>，将各种信息送至总线上</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 一个总线传输周期会有不使用总线的小周期，比如从设备准备数据，为了提高总线使用效率，可以在此期间将总线给其他设备使用</div>\n\n<h3 id=\"3-存储器\"><a href=\"#3-存储器\" class=\"headerlink\" title=\"3.存储器\"></a>3.存储器</h3><h4 id=\"3-1分类\"><a href=\"#3-1分类\" class=\"headerlink\" title=\"3.1分类\"></a>3.1分类</h4><p><strong>①按照存储介质分类</strong></p>\n<blockquote>\n<p><strong>半导体存储器</strong>：易失</p>\n</blockquote>\n<blockquote>\n<p><strong>磁表面存储器</strong>：非易失</p>\n</blockquote>\n<blockquote>\n<p><strong>磁芯存储器</strong>：非易失</p>\n</blockquote>\n<blockquote>\n<p><strong>光盘存储器</strong>：非易失</p>\n</blockquote>\n<p><strong>②按存取方式分类</strong></p>\n<blockquote>\n<p><strong>存取时间与物理地址无关</strong>：<strong>随机存储器</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>存取时间与物理地址有关</strong>：<strong>顺序存取存储器</strong>（磁带）、<strong>直接存取存储器</strong>（磁盘）</p>\n</blockquote>\n<h4 id=\"3-2层次结构\"><a href=\"#3-2层次结构\" class=\"headerlink\" title=\"3.2层次结构\"></a>3.2层次结构</h4><p><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/JZ_10.png\" alt=\"层次结构\"><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/JZ_11.png\" alt=\"层次结构\"></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 主存和辅存层次解决容量问题，若程序过大，则会将一部分放入主存，其余部分放入辅存</div>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 缓存和主存层次解决CPU和主存速度差异问题，缓存中存放CPU经常使用的的主存信息</div>\n\n\n<h4 id=\"3-3主存\"><a href=\"#3-3主存\" class=\"headerlink\" title=\"3.3主存\"></a>3.3主存</h4><p><strong>①基本构成</strong><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/JZ_12.png\" alt=\"主存基本构成\"></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 不同存储器的存储单元存储方式可能不同</div>\n<blockquote>\n<p><strong>大端大尾</strong>：<strong>高位字节地址</strong>为字地址，<strong>高位字节</strong>存储<strong>字的低位</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>小端小尾</strong>：<strong>低位字节地址</strong>为字地址。<strong>低位字节</strong>存储<strong>字的低位</strong></p>\n</blockquote>\n<p><strong>②主要技术指标</strong></p>\n<blockquote>\n<p><strong>存储容量</strong>：存放<strong>二进制代码</strong>的<strong>总位数</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>存取时间</strong>：存储器的<strong>访问时间</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>存储周期</strong>：<strong>连续两次独立</strong>的存储器操作所需的<strong>最小间隔时间</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>存储器带宽</strong>：<strong>单位时间存储读取的长度（位/秒）</strong></p>\n</blockquote>\n<h4 id=\"各种介质\"><a href=\"#各种介质\" class=\"headerlink\" title=\"各种介质\"></a>各种介质</h4><p>半导体存储芯片<br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/JZ_21.png\" alt=\"组成\"><br>片选线表示哪片芯片被访问</p>\n<p><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/JZ_22.png\" alt=\"片选法\"><br>地址译码器，四位，表示有16个单元<br>读写控制电路，8位，表示每个单元为8位</p>\n<p><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/JZ_23.png\" alt=\"重合法\"><br>每次只选择一个位输出到I/O接口中</p>\n<p>随机存取存储器<br>静态RAM<br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/JZ_24.png\" alt=\"静态RAM基本电路\"><br>利用行列开关选择存储单元，触发器控制存储01，通过写/读放大器与读写信号控制读写<br>将每一行分为四组，每一组位16列，其中列地址只有16位，给出一个列地址，每一组对应列地址的单元会被选中，这样就可以同时选中四个单元<br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/JZ_25.png\" alt=\"RAM矩阵读写\"></p>\n<p>动态RAM<br>以三管为例<br>0/1内容保存在C_g中，如果读选择线有效，则T_2导通，如果写选择线有效，则T_3导通，<br>若预充电信号有效，则T_4导通，V_DD对读数据线充电，都数据线变为1，读选择线有效，T_2导通，若C_g保存信号是0（低电平），T_1不会导通，数据线不会放电，读数据线保持为1，反之T_1导通，读数据线放电，变为0<br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/JZ_26.png\" alt=\"动态RAM\"><br>读出信息与原存信息相反<br>写入信息与输入信息相同<br>每个行地址都有读选择线和写选择线，然后通过列地址精确定位<br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/JZ_27.png\" alt=\"动态RAM芯片\"><br>电容中信息容易丢失（容易漏电），刷新至于行地址有关（每次刷新一行的数据）<br>集中刷新：每隔一段时间对所有的行进行刷新，在此期间，动态RAM无法使用（死区）<br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/JZ_28.png\" alt=\"集中刷新\"><br>分散刷新：每隔一段时间对某一行进行刷新，但是这样导致存取周期变长，因为刷新时间也算入到存取周期中了<br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/JZ_29.png\" alt=\"分散刷新\"><br>异步刷新：每个一段时间刷新几行，只要将刷新时间安排在指令译码阶段，可以大大减小死区<br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/JZ_30.png\" alt=\"分散刷新\"><br>动态RAM集成度较高，功耗小，价格低，速度慢，一般用于主存，静态RAM集成度较低，功耗大，一般用于做缓存</p>\n<p>ROM只读存储器，用于保存系统程序和系统信息<br>MROM：只能读，不能进行擦写<br>PROM：只能进行一次擦写<br>EPROM：能进行多次擦写，紫外线<br>EEPROM：能进行多次擦写，电<br>闪存：能多次擦写，速度快，且类似于RAM</p>\n<p>CPU和存储器的连接<br>位扩展：将多个芯片连接成一个芯片，其中片选线和控制线需要共用<br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/JZ_31.png\" alt=\"分散刷新\"><br>字扩展：增加地址线，作为片选线，将两个芯片的地址空间分开<br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/JZ_32.png\" alt=\"分散刷新\"><br>同时扩展<br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/JZ_33.png\" alt=\"分散刷新\"><br>CPU和存储器的连接</p>\n<blockquote>\n<p>上面地址范围存储系统，下面存储用户程序，MREQ表示访问的是I/O端口<br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/JZ_34.png\" alt=\"分散刷新\"><br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/JZ_35.png\" alt=\"分散刷新\"></p>\n</blockquote>\n<p>存储器的校验<br>电子元件可能发生故障，0/1错误<br><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/JZ_36.png\" alt=\"分散刷新\"></p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"计算机组成原理（一）\"><a href=\"#计算机组成原理（一）\" class=\"headerlink\" title=\"计算机组成原理（一）\"></a>计算机组成原理（一）</h1><h2 id=\"计算机组成原理启蒙\"><a href=\"#计算机组成原理启蒙\" class=\"headerlink\" title=\"计算机组成原理启蒙\"></a>计算机组成原理启蒙</h2><h3 id=\"1-计算机基本组成\"><a href=\"#1-计算机基本组成\" class=\"headerlink\" title=\"1.计算机基本组成\"></a>1.计算机基本组成</h3><h4 id=\"1-1冯诺依曼结构\"><a href=\"#1-1冯诺依曼结构\" class=\"headerlink\" title=\"1.1冯诺依曼结构\"></a>1.1冯诺依曼结构</h4><p><strong>①特点</strong></p>\n<blockquote>\n<p>计算机由<strong>运算器、控制器、存储器、输入&#x2F;输出设备</strong>五大部分组成</p>\n</blockquote>\n<blockquote>\n<p>指令和数据以<strong>同等地位</strong>存储，用<strong>二进制</strong>表示</p>\n</blockquote>\n<blockquote>\n<p>指令由<strong>操作码</strong>和<strong>地址码</strong>组成</p>\n</blockquote>\n<blockquote>\n<p>以<strong>运算器</strong>为中心</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 以运算器为中心导致运算器成为瓶颈，故再次基础上对其进行改进</div>\n<p><strong>②以存储器为核心</strong><br><img src=\"/image/JZ_1.png\" alt=\"以存储器为核心的冯诺依曼结构\"></p>\n<h4 id=\"1-2存储器\"><a href=\"#1-2存储器\" class=\"headerlink\" title=\"1.2存储器\"></a>1.2存储器</h4><p><strong>①组成</strong></p>\n<blockquote>\n<p><strong>存储体</strong>：由多个<strong>存储单元</strong>构成，存储单元存放<strong>一串二进制代码</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>MAR</strong>：存储器<strong>地址寄存器</strong>，反映存储<strong>单元个数</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>MDR</strong>：存储器<strong>数据寄存器</strong>，反映存储器<strong>字长</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> MAR相当于存储器的地址线，MDR相当于存储器的数据线</div>\n<p><strong>②结构图示</strong><br><img src=\"/image/JZ_2.png\" alt=\"存储器结构\"></p>\n<h4 id=\"1-3运算器\"><a href=\"#1-3运算器\" class=\"headerlink\" title=\"1.3运算器\"></a>1.3运算器</h4><p><strong>①组成</strong></p>\n<blockquote>\n<p><strong>ALU</strong>：<strong>算数逻辑单元</strong>，主要进行运算的单元</p>\n</blockquote>\n<blockquote>\n<p><strong>相关寄存器</strong>：<code>ACC</code>、<code>MQ</code>、<code>X</code>寄存器，不同的<strong>指令</strong>，这些寄存器的<strong>用途不同</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 不同的CPU运算器都是不同的，尤其是寄存器的个数及其用途</div>\n<p><strong>②结构</strong><br><img src=\"/image/JZ_3.png\" alt=\"运算器结构\"></p>\n<p><strong>③乘法指令过程</strong></p>\n<blockquote>\n<p>通过<strong>取数指令</strong>，将<strong>被乘数</strong>放入<strong>ACC</strong>中（由编程者执行）<br>根据<strong>乘法指令的地址码</strong>取出<strong>乘数</strong>放在<strong>MQ</strong>中<br>将<strong>ACC中数据</strong>送入<strong>X</strong>，并清空<strong>ACC</strong>（设置为0），用于存放乘法指令的<strong>中间结果</strong><br><strong>ALU</strong>将<strong>结果</strong>放在<strong>ACC</strong>和<strong>MQ</strong>中</p>\n</blockquote>\n<h4 id=\"1-4控制器\"><a href=\"#1-4控制器\" class=\"headerlink\" title=\"1.4控制器\"></a>1.4控制器</h4><blockquote>\n<p><strong>解释</strong>指令，并保证指令的<strong>按序执行</strong></p>\n</blockquote>\n<p><strong>①组成</strong></p>\n<blockquote>\n<p><strong>PC</strong>：存放当前<strong>欲执行指令的地址</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>IR</strong>：存放当前<strong>欲执行的指令</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>CU</strong>：<strong>执行</strong>指令</p>\n</blockquote>\n<p><strong>②结构</strong><br><img src=\"/image/JZ_4.png\" alt=\"控制器结构\"></p>\n<h4 id=\"1-5一条指令的完成过程\"><a href=\"#1-5一条指令的完成过程\" class=\"headerlink\" title=\"1.5一条指令的完成过程\"></a>1.5一条指令的完成过程</h4><div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 以取数指令为例</div>\n<blockquote>\n<p><strong>PC</strong>将<strong>指令地址</strong>送入<strong>MAR</strong><br><strong>MAR</strong>从存储体中<strong>取出取数指令</strong>放入<strong>MDR</strong><br><strong>MDR</strong>将<strong>指令</strong>送入<strong>IR</strong><br><strong>IR</strong>将指令的<strong>操作码</strong>送入<strong>CU</strong>，<strong>地址码</strong>送入<strong>MAR</strong><br>在<strong>CU</strong>的控制下，从存储体中取出<strong>对应数据</strong>放入<strong>MDR</strong>，随后送入<strong>ACC</strong><br>随后<strong>PC+1</strong>等待<strong>下一条指令</strong></p>\n</blockquote>\n<h3 id=\"2-系统总线\"><a href=\"#2-系统总线\" class=\"headerlink\" title=\"2.系统总线\"></a>2.系统总线</h3><h4 id=\"2-1引言\"><a href=\"#2-1引言\" class=\"headerlink\" title=\"2.1引言\"></a>2.1引言</h4><p><strong>①定义</strong></p>\n<blockquote>\n<p>连接各个部件的<strong>信息传输线</strong>，是各个部件<strong>共享的传输介质</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 一根总线在同一时间只能被一组设备使用</div>\n\n<p><strong>②总线的分类</strong></p>\n<blockquote>\n<p><strong>片内总线</strong>：<strong>芯片内部</strong>的总线</p>\n</blockquote>\n<blockquote>\n<p><strong>系统总线</strong>：<strong>计算机各部件之间</strong>的总线</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 还可细分位数据总线、地址总线和控制总线</div>\n\n<blockquote>\n<p><strong>通信总线</strong>：<strong>计算机系统之间</strong>或者计算机系统<strong>与其他系统</strong>的通信</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 通信总线还可细分位串行通信总线和并行通信总线</div>\n\n<p><strong>③总线性能指标</strong></p>\n<blockquote>\n<p><strong>总线宽度</strong>：数据线的<strong>根数</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>标准传输率</strong>：<strong>每秒</strong>传输的<strong>最大字节数</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>时钟同步&#x2F;异步</strong>：是否有<strong>同步时钟</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>总线复用</strong>：<strong>地址线</strong>与<strong>数据线</strong>是否复用，总线复用能<strong>有效减少芯片的管脚数</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>信号线数</strong>、<strong>总线控制方式</strong>等</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 总线标准：一种对总线性能指标的规定，如USB和PCI等</div>\n\n<h4 id=\"2-2总线结构\"><a href=\"#2-2总线结构\" class=\"headerlink\" title=\"2.2总线结构\"></a>2.2总线结构</h4><p><strong>①四总线结构</strong></p>\n<blockquote>\n<p><strong>高速总线</strong>连接<strong>高速设备</strong>，<strong>扩展总线</strong>连接<strong>低速设备</strong><br><code>cache</code>用于解决CPU和主存<strong>处理速度差</strong></p>\n</blockquote>\n<p><img src=\"/image/JZ_5.png\" alt=\"四总线结构\"></p>\n<p><strong>②PCI总线结构</strong></p>\n<blockquote>\n<p>其中<strong>设备能接的地方</strong>也能接<code>PCI桥</code>，从而实现<strong>设备分级</strong>，经过越多的桥，速度越慢</p>\n</blockquote>\n<p><img src=\"/image/JZ_6.png\" alt=\"PCI总线结构\"></p>\n<h4 id=\"2-3总线占用控制\"><a href=\"#2-3总线占用控制\" class=\"headerlink\" title=\"2.3总线占用控制\"></a>2.3总线占用控制</h4><p><strong>①设备分类</strong></p>\n<blockquote>\n<p><strong>主设备</strong>：对总线有<strong>控制权</strong><br><strong>从设备</strong>：只能<strong>响应主设备</strong>发来的总线命令</p>\n</blockquote>\n<p><strong>②链式查询方式</strong></p>\n<blockquote>\n<p><strong>BR线</strong>：设备通过这条线发出<strong>总线占用请求</strong><br><strong>BS线</strong>：如果<strong>总线被占用</strong>，则通过这条线得知<br><strong>BG线</strong>：总线<strong>授权</strong>线，按照<strong>设备的优先级</strong>依次连接</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 当总线空闲时，多个设备提出了总线占用请求，则通过BG线依次查询部件，优先给优先级高的部件提供总线，并设置总线忙</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 对电路故障敏感，且靠后的设备很难申请到总线，速度较慢，通常用于简单的系统中</div>\n\n<p><img src=\"/image/JZ_7.png\" alt=\"链式查询方式\"></p>\n<p><strong>②计数器定时查询</strong></p>\n<blockquote>\n<p><strong>总线控制部件</strong>中有一个<strong>计数器</strong>，为某个数<code>n</code>（可以人为或者通过程序<strong>控制</strong>），当接收到总线请求后，总线控制部件<strong>根据计数器的值<code>n</code><strong>，通过</strong>设备地址线</strong>从<strong>第n个部件开始</strong>查找，直到找到发出总线请求的部件</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 和链式类似，但是链式的值只能是0，定时器可以设置优先级</div>\n<p><img src=\"/image/JZ_8.png\" alt=\"计数器定时查询\"></p>\n<p><strong>③独立请求方式</strong></p>\n<blockquote>\n<p><strong>每个部件</strong>都有对应的<strong>BR线</strong>和<strong>BS线</strong>，总线控制部件中有一个<strong>排队器</strong>设置<strong>设备的优先级</strong></p>\n</blockquote>\n<p><img src=\"/image/JZ_9.png\" alt=\"独立请求方式\"></p>\n<h4 id=\"2-4总线通信控制\"><a href=\"#2-4总线通信控制\" class=\"headerlink\" title=\"2.4总线通信控制\"></a>2.4总线通信控制</h4><p><strong>①总线传输周期</strong></p>\n<blockquote>\n<p><strong>申请分配阶段</strong>：主模块<strong>申请总线</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>寻址阶段</strong>：<strong>主模块</strong>给出<strong>地址</strong>和<strong>命令</strong>，通过地址<strong>找到从设备</strong>并<strong>传递命令</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>传数阶段</strong>：主模块和从模块<strong>交换数据</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>结束阶段</strong>：主模块和从模块<strong>撤销相关信息</strong></p>\n</blockquote>\n<p><strong>②同步通信</strong></p>\n<blockquote>\n<p><strong>统一时标</strong>控制通信过程，需要在<strong>对应的传输周期节点</strong>完成<strong>对应的操作</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 主从模块是强制统一的，对于速度不一样的模块，选择速度最慢的模块对时标进行设计，即速度快的模块需要等速度慢的模块</div>\n<blockquote>\n<p><strong>以读数据为例</strong><br><strong>T1时钟上升时</strong>：<strong>主设备</strong>需要给出<strong>地址信号</strong><br><strong>T2时钟上升时</strong>：<strong>主设备</strong>给出<strong>读信号</strong><br><strong>T3时钟上升时</strong>：<strong>从设备</strong>给出<strong>数据信号</strong><br><strong>T4时钟上升时</strong>：从模块<strong>撤销数据</strong>，主模块<strong>撤销命令</strong></p>\n</blockquote>\n<p><strong>③异步通信</strong></p>\n<blockquote>\n<p><strong>不互锁</strong>：主设备发出请求，<strong>一定时间后撤销</strong>，从设备接收到请求后应答，<strong>一段时间后撤销</strong><br>不稳定</p>\n</blockquote>\n<blockquote>\n<p><strong>半互锁</strong>：主设备发出请求，从设备接收到请求后应答，主设备只有<strong>接收到应答信号再撤销请求信号</strong>，从设备<strong>一段时间后撤销应答信号</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>全互锁</strong>：主设备发出请求，从设备接收到请求后应答，主设备<strong>只有接收到应答信号再撤销请求信号</strong>，从设备<strong>只有知道主设备撤销请求后再撤销应答信号</strong></p>\n</blockquote>\n<p><strong>④半同步通信</strong></p>\n<blockquote>\n<p>同步通信中<strong>插入等待周期</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>以读数据为例</strong><br>T1时钟上升时，主设备需要给出地址信号<br>T2时钟上升时，给出读信号<br>如果<strong>从设备不能在T3给出数据</strong>，则给出一个<strong>低电平的等待信号</strong><br>当<strong>等待信号为低电平</strong>时，<strong>等待一个周期T_w</strong><br>直到<strong>等待信号为高电平开始执行T3</strong><br>T3时钟上升时，从设备给出数据信号<br>T4时钟上升时，从模块撤销数据，主模块撤销命令</p>\n</blockquote>\n<p><strong>⑤分离式通信</strong></p>\n<blockquote>\n<p><strong>一个总线传输周期</strong>分为<strong>两个子周期</strong><br><strong>第一个子周期</strong>：<strong>主模块申请占用总线</strong>，使用完后<strong>放弃总线的使用权</strong><br><strong>第二个子周期</strong>：当主&#x2F;从模块<strong>准备好数据</strong>，<strong>从模块在申请占用总线</strong>，将各种信息送至总线上</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 一个总线传输周期会有不使用总线的小周期，比如从设备准备数据，为了提高总线使用效率，可以在此期间将总线给其他设备使用</div>\n\n<h3 id=\"3-存储器\"><a href=\"#3-存储器\" class=\"headerlink\" title=\"3.存储器\"></a>3.存储器</h3><h4 id=\"3-1分类\"><a href=\"#3-1分类\" class=\"headerlink\" title=\"3.1分类\"></a>3.1分类</h4><p><strong>①按照存储介质分类</strong></p>\n<blockquote>\n<p><strong>半导体存储器</strong>：易失</p>\n</blockquote>\n<blockquote>\n<p><strong>磁表面存储器</strong>：非易失</p>\n</blockquote>\n<blockquote>\n<p><strong>磁芯存储器</strong>：非易失</p>\n</blockquote>\n<blockquote>\n<p><strong>光盘存储器</strong>：非易失</p>\n</blockquote>\n<p><strong>②按存取方式分类</strong></p>\n<blockquote>\n<p><strong>存取时间与物理地址无关</strong>：<strong>随机存储器</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>存取时间与物理地址有关</strong>：<strong>顺序存取存储器</strong>（磁带）、<strong>直接存取存储器</strong>（磁盘）</p>\n</blockquote>\n<h4 id=\"3-2层次结构\"><a href=\"#3-2层次结构\" class=\"headerlink\" title=\"3.2层次结构\"></a>3.2层次结构</h4><p><img src=\"/image/JZ_10.png\" alt=\"层次结构\"><br><img src=\"/image/JZ_11.png\" alt=\"层次结构\"></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 主存和辅存层次解决容量问题，若程序过大，则会将一部分放入主存，其余部分放入辅存</div>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 缓存和主存层次解决CPU和主存速度差异问题，缓存中存放CPU经常使用的的主存信息</div>\n\n\n<h4 id=\"3-3主存\"><a href=\"#3-3主存\" class=\"headerlink\" title=\"3.3主存\"></a>3.3主存</h4><p><strong>①基本构成</strong><br><img src=\"/image/JZ_12.png\" alt=\"主存基本构成\"></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 不同存储器的存储单元存储方式可能不同</div>\n<blockquote>\n<p><strong>大端大尾</strong>：<strong>高位字节地址</strong>为字地址，<strong>高位字节</strong>存储<strong>字的低位</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>小端小尾</strong>：<strong>低位字节地址</strong>为字地址。<strong>低位字节</strong>存储<strong>字的低位</strong></p>\n</blockquote>\n<p><strong>②主要技术指标</strong></p>\n<blockquote>\n<p><strong>存储容量</strong>：存放<strong>二进制代码</strong>的<strong>总位数</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>存取时间</strong>：存储器的<strong>访问时间</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>存储周期</strong>：<strong>连续两次独立</strong>的存储器操作所需的<strong>最小间隔时间</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>存储器带宽</strong>：<strong>单位时间存储读取的长度（位&#x2F;秒）</strong></p>\n</blockquote>\n<h4 id=\"各种介质\"><a href=\"#各种介质\" class=\"headerlink\" title=\"各种介质\"></a>各种介质</h4><p>半导体存储芯片<br><img src=\"/image/JZ_21.png\" alt=\"组成\"><br>片选线表示哪片芯片被访问</p>\n<p><img src=\"/image/JZ_22.png\" alt=\"片选法\"><br>地址译码器，四位，表示有16个单元<br>读写控制电路，8位，表示每个单元为8位</p>\n<p><img src=\"/image/JZ_23.png\" alt=\"重合法\"><br>每次只选择一个位输出到I&#x2F;O接口中</p>\n<p>随机存取存储器<br>静态RAM<br><img src=\"/image/JZ_24.png\" alt=\"静态RAM基本电路\"><br>利用行列开关选择存储单元，触发器控制存储01，通过写&#x2F;读放大器与读写信号控制读写<br>将每一行分为四组，每一组位16列，其中列地址只有16位，给出一个列地址，每一组对应列地址的单元会被选中，这样就可以同时选中四个单元<br><img src=\"/image/JZ_25.png\" alt=\"RAM矩阵读写\"></p>\n<p>动态RAM<br>以三管为例<br>0&#x2F;1内容保存在C_g中，如果读选择线有效，则T_2导通，如果写选择线有效，则T_3导通，<br>若预充电信号有效，则T_4导通，V_DD对读数据线充电，都数据线变为1，读选择线有效，T_2导通，若C_g保存信号是0（低电平），T_1不会导通，数据线不会放电，读数据线保持为1，反之T_1导通，读数据线放电，变为0<br><img src=\"/image/JZ_26.png\" alt=\"动态RAM\"><br>读出信息与原存信息相反<br>写入信息与输入信息相同<br>每个行地址都有读选择线和写选择线，然后通过列地址精确定位<br><img src=\"/image/JZ_27.png\" alt=\"动态RAM芯片\"><br>电容中信息容易丢失（容易漏电），刷新至于行地址有关（每次刷新一行的数据）<br>集中刷新：每隔一段时间对所有的行进行刷新，在此期间，动态RAM无法使用（死区）<br><img src=\"/image/JZ_28.png\" alt=\"集中刷新\"><br>分散刷新：每隔一段时间对某一行进行刷新，但是这样导致存取周期变长，因为刷新时间也算入到存取周期中了<br><img src=\"/image/JZ_29.png\" alt=\"分散刷新\"><br>异步刷新：每个一段时间刷新几行，只要将刷新时间安排在指令译码阶段，可以大大减小死区<br><img src=\"/image/JZ_30.png\" alt=\"分散刷新\"><br>动态RAM集成度较高，功耗小，价格低，速度慢，一般用于主存，静态RAM集成度较低，功耗大，一般用于做缓存</p>\n<p>ROM只读存储器，用于保存系统程序和系统信息<br>MROM：只能读，不能进行擦写<br>PROM：只能进行一次擦写<br>EPROM：能进行多次擦写，紫外线<br>EEPROM：能进行多次擦写，电<br>闪存：能多次擦写，速度快，且类似于RAM</p>\n<p>CPU和存储器的连接<br>位扩展：将多个芯片连接成一个芯片，其中片选线和控制线需要共用<br><img src=\"/image/JZ_31.png\" alt=\"分散刷新\"><br>字扩展：增加地址线，作为片选线，将两个芯片的地址空间分开<br><img src=\"/image/JZ_32.png\" alt=\"分散刷新\"><br>同时扩展<br><img src=\"/image/JZ_33.png\" alt=\"分散刷新\"><br>CPU和存储器的连接</p>\n<blockquote>\n<p>上面地址范围存储系统，下面存储用户程序，MREQ表示访问的是I&#x2F;O端口<br><img src=\"/image/JZ_34.png\" alt=\"分散刷新\"><br><img src=\"/image/JZ_35.png\" alt=\"分散刷新\"></p>\n</blockquote>\n<p>存储器的校验<br>电子元件可能发生故障，0&#x2F;1错误<br><img src=\"/image/JZ_36.png\" alt=\"分散刷新\"></p>\n"},{"title":"Cpp学习笔记（一）","seo_title":"seo名称","toc":true,"indent":true,"top":false,"comments":1,"archive":true,"cover":false,"mathjax":false,"pin":false,"top_meta":false,"bottom_meta":false,"sidebar":["toc"],"keywords":"文章关键词","updated":"2023-11-07T14:10:58.014Z","img":"/medias/featureimages/11.webp","date":"2023-11-07T14:10:58.014Z","summary":"Cpp基础","_content":"# Cpp学习笔记（一）\n## Cpp启蒙\n### 1.基本知识\n{%right%}\nCpp基础部分和C++有很多类似，主要介绍不同的地方\n{%endright%}\n#### 1.1输入输出\n{%list%}\n要包含iostream头文件\n{%endlist%}\n**①输出**：`cout<<内容1<<内容2...<<endl;`\n>`cout`：`iostream`类的一个实例，连接到**标准输出设备**，通常是**显示屏**\n`<<`：**输出流运算符**，**左侧**必须是一个`ostream`**对象**，**右侧**是**输出的值**，**计算结果**为`ostream`**对象**\n{%list%}\n计算结果为ostream对象，这是可以连续输出的原因\n{%endlist%}\n`endl`：**换行符**\n\n**②输入**：`cin>>容器（变量）;`\n>`cin`：同`cout`，连接到**标准输入设备**，通常是键盘\n`>>`：**输入流运算符**，和`<<`类似，将**标准输入设备的数据**保存到**右边的容器**中\n{%list%}\n还有一些其他的标准输入输出，如标准错误cerr\n{%endlist%}\n\n#### 1.2命名空间\n>常见的语句是`using namespace std;`\n`std`：**标准库**的命名空间\n`using`：让对应命名空间**曝光**\n{%list%}\n命名空间可以避免程序发生命名冲突，当命名冲突发生时，需要获得解析才能继续执行\n{%endlist%}\n>**解析**：`命名空间::变量名`\n\n#### 1.3算数类型\n{%warning%}\n算数类型的尺寸在不同机器上有所差别，C++标准只规定了它们的最小尺寸，以下描述的都是它们的常见长度\n{%endwarning%}\n**①布尔类型**\n>只有`bool`**一种类型**，只有`true`和`false`两种值，通常占**8个字节**\n{%list%}\ntrue转化为非布尔类型即为1，false为0，其他类型转化为布尔类型时，0为false，其余为true\n{%endlist%}\n**②字符**\n>常见的为`char`**类型**，通常占**8个字节**\n{%list%}\nC++还规定了扩展字符集，如wchar_t可以存放机器最大扩展字符集的任意一个字符（16位）\n{%endlist%}\n\n**③整型**\n>除了`int`（**16位**）、`short`（**16位**）和`long`（**32位**），**C++11新特性**还规定了`long long`（**64位**）\n\n**④浮点型**\n>`float`（**1个字**）、`double`（**2个字**）和`long double`（**3至4个字**）\n{%right%}\n浮点型一般采用double，因为double和float运算速度相差不大，但是精度更高，long double消耗太大\n{%endright%}\n\n#### 1.4引用\n{%right%}\nC++独有的传址方式，被称为变量的别名，本质上其指向对象的指针常量\n{%endright%}\n>如下所示，`b`为`a`的一个**引用**\n```\nint a = 1024;\nint *p = &a;\nint &b = a;\n```\n{%list%}\n引用变量在定义时就必须初始化（指向一个对象，不能是字面值），一旦指定就不可改变\n{%endlist%}\n{%warning%}\n对引用变量的操作就是对其指向对象的操作，包括寻址操作等\n{%endwarning%}\n\n#### 1.5空指针\nint *p = 0/nullptr\n避免使用NULL\n#### 1.4命名规范\n>变量名一般使用小写字母，自定义类名一般以大写字母开头\n用户自定义变量名不能连续出现两个下划线，也不能以下划线紧连大写字母开头，函数体外的标识符不能以下划线开头\n\n\n>全局作用域：声明在代码块之外\n块作用域：声明在代码块内（声明还是定义？）\n内层作用域可以访问外层的变量，也可以重新定义（新建局部变量覆盖全局变量）\n作用域操作符::修饰变量表示使用对应的全局变量\n\n\n\n\n>声明使得名字为程序所知，一个文件如果想要使用在别处定义的名字必须包含对那个名字的声明\n定义负责创建与名字相关联的实体\n如果仅仅只需要声明一个变量。在变量名前添加关键字extern，如果对一个变量赋值，则就算其有extern修饰，也是一个定义\n在函数体内部初始化一个由extern关键字修饰的变量将引发错误？\n如果要在多个文件中使用一个变量，则需要在一个文件中定义，在其他文件中声明\n\n#### 1.4初始化\n{%warning%}\n初始化和赋值并不是同一个概念，初始化是在创建变量时赋予其初始值，赋值是将对象当前值替换为新值\n{%endwarning%}\n>**列表初始化**：当初始值存在丢失信息的风险（如使用浮点型初始化整型数据，会丢失精度），编译器将报错\n内置类型初始化由位置决定，函数体内部，一个未被初始化的内置类型的变量的值是未定义的，访问会报错\n{%right%}\n显式初始化每一个内置类型变量\n{%endright%}\n","source":"_posts/Cpp学习笔记（一）.md","raw":"---\ntitle: Cpp学习笔记（一）\nseo_title: seo名称\ntoc: true\nindent: true\ntop: false\ncomments: true\narchive: true\ncover: false\nmathjax: false\npin: false\ntop_meta: false\nbottom_meta: false\nsidebar:\n  - toc\ntag:\n  - 《C++primer》\n  - C++\ncategories: 编程语言\nkeywords: 文章关键词\nupdated: ''\nimg: /medias/featureimages/11.webp\ndate:\nsummary: Cpp基础\n---\n# Cpp学习笔记（一）\n## Cpp启蒙\n### 1.基本知识\n{%right%}\nCpp基础部分和C++有很多类似，主要介绍不同的地方\n{%endright%}\n#### 1.1输入输出\n{%list%}\n要包含iostream头文件\n{%endlist%}\n**①输出**：`cout<<内容1<<内容2...<<endl;`\n>`cout`：`iostream`类的一个实例，连接到**标准输出设备**，通常是**显示屏**\n`<<`：**输出流运算符**，**左侧**必须是一个`ostream`**对象**，**右侧**是**输出的值**，**计算结果**为`ostream`**对象**\n{%list%}\n计算结果为ostream对象，这是可以连续输出的原因\n{%endlist%}\n`endl`：**换行符**\n\n**②输入**：`cin>>容器（变量）;`\n>`cin`：同`cout`，连接到**标准输入设备**，通常是键盘\n`>>`：**输入流运算符**，和`<<`类似，将**标准输入设备的数据**保存到**右边的容器**中\n{%list%}\n还有一些其他的标准输入输出，如标准错误cerr\n{%endlist%}\n\n#### 1.2命名空间\n>常见的语句是`using namespace std;`\n`std`：**标准库**的命名空间\n`using`：让对应命名空间**曝光**\n{%list%}\n命名空间可以避免程序发生命名冲突，当命名冲突发生时，需要获得解析才能继续执行\n{%endlist%}\n>**解析**：`命名空间::变量名`\n\n#### 1.3算数类型\n{%warning%}\n算数类型的尺寸在不同机器上有所差别，C++标准只规定了它们的最小尺寸，以下描述的都是它们的常见长度\n{%endwarning%}\n**①布尔类型**\n>只有`bool`**一种类型**，只有`true`和`false`两种值，通常占**8个字节**\n{%list%}\ntrue转化为非布尔类型即为1，false为0，其他类型转化为布尔类型时，0为false，其余为true\n{%endlist%}\n**②字符**\n>常见的为`char`**类型**，通常占**8个字节**\n{%list%}\nC++还规定了扩展字符集，如wchar_t可以存放机器最大扩展字符集的任意一个字符（16位）\n{%endlist%}\n\n**③整型**\n>除了`int`（**16位**）、`short`（**16位**）和`long`（**32位**），**C++11新特性**还规定了`long long`（**64位**）\n\n**④浮点型**\n>`float`（**1个字**）、`double`（**2个字**）和`long double`（**3至4个字**）\n{%right%}\n浮点型一般采用double，因为double和float运算速度相差不大，但是精度更高，long double消耗太大\n{%endright%}\n\n#### 1.4引用\n{%right%}\nC++独有的传址方式，被称为变量的别名，本质上其指向对象的指针常量\n{%endright%}\n>如下所示，`b`为`a`的一个**引用**\n```\nint a = 1024;\nint *p = &a;\nint &b = a;\n```\n{%list%}\n引用变量在定义时就必须初始化（指向一个对象，不能是字面值），一旦指定就不可改变\n{%endlist%}\n{%warning%}\n对引用变量的操作就是对其指向对象的操作，包括寻址操作等\n{%endwarning%}\n\n#### 1.5空指针\nint *p = 0/nullptr\n避免使用NULL\n#### 1.4命名规范\n>变量名一般使用小写字母，自定义类名一般以大写字母开头\n用户自定义变量名不能连续出现两个下划线，也不能以下划线紧连大写字母开头，函数体外的标识符不能以下划线开头\n\n\n>全局作用域：声明在代码块之外\n块作用域：声明在代码块内（声明还是定义？）\n内层作用域可以访问外层的变量，也可以重新定义（新建局部变量覆盖全局变量）\n作用域操作符::修饰变量表示使用对应的全局变量\n\n\n\n\n>声明使得名字为程序所知，一个文件如果想要使用在别处定义的名字必须包含对那个名字的声明\n定义负责创建与名字相关联的实体\n如果仅仅只需要声明一个变量。在变量名前添加关键字extern，如果对一个变量赋值，则就算其有extern修饰，也是一个定义\n在函数体内部初始化一个由extern关键字修饰的变量将引发错误？\n如果要在多个文件中使用一个变量，则需要在一个文件中定义，在其他文件中声明\n\n#### 1.4初始化\n{%warning%}\n初始化和赋值并不是同一个概念，初始化是在创建变量时赋予其初始值，赋值是将对象当前值替换为新值\n{%endwarning%}\n>**列表初始化**：当初始值存在丢失信息的风险（如使用浮点型初始化整型数据，会丢失精度），编译器将报错\n内置类型初始化由位置决定，函数体内部，一个未被初始化的内置类型的变量的值是未定义的，访问会报错\n{%right%}\n显式初始化每一个内置类型变量\n{%endright%}\n","slug":"Cpp学习笔记（一）","published":1,"_id":"clnlpp14r0000bwvdg5du2a76","layout":"post","photos":[],"link":"","content":"<h1 id=\"Cpp学习笔记（一）\"><a href=\"#Cpp学习笔记（一）\" class=\"headerlink\" title=\"Cpp学习笔记（一）\"></a>Cpp学习笔记（一）</h1><h2 id=\"Cpp启蒙\"><a href=\"#Cpp启蒙\" class=\"headerlink\" title=\"Cpp启蒙\"></a>Cpp启蒙</h2><h3 id=\"1-基本知识\"><a href=\"#1-基本知识\" class=\"headerlink\" title=\"1.基本知识\"></a>1.基本知识</h3><div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> Cpp基础部分和C++有很多类似，主要介绍不同的地方</div>\n<h4 id=\"1-1输入输出\"><a href=\"#1-1输入输出\" class=\"headerlink\" title=\"1.1输入输出\"></a>1.1输入输出</h4><div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 要包含iostream头文件</div>\n<p><strong>①输出</strong>：<code>cout&lt;&lt;内容1&lt;&lt;内容2...&lt;&lt;endl;</code></p>\n<blockquote>\n<p><code>cout</code>：<code>iostream</code>类的一个实例，连接到<strong>标准输出设备</strong>，通常是<strong>显示屏</strong><br><code>&lt;&lt;</code>：<strong>输出流运算符</strong>，<strong>左侧</strong>必须是一个<code>ostream</code><strong>对象</strong>，<strong>右侧</strong>是<strong>输出的值</strong>，<strong>计算结果</strong>为<code>ostream</code><strong>对象</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 计算结果为ostream对象，这是可以连续输出的原因</div>\n<p><code>endl</code>：<strong>换行符</strong></p>\n<p><strong>②输入</strong>：<code>cin&gt;&gt;容器（变量）;</code></p>\n<blockquote>\n<p><code>cin</code>：同<code>cout</code>，连接到<strong>标准输入设备</strong>，通常是键盘<br><code>&gt;&gt;</code>：<strong>输入流运算符</strong>，和<code>&lt;&lt;</code>类似，将<strong>标准输入设备的数据</strong>保存到<strong>右边的容器</strong>中</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 还有一些其他的标准输入输出，如标准错误cerr</div>\n\n<h4 id=\"1-2命名空间\"><a href=\"#1-2命名空间\" class=\"headerlink\" title=\"1.2命名空间\"></a>1.2命名空间</h4><blockquote>\n<p>常见的语句是<code>using namespace std;</code><br><code>std</code>：<strong>标准库</strong>的命名空间<br><code>using</code>：让对应命名空间<strong>曝光</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 命名空间可以避免程序发生命名冲突，当命名冲突发生时，需要获得解析才能继续执行</div>\n<blockquote>\n<p><strong>解析</strong>：<code>命名空间::变量名</code></p>\n</blockquote>\n<h4 id=\"1-3算数类型\"><a href=\"#1-3算数类型\" class=\"headerlink\" title=\"1.3算数类型\"></a>1.3算数类型</h4><div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 算数类型的尺寸在不同机器上有所差别，C++标准只规定了它们的最小尺寸，以下描述的都是它们的常见长度</div>\n<p><strong>①布尔类型</strong></p>\n<blockquote>\n<p>只有<code>bool</code><strong>一种类型</strong>，只有<code>true</code>和<code>false</code>两种值，通常占<strong>8个字节</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> true转化为非布尔类型即为1，false为0，其他类型转化为布尔类型时，0为false，其余为true</div>\n<p><strong>②字符</strong></p>\n<blockquote>\n<p>常见的为<code>char</code><strong>类型</strong>，通常占<strong>8个字节</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> C++还规定了扩展字符集，如wchar_t可以存放机器最大扩展字符集的任意一个字符（16位）</div>\n\n<p><strong>③整型</strong></p>\n<blockquote>\n<p>除了<code>int</code>（<strong>16位</strong>）、<code>short</code>（<strong>16位</strong>）和<code>long</code>（<strong>32位</strong>），<strong>C++11新特性</strong>还规定了<code>long long</code>（<strong>64位</strong>）</p>\n</blockquote>\n<p><strong>④浮点型</strong></p>\n<blockquote>\n<p><code>float</code>（<strong>1个字</strong>）、<code>double</code>（<strong>2个字</strong>）和<code>long double</code>（<strong>3至4个字</strong>）</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 浮点型一般采用double，因为double和float运算速度相差不大，但是精度更高，long double消耗太大</div>\n\n<h4 id=\"1-4引用\"><a href=\"#1-4引用\" class=\"headerlink\" title=\"1.4引用\"></a>1.4引用</h4><div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> C++独有的传址方式，被称为变量的别名，本质上其指向对象的指针常量</div>\n<blockquote>\n<p>如下所示，<code>b</code>为<code>a</code>的一个<strong>引用</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">int a = 1024;\nint *p = &amp;a;\nint &amp;b = a;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 引用变量在定义时就必须初始化（指向一个对象，不能是字面值），一旦指定就不可改变</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 对引用变量的操作就是对其指向对象的操作，包括寻址操作等</div>\n\n<h4 id=\"1-5空指针\"><a href=\"#1-5空指针\" class=\"headerlink\" title=\"1.5空指针\"></a>1.5空指针</h4><p>int *p = 0/nullptr<br>避免使用NULL</p>\n<h4 id=\"1-4命名规范\"><a href=\"#1-4命名规范\" class=\"headerlink\" title=\"1.4命名规范\"></a>1.4命名规范</h4><blockquote>\n<p>变量名一般使用小写字母，自定义类名一般以大写字母开头<br>用户自定义变量名不能连续出现两个下划线，也不能以下划线紧连大写字母开头，函数体外的标识符不能以下划线开头</p>\n</blockquote>\n<blockquote>\n<p>全局作用域：声明在代码块之外<br>块作用域：声明在代码块内（声明还是定义？）<br>内层作用域可以访问外层的变量，也可以重新定义（新建局部变量覆盖全局变量）<br>作用域操作符::修饰变量表示使用对应的全局变量</p>\n</blockquote>\n<blockquote>\n<p>声明使得名字为程序所知，一个文件如果想要使用在别处定义的名字必须包含对那个名字的声明<br>定义负责创建与名字相关联的实体<br>如果仅仅只需要声明一个变量。在变量名前添加关键字extern，如果对一个变量赋值，则就算其有extern修饰，也是一个定义<br>在函数体内部初始化一个由extern关键字修饰的变量将引发错误？<br>如果要在多个文件中使用一个变量，则需要在一个文件中定义，在其他文件中声明</p>\n</blockquote>\n<h4 id=\"1-4初始化\"><a href=\"#1-4初始化\" class=\"headerlink\" title=\"1.4初始化\"></a>1.4初始化</h4><div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 初始化和赋值并不是同一个概念，初始化是在创建变量时赋予其初始值，赋值是将对象当前值替换为新值</div>\n<blockquote>\n<p><strong>列表初始化</strong>：当初始值存在丢失信息的风险（如使用浮点型初始化整型数据，会丢失精度），编译器将报错<br>内置类型初始化由位置决定，函数体内部，一个未被初始化的内置类型的变量的值是未定义的，访问会报错</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 显式初始化每一个内置类型变量</div>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"Cpp学习笔记（一）\"><a href=\"#Cpp学习笔记（一）\" class=\"headerlink\" title=\"Cpp学习笔记（一）\"></a>Cpp学习笔记（一）</h1><h2 id=\"Cpp启蒙\"><a href=\"#Cpp启蒙\" class=\"headerlink\" title=\"Cpp启蒙\"></a>Cpp启蒙</h2><h3 id=\"1-基本知识\"><a href=\"#1-基本知识\" class=\"headerlink\" title=\"1.基本知识\"></a>1.基本知识</h3><div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> Cpp基础部分和C++有很多类似，主要介绍不同的地方</div>\n<h4 id=\"1-1输入输出\"><a href=\"#1-1输入输出\" class=\"headerlink\" title=\"1.1输入输出\"></a>1.1输入输出</h4><div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 要包含iostream头文件</div>\n<p><strong>①输出</strong>：<code>cout&lt;&lt;内容1&lt;&lt;内容2...&lt;&lt;endl;</code></p>\n<blockquote>\n<p><code>cout</code>：<code>iostream</code>类的一个实例，连接到<strong>标准输出设备</strong>，通常是<strong>显示屏</strong><br><code>&lt;&lt;</code>：<strong>输出流运算符</strong>，<strong>左侧</strong>必须是一个<code>ostream</code><strong>对象</strong>，<strong>右侧</strong>是<strong>输出的值</strong>，<strong>计算结果</strong>为<code>ostream</code><strong>对象</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 计算结果为ostream对象，这是可以连续输出的原因</div>\n<p><code>endl</code>：<strong>换行符</strong></p>\n<p><strong>②输入</strong>：<code>cin&gt;&gt;容器（变量）;</code></p>\n<blockquote>\n<p><code>cin</code>：同<code>cout</code>，连接到<strong>标准输入设备</strong>，通常是键盘<br><code>&gt;&gt;</code>：<strong>输入流运算符</strong>，和<code>&lt;&lt;</code>类似，将<strong>标准输入设备的数据</strong>保存到<strong>右边的容器</strong>中</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 还有一些其他的标准输入输出，如标准错误cerr</div>\n\n<h4 id=\"1-2命名空间\"><a href=\"#1-2命名空间\" class=\"headerlink\" title=\"1.2命名空间\"></a>1.2命名空间</h4><blockquote>\n<p>常见的语句是<code>using namespace std;</code><br><code>std</code>：<strong>标准库</strong>的命名空间<br><code>using</code>：让对应命名空间<strong>曝光</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 命名空间可以避免程序发生命名冲突，当命名冲突发生时，需要获得解析才能继续执行</div>\n<blockquote>\n<p><strong>解析</strong>：<code>命名空间::变量名</code></p>\n</blockquote>\n<h4 id=\"1-3算数类型\"><a href=\"#1-3算数类型\" class=\"headerlink\" title=\"1.3算数类型\"></a>1.3算数类型</h4><div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 算数类型的尺寸在不同机器上有所差别，C++标准只规定了它们的最小尺寸，以下描述的都是它们的常见长度</div>\n<p><strong>①布尔类型</strong></p>\n<blockquote>\n<p>只有<code>bool</code><strong>一种类型</strong>，只有<code>true</code>和<code>false</code>两种值，通常占<strong>8个字节</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> true转化为非布尔类型即为1，false为0，其他类型转化为布尔类型时，0为false，其余为true</div>\n<p><strong>②字符</strong></p>\n<blockquote>\n<p>常见的为<code>char</code><strong>类型</strong>，通常占<strong>8个字节</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> C++还规定了扩展字符集，如wchar_t可以存放机器最大扩展字符集的任意一个字符（16位）</div>\n\n<p><strong>③整型</strong></p>\n<blockquote>\n<p>除了<code>int</code>（<strong>16位</strong>）、<code>short</code>（<strong>16位</strong>）和<code>long</code>（<strong>32位</strong>），<strong>C++11新特性</strong>还规定了<code>long long</code>（<strong>64位</strong>）</p>\n</blockquote>\n<p><strong>④浮点型</strong></p>\n<blockquote>\n<p><code>float</code>（<strong>1个字</strong>）、<code>double</code>（<strong>2个字</strong>）和<code>long double</code>（<strong>3至4个字</strong>）</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 浮点型一般采用double，因为double和float运算速度相差不大，但是精度更高，long double消耗太大</div>\n\n<h4 id=\"1-4引用\"><a href=\"#1-4引用\" class=\"headerlink\" title=\"1.4引用\"></a>1.4引用</h4><div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> C++独有的传址方式，被称为变量的别名，本质上其指向对象的指针常量</div>\n<blockquote>\n<p>如下所示，<code>b</code>为<code>a</code>的一个<strong>引用</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">int a &#x3D; 1024;\nint *p &#x3D; &amp;a;\nint &amp;b &#x3D; a;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 引用变量在定义时就必须初始化（指向一个对象，不能是字面值），一旦指定就不可改变</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 对引用变量的操作就是对其指向对象的操作，包括寻址操作等</div>\n\n<h4 id=\"1-5空指针\"><a href=\"#1-5空指针\" class=\"headerlink\" title=\"1.5空指针\"></a>1.5空指针</h4><p>int *p &#x3D; 0&#x2F;nullptr<br>避免使用NULL</p>\n<h4 id=\"1-4命名规范\"><a href=\"#1-4命名规范\" class=\"headerlink\" title=\"1.4命名规范\"></a>1.4命名规范</h4><blockquote>\n<p>变量名一般使用小写字母，自定义类名一般以大写字母开头<br>用户自定义变量名不能连续出现两个下划线，也不能以下划线紧连大写字母开头，函数体外的标识符不能以下划线开头</p>\n</blockquote>\n<blockquote>\n<p>全局作用域：声明在代码块之外<br>块作用域：声明在代码块内（声明还是定义？）<br>内层作用域可以访问外层的变量，也可以重新定义（新建局部变量覆盖全局变量）<br>作用域操作符::修饰变量表示使用对应的全局变量</p>\n</blockquote>\n<blockquote>\n<p>声明使得名字为程序所知，一个文件如果想要使用在别处定义的名字必须包含对那个名字的声明<br>定义负责创建与名字相关联的实体<br>如果仅仅只需要声明一个变量。在变量名前添加关键字extern，如果对一个变量赋值，则就算其有extern修饰，也是一个定义<br>在函数体内部初始化一个由extern关键字修饰的变量将引发错误？<br>如果要在多个文件中使用一个变量，则需要在一个文件中定义，在其他文件中声明</p>\n</blockquote>\n<h4 id=\"1-4初始化\"><a href=\"#1-4初始化\" class=\"headerlink\" title=\"1.4初始化\"></a>1.4初始化</h4><div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 初始化和赋值并不是同一个概念，初始化是在创建变量时赋予其初始值，赋值是将对象当前值替换为新值</div>\n<blockquote>\n<p><strong>列表初始化</strong>：当初始值存在丢失信息的风险（如使用浮点型初始化整型数据，会丢失精度），编译器将报错<br>内置类型初始化由位置决定，函数体内部，一个未被初始化的内置类型的变量的值是未定义的，访问会报错</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 显式初始化每一个内置类型变量</div>\n"},{"title":"Git及其应用","seo_title":"seo名称","toc":true,"indent":true,"top":false,"comments":1,"archive":true,"cover":false,"mathjax":false,"pin":false,"top_meta":false,"bottom_meta":false,"sidebar":["toc"],"keywords":"文章关键词","updated":"2023-11-07T14:10:58.014Z","img":"/medias/featureimages/22.webp","date":"2023-11-07T14:10:58.014Z","summary":"git和github","_content":"# Git\n## Git应用\n### 1.引言\n#### 1.1Git概述\n>一个**分布式版本控制系统**，**版本控制**即记录文件**修改历史**，便于**版本切换**\n{%warning%}\n很少通过拷贝历史版本进行版本控制，因为太占用存储空间\n{%endwarning%}\n#### 1.2分布式与集中式\n>**集中式**：有一个**单一的集中管理的服务器**，从中下载代码，修改后提交\n{%list%}\n便于管理，但是当中央服务器故障，则无法提交更新\n{%endlist%}\n>**分布式**：分别有**本地库（个人电脑）**和**远程库（大型代码托管中心）**，从远程库上**克隆**代码进行修改\n{%list%}\n在本地库和远程库上都可以进行版本控制\n{%endlist%}\n#### 1.3工作机制\n>**代码托管中心**\n**局域网**：`GitLab`\n**互联网**：`GitHub`、`Gitee`\n{%list%}\n代码只有一份，通过保存修改历史保存版本\n{%endlist%}\n{%warning%}\n提交到本地库和远程库的代码无法单独删除\n{%endwarning%}\n![git工作机制](/image/git_1.png)\n\n\n### 2.Git基本操作\n{%list%}\n在git bash中进行操作，可以使用linux命令和操作，如tab补全、ctrl+滚轮调整大小等\n{%endlist%}\n#### 2.1设置用户签名\n>**签名**的作用是**区分操作者身份**，**首次安装必须设置**\n{%list%}\n可以在.gitconfig文件中查看是否设置成功，windows系统下位于C/用户/asus目录下\n{%endlist%}\n```\ngit config --global user.name [用户名]\ngit config --global user.email [用户邮箱]\n```\n#### 2.2工作流\n>`git init`：使得`git`获得该文件夹的**管理权**，使得该文件夹变为**工作区**\n{%list%}\n会在该文件夹下创建一个.git文件夹\n{%endlist%}\n>`git add [添加对象]`：将对象添加到**暂存区**\n{%list%}\n使用git add -A将所有改动添加\n{%endlist%}\n>`git commit -m \"[版本描述信息]\" [提交对象]`：将对象提交到**本地库**\n{%list%}\n若不指定提交对象，则将暂存区所有改动提交\n{%endlist%}\n#### 2.3查看状态\n>`git status`：查看**分支**以及**该分支下显示未添加、未提交文件**等信息\n{%list%}\ngit的修改是先删除修改的那一行，然后重写，所以提示信息是一行新增，一行删除\n{%endlist%}\n>`git reflog`：查看**本地库的提交信息**\n{%list%}\n每次提交最前面的黄色字符串就是版本号\n{%endlist%}\n>`git log`：在`git reflog`的基础上**更加精细**，有**完整版的版本号**以及**提交者**的等信息\n\n#### 2.4分支\n{%list%}\n分支就是当时创建分支时对应对象的副本，不同的分支有不同的作用（程序员修改、运维测试和用户使用等）\n{%endlist%}\n{%right%}\n可以并行推进多个版本功能开发，分支之间不会互相影响\n{%endright%}\n>`git branch -v`：**查看**分支\n\n>`git branch [分支名]`：**创建**分支\n\n>`git checkout [分支名]`：**切换**分支\n\n>`git merge [分支名]`：将**指定分支**合并到**当前分支**\n{%list%}\n合并分支只会影响当前分支，对指定分支无影响，即将指定分支的对应版本提交到当前分支\n{%endlist%}\n#### 2.5合并冲突\n>假设在`master`**分支**下新建了`test`**分支**，分别对**同一个文件修改并提交**后，将`test`合并到`master`，可能会导致**合并冲突**\n{%warning%}\n合并冲突：合并分支时，当两个分支在同一个文件的同一个位置有两套完全不同的修改，需要人为指定新代码内容\n{%endwarning%}\n>一开始`master`**分支**下有一个`test.txt`文件，创建`fix`**分支**\n```\n//创建分支时test.txt代码\n12345678\n12345678\n```\n>分别在**两个分支下修改并提交**`test.txt`，随后将`fix`**分支**合并到`master`**分支**\n```\n//合并时master分支下test.txt文件\n12345678 abc\n12345678\n```\n```\n//合并时fix分支下的test\n12345678 \n12345678 ABC\n```\n>发生**合并冲突**，在`master`**分支**下打开`test.txt`文件，如下所示\n{%list%}\ngit在冲突处显示两份代码的冲突部分，上面的是当前分支的修改，下面的是传入分支的修改\n{%endlist%}\n```\n//合并发生冲突，在master分支下打开test.txt文件\n<<<<<<< HEAD\n12345678 abc\n12345678\n=======\n12345678 \n12345678 ABC\n>>>>>>> test\n```\n>**手动修改冲突**，**保存**文件随后将文件**添加**、**提交**即可解决冲突\n{%list%}\n手动修改冲突的宗旨就是保持冲突部分代码的行数不变，可以只采用某一个的修改，也可以同时采用\n{%endlist%}\n{%warning%}\n解决冲突时，提交时不能带文件名git commit -m \"merge test\"\n{%endwarning%}\n```\n//仅仅采用当前分支\n12345678 abc\n12345678\n//仅仅采用指定分支\n12345678 \n12345678 ABC\n//同时采用两个的修改\n12345678 abc\n12345678 ABC\n```\n#### 2.6版本控制\n>`git reset --hard [版本号]`：将**工作区的文件**变为**对应版本**\n{%list%}\n版本控制本质上是控制HEAD指针和对应分支指针的指向，通过分支切换将HEAD指向不同的分支，通过reset修改对应分支执行其下不同的版本\n{%endlist%}\n>`.git`文件夹`HEAD`文件记录了`HEAD`**当前指向分支**,`refs/heads`**目录**下记载**各个分支**的当前指向，如`master`文件记载了`master`的**当前指向的版本号**\n\n![版本控制机制](/image/git_2.png)\n\n### 3.Github远程库\n#### 3.1免密登陆\n**①SSH密钥登陆**\n>**密钥生成**：`C/用户/asus`**目录**下，在`git bash`中输入`ssh-keygen -t rsa -C [github邮箱]`，**敲击三次回车**，会创建`.ssh`目录，其下有**公钥**和**私钥**\n\n>**密钥设置**：在**Github设置**中的`SSH and GPG keys`添加`SSH key`，将**公钥**内容粘贴到**对应位置**即可\n{%list%}\n每个远程库都对应的HTTPS/SSH链接，其中SSH链接只有设置了公钥之后才能使用\n{%endlist%}\n\n**②口令登陆**\n>`github settings->develop settings->personal access tokens`生成**登陆口令**\n{%right%}\n当使用账号密码登陆较难时，可以考虑使用口令登陆\n{%endright%}\n{%warning%}\n口令在生成后最好立刻复制保存，因为界面一刷新就消失了，只能重新生成\n{%endwarning%}\n\n#### 3.2工作流\n>`git remote add [name] [HTTPS/SSH]`：**保存远程库并命名，便于本地库识别**\n\n>`git remote -v`：**查看保存的远程库**\n\n>`git clone [HTTPS/SSH]`：**将远程库复制到本地库**\n{%list%}\nclone实质上做了三件事，即拉取代码，初始化本地库，创建别名（初始化为origin）\n{%endlist%}\n>`git pull [name/HTTPS/SSH] [本地库分支名]`：**利用远程库更新本地库**\n{%warning%}\npull拉取过程实质上就是一个合并的过程，可能产生合并冲突\n{%endwarning%}\n>`git push [name/HTTPS/SSH] [本地库分支名]`：**将本地库分支推送到远程库**\n{%list%}\n向别人的远程库推送代码需要权限，需要对方邀请自己成为对应库的成员并同意，且每次成员的推送都需要被库的拥有者审核后才能被合并入库（pull request）\n{%endlist%}\n{%right%}\n想要push，必须保证本地库版本高于远程库，所以在修改代码前，最好先pull再进行修改\n{%endright%}\n>`git fork`：**将一个远程库的代码复制到另一个远程库中**\n\n![github工作机制](/image/git_3.png)\n\n### 4.IDEA集成Git\n{%list%}\n以VScode为例\n{%endlist%}\n#### 4.1初始设置\n**①忽略设置**\n{%list%}\n因为一个IDEA可能会生成一些我们不需要入库的文件，如日志文件等\n{%endlist%}\n>创建`git.ignore`文件（最好是在`.gitconfig`文件所在目录下），在其中添加**需要忽略的文件类型**，随后在`.gitconfig`文件中添加**设置**\n```\n#忽略设置\n[core]\n    excludesfile = [git.ignore完整路径]\n```\n[VScode下C++的git.ignore模板](https://gist.github.com/Yousha/3830712334ac30a90eb6041b932b68d7)\n**②IDEA设置**\n>`VScode`中内置了对`Git`的支持，**其他IDEA**可能还需要**在相关设置中设置`git.exe`的路径**\n","source":"_posts/Git及其应用.md","raw":"---\ntitle: Git及其应用\nseo_title: seo名称\ntoc: true\nindent: true\ntop: false\ncomments: true\narchive: true\ncover: false\nmathjax: false\npin: false\ntop_meta: false\nbottom_meta: false\nsidebar:\n  - toc\ntag:\n  - 代码工具\n  - Git\ncategories: 工作流\nkeywords: 文章关键词\nupdated: ''\nimg: /medias/featureimages/22.webp\ndate:\nsummary: git和github\n---\n# Git\n## Git应用\n### 1.引言\n#### 1.1Git概述\n>一个**分布式版本控制系统**，**版本控制**即记录文件**修改历史**，便于**版本切换**\n{%warning%}\n很少通过拷贝历史版本进行版本控制，因为太占用存储空间\n{%endwarning%}\n#### 1.2分布式与集中式\n>**集中式**：有一个**单一的集中管理的服务器**，从中下载代码，修改后提交\n{%list%}\n便于管理，但是当中央服务器故障，则无法提交更新\n{%endlist%}\n>**分布式**：分别有**本地库（个人电脑）**和**远程库（大型代码托管中心）**，从远程库上**克隆**代码进行修改\n{%list%}\n在本地库和远程库上都可以进行版本控制\n{%endlist%}\n#### 1.3工作机制\n>**代码托管中心**\n**局域网**：`GitLab`\n**互联网**：`GitHub`、`Gitee`\n{%list%}\n代码只有一份，通过保存修改历史保存版本\n{%endlist%}\n{%warning%}\n提交到本地库和远程库的代码无法单独删除\n{%endwarning%}\n![git工作机制](/image/git_1.png)\n\n\n### 2.Git基本操作\n{%list%}\n在git bash中进行操作，可以使用linux命令和操作，如tab补全、ctrl+滚轮调整大小等\n{%endlist%}\n#### 2.1设置用户签名\n>**签名**的作用是**区分操作者身份**，**首次安装必须设置**\n{%list%}\n可以在.gitconfig文件中查看是否设置成功，windows系统下位于C/用户/asus目录下\n{%endlist%}\n```\ngit config --global user.name [用户名]\ngit config --global user.email [用户邮箱]\n```\n#### 2.2工作流\n>`git init`：使得`git`获得该文件夹的**管理权**，使得该文件夹变为**工作区**\n{%list%}\n会在该文件夹下创建一个.git文件夹\n{%endlist%}\n>`git add [添加对象]`：将对象添加到**暂存区**\n{%list%}\n使用git add -A将所有改动添加\n{%endlist%}\n>`git commit -m \"[版本描述信息]\" [提交对象]`：将对象提交到**本地库**\n{%list%}\n若不指定提交对象，则将暂存区所有改动提交\n{%endlist%}\n#### 2.3查看状态\n>`git status`：查看**分支**以及**该分支下显示未添加、未提交文件**等信息\n{%list%}\ngit的修改是先删除修改的那一行，然后重写，所以提示信息是一行新增，一行删除\n{%endlist%}\n>`git reflog`：查看**本地库的提交信息**\n{%list%}\n每次提交最前面的黄色字符串就是版本号\n{%endlist%}\n>`git log`：在`git reflog`的基础上**更加精细**，有**完整版的版本号**以及**提交者**的等信息\n\n#### 2.4分支\n{%list%}\n分支就是当时创建分支时对应对象的副本，不同的分支有不同的作用（程序员修改、运维测试和用户使用等）\n{%endlist%}\n{%right%}\n可以并行推进多个版本功能开发，分支之间不会互相影响\n{%endright%}\n>`git branch -v`：**查看**分支\n\n>`git branch [分支名]`：**创建**分支\n\n>`git checkout [分支名]`：**切换**分支\n\n>`git merge [分支名]`：将**指定分支**合并到**当前分支**\n{%list%}\n合并分支只会影响当前分支，对指定分支无影响，即将指定分支的对应版本提交到当前分支\n{%endlist%}\n#### 2.5合并冲突\n>假设在`master`**分支**下新建了`test`**分支**，分别对**同一个文件修改并提交**后，将`test`合并到`master`，可能会导致**合并冲突**\n{%warning%}\n合并冲突：合并分支时，当两个分支在同一个文件的同一个位置有两套完全不同的修改，需要人为指定新代码内容\n{%endwarning%}\n>一开始`master`**分支**下有一个`test.txt`文件，创建`fix`**分支**\n```\n//创建分支时test.txt代码\n12345678\n12345678\n```\n>分别在**两个分支下修改并提交**`test.txt`，随后将`fix`**分支**合并到`master`**分支**\n```\n//合并时master分支下test.txt文件\n12345678 abc\n12345678\n```\n```\n//合并时fix分支下的test\n12345678 \n12345678 ABC\n```\n>发生**合并冲突**，在`master`**分支**下打开`test.txt`文件，如下所示\n{%list%}\ngit在冲突处显示两份代码的冲突部分，上面的是当前分支的修改，下面的是传入分支的修改\n{%endlist%}\n```\n//合并发生冲突，在master分支下打开test.txt文件\n<<<<<<< HEAD\n12345678 abc\n12345678\n=======\n12345678 \n12345678 ABC\n>>>>>>> test\n```\n>**手动修改冲突**，**保存**文件随后将文件**添加**、**提交**即可解决冲突\n{%list%}\n手动修改冲突的宗旨就是保持冲突部分代码的行数不变，可以只采用某一个的修改，也可以同时采用\n{%endlist%}\n{%warning%}\n解决冲突时，提交时不能带文件名git commit -m \"merge test\"\n{%endwarning%}\n```\n//仅仅采用当前分支\n12345678 abc\n12345678\n//仅仅采用指定分支\n12345678 \n12345678 ABC\n//同时采用两个的修改\n12345678 abc\n12345678 ABC\n```\n#### 2.6版本控制\n>`git reset --hard [版本号]`：将**工作区的文件**变为**对应版本**\n{%list%}\n版本控制本质上是控制HEAD指针和对应分支指针的指向，通过分支切换将HEAD指向不同的分支，通过reset修改对应分支执行其下不同的版本\n{%endlist%}\n>`.git`文件夹`HEAD`文件记录了`HEAD`**当前指向分支**,`refs/heads`**目录**下记载**各个分支**的当前指向，如`master`文件记载了`master`的**当前指向的版本号**\n\n![版本控制机制](/image/git_2.png)\n\n### 3.Github远程库\n#### 3.1免密登陆\n**①SSH密钥登陆**\n>**密钥生成**：`C/用户/asus`**目录**下，在`git bash`中输入`ssh-keygen -t rsa -C [github邮箱]`，**敲击三次回车**，会创建`.ssh`目录，其下有**公钥**和**私钥**\n\n>**密钥设置**：在**Github设置**中的`SSH and GPG keys`添加`SSH key`，将**公钥**内容粘贴到**对应位置**即可\n{%list%}\n每个远程库都对应的HTTPS/SSH链接，其中SSH链接只有设置了公钥之后才能使用\n{%endlist%}\n\n**②口令登陆**\n>`github settings->develop settings->personal access tokens`生成**登陆口令**\n{%right%}\n当使用账号密码登陆较难时，可以考虑使用口令登陆\n{%endright%}\n{%warning%}\n口令在生成后最好立刻复制保存，因为界面一刷新就消失了，只能重新生成\n{%endwarning%}\n\n#### 3.2工作流\n>`git remote add [name] [HTTPS/SSH]`：**保存远程库并命名，便于本地库识别**\n\n>`git remote -v`：**查看保存的远程库**\n\n>`git clone [HTTPS/SSH]`：**将远程库复制到本地库**\n{%list%}\nclone实质上做了三件事，即拉取代码，初始化本地库，创建别名（初始化为origin）\n{%endlist%}\n>`git pull [name/HTTPS/SSH] [本地库分支名]`：**利用远程库更新本地库**\n{%warning%}\npull拉取过程实质上就是一个合并的过程，可能产生合并冲突\n{%endwarning%}\n>`git push [name/HTTPS/SSH] [本地库分支名]`：**将本地库分支推送到远程库**\n{%list%}\n向别人的远程库推送代码需要权限，需要对方邀请自己成为对应库的成员并同意，且每次成员的推送都需要被库的拥有者审核后才能被合并入库（pull request）\n{%endlist%}\n{%right%}\n想要push，必须保证本地库版本高于远程库，所以在修改代码前，最好先pull再进行修改\n{%endright%}\n>`git fork`：**将一个远程库的代码复制到另一个远程库中**\n\n![github工作机制](/image/git_3.png)\n\n### 4.IDEA集成Git\n{%list%}\n以VScode为例\n{%endlist%}\n#### 4.1初始设置\n**①忽略设置**\n{%list%}\n因为一个IDEA可能会生成一些我们不需要入库的文件，如日志文件等\n{%endlist%}\n>创建`git.ignore`文件（最好是在`.gitconfig`文件所在目录下），在其中添加**需要忽略的文件类型**，随后在`.gitconfig`文件中添加**设置**\n```\n#忽略设置\n[core]\n    excludesfile = [git.ignore完整路径]\n```\n[VScode下C++的git.ignore模板](https://gist.github.com/Yousha/3830712334ac30a90eb6041b932b68d7)\n**②IDEA设置**\n>`VScode`中内置了对`Git`的支持，**其他IDEA**可能还需要**在相关设置中设置`git.exe`的路径**\n","slug":"Git及其应用","published":1,"_id":"clnqzk3ru0000csvd1dnu5ix9","layout":"post","photos":[],"link":"","content":"<h1 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h1><h2 id=\"Git应用\"><a href=\"#Git应用\" class=\"headerlink\" title=\"Git应用\"></a>Git应用</h2><h3 id=\"1-引言\"><a href=\"#1-引言\" class=\"headerlink\" title=\"1.引言\"></a>1.引言</h3><h4 id=\"1-1Git概述\"><a href=\"#1-1Git概述\" class=\"headerlink\" title=\"1.1Git概述\"></a>1.1Git概述</h4><blockquote>\n<p>一个<strong>分布式版本控制系统</strong>，<strong>版本控制</strong>即记录文件<strong>修改历史</strong>，便于<strong>版本切换</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 很少通过拷贝历史版本进行版本控制，因为太占用存储空间</div>\n<h4 id=\"1-2分布式与集中式\"><a href=\"#1-2分布式与集中式\" class=\"headerlink\" title=\"1.2分布式与集中式\"></a>1.2分布式与集中式</h4><blockquote>\n<p><strong>集中式</strong>：有一个<strong>单一的集中管理的服务器</strong>，从中下载代码，修改后提交</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 便于管理，但是当中央服务器故障，则无法提交更新</div>\n<blockquote>\n<p><strong>分布式</strong>：分别有<strong>本地库（个人电脑）</strong>和<strong>远程库（大型代码托管中心）</strong>，从远程库上<strong>克隆</strong>代码进行修改</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 在本地库和远程库上都可以进行版本控制</div>\n<h4 id=\"1-3工作机制\"><a href=\"#1-3工作机制\" class=\"headerlink\" title=\"1.3工作机制\"></a>1.3工作机制</h4><blockquote>\n<p><strong>代码托管中心</strong><br><strong>局域网</strong>：<code>GitLab</code><br><strong>互联网</strong>：<code>GitHub</code>、<code>Gitee</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 代码只有一份，通过保存修改历史保存版本</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 提交到本地库和远程库的代码无法单独删除</div>\n<p><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/git_1.png\" alt=\"git工作机制\"></p>\n<h3 id=\"2-Git基本操作\"><a href=\"#2-Git基本操作\" class=\"headerlink\" title=\"2.Git基本操作\"></a>2.Git基本操作</h3><div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 在git bash中进行操作，可以使用linux命令和操作，如tab补全、ctrl+滚轮调整大小等</div>\n<h4 id=\"2-1设置用户签名\"><a href=\"#2-1设置用户签名\" class=\"headerlink\" title=\"2.1设置用户签名\"></a>2.1设置用户签名</h4><blockquote>\n<p><strong>签名</strong>的作用是<strong>区分操作者身份</strong>，<strong>首次安装必须设置</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 可以在.gitconfig文件中查看是否设置成功，windows系统下位于C/用户/asus目录下</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">git config --global user.name [用户名]\ngit config --global user.email [用户邮箱]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h4 id=\"2-2工作流\"><a href=\"#2-2工作流\" class=\"headerlink\" title=\"2.2工作流\"></a>2.2工作流</h4><blockquote>\n<p><code>git init</code>：使得<code>git</code>获得该文件夹的<strong>管理权</strong>，使得该文件夹变为<strong>工作区</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 会在该文件夹下创建一个.git文件夹</div>\n<blockquote>\n<p><code>git add [添加对象]</code>：将对象添加到<strong>暂存区</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 使用git add -A将所有改动添加</div>\n<blockquote>\n<p><code>git commit -m \"[版本描述信息]\" [提交对象]</code>：将对象提交到<strong>本地库</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 若不指定提交对象，则将暂存区所有改动提交</div>\n<h4 id=\"2-3查看状态\"><a href=\"#2-3查看状态\" class=\"headerlink\" title=\"2.3查看状态\"></a>2.3查看状态</h4><blockquote>\n<p><code>git status</code>：查看<strong>分支</strong>以及<strong>该分支下显示未添加、未提交文件</strong>等信息</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> git的修改是先删除修改的那一行，然后重写，所以提示信息是一行新增，一行删除</div>\n<blockquote>\n<p><code>git reflog</code>：查看<strong>本地库的提交信息</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 每次提交最前面的黄色字符串就是版本号</div>\n<blockquote>\n<p><code>git log</code>：在<code>git reflog</code>的基础上<strong>更加精细</strong>，有<strong>完整版的版本号</strong>以及<strong>提交者</strong>的等信息</p>\n</blockquote>\n<h4 id=\"2-4分支\"><a href=\"#2-4分支\" class=\"headerlink\" title=\"2.4分支\"></a>2.4分支</h4><div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 分支就是当时创建分支时对应对象的副本，不同的分支有不同的作用（程序员修改、运维测试和用户使用等）</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 可以并行推进多个版本功能开发，分支之间不会互相影响</div>\n<blockquote>\n<p><code>git branch -v</code>：<strong>查看</strong>分支</p>\n</blockquote>\n<blockquote>\n<p><code>git branch [分支名]</code>：<strong>创建</strong>分支</p>\n</blockquote>\n<blockquote>\n<p><code>git checkout [分支名]</code>：<strong>切换</strong>分支</p>\n</blockquote>\n<blockquote>\n<p><code>git merge [分支名]</code>：将<strong>指定分支</strong>合并到<strong>当前分支</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 合并分支只会影响当前分支，对指定分支无影响，即将指定分支的对应版本提交到当前分支</div>\n<h4 id=\"2-5合并冲突\"><a href=\"#2-5合并冲突\" class=\"headerlink\" title=\"2.5合并冲突\"></a>2.5合并冲突</h4><blockquote>\n<p>假设在<code>master</code><strong>分支</strong>下新建了<code>test</code><strong>分支</strong>，分别对<strong>同一个文件修改并提交</strong>后，将<code>test</code>合并到<code>master</code>，可能会导致<strong>合并冲突</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 合并冲突：合并分支时，当两个分支在同一个文件的同一个位置有两套完全不同的修改，需要人为指定新代码内容</div>\n<blockquote>\n<p>一开始<code>master</code><strong>分支</strong>下有一个<code>test.txt</code>文件，创建<code>fix</code><strong>分支</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">//创建分支时test.txt代码\n12345678\n12345678<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>分别在<strong>两个分支下修改并提交</strong><code>test.txt</code>，随后将<code>fix</code><strong>分支</strong>合并到<code>master</code><strong>分支</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">//合并时master分支下test.txt文件\n12345678 abc\n12345678<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">//合并时fix分支下的test\n12345678 \n12345678 ABC<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>发生<strong>合并冲突</strong>，在<code>master</code><strong>分支</strong>下打开<code>test.txt</code>文件，如下所示</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> git在冲突处显示两份代码的冲突部分，上面的是当前分支的修改，下面的是传入分支的修改</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">//合并发生冲突，在master分支下打开test.txt文件\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n12345678 abc\n12345678\n=======\n12345678 \n12345678 ABC\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; test<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><strong>手动修改冲突</strong>，<strong>保存</strong>文件随后将文件<strong>添加</strong>、<strong>提交</strong>即可解决冲突</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 手动修改冲突的宗旨就是保持冲突部分代码的行数不变，可以只采用某一个的修改，也可以同时采用</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 解决冲突时，提交时不能带文件名git commit -m \"merge test\"</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">//仅仅采用当前分支\n12345678 abc\n12345678\n//仅仅采用指定分支\n12345678 \n12345678 ABC\n//同时采用两个的修改\n12345678 abc\n12345678 ABC<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"2-6版本控制\"><a href=\"#2-6版本控制\" class=\"headerlink\" title=\"2.6版本控制\"></a>2.6版本控制</h4><blockquote>\n<p><code>git reset --hard [版本号]</code>：将<strong>工作区的文件</strong>变为<strong>对应版本</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 版本控制本质上是控制HEAD指针和对应分支指针的指向，通过分支切换将HEAD指向不同的分支，通过reset修改对应分支执行其下不同的版本</div>\n<blockquote>\n<p><code>.git</code>文件夹<code>HEAD</code>文件记录了<code>HEAD</code><strong>当前指向分支</strong>,<code>refs/heads</code><strong>目录</strong>下记载<strong>各个分支</strong>的当前指向，如<code>master</code>文件记载了<code>master</code>的<strong>当前指向的版本号</strong></p>\n</blockquote>\n<p><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/git_2.png\" alt=\"版本控制机制\"></p>\n<h3 id=\"3-Github远程库\"><a href=\"#3-Github远程库\" class=\"headerlink\" title=\"3.Github远程库\"></a>3.Github远程库</h3><h4 id=\"3-1免密登陆\"><a href=\"#3-1免密登陆\" class=\"headerlink\" title=\"3.1免密登陆\"></a>3.1免密登陆</h4><p><strong>①SSH密钥登陆</strong></p>\n<blockquote>\n<p><strong>密钥生成</strong>：<code>C/用户/asus</code><strong>目录</strong>下，在<code>git bash</code>中输入<code>ssh-keygen -t rsa -C [github邮箱]</code>，<strong>敲击三次回车</strong>，会创建<code>.ssh</code>目录，其下有<strong>公钥</strong>和<strong>私钥</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>密钥设置</strong>：在<strong>Github设置</strong>中的<code>SSH and GPG keys</code>添加<code>SSH key</code>，将<strong>公钥</strong>内容粘贴到<strong>对应位置</strong>即可</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 每个远程库都对应的HTTPS/SSH链接，其中SSH链接只有设置了公钥之后才能使用</div>\n\n<p><strong>②口令登陆</strong></p>\n<blockquote>\n<p><code>github settings-&gt;develop settings-&gt;personal access tokens</code>生成<strong>登陆口令</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 当使用账号密码登陆较难时，可以考虑使用口令登陆</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 口令在生成后最好立刻复制保存，因为界面一刷新就消失了，只能重新生成</div>\n\n<h4 id=\"3-2工作流\"><a href=\"#3-2工作流\" class=\"headerlink\" title=\"3.2工作流\"></a>3.2工作流</h4><blockquote>\n<p><code>git remote add [name] [HTTPS/SSH]</code>：<strong>保存远程库并命名，便于本地库识别</strong></p>\n</blockquote>\n<blockquote>\n<p><code>git remote -v</code>：<strong>查看保存的远程库</strong></p>\n</blockquote>\n<blockquote>\n<p><code>git clone [HTTPS/SSH]</code>：<strong>将远程库复制到本地库</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> clone实质上做了三件事，即拉取代码，初始化本地库，创建别名（初始化为origin）</div>\n<blockquote>\n<p><code>git pull [name/HTTPS/SSH] [本地库分支名]</code>：<strong>利用远程库更新本地库</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> pull拉取过程实质上就是一个合并的过程，可能产生合并冲突</div>\n<blockquote>\n<p><code>git push [name/HTTPS/SSH] [本地库分支名]</code>：<strong>将本地库分支推送到远程库</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 向别人的远程库推送代码需要权限，需要对方邀请自己成为对应库的成员并同意，且每次成员的推送都需要被库的拥有者审核后才能被合并入库（pull request）</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 想要push，必须保证本地库版本高于远程库，所以在修改代码前，最好先pull再进行修改</div>\n<blockquote>\n<p><code>git fork</code>：<strong>将一个远程库的代码复制到另一个远程库中</strong></p>\n</blockquote>\n<p><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/git_3.png\" alt=\"github工作机制\"></p>\n<h3 id=\"4-IDEA集成Git\"><a href=\"#4-IDEA集成Git\" class=\"headerlink\" title=\"4.IDEA集成Git\"></a>4.IDEA集成Git</h3><div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 以VScode为例</div>\n<h4 id=\"4-1初始设置\"><a href=\"#4-1初始设置\" class=\"headerlink\" title=\"4.1初始设置\"></a>4.1初始设置</h4><p><strong>①忽略设置</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 因为一个IDEA可能会生成一些我们不需要入库的文件，如日志文件等</div>\n<blockquote>\n<p>创建<code>git.ignore</code>文件（最好是在<code>.gitconfig</code>文件所在目录下），在其中添加<strong>需要忽略的文件类型</strong>，随后在<code>.gitconfig</code>文件中添加<strong>设置</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#忽略设置\n[core]\n    excludesfile = [git.ignore完整路径]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><a href=\"https://gist.github.com/Yousha/3830712334ac30a90eb6041b932b68d7\">VScode下C++的git.ignore模板</a><br><strong>②IDEA设置</strong></p>\n<blockquote>\n<p><code>VScode</code>中内置了对<code>Git</code>的支持，<strong>其他IDEA</strong>可能还需要<strong>在相关设置中设置<code>git.exe</code>的路径</strong></p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h1><h2 id=\"Git应用\"><a href=\"#Git应用\" class=\"headerlink\" title=\"Git应用\"></a>Git应用</h2><h3 id=\"1-引言\"><a href=\"#1-引言\" class=\"headerlink\" title=\"1.引言\"></a>1.引言</h3><h4 id=\"1-1Git概述\"><a href=\"#1-1Git概述\" class=\"headerlink\" title=\"1.1Git概述\"></a>1.1Git概述</h4><blockquote>\n<p>一个<strong>分布式版本控制系统</strong>，<strong>版本控制</strong>即记录文件<strong>修改历史</strong>，便于<strong>版本切换</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 很少通过拷贝历史版本进行版本控制，因为太占用存储空间</div>\n<h4 id=\"1-2分布式与集中式\"><a href=\"#1-2分布式与集中式\" class=\"headerlink\" title=\"1.2分布式与集中式\"></a>1.2分布式与集中式</h4><blockquote>\n<p><strong>集中式</strong>：有一个<strong>单一的集中管理的服务器</strong>，从中下载代码，修改后提交</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 便于管理，但是当中央服务器故障，则无法提交更新</div>\n<blockquote>\n<p><strong>分布式</strong>：分别有<strong>本地库（个人电脑）</strong>和<strong>远程库（大型代码托管中心）</strong>，从远程库上<strong>克隆</strong>代码进行修改</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 在本地库和远程库上都可以进行版本控制</div>\n<h4 id=\"1-3工作机制\"><a href=\"#1-3工作机制\" class=\"headerlink\" title=\"1.3工作机制\"></a>1.3工作机制</h4><blockquote>\n<p><strong>代码托管中心</strong><br><strong>局域网</strong>：<code>GitLab</code><br><strong>互联网</strong>：<code>GitHub</code>、<code>Gitee</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 代码只有一份，通过保存修改历史保存版本</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 提交到本地库和远程库的代码无法单独删除</div>\n<p><img src=\"/image/git_1.png\" alt=\"git工作机制\"></p>\n<h3 id=\"2-Git基本操作\"><a href=\"#2-Git基本操作\" class=\"headerlink\" title=\"2.Git基本操作\"></a>2.Git基本操作</h3><div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 在git bash中进行操作，可以使用linux命令和操作，如tab补全、ctrl+滚轮调整大小等</div>\n<h4 id=\"2-1设置用户签名\"><a href=\"#2-1设置用户签名\" class=\"headerlink\" title=\"2.1设置用户签名\"></a>2.1设置用户签名</h4><blockquote>\n<p><strong>签名</strong>的作用是<strong>区分操作者身份</strong>，<strong>首次安装必须设置</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 可以在.gitconfig文件中查看是否设置成功，windows系统下位于C/用户/asus目录下</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">git config --global user.name [用户名]\ngit config --global user.email [用户邮箱]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h4 id=\"2-2工作流\"><a href=\"#2-2工作流\" class=\"headerlink\" title=\"2.2工作流\"></a>2.2工作流</h4><blockquote>\n<p><code>git init</code>：使得<code>git</code>获得该文件夹的<strong>管理权</strong>，使得该文件夹变为<strong>工作区</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 会在该文件夹下创建一个.git文件夹</div>\n<blockquote>\n<p><code>git add [添加对象]</code>：将对象添加到<strong>暂存区</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 使用git add -A将所有改动添加</div>\n<blockquote>\n<p><code>git commit -m &quot;[版本描述信息]&quot; [提交对象]</code>：将对象提交到<strong>本地库</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 若不指定提交对象，则将暂存区所有改动提交</div>\n<h4 id=\"2-3查看状态\"><a href=\"#2-3查看状态\" class=\"headerlink\" title=\"2.3查看状态\"></a>2.3查看状态</h4><blockquote>\n<p><code>git status</code>：查看<strong>分支</strong>以及<strong>该分支下显示未添加、未提交文件</strong>等信息</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> git的修改是先删除修改的那一行，然后重写，所以提示信息是一行新增，一行删除</div>\n<blockquote>\n<p><code>git reflog</code>：查看<strong>本地库的提交信息</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 每次提交最前面的黄色字符串就是版本号</div>\n<blockquote>\n<p><code>git log</code>：在<code>git reflog</code>的基础上<strong>更加精细</strong>，有<strong>完整版的版本号</strong>以及<strong>提交者</strong>的等信息</p>\n</blockquote>\n<h4 id=\"2-4分支\"><a href=\"#2-4分支\" class=\"headerlink\" title=\"2.4分支\"></a>2.4分支</h4><div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 分支就是当时创建分支时对应对象的副本，不同的分支有不同的作用（程序员修改、运维测试和用户使用等）</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 可以并行推进多个版本功能开发，分支之间不会互相影响</div>\n<blockquote>\n<p><code>git branch -v</code>：<strong>查看</strong>分支</p>\n</blockquote>\n<blockquote>\n<p><code>git branch [分支名]</code>：<strong>创建</strong>分支</p>\n</blockquote>\n<blockquote>\n<p><code>git checkout [分支名]</code>：<strong>切换</strong>分支</p>\n</blockquote>\n<blockquote>\n<p><code>git merge [分支名]</code>：将<strong>指定分支</strong>合并到<strong>当前分支</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 合并分支只会影响当前分支，对指定分支无影响，即将指定分支的对应版本提交到当前分支</div>\n<h4 id=\"2-5合并冲突\"><a href=\"#2-5合并冲突\" class=\"headerlink\" title=\"2.5合并冲突\"></a>2.5合并冲突</h4><blockquote>\n<p>假设在<code>master</code><strong>分支</strong>下新建了<code>test</code><strong>分支</strong>，分别对<strong>同一个文件修改并提交</strong>后，将<code>test</code>合并到<code>master</code>，可能会导致<strong>合并冲突</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 合并冲突：合并分支时，当两个分支在同一个文件的同一个位置有两套完全不同的修改，需要人为指定新代码内容</div>\n<blockquote>\n<p>一开始<code>master</code><strong>分支</strong>下有一个<code>test.txt</code>文件，创建<code>fix</code><strong>分支</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F;创建分支时test.txt代码\n12345678\n12345678<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>分别在<strong>两个分支下修改并提交</strong><code>test.txt</code>，随后将<code>fix</code><strong>分支</strong>合并到<code>master</code><strong>分支</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F;合并时master分支下test.txt文件\n12345678 abc\n12345678<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F;合并时fix分支下的test\n12345678 \n12345678 ABC<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>发生<strong>合并冲突</strong>，在<code>master</code><strong>分支</strong>下打开<code>test.txt</code>文件，如下所示</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> git在冲突处显示两份代码的冲突部分，上面的是当前分支的修改，下面的是传入分支的修改</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F;合并发生冲突，在master分支下打开test.txt文件\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n12345678 abc\n12345678\n&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n12345678 \n12345678 ABC\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; test<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><strong>手动修改冲突</strong>，<strong>保存</strong>文件随后将文件<strong>添加</strong>、<strong>提交</strong>即可解决冲突</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 手动修改冲突的宗旨就是保持冲突部分代码的行数不变，可以只采用某一个的修改，也可以同时采用</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 解决冲突时，提交时不能带文件名git commit -m \"merge test\"</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F;仅仅采用当前分支\n12345678 abc\n12345678\n&#x2F;&#x2F;仅仅采用指定分支\n12345678 \n12345678 ABC\n&#x2F;&#x2F;同时采用两个的修改\n12345678 abc\n12345678 ABC<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"2-6版本控制\"><a href=\"#2-6版本控制\" class=\"headerlink\" title=\"2.6版本控制\"></a>2.6版本控制</h4><blockquote>\n<p><code>git reset --hard [版本号]</code>：将<strong>工作区的文件</strong>变为<strong>对应版本</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 版本控制本质上是控制HEAD指针和对应分支指针的指向，通过分支切换将HEAD指向不同的分支，通过reset修改对应分支执行其下不同的版本</div>\n<blockquote>\n<p><code>.git</code>文件夹<code>HEAD</code>文件记录了<code>HEAD</code><strong>当前指向分支</strong>,<code>refs/heads</code><strong>目录</strong>下记载<strong>各个分支</strong>的当前指向，如<code>master</code>文件记载了<code>master</code>的<strong>当前指向的版本号</strong></p>\n</blockquote>\n<p><img src=\"/image/git_2.png\" alt=\"版本控制机制\"></p>\n<h3 id=\"3-Github远程库\"><a href=\"#3-Github远程库\" class=\"headerlink\" title=\"3.Github远程库\"></a>3.Github远程库</h3><h4 id=\"3-1免密登陆\"><a href=\"#3-1免密登陆\" class=\"headerlink\" title=\"3.1免密登陆\"></a>3.1免密登陆</h4><p><strong>①SSH密钥登陆</strong></p>\n<blockquote>\n<p><strong>密钥生成</strong>：<code>C/用户/asus</code><strong>目录</strong>下，在<code>git bash</code>中输入<code>ssh-keygen -t rsa -C [github邮箱]</code>，<strong>敲击三次回车</strong>，会创建<code>.ssh</code>目录，其下有<strong>公钥</strong>和<strong>私钥</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>密钥设置</strong>：在<strong>Github设置</strong>中的<code>SSH and GPG keys</code>添加<code>SSH key</code>，将<strong>公钥</strong>内容粘贴到<strong>对应位置</strong>即可</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 每个远程库都对应的HTTPS/SSH链接，其中SSH链接只有设置了公钥之后才能使用</div>\n\n<p><strong>②口令登陆</strong></p>\n<blockquote>\n<p><code>github settings-&gt;develop settings-&gt;personal access tokens</code>生成<strong>登陆口令</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 当使用账号密码登陆较难时，可以考虑使用口令登陆</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 口令在生成后最好立刻复制保存，因为界面一刷新就消失了，只能重新生成</div>\n\n<h4 id=\"3-2工作流\"><a href=\"#3-2工作流\" class=\"headerlink\" title=\"3.2工作流\"></a>3.2工作流</h4><blockquote>\n<p><code>git remote add [name] [HTTPS/SSH]</code>：<strong>保存远程库并命名，便于本地库识别</strong></p>\n</blockquote>\n<blockquote>\n<p><code>git remote -v</code>：<strong>查看保存的远程库</strong></p>\n</blockquote>\n<blockquote>\n<p><code>git clone [HTTPS/SSH]</code>：<strong>将远程库复制到本地库</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> clone实质上做了三件事，即拉取代码，初始化本地库，创建别名（初始化为origin）</div>\n<blockquote>\n<p><code>git pull [name/HTTPS/SSH] [本地库分支名]</code>：<strong>利用远程库更新本地库</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> pull拉取过程实质上就是一个合并的过程，可能产生合并冲突</div>\n<blockquote>\n<p><code>git push [name/HTTPS/SSH] [本地库分支名]</code>：<strong>将本地库分支推送到远程库</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 向别人的远程库推送代码需要权限，需要对方邀请自己成为对应库的成员并同意，且每次成员的推送都需要被库的拥有者审核后才能被合并入库（pull request）</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 想要push，必须保证本地库版本高于远程库，所以在修改代码前，最好先pull再进行修改</div>\n<blockquote>\n<p><code>git fork</code>：<strong>将一个远程库的代码复制到另一个远程库中</strong></p>\n</blockquote>\n<p><img src=\"/image/git_3.png\" alt=\"github工作机制\"></p>\n<h3 id=\"4-IDEA集成Git\"><a href=\"#4-IDEA集成Git\" class=\"headerlink\" title=\"4.IDEA集成Git\"></a>4.IDEA集成Git</h3><div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 以VScode为例</div>\n<h4 id=\"4-1初始设置\"><a href=\"#4-1初始设置\" class=\"headerlink\" title=\"4.1初始设置\"></a>4.1初始设置</h4><p><strong>①忽略设置</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 因为一个IDEA可能会生成一些我们不需要入库的文件，如日志文件等</div>\n<blockquote>\n<p>创建<code>git.ignore</code>文件（最好是在<code>.gitconfig</code>文件所在目录下），在其中添加<strong>需要忽略的文件类型</strong>，随后在<code>.gitconfig</code>文件中添加<strong>设置</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#忽略设置\n[core]\n    excludesfile &#x3D; [git.ignore完整路径]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><a href=\"https://gist.github.com/Yousha/3830712334ac30a90eb6041b932b68d7\">VScode下C++的git.ignore模板</a><br><strong>②IDEA设置</strong></p>\n<blockquote>\n<p><code>VScode</code>中内置了对<code>Git</code>的支持，<strong>其他IDEA</strong>可能还需要<strong>在相关设置中设置<code>git.exe</code>的路径</strong></p>\n</blockquote>\n"},{"title":"Cmake应用（一）","seo_title":"seo名称","toc":true,"indent":true,"top":false,"comments":1,"archive":true,"cover":false,"mathjax":false,"pin":false,"top_meta":false,"bottom_meta":false,"sidebar":["toc"],"keywords":"文章关键词","updated":"2023-11-07T14:10:58.014Z","img":"/medias/featureimages/23.webp","date":"2023-11-07T14:10:58.014Z","summary":"Cmake代码构建工具","_content":"# Cmake\n## Cmake应用（一）\n### 1.引言\n#### 1.1`Cmke`概述\n>一个**跨平台**的**项目构建工具**，根据`CMakeLists.txt`**文件**自动生成（`cmake`命令）**本地化**的`makefile`，最后只需要`make`命令即可获得**目标文件**\n{%list%}\n使用Cmke本质上就是在项目文件夹中编写CMakeLists.txt\n{%endlist%}\n#### 1.2基本指令\n{%list%}\nCMake支持大写、小写、混合大小写的命令\n{%endlist%}\n**①注释**\n>**单行注释**：以`#`开头，以**换行符**结束\n**多行注释**：以`#[[`开头，以`]]`结尾\n\n**②`cmake_minimum_required`**\n>指定`Cmake`的**最低版本**\n**格式**：`cmake_minimum_required(VERSION 3.0.0)`\n\n**③`project`**\n>指定**工程信息**，包括**名字**、**版本**、**描述**、**web主页地址**和**支持的语言**等\n{%list%}\n只有项目的名字是必须的，其余都可忽略，缺省情况下支持所有CMake支持的语言\n{%endlist%}\n>**格式**\n```\n# PROJECT 指令的语法是：\nproject(<PROJECT-NAME> [<language-name>...])\nproject(<PROJECT-NAME>\n       [VERSION <major>[.<minor>[.<patch>[.<tweak>]]]]\n       [DESCRIPTION <project-description-string>]\n       [HOMEPAGE_URL <url-string>]\n       [LANGUAGES <language-name>...])\n```\n**④`add_executable`**\n>生成**可执行文件**，需要指定**可执行文件名**和**源文件**\n**格式**：`add_executable(可执行文件名 源文件名称)`\n{%list%}\n源文件名可以是一个也可以是多个，如有多个可用空格或;间隔\n{%endlist%}\n**⑤`message`**\n>**显示一条信息**\n**格式**：`message([STATUS|WARNING|AUTHOR_WARNING|FATAL_ERROR|SEND_ERROR] \"message to display\" ...)`\n{%list%}\nCMake警告和错误消息的文本显示使用的是一种简单的标记语言，文本没有缩进，超过长度的行会回卷，段落之间以新行做为分隔符。\n{%endlist%}\n>**状态**\n`(无)` ：**重要**消息\n`STATUS` ：**非重要**消息\n`WARNING`：**警告**\n`AUTHOR_WARNING`：**警告(dev)**\n`SEND_ERROR`：**错误**， **继续执行**，但是会**跳过生成的步骤**\n`FATAL_ERROR`：**错误**， **终止所有处理过程**\n\n**⑥`add_definitions`**\n>定义宏\n格式：`add_definitions(-D宏名称)`\n{%list%}\n在对应程序中定义宏，而不是在CMakeLists中定义宏\n{%endlist%}\n#### 1.3例子\n**①概述**\n>有四个**源文件**`main.cc`、`a.cc`、`b.cc`、`c.cc`，以及一个**头文件**`head.h`，其中`main.cc`**调用**了另外三个源文件，`head.h`中包含了对应**声明**\n\n**②CmakeLists文件编写**\n```\n#CMake最低版本为3.15\ncmake_minimum_required(VERSION 3.15)\n#项目名称为example\nproject(example)\n#将main.cc a.cc b.cc c.cc编译为可执行文件main\nadd_executable(main main.cc a.cc b.cc c.cc)\n```\n**③生成可执行文件**\n>在**终端**执行`cmake CmakeLists所在路径`命令，会在**当前路径**生成`makefile`等文件，再执行`make`命令即可\n{%right%}\n通常在项目文件文件夹中建造一个build文件夹，在该路径下执行上述命令，将相关文件和源文件分开\n{%endright%}\n{%warning%}\n在使用Cmke指令时，需要保证其后接路径下不能有相关文件\n{%endwarning%}\n\n*** \n\n### 2.变量\n#### 2.1创建与使用\n**①`set`**\n>**定义/修改变量**，参数分别为**变量名**、**变量的值（可以是多个）**以及一些**自定义选项（非必须）**\n**格式**：`SET(VAR [VALUE] [CACHE TYPE DOCSTRING [FORCE]])`\n{%list%}\n缺省情况下，Cmake中的变量都是字符串（ITEM）或者字符串列表（LIST）\n{%endlist%}\n{%right%}\n可以通过set进行变量的拼接\n{%endright%}\n>`set(变量名1 ${变量名1} ${变量名2} ...)`\n\n**②变量的使用**\n>`${变量名}`：将**变量名**转化为**对应的值**\n```\nset(SRC_LIST main.cc a.cc b.cc c.cc)\nadd_executable(main  ${SRC_LIST})\n```\n{%list%}\nCmake中，给变量赋值时，空格会被当作分隔符，如果想要使得变量中包含空格，则需要用双引号包围\n{%endlist%}\n>以下程序输出`abc`和`a b c`\n```\nset(WORD1 a b c)        #WORD1是一个字符串列表\nset(WORD2 \"a b c\")      #WORD2是一个字符串\nmessage(STATUS ${WORD1}) \nmessage(STATUS ${WORD2}) \n```\n\n#### 2.2变量操作\n**①`list`**\n>根据**操作码**对**列表**进行**不同的操作**\n\n**②追加**\n>**格式**：`list (APPEND <list> [<value> ...])`\n`<list>`：当前操作的**列表**\n`<element>`：可以是**字面值**，也可以是**变量的值**\n\n**③移除**\n>**格式**：`list (REMOVE_ITEM <list> <value> [<value> ...])`\n\n\n**④读取**\n>**格式**：`list(GET <list> <element index> [<element index> ...] <output variable>)`\n`<element index>`：列表元素的**索引**，从`0`开始，若为**负数**，则表示**倒数**第几个元素\n\n{%list%}\n其他操作可查询官网\n{%endlist%}\n\n#### 2.3预定义宏\n**①`CMAKE_CXX_STANDARD`**\n>**C++标准**\n```\n#增加-std=c++11\nset(CMAKE_CXX_STANDARD 11)\n```\n**②`EXECUTABLE_OUTPUT_PATH`**\n>**可执行文件输出路径**\n```\n#定义一个变量用于存储一个绝对路径\nset(HOME /home/robin/Linux/Sort)\n#将拼接好的路径值设置给EXECUTABLE_OUTPUT_PATH宏\nset(EXECUTABLE_OUTPUT_PATH ${HOME}/bin)\n```\n{%list%}\n如果路径不存在，则会自动创建\n{%endlist%}\n{%right%}\n最好使用绝对路径，如果使用相对路径，则./代表的是makefile所在路径\n{%endright%}\n**③`PROJECT_SOURCE_DIR`**\n>**Cmke指令后接的路径**\n\n**④`CMAKE_CURRENT_SOURCE_DIR`**\n>`CmakeLists`**文件所在路径**\n\n### 3.结构化\n#### 3.1文件搜索\n**①`aux_source_directory`**\n>查找**某个路径**下的**所有源文件**，并将源文件列表**存储到对应变量中**\n**格式**：`aux_source_directory(< dir > < variable >)`\n```\n# 搜索当前目录下的源文件\naux_source_directory(${CMAKE_CURRENT_SOURCE_DIR} SRC_LIST)\n```\n**②`file`**\n>查找**某个路径**下的所有**指定格式**的文件\n**格式**：`file(GLOB/GLOB_RECURSE 变量名 要搜索的文件路径和文件类型)`\n{%list%}\nGLOB表示只搜索当前路径，GLOB_RECURSE还会递归搜索当前路径下的所有子目录\n{%endlist%}\n```\n#搜索对应路径下的源文件\nfile(GLOB MAIN_SRC ${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp)\n#搜索对应路径下的头文件\nfile(GLOB MAIN_HEAD ${CMAKE_CURRENT_SOURCE_DIR}/include/*.h)\n```\n#### 3.2头文件路径\n**①引言**\n{%list%}\n通常，大型项目将源文件、头文件等分开放，如下所示\n{%endlist%}\n```\n$ tree\n.\n├── build\n├── CMakeLists.txt\n├── include\n│   └── head.h\n└── src\n    ├── main.cc\n    ├── a.cc\n    ├── b.cc\n    └── c.cc\n```\n**②`include_directories`**\n{%list%}\n由于#include \" \"指令只在当前目录下寻找头文件，以上情况需要添加头文件路径\n{%endlist%}\n>**格式**：`include_directories (headpath)`，`headpath`为**头文件路径**\n\n#### 2.3改进后的CmakeLists\n```\ncmake_minimum_required(VERSION 3.15)\nproject(example)\n#添加C++11标准\nset(CMAKE_CXX_STANDARD 11)\n#设置头文件路径\ninclude_directories(${PROJECT_SOURCE_DIR}/include)\n#搜索所有源文件\nfile(GLOB SRC_LIST ${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp)\n#生成可运行文件\nadd_executable(main  ${SRC_LIST})\n```\n\n### 4.动态库和静态库\n#### 4.1引言\n{%list%}\n库文件本质上是源文件的二进制格式\n{%endlist%}\n**①静态库**\n>**优点**：**打包到应用程序中**，加载速度快，移植方便\n**缺点**：内存中可能出现**多份静态库**（多个链接该库的程序一起运行），且如果**静态库更新**，则项目需要**重新编译**\n\n**②动态库**\n>**优点**：**多个进程共享**，只有**在调用时才被载入内存**，动态库更新**无需重新编译程序**\n**缺点**：加载**速度比静态库慢（可忽略）**，发布程序需要**提供依赖的动态库**\n{%list%}\n动态库有可执行权限，而静态库没有\n{%endlist%}\n\n**③文件架构**\n```\n.\n├── build\n├── lib\n├── CMakeLists.txt\n├── include           # 头文件目录\n│   └── head.h\n├── main.cc           # 用于测试的源文件\n└── src               # 源文件目录\n    ├── a.cc\n    ├── b.cc\n    └── c.cc\n```\n#### 4.2制作库\n**①`add_library`**\n>将对应**源文件**制作为**静态库/动态库**\n**格式**：`add_library(库名称 STATIC/SHARED 源文件1 [源文件2] ...)`\n{%list%}\n其中计算机中的库名由三部分组成lib+库名+后缀，命令中只需要指定库名即可，其余计算机自动填充\n{%endlist%}\n**②指定输出路径**\n>通过指定**系统变量**`LIBRARY_OUTPUT_PATH`\n**例子**：`set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)`\n{%list%}\n不指定则生成到当前路径中\n{%endlist%}\n{%right%}\n其中，动态库的生成路径还可以通过改变EXECUTABLE_OUTPUT_PATH，因为动态库是一个可执行文件\n{%endright%}\n**③对应CmakeLists文件**\n>将`src`**文件夹**中文件构建为**库文件**\n```\ncmake_minimum_required(VERSION 3.15)\nproject(example)\ninclude_directories(${PROJECT_SOURCE_DIR}/include)\nfile(GLOB SRC_LIST \"${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp\")\n# 设置动态库/静态库生成路径\nset(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)\n# 生成动态库，将SHARED修改为STATIC即可生成静态库\n#add_library(abc SHARED ${SRC_LIST})\n```\n\n#### 4.3使用库文件\n{%warning%}\n库文件的生成和库文件的使用是两个项目\n{%endwarning%}\n**①`link_libraries`**\n>**链接静态库**\n**格式**：`link_libraries(<static lib> [<static lib>...])`\n{%list%}\n其中static lib可以写全名，也可以只写中间部分\n{%endlist%}\n{%warning%}\n由于静态库是可执行文件的一部分，故需要在可执行文件生成前链接\n{%endwarning%}\n\n**②`target_link_libraries`**\n>**链接动态库**\n**格式**：如下所示，`target`为**链接动态库的文件**，`PRIVATE|PUBLIC|INTERFACE`为动态库的**访问权限**，**缺省**为`PUBLIC`\n{%list%}\n`target`可能是可执行文件、源文件或者动态库文件\n{%endlist%}\n{%warning%}\n由于动态库不是可执行文件的一部分，故需要在可执行文件生成后链接\n{%endwarning%}\n```\ntarget_link_libraries(\n    <target> \n    <PRIVATE|PUBLIC|INTERFACE> <item>... \n    [<PRIVATE|PUBLIC|INTERFACE> <item>...]...)\n```\n{%right%}\n动态库链接具有传递性，如果动态库 A 链接了动态库B、C，动态库D链接了动态库A，此时动态库D相当于也链接了动态库B、C，并可以使用动态库B、C中定义的方法（PUBLIC情况下）\n{%endright%}\n>**访问权限**\n`PUBLIC`：在`PUBLIC`后面的库会被**链接**到前面的`target`中，并且里面的符号也会被导出\n`PRIVATE`：在`PRIVATE`后面的库**仅被链接到前面的`target`中**，**不会传递**\n`INTERFACE`：在`INTERFACE`后面引入的库**不会被链接到前面的target中**，只会导出**符号**，并**不知道库的信息**，同样也**不会传递**\n{%list%}\n动态库和静态库也可以相互链接，相互之间不会影响各自特性\n{%endlist%}\n**③`link_directories`**\n>**指定库的路径**\n**格式**：`link_directories(lib_path)`\n{%list%}\n如果使用非系统提供的库文件，则需要指明库文件路径，便于编译器找到\n{%endlist%}\n\n#### 4.4例子\n**①文件架构**\n{%list%}\n使用库文件还需要包含相关头文件（包含库文件使用的函数声明）\n{%endlist%}\n```\n.\n├── build\n├── CMakeLists.txt\n├── include\n│   └── head.h              #库文件对应的头文件\n├── lib\n│   └── libabc.a（.so）     # 制作出的静态库（动态库）的名字\n└── src\n    └── main.cpp\n```\n**②静态库版本**\n```\ncmake_minimum_required(VERSION 3.15)\nproject(example)\n# 搜索指定目录下源文件\nfile(GLOB SRC_LIST ${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp)\n# 包含头文件路径\ninclude_directories(${PROJECT_SOURCE_DIR}/include)\n# 包含静态库路径\nlink_directories(${PROJECT_SOURCE_DIR}/lib)\n# 链接静态库\nlink_libraries(abc)\nadd_executable(main ${SRC_LIST})\n```\n**③动态库版本**\n```\ncmake_minimum_required(VERSION 3.15)\nproject(example)\nfile(GLOB SRC_LIST ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp)\n# 指定源文件或者动态库对应的头文件路径\ninclude_directories(${PROJECT_SOURCE_DIR}/include)\n# 指定要链接的动态库的路径\nlink_directories(${PROJECT_SOURCE_DIR}/lib)\n# 添加并生成一个可执行程序\nadd_executable(main ${SRC_LIST})\n# 指定要链接的动态库，其中libpthread.so为系统提供的线程库\ntarget_link_libraries(main pthread abc)\n```\n\n","source":"_posts/Cmake应用（一）.md","raw":"---\ntitle: Cmake应用（一）\nseo_title: seo名称\ntoc: true\nindent: true\ntop: false\ncomments: true\narchive: true\ncover: false\nmathjax: false\npin: false\ntop_meta: false\nbottom_meta: false\nsidebar:\n  - toc\ntag:\n  - 代码工具\n  - Cmake\ncategories: 软技能\nkeywords: 文章关键词\nupdated: ''\nimg: /medias/featureimages/23.webp\ndate:\nsummary: Cmake代码构建工具\n---\n# Cmake\n## Cmake应用（一）\n### 1.引言\n#### 1.1`Cmke`概述\n>一个**跨平台**的**项目构建工具**，根据`CMakeLists.txt`**文件**自动生成（`cmake`命令）**本地化**的`makefile`，最后只需要`make`命令即可获得**目标文件**\n{%list%}\n使用Cmke本质上就是在项目文件夹中编写CMakeLists.txt\n{%endlist%}\n#### 1.2基本指令\n{%list%}\nCMake支持大写、小写、混合大小写的命令\n{%endlist%}\n**①注释**\n>**单行注释**：以`#`开头，以**换行符**结束\n**多行注释**：以`#[[`开头，以`]]`结尾\n\n**②`cmake_minimum_required`**\n>指定`Cmake`的**最低版本**\n**格式**：`cmake_minimum_required(VERSION 3.0.0)`\n\n**③`project`**\n>指定**工程信息**，包括**名字**、**版本**、**描述**、**web主页地址**和**支持的语言**等\n{%list%}\n只有项目的名字是必须的，其余都可忽略，缺省情况下支持所有CMake支持的语言\n{%endlist%}\n>**格式**\n```\n# PROJECT 指令的语法是：\nproject(<PROJECT-NAME> [<language-name>...])\nproject(<PROJECT-NAME>\n       [VERSION <major>[.<minor>[.<patch>[.<tweak>]]]]\n       [DESCRIPTION <project-description-string>]\n       [HOMEPAGE_URL <url-string>]\n       [LANGUAGES <language-name>...])\n```\n**④`add_executable`**\n>生成**可执行文件**，需要指定**可执行文件名**和**源文件**\n**格式**：`add_executable(可执行文件名 源文件名称)`\n{%list%}\n源文件名可以是一个也可以是多个，如有多个可用空格或;间隔\n{%endlist%}\n**⑤`message`**\n>**显示一条信息**\n**格式**：`message([STATUS|WARNING|AUTHOR_WARNING|FATAL_ERROR|SEND_ERROR] \"message to display\" ...)`\n{%list%}\nCMake警告和错误消息的文本显示使用的是一种简单的标记语言，文本没有缩进，超过长度的行会回卷，段落之间以新行做为分隔符。\n{%endlist%}\n>**状态**\n`(无)` ：**重要**消息\n`STATUS` ：**非重要**消息\n`WARNING`：**警告**\n`AUTHOR_WARNING`：**警告(dev)**\n`SEND_ERROR`：**错误**， **继续执行**，但是会**跳过生成的步骤**\n`FATAL_ERROR`：**错误**， **终止所有处理过程**\n\n**⑥`add_definitions`**\n>定义宏\n格式：`add_definitions(-D宏名称)`\n{%list%}\n在对应程序中定义宏，而不是在CMakeLists中定义宏\n{%endlist%}\n#### 1.3例子\n**①概述**\n>有四个**源文件**`main.cc`、`a.cc`、`b.cc`、`c.cc`，以及一个**头文件**`head.h`，其中`main.cc`**调用**了另外三个源文件，`head.h`中包含了对应**声明**\n\n**②CmakeLists文件编写**\n```\n#CMake最低版本为3.15\ncmake_minimum_required(VERSION 3.15)\n#项目名称为example\nproject(example)\n#将main.cc a.cc b.cc c.cc编译为可执行文件main\nadd_executable(main main.cc a.cc b.cc c.cc)\n```\n**③生成可执行文件**\n>在**终端**执行`cmake CmakeLists所在路径`命令，会在**当前路径**生成`makefile`等文件，再执行`make`命令即可\n{%right%}\n通常在项目文件文件夹中建造一个build文件夹，在该路径下执行上述命令，将相关文件和源文件分开\n{%endright%}\n{%warning%}\n在使用Cmke指令时，需要保证其后接路径下不能有相关文件\n{%endwarning%}\n\n*** \n\n### 2.变量\n#### 2.1创建与使用\n**①`set`**\n>**定义/修改变量**，参数分别为**变量名**、**变量的值（可以是多个）**以及一些**自定义选项（非必须）**\n**格式**：`SET(VAR [VALUE] [CACHE TYPE DOCSTRING [FORCE]])`\n{%list%}\n缺省情况下，Cmake中的变量都是字符串（ITEM）或者字符串列表（LIST）\n{%endlist%}\n{%right%}\n可以通过set进行变量的拼接\n{%endright%}\n>`set(变量名1 ${变量名1} ${变量名2} ...)`\n\n**②变量的使用**\n>`${变量名}`：将**变量名**转化为**对应的值**\n```\nset(SRC_LIST main.cc a.cc b.cc c.cc)\nadd_executable(main  ${SRC_LIST})\n```\n{%list%}\nCmake中，给变量赋值时，空格会被当作分隔符，如果想要使得变量中包含空格，则需要用双引号包围\n{%endlist%}\n>以下程序输出`abc`和`a b c`\n```\nset(WORD1 a b c)        #WORD1是一个字符串列表\nset(WORD2 \"a b c\")      #WORD2是一个字符串\nmessage(STATUS ${WORD1}) \nmessage(STATUS ${WORD2}) \n```\n\n#### 2.2变量操作\n**①`list`**\n>根据**操作码**对**列表**进行**不同的操作**\n\n**②追加**\n>**格式**：`list (APPEND <list> [<value> ...])`\n`<list>`：当前操作的**列表**\n`<element>`：可以是**字面值**，也可以是**变量的值**\n\n**③移除**\n>**格式**：`list (REMOVE_ITEM <list> <value> [<value> ...])`\n\n\n**④读取**\n>**格式**：`list(GET <list> <element index> [<element index> ...] <output variable>)`\n`<element index>`：列表元素的**索引**，从`0`开始，若为**负数**，则表示**倒数**第几个元素\n\n{%list%}\n其他操作可查询官网\n{%endlist%}\n\n#### 2.3预定义宏\n**①`CMAKE_CXX_STANDARD`**\n>**C++标准**\n```\n#增加-std=c++11\nset(CMAKE_CXX_STANDARD 11)\n```\n**②`EXECUTABLE_OUTPUT_PATH`**\n>**可执行文件输出路径**\n```\n#定义一个变量用于存储一个绝对路径\nset(HOME /home/robin/Linux/Sort)\n#将拼接好的路径值设置给EXECUTABLE_OUTPUT_PATH宏\nset(EXECUTABLE_OUTPUT_PATH ${HOME}/bin)\n```\n{%list%}\n如果路径不存在，则会自动创建\n{%endlist%}\n{%right%}\n最好使用绝对路径，如果使用相对路径，则./代表的是makefile所在路径\n{%endright%}\n**③`PROJECT_SOURCE_DIR`**\n>**Cmke指令后接的路径**\n\n**④`CMAKE_CURRENT_SOURCE_DIR`**\n>`CmakeLists`**文件所在路径**\n\n### 3.结构化\n#### 3.1文件搜索\n**①`aux_source_directory`**\n>查找**某个路径**下的**所有源文件**，并将源文件列表**存储到对应变量中**\n**格式**：`aux_source_directory(< dir > < variable >)`\n```\n# 搜索当前目录下的源文件\naux_source_directory(${CMAKE_CURRENT_SOURCE_DIR} SRC_LIST)\n```\n**②`file`**\n>查找**某个路径**下的所有**指定格式**的文件\n**格式**：`file(GLOB/GLOB_RECURSE 变量名 要搜索的文件路径和文件类型)`\n{%list%}\nGLOB表示只搜索当前路径，GLOB_RECURSE还会递归搜索当前路径下的所有子目录\n{%endlist%}\n```\n#搜索对应路径下的源文件\nfile(GLOB MAIN_SRC ${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp)\n#搜索对应路径下的头文件\nfile(GLOB MAIN_HEAD ${CMAKE_CURRENT_SOURCE_DIR}/include/*.h)\n```\n#### 3.2头文件路径\n**①引言**\n{%list%}\n通常，大型项目将源文件、头文件等分开放，如下所示\n{%endlist%}\n```\n$ tree\n.\n├── build\n├── CMakeLists.txt\n├── include\n│   └── head.h\n└── src\n    ├── main.cc\n    ├── a.cc\n    ├── b.cc\n    └── c.cc\n```\n**②`include_directories`**\n{%list%}\n由于#include \" \"指令只在当前目录下寻找头文件，以上情况需要添加头文件路径\n{%endlist%}\n>**格式**：`include_directories (headpath)`，`headpath`为**头文件路径**\n\n#### 2.3改进后的CmakeLists\n```\ncmake_minimum_required(VERSION 3.15)\nproject(example)\n#添加C++11标准\nset(CMAKE_CXX_STANDARD 11)\n#设置头文件路径\ninclude_directories(${PROJECT_SOURCE_DIR}/include)\n#搜索所有源文件\nfile(GLOB SRC_LIST ${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp)\n#生成可运行文件\nadd_executable(main  ${SRC_LIST})\n```\n\n### 4.动态库和静态库\n#### 4.1引言\n{%list%}\n库文件本质上是源文件的二进制格式\n{%endlist%}\n**①静态库**\n>**优点**：**打包到应用程序中**，加载速度快，移植方便\n**缺点**：内存中可能出现**多份静态库**（多个链接该库的程序一起运行），且如果**静态库更新**，则项目需要**重新编译**\n\n**②动态库**\n>**优点**：**多个进程共享**，只有**在调用时才被载入内存**，动态库更新**无需重新编译程序**\n**缺点**：加载**速度比静态库慢（可忽略）**，发布程序需要**提供依赖的动态库**\n{%list%}\n动态库有可执行权限，而静态库没有\n{%endlist%}\n\n**③文件架构**\n```\n.\n├── build\n├── lib\n├── CMakeLists.txt\n├── include           # 头文件目录\n│   └── head.h\n├── main.cc           # 用于测试的源文件\n└── src               # 源文件目录\n    ├── a.cc\n    ├── b.cc\n    └── c.cc\n```\n#### 4.2制作库\n**①`add_library`**\n>将对应**源文件**制作为**静态库/动态库**\n**格式**：`add_library(库名称 STATIC/SHARED 源文件1 [源文件2] ...)`\n{%list%}\n其中计算机中的库名由三部分组成lib+库名+后缀，命令中只需要指定库名即可，其余计算机自动填充\n{%endlist%}\n**②指定输出路径**\n>通过指定**系统变量**`LIBRARY_OUTPUT_PATH`\n**例子**：`set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)`\n{%list%}\n不指定则生成到当前路径中\n{%endlist%}\n{%right%}\n其中，动态库的生成路径还可以通过改变EXECUTABLE_OUTPUT_PATH，因为动态库是一个可执行文件\n{%endright%}\n**③对应CmakeLists文件**\n>将`src`**文件夹**中文件构建为**库文件**\n```\ncmake_minimum_required(VERSION 3.15)\nproject(example)\ninclude_directories(${PROJECT_SOURCE_DIR}/include)\nfile(GLOB SRC_LIST \"${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp\")\n# 设置动态库/静态库生成路径\nset(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)\n# 生成动态库，将SHARED修改为STATIC即可生成静态库\n#add_library(abc SHARED ${SRC_LIST})\n```\n\n#### 4.3使用库文件\n{%warning%}\n库文件的生成和库文件的使用是两个项目\n{%endwarning%}\n**①`link_libraries`**\n>**链接静态库**\n**格式**：`link_libraries(<static lib> [<static lib>...])`\n{%list%}\n其中static lib可以写全名，也可以只写中间部分\n{%endlist%}\n{%warning%}\n由于静态库是可执行文件的一部分，故需要在可执行文件生成前链接\n{%endwarning%}\n\n**②`target_link_libraries`**\n>**链接动态库**\n**格式**：如下所示，`target`为**链接动态库的文件**，`PRIVATE|PUBLIC|INTERFACE`为动态库的**访问权限**，**缺省**为`PUBLIC`\n{%list%}\n`target`可能是可执行文件、源文件或者动态库文件\n{%endlist%}\n{%warning%}\n由于动态库不是可执行文件的一部分，故需要在可执行文件生成后链接\n{%endwarning%}\n```\ntarget_link_libraries(\n    <target> \n    <PRIVATE|PUBLIC|INTERFACE> <item>... \n    [<PRIVATE|PUBLIC|INTERFACE> <item>...]...)\n```\n{%right%}\n动态库链接具有传递性，如果动态库 A 链接了动态库B、C，动态库D链接了动态库A，此时动态库D相当于也链接了动态库B、C，并可以使用动态库B、C中定义的方法（PUBLIC情况下）\n{%endright%}\n>**访问权限**\n`PUBLIC`：在`PUBLIC`后面的库会被**链接**到前面的`target`中，并且里面的符号也会被导出\n`PRIVATE`：在`PRIVATE`后面的库**仅被链接到前面的`target`中**，**不会传递**\n`INTERFACE`：在`INTERFACE`后面引入的库**不会被链接到前面的target中**，只会导出**符号**，并**不知道库的信息**，同样也**不会传递**\n{%list%}\n动态库和静态库也可以相互链接，相互之间不会影响各自特性\n{%endlist%}\n**③`link_directories`**\n>**指定库的路径**\n**格式**：`link_directories(lib_path)`\n{%list%}\n如果使用非系统提供的库文件，则需要指明库文件路径，便于编译器找到\n{%endlist%}\n\n#### 4.4例子\n**①文件架构**\n{%list%}\n使用库文件还需要包含相关头文件（包含库文件使用的函数声明）\n{%endlist%}\n```\n.\n├── build\n├── CMakeLists.txt\n├── include\n│   └── head.h              #库文件对应的头文件\n├── lib\n│   └── libabc.a（.so）     # 制作出的静态库（动态库）的名字\n└── src\n    └── main.cpp\n```\n**②静态库版本**\n```\ncmake_minimum_required(VERSION 3.15)\nproject(example)\n# 搜索指定目录下源文件\nfile(GLOB SRC_LIST ${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp)\n# 包含头文件路径\ninclude_directories(${PROJECT_SOURCE_DIR}/include)\n# 包含静态库路径\nlink_directories(${PROJECT_SOURCE_DIR}/lib)\n# 链接静态库\nlink_libraries(abc)\nadd_executable(main ${SRC_LIST})\n```\n**③动态库版本**\n```\ncmake_minimum_required(VERSION 3.15)\nproject(example)\nfile(GLOB SRC_LIST ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp)\n# 指定源文件或者动态库对应的头文件路径\ninclude_directories(${PROJECT_SOURCE_DIR}/include)\n# 指定要链接的动态库的路径\nlink_directories(${PROJECT_SOURCE_DIR}/lib)\n# 添加并生成一个可执行程序\nadd_executable(main ${SRC_LIST})\n# 指定要链接的动态库，其中libpthread.so为系统提供的线程库\ntarget_link_libraries(main pthread abc)\n```\n\n","slug":"Cmake应用（一）","published":1,"_id":"clnvkqwyu0000v0vd12a6g59g","layout":"post","photos":[],"link":"","content":"<h1 id=\"Cmake\"><a href=\"#Cmake\" class=\"headerlink\" title=\"Cmake\"></a>Cmake</h1><h2 id=\"Cmake应用（一）\"><a href=\"#Cmake应用（一）\" class=\"headerlink\" title=\"Cmake应用（一）\"></a>Cmake应用（一）</h2><h3 id=\"1-引言\"><a href=\"#1-引言\" class=\"headerlink\" title=\"1.引言\"></a>1.引言</h3><h4 id=\"1-1Cmke概述\"><a href=\"#1-1Cmke概述\" class=\"headerlink\" title=\"1.1Cmke概述\"></a>1.1<code>Cmke</code>概述</h4><blockquote>\n<p>一个<strong>跨平台</strong>的<strong>项目构建工具</strong>，根据<code>CMakeLists.txt</code><strong>文件</strong>自动生成（<code>cmake</code>命令）<strong>本地化</strong>的<code>makefile</code>，最后只需要<code>make</code>命令即可获得<strong>目标文件</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 使用Cmke本质上就是在项目文件夹中编写CMakeLists.txt</div>\n<h4 id=\"1-2基本指令\"><a href=\"#1-2基本指令\" class=\"headerlink\" title=\"1.2基本指令\"></a>1.2基本指令</h4><div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> CMake支持大写、小写、混合大小写的命令</div>\n<p><strong>①注释</strong></p>\n<blockquote>\n<p><strong>单行注释</strong>：以<code>#</code>开头，以<strong>换行符</strong>结束<br><strong>多行注释</strong>：以<code>#[[</code>开头，以<code>]]</code>结尾</p>\n</blockquote>\n<p><strong>②<code>cmake_minimum_required</code></strong></p>\n<blockquote>\n<p>指定<code>Cmake</code>的<strong>最低版本</strong><br><strong>格式</strong>：<code>cmake_minimum_required(VERSION 3.0.0)</code></p>\n</blockquote>\n<p><strong>③<code>project</code></strong></p>\n<blockquote>\n<p>指定<strong>工程信息</strong>，包括<strong>名字</strong>、<strong>版本</strong>、<strong>描述</strong>、<strong>web主页地址</strong>和<strong>支持的语言</strong>等</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 只有项目的名字是必须的，其余都可忽略，缺省情况下支持所有CMake支持的语言</div>\n<blockquote>\n<p><strong>格式</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># PROJECT 指令的语法是：\nproject(&lt;PROJECT-NAME&gt; [&lt;language-name&gt;...])\nproject(&lt;PROJECT-NAME&gt;\n       [VERSION &lt;major&gt;[.&lt;minor&gt;[.&lt;patch&gt;[.&lt;tweak&gt;]]]]\n       [DESCRIPTION &lt;project-description-string&gt;]\n       [HOMEPAGE_URL &lt;url-string&gt;]\n       [LANGUAGES &lt;language-name&gt;...])<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>④<code>add_executable</code></strong></p>\n<blockquote>\n<p>生成<strong>可执行文件</strong>，需要指定<strong>可执行文件名</strong>和<strong>源文件</strong><br><strong>格式</strong>：<code>add_executable(可执行文件名 源文件名称)</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 源文件名可以是一个也可以是多个，如有多个可用空格或;间隔</div>\n<p><strong>⑤<code>message</code></strong></p>\n<blockquote>\n<p><strong>显示一条信息</strong><br><strong>格式</strong>：<code>message([STATUS|WARNING|AUTHOR_WARNING|FATAL_ERROR|SEND_ERROR] \"message to display\" ...)</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> CMake警告和错误消息的文本显示使用的是一种简单的标记语言，文本没有缩进，超过长度的行会回卷，段落之间以新行做为分隔符。</div>\n<blockquote>\n<p><strong>状态</strong><br><code>(无)</code> ：<strong>重要</strong>消息<br><code>STATUS</code> ：<strong>非重要</strong>消息<br><code>WARNING</code>：<strong>警告</strong><br><code>AUTHOR_WARNING</code>：<strong>警告(dev)</strong><br><code>SEND_ERROR</code>：<strong>错误</strong>， <strong>继续执行</strong>，但是会<strong>跳过生成的步骤</strong><br><code>FATAL_ERROR</code>：<strong>错误</strong>， <strong>终止所有处理过程</strong></p>\n</blockquote>\n<p><strong>⑥<code>add_definitions</code></strong></p>\n<blockquote>\n<p>定义宏<br>格式：<code>add_definitions(-D宏名称)</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 在对应程序中定义宏，而不是在CMakeLists中定义宏</div>\n<h4 id=\"1-3例子\"><a href=\"#1-3例子\" class=\"headerlink\" title=\"1.3例子\"></a>1.3例子</h4><p><strong>①概述</strong></p>\n<blockquote>\n<p>有四个<strong>源文件</strong><code>main.cc</code>、<code>a.cc</code>、<code>b.cc</code>、<code>c.cc</code>，以及一个<strong>头文件</strong><code>head.h</code>，其中<code>main.cc</code><strong>调用</strong>了另外三个源文件，<code>head.h</code>中包含了对应<strong>声明</strong></p>\n</blockquote>\n<p><strong>②CmakeLists文件编写</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#CMake最低版本为3.15\ncmake_minimum_required(VERSION 3.15)\n#项目名称为example\nproject(example)\n#将main.cc a.cc b.cc c.cc编译为可执行文件main\nadd_executable(main main.cc a.cc b.cc c.cc)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>③生成可执行文件</strong></p>\n<blockquote>\n<p>在<strong>终端</strong>执行<code>cmake CmakeLists所在路径</code>命令，会在<strong>当前路径</strong>生成<code>makefile</code>等文件，再执行<code>make</code>命令即可</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 通常在项目文件文件夹中建造一个build文件夹，在该路径下执行上述命令，将相关文件和源文件分开</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 在使用Cmke指令时，需要保证其后接路径下不能有相关文件</div>\n\n<hr>\n<h3 id=\"2-变量\"><a href=\"#2-变量\" class=\"headerlink\" title=\"2.变量\"></a>2.变量</h3><h4 id=\"2-1创建与使用\"><a href=\"#2-1创建与使用\" class=\"headerlink\" title=\"2.1创建与使用\"></a>2.1创建与使用</h4><p><strong>①<code>set</code></strong></p>\n<blockquote>\n<p><strong>定义/修改变量</strong>，参数分别为<strong>变量名</strong>、<strong>变量的值（可以是多个）</strong>以及一些<strong>自定义选项（非必须）</strong><br><strong>格式</strong>：<code>SET(VAR [VALUE] [CACHE TYPE DOCSTRING [FORCE]])</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 缺省情况下，Cmake中的变量都是字符串（ITEM）或者字符串列表（LIST）</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 可以通过set进行变量的拼接</div>\n<blockquote>\n<p><code>set(变量名1 ${变量名1} ${变量名2} ...)</code></p>\n</blockquote>\n<p><strong>②变量的使用</strong></p>\n<blockquote>\n<p><code>${变量名}</code>：将<strong>变量名</strong>转化为<strong>对应的值</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">set(SRC_LIST main.cc a.cc b.cc c.cc)\nadd_executable(main  ${SRC_LIST})<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> Cmake中，给变量赋值时，空格会被当作分隔符，如果想要使得变量中包含空格，则需要用双引号包围</div>\n<blockquote>\n<p>以下程序输出<code>abc</code>和<code>a b c</code></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">set(WORD1 a b c)        #WORD1是一个字符串列表\nset(WORD2 \"a b c\")      #WORD2是一个字符串\nmessage(STATUS ${WORD1}) \nmessage(STATUS ${WORD2}) <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-2变量操作\"><a href=\"#2-2变量操作\" class=\"headerlink\" title=\"2.2变量操作\"></a>2.2变量操作</h4><p><strong>①<code>list</code></strong></p>\n<blockquote>\n<p>根据<strong>操作码</strong>对<strong>列表</strong>进行<strong>不同的操作</strong></p>\n</blockquote>\n<p><strong>②追加</strong></p>\n<blockquote>\n<p><strong>格式</strong>：<code>list (APPEND &lt;list&gt; [&lt;value&gt; ...])</code><br><code>&lt;list&gt;</code>：当前操作的<strong>列表</strong><br><code>&lt;element&gt;</code>：可以是<strong>字面值</strong>，也可以是<strong>变量的值</strong></p>\n</blockquote>\n<p><strong>③移除</strong></p>\n<blockquote>\n<p><strong>格式</strong>：<code>list (REMOVE_ITEM &lt;list&gt; &lt;value&gt; [&lt;value&gt; ...])</code></p>\n</blockquote>\n<p><strong>④读取</strong></p>\n<blockquote>\n<p><strong>格式</strong>：<code>list(GET &lt;list&gt; &lt;element index&gt; [&lt;element index&gt; ...] &lt;output variable&gt;)</code><br><code>&lt;element index&gt;</code>：列表元素的<strong>索引</strong>，从<code>0</code>开始，若为<strong>负数</strong>，则表示<strong>倒数</strong>第几个元素</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 其他操作可查询官网</div>\n\n<h4 id=\"2-3预定义宏\"><a href=\"#2-3预定义宏\" class=\"headerlink\" title=\"2.3预定义宏\"></a>2.3预定义宏</h4><p><strong>①<code>CMAKE_CXX_STANDARD</code></strong></p>\n<blockquote>\n<p><strong>C++标准</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#增加-std=c++11\nset(CMAKE_CXX_STANDARD 11)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><strong>②<code>EXECUTABLE_OUTPUT_PATH</code></strong></p>\n<blockquote>\n<p><strong>可执行文件输出路径</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#定义一个变量用于存储一个绝对路径\nset(HOME /home/robin/Linux/Sort)\n#将拼接好的路径值设置给EXECUTABLE_OUTPUT_PATH宏\nset(EXECUTABLE_OUTPUT_PATH ${HOME}/bin)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 如果路径不存在，则会自动创建</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 最好使用绝对路径，如果使用相对路径，则./代表的是makefile所在路径</div>\n<p><strong>③<code>PROJECT_SOURCE_DIR</code></strong></p>\n<blockquote>\n<p><strong>Cmke指令后接的路径</strong></p>\n</blockquote>\n<p><strong>④<code>CMAKE_CURRENT_SOURCE_DIR</code></strong></p>\n<blockquote>\n<p><code>CmakeLists</code><strong>文件所在路径</strong></p>\n</blockquote>\n<h3 id=\"3-结构化\"><a href=\"#3-结构化\" class=\"headerlink\" title=\"3.结构化\"></a>3.结构化</h3><h4 id=\"3-1文件搜索\"><a href=\"#3-1文件搜索\" class=\"headerlink\" title=\"3.1文件搜索\"></a>3.1文件搜索</h4><p><strong>①<code>aux_source_directory</code></strong></p>\n<blockquote>\n<p>查找<strong>某个路径</strong>下的<strong>所有源文件</strong>，并将源文件列表<strong>存储到对应变量中</strong><br><strong>格式</strong>：<code>aux_source_directory(&lt; dir &gt; &lt; variable &gt;)</code></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 搜索当前目录下的源文件\naux_source_directory(${CMAKE_CURRENT_SOURCE_DIR} SRC_LIST)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><strong>②<code>file</code></strong></p>\n<blockquote>\n<p>查找<strong>某个路径</strong>下的所有<strong>指定格式</strong>的文件<br><strong>格式</strong>：<code>file(GLOB/GLOB_RECURSE 变量名 要搜索的文件路径和文件类型)</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> GLOB表示只搜索当前路径，GLOB_RECURSE还会递归搜索当前路径下的所有子目录</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#搜索对应路径下的源文件\nfile(GLOB MAIN_SRC ${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp)\n#搜索对应路径下的头文件\nfile(GLOB MAIN_HEAD ${CMAKE_CURRENT_SOURCE_DIR}/include/*.h)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"3-2头文件路径\"><a href=\"#3-2头文件路径\" class=\"headerlink\" title=\"3.2头文件路径\"></a>3.2头文件路径</h4><p><strong>①引言</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 通常，大型项目将源文件、头文件等分开放，如下所示</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">$ tree\n.\n├── build\n├── CMakeLists.txt\n├── include\n│&nbsp;&nbsp; └── head.h\n└── src\n    ├── main.cc\n    ├── a.cc\n    ├── b.cc\n    └── c.cc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>②<code>include_directories</code></strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 由于#include \" \"指令只在当前目录下寻找头文件，以上情况需要添加头文件路径</div>\n<blockquote>\n<p><strong>格式</strong>：<code>include_directories (headpath)</code>，<code>headpath</code>为<strong>头文件路径</strong></p>\n</blockquote>\n<h4 id=\"2-3改进后的CmakeLists\"><a href=\"#2-3改进后的CmakeLists\" class=\"headerlink\" title=\"2.3改进后的CmakeLists\"></a>2.3改进后的CmakeLists</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">cmake_minimum_required(VERSION 3.15)\nproject(example)\n#添加C++11标准\nset(CMAKE_CXX_STANDARD 11)\n#设置头文件路径\ninclude_directories(${PROJECT_SOURCE_DIR}/include)\n#搜索所有源文件\nfile(GLOB SRC_LIST ${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp)\n#生成可运行文件\nadd_executable(main  ${SRC_LIST})<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"4-动态库和静态库\"><a href=\"#4-动态库和静态库\" class=\"headerlink\" title=\"4.动态库和静态库\"></a>4.动态库和静态库</h3><h4 id=\"4-1引言\"><a href=\"#4-1引言\" class=\"headerlink\" title=\"4.1引言\"></a>4.1引言</h4><div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 库文件本质上是源文件的二进制格式</div>\n<p><strong>①静态库</strong></p>\n<blockquote>\n<p><strong>优点</strong>：<strong>打包到应用程序中</strong>，加载速度快，移植方便<br><strong>缺点</strong>：内存中可能出现<strong>多份静态库</strong>（多个链接该库的程序一起运行），且如果<strong>静态库更新</strong>，则项目需要<strong>重新编译</strong></p>\n</blockquote>\n<p><strong>②动态库</strong></p>\n<blockquote>\n<p><strong>优点</strong>：<strong>多个进程共享</strong>，只有<strong>在调用时才被载入内存</strong>，动态库更新<strong>无需重新编译程序</strong><br><strong>缺点</strong>：加载<strong>速度比静态库慢（可忽略）</strong>，发布程序需要<strong>提供依赖的动态库</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 动态库有可执行权限，而静态库没有</div>\n\n<p><strong>③文件架构</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">.\n├── build\n├── lib\n├── CMakeLists.txt\n├── include           # 头文件目录\n│&nbsp;&nbsp; └── head.h\n├── main.cc           # 用于测试的源文件\n└── src               # 源文件目录\n    ├── a.cc\n    ├── b.cc\n    └── c.cc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"4-2制作库\"><a href=\"#4-2制作库\" class=\"headerlink\" title=\"4.2制作库\"></a>4.2制作库</h4><p><strong>①<code>add_library</code></strong></p>\n<blockquote>\n<p>将对应<strong>源文件</strong>制作为<strong>静态库/动态库</strong><br><strong>格式</strong>：<code>add_library(库名称 STATIC/SHARED 源文件1 [源文件2] ...)</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 其中计算机中的库名由三部分组成lib+库名+后缀，命令中只需要指定库名即可，其余计算机自动填充</div>\n<p><strong>②指定输出路径</strong></p>\n<blockquote>\n<p>通过指定<strong>系统变量</strong><code>LIBRARY_OUTPUT_PATH</code><br><strong>例子</strong>：<code>set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 不指定则生成到当前路径中</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 其中，动态库的生成路径还可以通过改变EXECUTABLE_OUTPUT_PATH，因为动态库是一个可执行文件</div>\n<p><strong>③对应CmakeLists文件</strong></p>\n<blockquote>\n<p>将<code>src</code><strong>文件夹</strong>中文件构建为<strong>库文件</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">cmake_minimum_required(VERSION 3.15)\nproject(example)\ninclude_directories(${PROJECT_SOURCE_DIR}/include)\nfile(GLOB SRC_LIST \"${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp\")\n# 设置动态库/静态库生成路径\nset(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)\n# 生成动态库，将SHARED修改为STATIC即可生成静态库\n#add_library(abc SHARED ${SRC_LIST})<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"4-3使用库文件\"><a href=\"#4-3使用库文件\" class=\"headerlink\" title=\"4.3使用库文件\"></a>4.3使用库文件</h4><div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 库文件的生成和库文件的使用是两个项目</div>\n<p><strong>①<code>link_libraries</code></strong></p>\n<blockquote>\n<p><strong>链接静态库</strong><br><strong>格式</strong>：<code>link_libraries(&lt;static lib&gt; [&lt;static lib&gt;...])</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 其中static lib可以写全名，也可以只写中间部分</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 由于静态库是可执行文件的一部分，故需要在可执行文件生成前链接</div>\n\n<p><strong>②<code>target_link_libraries</code></strong></p>\n<blockquote>\n<p><strong>链接动态库</strong><br><strong>格式</strong>：如下所示，<code>target</code>为<strong>链接动态库的文件</strong>，<code>PRIVATE|PUBLIC|INTERFACE</code>为动态库的<strong>访问权限</strong>，<strong>缺省</strong>为<code>PUBLIC</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> `target`可能是可执行文件、源文件或者动态库文件</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 由于动态库不是可执行文件的一部分，故需要在可执行文件生成后链接</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">target_link_libraries(\n    &lt;target&gt; \n    &lt;PRIVATE|PUBLIC|INTERFACE&gt; &lt;item&gt;... \n    [&lt;PRIVATE|PUBLIC|INTERFACE&gt; &lt;item&gt;...]...)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 动态库链接具有传递性，如果动态库 A 链接了动态库B、C，动态库D链接了动态库A，此时动态库D相当于也链接了动态库B、C，并可以使用动态库B、C中定义的方法（PUBLIC情况下）</div>\n<blockquote>\n<p><strong>访问权限</strong><br><code>PUBLIC</code>：在<code>PUBLIC</code>后面的库会被<strong>链接</strong>到前面的<code>target</code>中，并且里面的符号也会被导出<br><code>PRIVATE</code>：在<code>PRIVATE</code>后面的库<strong>仅被链接到前面的<code>target</code>中</strong>，<strong>不会传递</strong><br><code>INTERFACE</code>：在<code>INTERFACE</code>后面引入的库<strong>不会被链接到前面的target中</strong>，只会导出<strong>符号</strong>，并<strong>不知道库的信息</strong>，同样也<strong>不会传递</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 动态库和静态库也可以相互链接，相互之间不会影响各自特性</div>\n<p><strong>③<code>link_directories</code></strong></p>\n<blockquote>\n<p><strong>指定库的路径</strong><br><strong>格式</strong>：<code>link_directories(lib_path)</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 如果使用非系统提供的库文件，则需要指明库文件路径，便于编译器找到</div>\n\n<h4 id=\"4-4例子\"><a href=\"#4-4例子\" class=\"headerlink\" title=\"4.4例子\"></a>4.4例子</h4><p><strong>①文件架构</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 使用库文件还需要包含相关头文件（包含库文件使用的函数声明）</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">.\n├── build\n├── CMakeLists.txt\n├── include\n│&nbsp;&nbsp; └── head.h              #库文件对应的头文件\n├── lib\n│&nbsp;&nbsp; └── libabc.a（.so）     # 制作出的静态库（动态库）的名字\n└── src\n    └── main.cpp<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>②静态库版本</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">cmake_minimum_required(VERSION 3.15)\nproject(example)\n# 搜索指定目录下源文件\nfile(GLOB SRC_LIST ${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp)\n# 包含头文件路径\ninclude_directories(${PROJECT_SOURCE_DIR}/include)\n# 包含静态库路径\nlink_directories(${PROJECT_SOURCE_DIR}/lib)\n# 链接静态库\nlink_libraries(abc)\nadd_executable(main ${SRC_LIST})<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>③动态库版本</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">cmake_minimum_required(VERSION 3.15)\nproject(example)\nfile(GLOB SRC_LIST ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp)\n# 指定源文件或者动态库对应的头文件路径\ninclude_directories(${PROJECT_SOURCE_DIR}/include)\n# 指定要链接的动态库的路径\nlink_directories(${PROJECT_SOURCE_DIR}/lib)\n# 添加并生成一个可执行程序\nadd_executable(main ${SRC_LIST})\n# 指定要链接的动态库，其中libpthread.so为系统提供的线程库\ntarget_link_libraries(main pthread abc)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"Cmake\"><a href=\"#Cmake\" class=\"headerlink\" title=\"Cmake\"></a>Cmake</h1><h2 id=\"Cmake应用（一）\"><a href=\"#Cmake应用（一）\" class=\"headerlink\" title=\"Cmake应用（一）\"></a>Cmake应用（一）</h2><h3 id=\"1-引言\"><a href=\"#1-引言\" class=\"headerlink\" title=\"1.引言\"></a>1.引言</h3><h4 id=\"1-1Cmke概述\"><a href=\"#1-1Cmke概述\" class=\"headerlink\" title=\"1.1Cmke概述\"></a>1.1<code>Cmke</code>概述</h4><blockquote>\n<p>一个<strong>跨平台</strong>的<strong>项目构建工具</strong>，根据<code>CMakeLists.txt</code><strong>文件</strong>自动生成（<code>cmake</code>命令）<strong>本地化</strong>的<code>makefile</code>，最后只需要<code>make</code>命令即可获得<strong>目标文件</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 使用Cmke本质上就是在项目文件夹中编写CMakeLists.txt</div>\n<h4 id=\"1-2基本指令\"><a href=\"#1-2基本指令\" class=\"headerlink\" title=\"1.2基本指令\"></a>1.2基本指令</h4><div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> CMake支持大写、小写、混合大小写的命令</div>\n<p><strong>①注释</strong></p>\n<blockquote>\n<p><strong>单行注释</strong>：以<code>#</code>开头，以<strong>换行符</strong>结束<br><strong>多行注释</strong>：以<code>#[[</code>开头，以<code>]]</code>结尾</p>\n</blockquote>\n<p><strong>②<code>cmake_minimum_required</code></strong></p>\n<blockquote>\n<p>指定<code>Cmake</code>的<strong>最低版本</strong><br><strong>格式</strong>：<code>cmake_minimum_required(VERSION 3.0.0)</code></p>\n</blockquote>\n<p><strong>③<code>project</code></strong></p>\n<blockquote>\n<p>指定<strong>工程信息</strong>，包括<strong>名字</strong>、<strong>版本</strong>、<strong>描述</strong>、<strong>web主页地址</strong>和<strong>支持的语言</strong>等</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 只有项目的名字是必须的，其余都可忽略，缺省情况下支持所有CMake支持的语言</div>\n<blockquote>\n<p><strong>格式</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># PROJECT 指令的语法是：\nproject(&lt;PROJECT-NAME&gt; [&lt;language-name&gt;...])\nproject(&lt;PROJECT-NAME&gt;\n       [VERSION &lt;major&gt;[.&lt;minor&gt;[.&lt;patch&gt;[.&lt;tweak&gt;]]]]\n       [DESCRIPTION &lt;project-description-string&gt;]\n       [HOMEPAGE_URL &lt;url-string&gt;]\n       [LANGUAGES &lt;language-name&gt;...])<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>④<code>add_executable</code></strong></p>\n<blockquote>\n<p>生成<strong>可执行文件</strong>，需要指定<strong>可执行文件名</strong>和<strong>源文件</strong><br><strong>格式</strong>：<code>add_executable(可执行文件名 源文件名称)</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 源文件名可以是一个也可以是多个，如有多个可用空格或;间隔</div>\n<p><strong>⑤<code>message</code></strong></p>\n<blockquote>\n<p><strong>显示一条信息</strong><br><strong>格式</strong>：<code>message([STATUS|WARNING|AUTHOR_WARNING|FATAL_ERROR|SEND_ERROR] &quot;message to display&quot; ...)</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> CMake警告和错误消息的文本显示使用的是一种简单的标记语言，文本没有缩进，超过长度的行会回卷，段落之间以新行做为分隔符。</div>\n<blockquote>\n<p><strong>状态</strong><br><code>(无)</code> ：<strong>重要</strong>消息<br><code>STATUS</code> ：<strong>非重要</strong>消息<br><code>WARNING</code>：<strong>警告</strong><br><code>AUTHOR_WARNING</code>：<strong>警告(dev)</strong><br><code>SEND_ERROR</code>：<strong>错误</strong>， <strong>继续执行</strong>，但是会<strong>跳过生成的步骤</strong><br><code>FATAL_ERROR</code>：<strong>错误</strong>， <strong>终止所有处理过程</strong></p>\n</blockquote>\n<p><strong>⑥<code>add_definitions</code></strong></p>\n<blockquote>\n<p>定义宏<br>格式：<code>add_definitions(-D宏名称)</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 在对应程序中定义宏，而不是在CMakeLists中定义宏</div>\n<h4 id=\"1-3例子\"><a href=\"#1-3例子\" class=\"headerlink\" title=\"1.3例子\"></a>1.3例子</h4><p><strong>①概述</strong></p>\n<blockquote>\n<p>有四个<strong>源文件</strong><code>main.cc</code>、<code>a.cc</code>、<code>b.cc</code>、<code>c.cc</code>，以及一个<strong>头文件</strong><code>head.h</code>，其中<code>main.cc</code><strong>调用</strong>了另外三个源文件，<code>head.h</code>中包含了对应<strong>声明</strong></p>\n</blockquote>\n<p><strong>②CmakeLists文件编写</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#CMake最低版本为3.15\ncmake_minimum_required(VERSION 3.15)\n#项目名称为example\nproject(example)\n#将main.cc a.cc b.cc c.cc编译为可执行文件main\nadd_executable(main main.cc a.cc b.cc c.cc)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>③生成可执行文件</strong></p>\n<blockquote>\n<p>在<strong>终端</strong>执行<code>cmake CmakeLists所在路径</code>命令，会在<strong>当前路径</strong>生成<code>makefile</code>等文件，再执行<code>make</code>命令即可</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 通常在项目文件文件夹中建造一个build文件夹，在该路径下执行上述命令，将相关文件和源文件分开</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 在使用Cmke指令时，需要保证其后接路径下不能有相关文件</div>\n\n<hr>\n<h3 id=\"2-变量\"><a href=\"#2-变量\" class=\"headerlink\" title=\"2.变量\"></a>2.变量</h3><h4 id=\"2-1创建与使用\"><a href=\"#2-1创建与使用\" class=\"headerlink\" title=\"2.1创建与使用\"></a>2.1创建与使用</h4><p><strong>①<code>set</code></strong></p>\n<blockquote>\n<p><strong>定义&#x2F;修改变量</strong>，参数分别为<strong>变量名</strong>、<strong>变量的值（可以是多个）</strong>以及一些<strong>自定义选项（非必须）</strong><br><strong>格式</strong>：<code>SET(VAR [VALUE] [CACHE TYPE DOCSTRING [FORCE]])</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 缺省情况下，Cmake中的变量都是字符串（ITEM）或者字符串列表（LIST）</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 可以通过set进行变量的拼接</div>\n<blockquote>\n<p><code>set(变量名1 $&#123;变量名1&#125; $&#123;变量名2&#125; ...)</code></p>\n</blockquote>\n<p><strong>②变量的使用</strong></p>\n<blockquote>\n<p><code>$&#123;变量名&#125;</code>：将<strong>变量名</strong>转化为<strong>对应的值</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">set(SRC_LIST main.cc a.cc b.cc c.cc)\nadd_executable(main  $&#123;SRC_LIST&#125;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> Cmake中，给变量赋值时，空格会被当作分隔符，如果想要使得变量中包含空格，则需要用双引号包围</div>\n<blockquote>\n<p>以下程序输出<code>abc</code>和<code>a b c</code></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">set(WORD1 a b c)        #WORD1是一个字符串列表\nset(WORD2 &quot;a b c&quot;)      #WORD2是一个字符串\nmessage(STATUS $&#123;WORD1&#125;) \nmessage(STATUS $&#123;WORD2&#125;) <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-2变量操作\"><a href=\"#2-2变量操作\" class=\"headerlink\" title=\"2.2变量操作\"></a>2.2变量操作</h4><p><strong>①<code>list</code></strong></p>\n<blockquote>\n<p>根据<strong>操作码</strong>对<strong>列表</strong>进行<strong>不同的操作</strong></p>\n</blockquote>\n<p><strong>②追加</strong></p>\n<blockquote>\n<p><strong>格式</strong>：<code>list (APPEND &lt;list&gt; [&lt;value&gt; ...])</code><br><code>&lt;list&gt;</code>：当前操作的<strong>列表</strong><br><code>&lt;element&gt;</code>：可以是<strong>字面值</strong>，也可以是<strong>变量的值</strong></p>\n</blockquote>\n<p><strong>③移除</strong></p>\n<blockquote>\n<p><strong>格式</strong>：<code>list (REMOVE_ITEM &lt;list&gt; &lt;value&gt; [&lt;value&gt; ...])</code></p>\n</blockquote>\n<p><strong>④读取</strong></p>\n<blockquote>\n<p><strong>格式</strong>：<code>list(GET &lt;list&gt; &lt;element index&gt; [&lt;element index&gt; ...] &lt;output variable&gt;)</code><br><code>&lt;element index&gt;</code>：列表元素的<strong>索引</strong>，从<code>0</code>开始，若为<strong>负数</strong>，则表示<strong>倒数</strong>第几个元素</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 其他操作可查询官网</div>\n\n<h4 id=\"2-3预定义宏\"><a href=\"#2-3预定义宏\" class=\"headerlink\" title=\"2.3预定义宏\"></a>2.3预定义宏</h4><p><strong>①<code>CMAKE_CXX_STANDARD</code></strong></p>\n<blockquote>\n<p><strong>C++标准</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#增加-std&#x3D;c++11\nset(CMAKE_CXX_STANDARD 11)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><strong>②<code>EXECUTABLE_OUTPUT_PATH</code></strong></p>\n<blockquote>\n<p><strong>可执行文件输出路径</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#定义一个变量用于存储一个绝对路径\nset(HOME &#x2F;home&#x2F;robin&#x2F;Linux&#x2F;Sort)\n#将拼接好的路径值设置给EXECUTABLE_OUTPUT_PATH宏\nset(EXECUTABLE_OUTPUT_PATH $&#123;HOME&#125;&#x2F;bin)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 如果路径不存在，则会自动创建</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 最好使用绝对路径，如果使用相对路径，则./代表的是makefile所在路径</div>\n<p><strong>③<code>PROJECT_SOURCE_DIR</code></strong></p>\n<blockquote>\n<p><strong>Cmke指令后接的路径</strong></p>\n</blockquote>\n<p><strong>④<code>CMAKE_CURRENT_SOURCE_DIR</code></strong></p>\n<blockquote>\n<p><code>CmakeLists</code><strong>文件所在路径</strong></p>\n</blockquote>\n<h3 id=\"3-结构化\"><a href=\"#3-结构化\" class=\"headerlink\" title=\"3.结构化\"></a>3.结构化</h3><h4 id=\"3-1文件搜索\"><a href=\"#3-1文件搜索\" class=\"headerlink\" title=\"3.1文件搜索\"></a>3.1文件搜索</h4><p><strong>①<code>aux_source_directory</code></strong></p>\n<blockquote>\n<p>查找<strong>某个路径</strong>下的<strong>所有源文件</strong>，并将源文件列表<strong>存储到对应变量中</strong><br><strong>格式</strong>：<code>aux_source_directory(&lt; dir &gt; &lt; variable &gt;)</code></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 搜索当前目录下的源文件\naux_source_directory($&#123;CMAKE_CURRENT_SOURCE_DIR&#125; SRC_LIST)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><strong>②<code>file</code></strong></p>\n<blockquote>\n<p>查找<strong>某个路径</strong>下的所有<strong>指定格式</strong>的文件<br><strong>格式</strong>：<code>file(GLOB/GLOB_RECURSE 变量名 要搜索的文件路径和文件类型)</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> GLOB表示只搜索当前路径，GLOB_RECURSE还会递归搜索当前路径下的所有子目录</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#搜索对应路径下的源文件\nfile(GLOB MAIN_SRC $&#123;CMAKE_CURRENT_SOURCE_DIR&#125;&#x2F;src&#x2F;*.cpp)\n#搜索对应路径下的头文件\nfile(GLOB MAIN_HEAD $&#123;CMAKE_CURRENT_SOURCE_DIR&#125;&#x2F;include&#x2F;*.h)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"3-2头文件路径\"><a href=\"#3-2头文件路径\" class=\"headerlink\" title=\"3.2头文件路径\"></a>3.2头文件路径</h4><p><strong>①引言</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 通常，大型项目将源文件、头文件等分开放，如下所示</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">$ tree\n.\n├── build\n├── CMakeLists.txt\n├── include\n│   └── head.h\n└── src\n    ├── main.cc\n    ├── a.cc\n    ├── b.cc\n    └── c.cc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>②<code>include_directories</code></strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 由于#include \" \"指令只在当前目录下寻找头文件，以上情况需要添加头文件路径</div>\n<blockquote>\n<p><strong>格式</strong>：<code>include_directories (headpath)</code>，<code>headpath</code>为<strong>头文件路径</strong></p>\n</blockquote>\n<h4 id=\"2-3改进后的CmakeLists\"><a href=\"#2-3改进后的CmakeLists\" class=\"headerlink\" title=\"2.3改进后的CmakeLists\"></a>2.3改进后的CmakeLists</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">cmake_minimum_required(VERSION 3.15)\nproject(example)\n#添加C++11标准\nset(CMAKE_CXX_STANDARD 11)\n#设置头文件路径\ninclude_directories($&#123;PROJECT_SOURCE_DIR&#125;&#x2F;include)\n#搜索所有源文件\nfile(GLOB SRC_LIST $&#123;CMAKE_CURRENT_SOURCE_DIR&#125;&#x2F;src&#x2F;*.cpp)\n#生成可运行文件\nadd_executable(main  $&#123;SRC_LIST&#125;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"4-动态库和静态库\"><a href=\"#4-动态库和静态库\" class=\"headerlink\" title=\"4.动态库和静态库\"></a>4.动态库和静态库</h3><h4 id=\"4-1引言\"><a href=\"#4-1引言\" class=\"headerlink\" title=\"4.1引言\"></a>4.1引言</h4><div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 库文件本质上是源文件的二进制格式</div>\n<p><strong>①静态库</strong></p>\n<blockquote>\n<p><strong>优点</strong>：<strong>打包到应用程序中</strong>，加载速度快，移植方便<br><strong>缺点</strong>：内存中可能出现<strong>多份静态库</strong>（多个链接该库的程序一起运行），且如果<strong>静态库更新</strong>，则项目需要<strong>重新编译</strong></p>\n</blockquote>\n<p><strong>②动态库</strong></p>\n<blockquote>\n<p><strong>优点</strong>：<strong>多个进程共享</strong>，只有<strong>在调用时才被载入内存</strong>，动态库更新<strong>无需重新编译程序</strong><br><strong>缺点</strong>：加载<strong>速度比静态库慢（可忽略）</strong>，发布程序需要<strong>提供依赖的动态库</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 动态库有可执行权限，而静态库没有</div>\n\n<p><strong>③文件架构</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">.\n├── build\n├── lib\n├── CMakeLists.txt\n├── include           # 头文件目录\n│   └── head.h\n├── main.cc           # 用于测试的源文件\n└── src               # 源文件目录\n    ├── a.cc\n    ├── b.cc\n    └── c.cc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"4-2制作库\"><a href=\"#4-2制作库\" class=\"headerlink\" title=\"4.2制作库\"></a>4.2制作库</h4><p><strong>①<code>add_library</code></strong></p>\n<blockquote>\n<p>将对应<strong>源文件</strong>制作为<strong>静态库&#x2F;动态库</strong><br><strong>格式</strong>：<code>add_library(库名称 STATIC/SHARED 源文件1 [源文件2] ...)</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 其中计算机中的库名由三部分组成lib+库名+后缀，命令中只需要指定库名即可，其余计算机自动填充</div>\n<p><strong>②指定输出路径</strong></p>\n<blockquote>\n<p>通过指定<strong>系统变量</strong><code>LIBRARY_OUTPUT_PATH</code><br><strong>例子</strong>：<code>set(LIBRARY_OUTPUT_PATH $&#123;PROJECT_SOURCE_DIR&#125;/lib)</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 不指定则生成到当前路径中</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 其中，动态库的生成路径还可以通过改变EXECUTABLE_OUTPUT_PATH，因为动态库是一个可执行文件</div>\n<p><strong>③对应CmakeLists文件</strong></p>\n<blockquote>\n<p>将<code>src</code><strong>文件夹</strong>中文件构建为<strong>库文件</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">cmake_minimum_required(VERSION 3.15)\nproject(example)\ninclude_directories($&#123;PROJECT_SOURCE_DIR&#125;&#x2F;include)\nfile(GLOB SRC_LIST &quot;$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;&#x2F;src&#x2F;*.cpp&quot;)\n# 设置动态库&#x2F;静态库生成路径\nset(LIBRARY_OUTPUT_PATH $&#123;PROJECT_SOURCE_DIR&#125;&#x2F;lib)\n# 生成动态库，将SHARED修改为STATIC即可生成静态库\n#add_library(abc SHARED $&#123;SRC_LIST&#125;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"4-3使用库文件\"><a href=\"#4-3使用库文件\" class=\"headerlink\" title=\"4.3使用库文件\"></a>4.3使用库文件</h4><div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 库文件的生成和库文件的使用是两个项目</div>\n<p><strong>①<code>link_libraries</code></strong></p>\n<blockquote>\n<p><strong>链接静态库</strong><br><strong>格式</strong>：<code>link_libraries(&lt;static lib&gt; [&lt;static lib&gt;...])</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 其中static lib可以写全名，也可以只写中间部分</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 由于静态库是可执行文件的一部分，故需要在可执行文件生成前链接</div>\n\n<p><strong>②<code>target_link_libraries</code></strong></p>\n<blockquote>\n<p><strong>链接动态库</strong><br><strong>格式</strong>：如下所示，<code>target</code>为<strong>链接动态库的文件</strong>，<code>PRIVATE|PUBLIC|INTERFACE</code>为动态库的<strong>访问权限</strong>，<strong>缺省</strong>为<code>PUBLIC</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> `target`可能是可执行文件、源文件或者动态库文件</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 由于动态库不是可执行文件的一部分，故需要在可执行文件生成后链接</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">target_link_libraries(\n    &lt;target&gt; \n    &lt;PRIVATE|PUBLIC|INTERFACE&gt; &lt;item&gt;... \n    [&lt;PRIVATE|PUBLIC|INTERFACE&gt; &lt;item&gt;...]...)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 动态库链接具有传递性，如果动态库 A 链接了动态库B、C，动态库D链接了动态库A，此时动态库D相当于也链接了动态库B、C，并可以使用动态库B、C中定义的方法（PUBLIC情况下）</div>\n<blockquote>\n<p><strong>访问权限</strong><br><code>PUBLIC</code>：在<code>PUBLIC</code>后面的库会被<strong>链接</strong>到前面的<code>target</code>中，并且里面的符号也会被导出<br><code>PRIVATE</code>：在<code>PRIVATE</code>后面的库<strong>仅被链接到前面的<code>target</code>中</strong>，<strong>不会传递</strong><br><code>INTERFACE</code>：在<code>INTERFACE</code>后面引入的库<strong>不会被链接到前面的target中</strong>，只会导出<strong>符号</strong>，并<strong>不知道库的信息</strong>，同样也<strong>不会传递</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 动态库和静态库也可以相互链接，相互之间不会影响各自特性</div>\n<p><strong>③<code>link_directories</code></strong></p>\n<blockquote>\n<p><strong>指定库的路径</strong><br><strong>格式</strong>：<code>link_directories(lib_path)</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 如果使用非系统提供的库文件，则需要指明库文件路径，便于编译器找到</div>\n\n<h4 id=\"4-4例子\"><a href=\"#4-4例子\" class=\"headerlink\" title=\"4.4例子\"></a>4.4例子</h4><p><strong>①文件架构</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 使用库文件还需要包含相关头文件（包含库文件使用的函数声明）</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">.\n├── build\n├── CMakeLists.txt\n├── include\n│   └── head.h              #库文件对应的头文件\n├── lib\n│   └── libabc.a（.so）     # 制作出的静态库（动态库）的名字\n└── src\n    └── main.cpp<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>②静态库版本</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">cmake_minimum_required(VERSION 3.15)\nproject(example)\n# 搜索指定目录下源文件\nfile(GLOB SRC_LIST $&#123;CMAKE_CURRENT_SOURCE_DIR&#125;&#x2F;src&#x2F;*.cpp)\n# 包含头文件路径\ninclude_directories($&#123;PROJECT_SOURCE_DIR&#125;&#x2F;include)\n# 包含静态库路径\nlink_directories($&#123;PROJECT_SOURCE_DIR&#125;&#x2F;lib)\n# 链接静态库\nlink_libraries(abc)\nadd_executable(main $&#123;SRC_LIST&#125;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>③动态库版本</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">cmake_minimum_required(VERSION 3.15)\nproject(example)\nfile(GLOB SRC_LIST $&#123;CMAKE_CURRENT_SOURCE_DIR&#125;&#x2F;*.cpp)\n# 指定源文件或者动态库对应的头文件路径\ninclude_directories($&#123;PROJECT_SOURCE_DIR&#125;&#x2F;include)\n# 指定要链接的动态库的路径\nlink_directories($&#123;PROJECT_SOURCE_DIR&#125;&#x2F;lib)\n# 添加并生成一个可执行程序\nadd_executable(main $&#123;SRC_LIST&#125;)\n# 指定要链接的动态库，其中libpthread.so为系统提供的线程库\ntarget_link_libraries(main pthread abc)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n"},{"title":"Cmake应用（二）","seo_title":"seo名称","toc":true,"indent":true,"top":false,"comments":1,"archive":true,"cover":false,"mathjax":false,"pin":false,"top_meta":false,"bottom_meta":false,"sidebar":["toc"],"keywords":"文章关键词","updated":"2023-11-07T14:10:58.014Z","img":"/medias/featureimages/23.webp","date":"2023-11-07T14:10:58.014Z","summary":"Cmake代码构建工具","_content":"# Cmake\n## Cmake应用（二）\n### 1.嵌套Cmake\n{%right%}\n当项目有多个源代码目录时，给每个源码目录都添加一个CMakeLists.txt文件，便于管理\n{%endright%}\n#### 1.1引言\n>进行**模块化测试**，将`calc`和`sort`中的源代码打包成**库**，并分别给**对应测试文件**调用\n```\n$ tree\n.\n├── build\n├── calc              #计算库\n│   ├── add.cpp\n│   ├── CMakeLists.txt\n│   ├── div.cpp\n│   ├── mult.cpp\n│   └── sub.cpp\n├── CMakeLists.txt\n├── include           #头文件目录\n│   ├── calc.h\n│   └── sort.h\n├── sort              #排序库\n│   ├── CMakeLists.txt\n│   ├── insert.cpp\n│   └── select.cpp\n├── test1             #测试计算库\n│   ├── calc.cpp\n│   └── CMakeLists.txt\n└── test2             #测试排序\n    ├── CMakeLists.txt\n    └── sort.cpp\n```\n#### 1.2建立联系\n**①节点关系**\n>`CMakeLists`文件关系是**树状结构关系**（因为**文件/目录之间的关系**也是树状结构关系）\n{%list%}\n父节点定义的变量也可以在子节点中使用，子节点定义的变量只能在当前节点使用\n{%endlist%}\n\n**②`add_subdirectory`**\n>**建立父子节点关系**\n**格式**：`add_subdirectory(source_dir [binary_dir] [EXCLUDE_FROM_ALL])`\n\n>`source_dir`：指定**子目录**\n`binary_dir`：指定了**子目录输出文件的路径**，一般**不需要指定**\n`EXCLUDE_FROM_ALL`：当指定该参数时，父目录的`CMakeLists.txt`不会构建子目录的目标文件，必须在**子目录下显式去构建**，除非**父目录的目标文件依赖于子目录的目标文件**\n\n#### 1.3CmakeLists文件\n**①根目录**\n{%list%}\n根目录主要的功能是定义全局变量和添加子目录\n{%endlist%}\n```\ncmake_minimum_required(VERSION 3.0)\nproject(test)\n# 定义变量\n# 静态库生成的路径\nset(LIB_PATH ${CMAKE_CURRENT_SOURCE_DIR}/lib)\n# 测试程序生成的路径\nset(EXEC_PATH ${CMAKE_CURRENT_SOURCE_DIR}/bin)\n# 头文件目录\nset(HEAD_PATH ${CMAKE_CURRENT_SOURCE_DIR}/include)\n# 静态库的名字\nset(CALC_LIB calc)\nset(SORT_LIB sort)\n# 可执行程序的名字\nset(APP_NAME_1 test1)\nset(APP_NAME_2 test2)\n# 添加子目录\nadd_subdirectory(calc)\nadd_subdirectory(sort)\nadd_subdirectory(test1)\nadd_subdirectory(test2)\n```\n**②calc目录**\n```\ncmake_minimum_required(VERSION 3.0)\nproject(CALCLIB)\n#搜索当前目录（calc目录）下的所有源文件\naux_source_directory(./ SRC)\n#包含头文件路径，HEAD_PATH是在根节点文件中定义的\ninclude_directories(${HEAD_PATH})\n#设置库的生成的路径，LIB_PATH是在根节点文件中定义的\nset(LIBRARY_OUTPUT_PATH ${LIB_PATH})\n#生成静态库，静态库名字CALC_LIB是在根节点文件中定义的\nadd_library(${CALC_LIB} STATIC ${SRC})\n```\n\n**③sort目录**\n```\ncmake_minimum_required(VERSION 3.0)\nproject(SORTLIB)\naux_source_directory(./ SRC)\ninclude_directories(${HEAD_PATH})\nset(LIBRARY_OUTPUT_PATH ${LIB_PATH})\n#生成动态库，动态库名字SORT_LIB是在根节点文件中定义的\nadd_library(${SORT_LIB} SHARED ${SRC})\n```\n\n**④test1目录**\n{%list%}\n当程序某个模块中生成库且在对应CmakeLists文件中指定了库的输出路径，其他模块不需要指定其路径\n{%endlist%}\n```\ncmake_minimum_required(VERSION 3.0)\nproject(CALCTEST)\naux_source_directory(./ SRC)\n#指定头文件路径，HEAD_PATH变量是在根节点文件中定义的\ninclude_directories(${HEAD_PATH})\nlink_directories(${LIB_PATH})\n#指定可执行程序要链接的静态库，CALC_LIB变量是在根节点文件中定义的\nlink_libraries(${CALC_LIB})\n#指定可执行程序生成的路径，EXEC_PATH变量是在根节点文件中定义的\nset(EXECUTABLE_OUTPUT_PATH ${EXEC_PATH})\n#生成可执行程序，APP_NAME_1变量是在根节点文件中定义的\nadd_executable(${APP_NAME_1} ${SRC})\n```\n\n**⑤test2目录**\n```\ncmake_minimum_required(VERSION 3.0)\nproject(SORTTEST)\naux_source_directory(./ SRC)\ninclude_directories(${HEAD_PATH})\nset(EXECUTABLE_OUTPUT_PATH ${EXEC_PATH})\nlink_directories(${LIB_PATH})\nadd_executable(${APP_NAME_2} ${SRC})\ntarget_link_libraries(${APP_NAME_2} ${SORT_LIB})\n```\n\n**⑥结果**\n>进入到**根节点目录**的`build`**目录**中，执行`cmake`和`make`命令，在项目**根目录**的`lib`**目录**中生成了**静态库**`libcalc.a`和**动态库**`libsort.so`，并在项目**根目录**的`bin`**目录**生成了**可执行程序**`test1`和`test2`\n\n\n### 2.流程控制\n#### 2.1条件判断\n**①`if`语句**\n```\nif(<condition>)\n  <commands>\nelseif(<condition>)  #可选块，可重复\n  <commands>\nelse()               #可选块\n  <commands>\nendif()\n```\n\n**②`condition`**\n>`condition`的值为`1`, `ON`, `YES`, `TRUE`, `Y,` **非零值**，**非空字符串**时，条件判断返回`True`\n`condition`的值为`0`，`OFF`，`NO`，`FALSE`，`N`，`IGNORE`，`NOTFOUND`，**空字符串**时，条件判断返回`False`\n\n\n**③相关操作符**\n>**逻辑操作**：`NOT`（非）、`AND`（与）、`OR`（或）\n\n>**数值比较**：`LESS`（小于）、`GREATER`（大于）、`EQUAL`（等于）、`LESS_EQUAL`（小于等于）、`GREATER_EQUAL`（大于等于）\n\n>**字符串比较**：**同上**，但是需要加上`STR`**前缀**\n{%right%}\nCMake还提供了其他判断语句，如if(EXISTS path-to-file-or-directory)则是判断文件或者目录是否存在\n{%endright%}\n\n#### 2.2循环语句\n**①while循环**\n>当`condition`为`False`时结束\n```\nwhile(<condition>)\n    <commands>\nendwhile()\n```\n\n**②`foreach`循环1**\n>`foreach(<loop_var> RANGE <stop>)`\n`loop_var`：**存储每次循环取出的值**\n`RANGE`：关键字，表示**要遍历范围**\n`stop`：这是一个正整数，表示**范围的结束值**，即遍历范围为`[0,stop]`\n```\ncmake_minimum_required(VERSION 3.2)\nproject(test)\n# 循环\nforeach(item RANGE 10)\n    message(STATUS \"当前遍历的值为: ${item}\" )\nendforeach()\n```\n\n**③`foreach`循环2**\n>`foreach(<loop_var> RANGE <start> <stop> [<step>])`\n`start`：表示范围的**起始值**\n`stop`：表示范围的**结束值**\n`step`：循环的**步长**，**默认为1**\n```\ncmake_minimum_required(VERSION 3.2)\nproject(test)\n\nforeach(item RANGE 10 30 2)\n    message(STATUS \"当前遍历的值为: ${item}\" )\nendforeach()\n```\n**④`foreach`循环3**\n>`foreach(<loop_var> IN [LISTS [<lists>]] [ITEMS [<items>]])`\n`IN`：关键字，对应`RANGE`\n`LISTS`：关键字，对应的是列表\n`ITEMS`：关键字，对应的也是列表，但是需要通过`${}`**将列表中的值取出**\n{%list%}\nLISTS关键字和ITEMS至少要存在一个，也可以同时存在，每个后面可以接多个对象\n{%endlist%}\n```\ncmake_minimum_required(VERSION 3.2)\nproject(test)\n# 创建 list\nset(WORD a b c d)\nset(NAME ace sabo luffy)\n# 遍历 list\nforeach(item IN LISTS WORD ITEMS ${NAME})\n    message(STATUS \"当前遍历的值为: ${item}\" )\nendforeach()\n```\n\n**⑤`foreach`循环4**\n>`foreach(<loop_var>... IN ZIP_LISTS <lists>)`\n`ZIP_LISTS`：关键字\n\n>**`<loop_var>...`**\n如果指定了**多个变量名**，则**变量的数量**应该和**列表数**相等\n若**只给出一个**`loop_var`，则他会**自动创建出对应数量**的`loop_var_0`到`loop_var_N`\n{%list%}\n该循环同时对所有列表进行循环，每次循环各个列表对应的值存储在这些变量中\n{%endlist%}\n\n```\ncmake_minimum_required(VERSION 3.17)\nproject(test)\n# 通过list给列表添加数据\nlist(APPEND WORD hello world \"hello world\")\nlist(APPEND NAME ace sabo luffy zoro sanji)\n# 遍历列表\nforeach(item1 item2 IN ZIP_LISTS WORD NAME)\n    message(STATUS \"当前遍历的值为: item1 = ${item1}, item2=${item2}\" )\nendforeach()\n\nmessage(\"=============================\")\n# 遍历列表\nforeach(item  IN ZIP_LISTS WORD NAME)\n    message(STATUS \"当前遍历的值为: item1 = ${item_0}, item2=${item_1}\" )\nendforeach()\n\n#[[输出结果如下\n-- 当前遍历的值为: item1 = hello, item2=ace\n-- 当前遍历的值为: item1 = world, item2=sabo\n-- 当前遍历的值为: item1 = hello world, item2=luffy\n-- 当前遍历的值为: item1 = , item2=zoro\n-- 当前遍历的值为: item1 = , item2=sanji\n=============================\n-- 当前遍历的值为: item1 = hello, item2=ace\n-- 当前遍历的值为: item1 = world, item2=sabo\n-- 当前遍历的值为: item1 = hello world, item2=luffy\n-- 当前遍历的值为: item1 = , item2=zoro\n-- 当前遍历的值为: item1 = , item2=sanji\n]]\n```\n\n","source":"_posts/Cmake应用（二）.md","raw":"---\ntitle: Cmake应用（二）\nseo_title: seo名称\ntoc: true\nindent: true\ntop: false\ncomments: true\narchive: true\ncover: false\nmathjax: false\npin: false\ntop_meta: false\nbottom_meta: false\nsidebar:\n  - toc\ntag:\n  - 代码工具\n  - Cmake\ncategories: 软技能\nkeywords: 文章关键词\nupdated: ''\nimg: /medias/featureimages/23.webp\ndate:\nsummary: Cmake代码构建工具\n---\n# Cmake\n## Cmake应用（二）\n### 1.嵌套Cmake\n{%right%}\n当项目有多个源代码目录时，给每个源码目录都添加一个CMakeLists.txt文件，便于管理\n{%endright%}\n#### 1.1引言\n>进行**模块化测试**，将`calc`和`sort`中的源代码打包成**库**，并分别给**对应测试文件**调用\n```\n$ tree\n.\n├── build\n├── calc              #计算库\n│   ├── add.cpp\n│   ├── CMakeLists.txt\n│   ├── div.cpp\n│   ├── mult.cpp\n│   └── sub.cpp\n├── CMakeLists.txt\n├── include           #头文件目录\n│   ├── calc.h\n│   └── sort.h\n├── sort              #排序库\n│   ├── CMakeLists.txt\n│   ├── insert.cpp\n│   └── select.cpp\n├── test1             #测试计算库\n│   ├── calc.cpp\n│   └── CMakeLists.txt\n└── test2             #测试排序\n    ├── CMakeLists.txt\n    └── sort.cpp\n```\n#### 1.2建立联系\n**①节点关系**\n>`CMakeLists`文件关系是**树状结构关系**（因为**文件/目录之间的关系**也是树状结构关系）\n{%list%}\n父节点定义的变量也可以在子节点中使用，子节点定义的变量只能在当前节点使用\n{%endlist%}\n\n**②`add_subdirectory`**\n>**建立父子节点关系**\n**格式**：`add_subdirectory(source_dir [binary_dir] [EXCLUDE_FROM_ALL])`\n\n>`source_dir`：指定**子目录**\n`binary_dir`：指定了**子目录输出文件的路径**，一般**不需要指定**\n`EXCLUDE_FROM_ALL`：当指定该参数时，父目录的`CMakeLists.txt`不会构建子目录的目标文件，必须在**子目录下显式去构建**，除非**父目录的目标文件依赖于子目录的目标文件**\n\n#### 1.3CmakeLists文件\n**①根目录**\n{%list%}\n根目录主要的功能是定义全局变量和添加子目录\n{%endlist%}\n```\ncmake_minimum_required(VERSION 3.0)\nproject(test)\n# 定义变量\n# 静态库生成的路径\nset(LIB_PATH ${CMAKE_CURRENT_SOURCE_DIR}/lib)\n# 测试程序生成的路径\nset(EXEC_PATH ${CMAKE_CURRENT_SOURCE_DIR}/bin)\n# 头文件目录\nset(HEAD_PATH ${CMAKE_CURRENT_SOURCE_DIR}/include)\n# 静态库的名字\nset(CALC_LIB calc)\nset(SORT_LIB sort)\n# 可执行程序的名字\nset(APP_NAME_1 test1)\nset(APP_NAME_2 test2)\n# 添加子目录\nadd_subdirectory(calc)\nadd_subdirectory(sort)\nadd_subdirectory(test1)\nadd_subdirectory(test2)\n```\n**②calc目录**\n```\ncmake_minimum_required(VERSION 3.0)\nproject(CALCLIB)\n#搜索当前目录（calc目录）下的所有源文件\naux_source_directory(./ SRC)\n#包含头文件路径，HEAD_PATH是在根节点文件中定义的\ninclude_directories(${HEAD_PATH})\n#设置库的生成的路径，LIB_PATH是在根节点文件中定义的\nset(LIBRARY_OUTPUT_PATH ${LIB_PATH})\n#生成静态库，静态库名字CALC_LIB是在根节点文件中定义的\nadd_library(${CALC_LIB} STATIC ${SRC})\n```\n\n**③sort目录**\n```\ncmake_minimum_required(VERSION 3.0)\nproject(SORTLIB)\naux_source_directory(./ SRC)\ninclude_directories(${HEAD_PATH})\nset(LIBRARY_OUTPUT_PATH ${LIB_PATH})\n#生成动态库，动态库名字SORT_LIB是在根节点文件中定义的\nadd_library(${SORT_LIB} SHARED ${SRC})\n```\n\n**④test1目录**\n{%list%}\n当程序某个模块中生成库且在对应CmakeLists文件中指定了库的输出路径，其他模块不需要指定其路径\n{%endlist%}\n```\ncmake_minimum_required(VERSION 3.0)\nproject(CALCTEST)\naux_source_directory(./ SRC)\n#指定头文件路径，HEAD_PATH变量是在根节点文件中定义的\ninclude_directories(${HEAD_PATH})\nlink_directories(${LIB_PATH})\n#指定可执行程序要链接的静态库，CALC_LIB变量是在根节点文件中定义的\nlink_libraries(${CALC_LIB})\n#指定可执行程序生成的路径，EXEC_PATH变量是在根节点文件中定义的\nset(EXECUTABLE_OUTPUT_PATH ${EXEC_PATH})\n#生成可执行程序，APP_NAME_1变量是在根节点文件中定义的\nadd_executable(${APP_NAME_1} ${SRC})\n```\n\n**⑤test2目录**\n```\ncmake_minimum_required(VERSION 3.0)\nproject(SORTTEST)\naux_source_directory(./ SRC)\ninclude_directories(${HEAD_PATH})\nset(EXECUTABLE_OUTPUT_PATH ${EXEC_PATH})\nlink_directories(${LIB_PATH})\nadd_executable(${APP_NAME_2} ${SRC})\ntarget_link_libraries(${APP_NAME_2} ${SORT_LIB})\n```\n\n**⑥结果**\n>进入到**根节点目录**的`build`**目录**中，执行`cmake`和`make`命令，在项目**根目录**的`lib`**目录**中生成了**静态库**`libcalc.a`和**动态库**`libsort.so`，并在项目**根目录**的`bin`**目录**生成了**可执行程序**`test1`和`test2`\n\n\n### 2.流程控制\n#### 2.1条件判断\n**①`if`语句**\n```\nif(<condition>)\n  <commands>\nelseif(<condition>)  #可选块，可重复\n  <commands>\nelse()               #可选块\n  <commands>\nendif()\n```\n\n**②`condition`**\n>`condition`的值为`1`, `ON`, `YES`, `TRUE`, `Y,` **非零值**，**非空字符串**时，条件判断返回`True`\n`condition`的值为`0`，`OFF`，`NO`，`FALSE`，`N`，`IGNORE`，`NOTFOUND`，**空字符串**时，条件判断返回`False`\n\n\n**③相关操作符**\n>**逻辑操作**：`NOT`（非）、`AND`（与）、`OR`（或）\n\n>**数值比较**：`LESS`（小于）、`GREATER`（大于）、`EQUAL`（等于）、`LESS_EQUAL`（小于等于）、`GREATER_EQUAL`（大于等于）\n\n>**字符串比较**：**同上**，但是需要加上`STR`**前缀**\n{%right%}\nCMake还提供了其他判断语句，如if(EXISTS path-to-file-or-directory)则是判断文件或者目录是否存在\n{%endright%}\n\n#### 2.2循环语句\n**①while循环**\n>当`condition`为`False`时结束\n```\nwhile(<condition>)\n    <commands>\nendwhile()\n```\n\n**②`foreach`循环1**\n>`foreach(<loop_var> RANGE <stop>)`\n`loop_var`：**存储每次循环取出的值**\n`RANGE`：关键字，表示**要遍历范围**\n`stop`：这是一个正整数，表示**范围的结束值**，即遍历范围为`[0,stop]`\n```\ncmake_minimum_required(VERSION 3.2)\nproject(test)\n# 循环\nforeach(item RANGE 10)\n    message(STATUS \"当前遍历的值为: ${item}\" )\nendforeach()\n```\n\n**③`foreach`循环2**\n>`foreach(<loop_var> RANGE <start> <stop> [<step>])`\n`start`：表示范围的**起始值**\n`stop`：表示范围的**结束值**\n`step`：循环的**步长**，**默认为1**\n```\ncmake_minimum_required(VERSION 3.2)\nproject(test)\n\nforeach(item RANGE 10 30 2)\n    message(STATUS \"当前遍历的值为: ${item}\" )\nendforeach()\n```\n**④`foreach`循环3**\n>`foreach(<loop_var> IN [LISTS [<lists>]] [ITEMS [<items>]])`\n`IN`：关键字，对应`RANGE`\n`LISTS`：关键字，对应的是列表\n`ITEMS`：关键字，对应的也是列表，但是需要通过`${}`**将列表中的值取出**\n{%list%}\nLISTS关键字和ITEMS至少要存在一个，也可以同时存在，每个后面可以接多个对象\n{%endlist%}\n```\ncmake_minimum_required(VERSION 3.2)\nproject(test)\n# 创建 list\nset(WORD a b c d)\nset(NAME ace sabo luffy)\n# 遍历 list\nforeach(item IN LISTS WORD ITEMS ${NAME})\n    message(STATUS \"当前遍历的值为: ${item}\" )\nendforeach()\n```\n\n**⑤`foreach`循环4**\n>`foreach(<loop_var>... IN ZIP_LISTS <lists>)`\n`ZIP_LISTS`：关键字\n\n>**`<loop_var>...`**\n如果指定了**多个变量名**，则**变量的数量**应该和**列表数**相等\n若**只给出一个**`loop_var`，则他会**自动创建出对应数量**的`loop_var_0`到`loop_var_N`\n{%list%}\n该循环同时对所有列表进行循环，每次循环各个列表对应的值存储在这些变量中\n{%endlist%}\n\n```\ncmake_minimum_required(VERSION 3.17)\nproject(test)\n# 通过list给列表添加数据\nlist(APPEND WORD hello world \"hello world\")\nlist(APPEND NAME ace sabo luffy zoro sanji)\n# 遍历列表\nforeach(item1 item2 IN ZIP_LISTS WORD NAME)\n    message(STATUS \"当前遍历的值为: item1 = ${item1}, item2=${item2}\" )\nendforeach()\n\nmessage(\"=============================\")\n# 遍历列表\nforeach(item  IN ZIP_LISTS WORD NAME)\n    message(STATUS \"当前遍历的值为: item1 = ${item_0}, item2=${item_1}\" )\nendforeach()\n\n#[[输出结果如下\n-- 当前遍历的值为: item1 = hello, item2=ace\n-- 当前遍历的值为: item1 = world, item2=sabo\n-- 当前遍历的值为: item1 = hello world, item2=luffy\n-- 当前遍历的值为: item1 = , item2=zoro\n-- 当前遍历的值为: item1 = , item2=sanji\n=============================\n-- 当前遍历的值为: item1 = hello, item2=ace\n-- 当前遍历的值为: item1 = world, item2=sabo\n-- 当前遍历的值为: item1 = hello world, item2=luffy\n-- 当前遍历的值为: item1 = , item2=zoro\n-- 当前遍历的值为: item1 = , item2=sanji\n]]\n```\n\n","slug":"Cmake应用（二）","published":1,"_id":"clnvkqwyz0001v0vd23z07ifj","layout":"post","photos":[],"link":"","content":"<h1 id=\"Cmake\"><a href=\"#Cmake\" class=\"headerlink\" title=\"Cmake\"></a>Cmake</h1><h2 id=\"Cmake应用（二）\"><a href=\"#Cmake应用（二）\" class=\"headerlink\" title=\"Cmake应用（二）\"></a>Cmake应用（二）</h2><h3 id=\"1-嵌套Cmake\"><a href=\"#1-嵌套Cmake\" class=\"headerlink\" title=\"1.嵌套Cmake\"></a>1.嵌套Cmake</h3><div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 当项目有多个源代码目录时，给每个源码目录都添加一个CMakeLists.txt文件，便于管理</div>\n<h4 id=\"1-1引言\"><a href=\"#1-1引言\" class=\"headerlink\" title=\"1.1引言\"></a>1.1引言</h4><blockquote>\n<p>进行<strong>模块化测试</strong>，将<code>calc</code>和<code>sort</code>中的源代码打包成<strong>库</strong>，并分别给<strong>对应测试文件</strong>调用</p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">$ tree\n.\n├── build\n├── calc              #计算库\n│&nbsp;&nbsp; ├── add.cpp\n│&nbsp;&nbsp; ├── CMakeLists.txt\n│&nbsp;&nbsp; ├── div.cpp\n│&nbsp;&nbsp; ├── mult.cpp\n│&nbsp;&nbsp; └── sub.cpp\n├── CMakeLists.txt\n├── include           #头文件目录\n│&nbsp;&nbsp; ├── calc.h\n│&nbsp;&nbsp; └── sort.h\n├── sort              #排序库\n│&nbsp;&nbsp; ├── CMakeLists.txt\n│&nbsp;&nbsp; ├── insert.cpp\n│&nbsp;&nbsp; └── select.cpp\n├── test1             #测试计算库\n│&nbsp;&nbsp; ├── calc.cpp\n│&nbsp;&nbsp; └── CMakeLists.txt\n└── test2             #测试排序\n    ├── CMakeLists.txt\n    └── sort.cpp<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"1-2建立联系\"><a href=\"#1-2建立联系\" class=\"headerlink\" title=\"1.2建立联系\"></a>1.2建立联系</h4><p><strong>①节点关系</strong></p>\n<blockquote>\n<p><code>CMakeLists</code>文件关系是<strong>树状结构关系</strong>（因为<strong>文件/目录之间的关系</strong>也是树状结构关系）</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 父节点定义的变量也可以在子节点中使用，子节点定义的变量只能在当前节点使用</div>\n\n<p><strong>②<code>add_subdirectory</code></strong></p>\n<blockquote>\n<p><strong>建立父子节点关系</strong><br><strong>格式</strong>：<code>add_subdirectory(source_dir [binary_dir] [EXCLUDE_FROM_ALL])</code></p>\n</blockquote>\n<blockquote>\n<p><code>source_dir</code>：指定<strong>子目录</strong><br><code>binary_dir</code>：指定了<strong>子目录输出文件的路径</strong>，一般<strong>不需要指定</strong><br><code>EXCLUDE_FROM_ALL</code>：当指定该参数时，父目录的<code>CMakeLists.txt</code>不会构建子目录的目标文件，必须在<strong>子目录下显式去构建</strong>，除非<strong>父目录的目标文件依赖于子目录的目标文件</strong></p>\n</blockquote>\n<h4 id=\"1-3CmakeLists文件\"><a href=\"#1-3CmakeLists文件\" class=\"headerlink\" title=\"1.3CmakeLists文件\"></a>1.3CmakeLists文件</h4><p><strong>①根目录</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 根目录主要的功能是定义全局变量和添加子目录</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">cmake_minimum_required(VERSION 3.0)\nproject(test)\n# 定义变量\n# 静态库生成的路径\nset(LIB_PATH ${CMAKE_CURRENT_SOURCE_DIR}/lib)\n# 测试程序生成的路径\nset(EXEC_PATH ${CMAKE_CURRENT_SOURCE_DIR}/bin)\n# 头文件目录\nset(HEAD_PATH ${CMAKE_CURRENT_SOURCE_DIR}/include)\n# 静态库的名字\nset(CALC_LIB calc)\nset(SORT_LIB sort)\n# 可执行程序的名字\nset(APP_NAME_1 test1)\nset(APP_NAME_2 test2)\n# 添加子目录\nadd_subdirectory(calc)\nadd_subdirectory(sort)\nadd_subdirectory(test1)\nadd_subdirectory(test2)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>②calc目录</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">cmake_minimum_required(VERSION 3.0)\nproject(CALCLIB)\n#搜索当前目录（calc目录）下的所有源文件\naux_source_directory(./ SRC)\n#包含头文件路径，HEAD_PATH是在根节点文件中定义的\ninclude_directories(${HEAD_PATH})\n#设置库的生成的路径，LIB_PATH是在根节点文件中定义的\nset(LIBRARY_OUTPUT_PATH ${LIB_PATH})\n#生成静态库，静态库名字CALC_LIB是在根节点文件中定义的\nadd_library(${CALC_LIB} STATIC ${SRC})<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>③sort目录</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">cmake_minimum_required(VERSION 3.0)\nproject(SORTLIB)\naux_source_directory(./ SRC)\ninclude_directories(${HEAD_PATH})\nset(LIBRARY_OUTPUT_PATH ${LIB_PATH})\n#生成动态库，动态库名字SORT_LIB是在根节点文件中定义的\nadd_library(${SORT_LIB} SHARED ${SRC})<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>④test1目录</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 当程序某个模块中生成库且在对应CmakeLists文件中指定了库的输出路径，其他模块不需要指定其路径</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">cmake_minimum_required(VERSION 3.0)\nproject(CALCTEST)\naux_source_directory(./ SRC)\n#指定头文件路径，HEAD_PATH变量是在根节点文件中定义的\ninclude_directories(${HEAD_PATH})\nlink_directories(${LIB_PATH})\n#指定可执行程序要链接的静态库，CALC_LIB变量是在根节点文件中定义的\nlink_libraries(${CALC_LIB})\n#指定可执行程序生成的路径，EXEC_PATH变量是在根节点文件中定义的\nset(EXECUTABLE_OUTPUT_PATH ${EXEC_PATH})\n#生成可执行程序，APP_NAME_1变量是在根节点文件中定义的\nadd_executable(${APP_NAME_1} ${SRC})<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>⑤test2目录</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">cmake_minimum_required(VERSION 3.0)\nproject(SORTTEST)\naux_source_directory(./ SRC)\ninclude_directories(${HEAD_PATH})\nset(EXECUTABLE_OUTPUT_PATH ${EXEC_PATH})\nlink_directories(${LIB_PATH})\nadd_executable(${APP_NAME_2} ${SRC})\ntarget_link_libraries(${APP_NAME_2} ${SORT_LIB})<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>⑥结果</strong></p>\n<blockquote>\n<p>进入到<strong>根节点目录</strong>的<code>build</code><strong>目录</strong>中，执行<code>cmake</code>和<code>make</code>命令，在项目<strong>根目录</strong>的<code>lib</code><strong>目录</strong>中生成了<strong>静态库</strong><code>libcalc.a</code>和<strong>动态库</strong><code>libsort.so</code>，并在项目<strong>根目录</strong>的<code>bin</code><strong>目录</strong>生成了<strong>可执行程序</strong><code>test1</code>和<code>test2</code></p>\n</blockquote>\n<h3 id=\"2-流程控制\"><a href=\"#2-流程控制\" class=\"headerlink\" title=\"2.流程控制\"></a>2.流程控制</h3><h4 id=\"2-1条件判断\"><a href=\"#2-1条件判断\" class=\"headerlink\" title=\"2.1条件判断\"></a>2.1条件判断</h4><p><strong>①<code>if</code>语句</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">if(&lt;condition&gt;)\n  &lt;commands&gt;\nelseif(&lt;condition&gt;)  #可选块，可重复\n  &lt;commands&gt;\nelse()               #可选块\n  &lt;commands&gt;\nendif()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>②<code>condition</code></strong></p>\n<blockquote>\n<p><code>condition</code>的值为<code>1</code>, <code>ON</code>, <code>YES</code>, <code>TRUE</code>, <code>Y,</code> <strong>非零值</strong>，<strong>非空字符串</strong>时，条件判断返回<code>True</code><br><code>condition</code>的值为<code>0</code>，<code>OFF</code>，<code>NO</code>，<code>FALSE</code>，<code>N</code>，<code>IGNORE</code>，<code>NOTFOUND</code>，<strong>空字符串</strong>时，条件判断返回<code>False</code></p>\n</blockquote>\n<p><strong>③相关操作符</strong></p>\n<blockquote>\n<p><strong>逻辑操作</strong>：<code>NOT</code>（非）、<code>AND</code>（与）、<code>OR</code>（或）</p>\n</blockquote>\n<blockquote>\n<p><strong>数值比较</strong>：<code>LESS</code>（小于）、<code>GREATER</code>（大于）、<code>EQUAL</code>（等于）、<code>LESS_EQUAL</code>（小于等于）、<code>GREATER_EQUAL</code>（大于等于）</p>\n</blockquote>\n<blockquote>\n<p><strong>字符串比较</strong>：<strong>同上</strong>，但是需要加上<code>STR</code><strong>前缀</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> CMake还提供了其他判断语句，如if(EXISTS path-to-file-or-directory)则是判断文件或者目录是否存在</div>\n\n<h4 id=\"2-2循环语句\"><a href=\"#2-2循环语句\" class=\"headerlink\" title=\"2.2循环语句\"></a>2.2循环语句</h4><p><strong>①while循环</strong></p>\n<blockquote>\n<p>当<code>condition</code>为<code>False</code>时结束</p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">while(&lt;condition&gt;)\n    &lt;commands&gt;\nendwhile()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>②<code>foreach</code>循环1</strong></p>\n<blockquote>\n<p><code>foreach(&lt;loop_var&gt; RANGE &lt;stop&gt;)</code><br><code>loop_var</code>：<strong>存储每次循环取出的值</strong><br><code>RANGE</code>：关键字，表示<strong>要遍历范围</strong><br><code>stop</code>：这是一个正整数，表示<strong>范围的结束值</strong>，即遍历范围为<code>[0,stop]</code></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">cmake_minimum_required(VERSION 3.2)\nproject(test)\n# 循环\nforeach(item RANGE 10)\n    message(STATUS \"当前遍历的值为: ${item}\" )\nendforeach()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>③<code>foreach</code>循环2</strong></p>\n<blockquote>\n<p><code>foreach(&lt;loop_var&gt; RANGE &lt;start&gt; &lt;stop&gt; [&lt;step&gt;])</code><br><code>start</code>：表示范围的<strong>起始值</strong><br><code>stop</code>：表示范围的<strong>结束值</strong><br><code>step</code>：循环的<strong>步长</strong>，<strong>默认为1</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">cmake_minimum_required(VERSION 3.2)\nproject(test)\n\nforeach(item RANGE 10 30 2)\n    message(STATUS \"当前遍历的值为: ${item}\" )\nendforeach()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>④<code>foreach</code>循环3</strong></p>\n<blockquote>\n<p><code>foreach(&lt;loop_var&gt; IN [LISTS [&lt;lists&gt;]] [ITEMS [&lt;items&gt;]])</code><br><code>IN</code>：关键字，对应<code>RANGE</code><br><code>LISTS</code>：关键字，对应的是列表<br><code>ITEMS</code>：关键字，对应的也是列表，但是需要通过<code>${}</code><strong>将列表中的值取出</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> LISTS关键字和ITEMS至少要存在一个，也可以同时存在，每个后面可以接多个对象</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">cmake_minimum_required(VERSION 3.2)\nproject(test)\n# 创建 list\nset(WORD a b c d)\nset(NAME ace sabo luffy)\n# 遍历 list\nforeach(item IN LISTS WORD ITEMS ${NAME})\n    message(STATUS \"当前遍历的值为: ${item}\" )\nendforeach()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>⑤<code>foreach</code>循环4</strong></p>\n<blockquote>\n<p><code>foreach(&lt;loop_var&gt;... IN ZIP_LISTS &lt;lists&gt;)</code><br><code>ZIP_LISTS</code>：关键字</p>\n</blockquote>\n<blockquote>\n<p><strong><code>&lt;loop_var&gt;...</code></strong><br>如果指定了<strong>多个变量名</strong>，则<strong>变量的数量</strong>应该和<strong>列表数</strong>相等<br>若<strong>只给出一个</strong><code>loop_var</code>，则他会<strong>自动创建出对应数量</strong>的<code>loop_var_0</code>到<code>loop_var_N</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 该循环同时对所有列表进行循环，每次循环各个列表对应的值存储在这些变量中</div>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">cmake_minimum_required(VERSION 3.17)\nproject(test)\n# 通过list给列表添加数据\nlist(APPEND WORD hello world \"hello world\")\nlist(APPEND NAME ace sabo luffy zoro sanji)\n# 遍历列表\nforeach(item1 item2 IN ZIP_LISTS WORD NAME)\n    message(STATUS \"当前遍历的值为: item1 = ${item1}, item2=${item2}\" )\nendforeach()\n\nmessage(\"=============================\")\n# 遍历列表\nforeach(item  IN ZIP_LISTS WORD NAME)\n    message(STATUS \"当前遍历的值为: item1 = ${item_0}, item2=${item_1}\" )\nendforeach()\n\n#[[输出结果如下\n-- 当前遍历的值为: item1 = hello, item2=ace\n-- 当前遍历的值为: item1 = world, item2=sabo\n-- 当前遍历的值为: item1 = hello world, item2=luffy\n-- 当前遍历的值为: item1 = , item2=zoro\n-- 当前遍历的值为: item1 = , item2=sanji\n=============================\n-- 当前遍历的值为: item1 = hello, item2=ace\n-- 当前遍历的值为: item1 = world, item2=sabo\n-- 当前遍历的值为: item1 = hello world, item2=luffy\n-- 当前遍历的值为: item1 = , item2=zoro\n-- 当前遍历的值为: item1 = , item2=sanji\n]]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"Cmake\"><a href=\"#Cmake\" class=\"headerlink\" title=\"Cmake\"></a>Cmake</h1><h2 id=\"Cmake应用（二）\"><a href=\"#Cmake应用（二）\" class=\"headerlink\" title=\"Cmake应用（二）\"></a>Cmake应用（二）</h2><h3 id=\"1-嵌套Cmake\"><a href=\"#1-嵌套Cmake\" class=\"headerlink\" title=\"1.嵌套Cmake\"></a>1.嵌套Cmake</h3><div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 当项目有多个源代码目录时，给每个源码目录都添加一个CMakeLists.txt文件，便于管理</div>\n<h4 id=\"1-1引言\"><a href=\"#1-1引言\" class=\"headerlink\" title=\"1.1引言\"></a>1.1引言</h4><blockquote>\n<p>进行<strong>模块化测试</strong>，将<code>calc</code>和<code>sort</code>中的源代码打包成<strong>库</strong>，并分别给<strong>对应测试文件</strong>调用</p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">$ tree\n.\n├── build\n├── calc              #计算库\n│   ├── add.cpp\n│   ├── CMakeLists.txt\n│   ├── div.cpp\n│   ├── mult.cpp\n│   └── sub.cpp\n├── CMakeLists.txt\n├── include           #头文件目录\n│   ├── calc.h\n│   └── sort.h\n├── sort              #排序库\n│   ├── CMakeLists.txt\n│   ├── insert.cpp\n│   └── select.cpp\n├── test1             #测试计算库\n│   ├── calc.cpp\n│   └── CMakeLists.txt\n└── test2             #测试排序\n    ├── CMakeLists.txt\n    └── sort.cpp<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"1-2建立联系\"><a href=\"#1-2建立联系\" class=\"headerlink\" title=\"1.2建立联系\"></a>1.2建立联系</h4><p><strong>①节点关系</strong></p>\n<blockquote>\n<p><code>CMakeLists</code>文件关系是<strong>树状结构关系</strong>（因为<strong>文件&#x2F;目录之间的关系</strong>也是树状结构关系）</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 父节点定义的变量也可以在子节点中使用，子节点定义的变量只能在当前节点使用</div>\n\n<p><strong>②<code>add_subdirectory</code></strong></p>\n<blockquote>\n<p><strong>建立父子节点关系</strong><br><strong>格式</strong>：<code>add_subdirectory(source_dir [binary_dir] [EXCLUDE_FROM_ALL])</code></p>\n</blockquote>\n<blockquote>\n<p><code>source_dir</code>：指定<strong>子目录</strong><br><code>binary_dir</code>：指定了<strong>子目录输出文件的路径</strong>，一般<strong>不需要指定</strong><br><code>EXCLUDE_FROM_ALL</code>：当指定该参数时，父目录的<code>CMakeLists.txt</code>不会构建子目录的目标文件，必须在<strong>子目录下显式去构建</strong>，除非<strong>父目录的目标文件依赖于子目录的目标文件</strong></p>\n</blockquote>\n<h4 id=\"1-3CmakeLists文件\"><a href=\"#1-3CmakeLists文件\" class=\"headerlink\" title=\"1.3CmakeLists文件\"></a>1.3CmakeLists文件</h4><p><strong>①根目录</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 根目录主要的功能是定义全局变量和添加子目录</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">cmake_minimum_required(VERSION 3.0)\nproject(test)\n# 定义变量\n# 静态库生成的路径\nset(LIB_PATH $&#123;CMAKE_CURRENT_SOURCE_DIR&#125;&#x2F;lib)\n# 测试程序生成的路径\nset(EXEC_PATH $&#123;CMAKE_CURRENT_SOURCE_DIR&#125;&#x2F;bin)\n# 头文件目录\nset(HEAD_PATH $&#123;CMAKE_CURRENT_SOURCE_DIR&#125;&#x2F;include)\n# 静态库的名字\nset(CALC_LIB calc)\nset(SORT_LIB sort)\n# 可执行程序的名字\nset(APP_NAME_1 test1)\nset(APP_NAME_2 test2)\n# 添加子目录\nadd_subdirectory(calc)\nadd_subdirectory(sort)\nadd_subdirectory(test1)\nadd_subdirectory(test2)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>②calc目录</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">cmake_minimum_required(VERSION 3.0)\nproject(CALCLIB)\n#搜索当前目录（calc目录）下的所有源文件\naux_source_directory(.&#x2F; SRC)\n#包含头文件路径，HEAD_PATH是在根节点文件中定义的\ninclude_directories($&#123;HEAD_PATH&#125;)\n#设置库的生成的路径，LIB_PATH是在根节点文件中定义的\nset(LIBRARY_OUTPUT_PATH $&#123;LIB_PATH&#125;)\n#生成静态库，静态库名字CALC_LIB是在根节点文件中定义的\nadd_library($&#123;CALC_LIB&#125; STATIC $&#123;SRC&#125;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>③sort目录</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">cmake_minimum_required(VERSION 3.0)\nproject(SORTLIB)\naux_source_directory(.&#x2F; SRC)\ninclude_directories($&#123;HEAD_PATH&#125;)\nset(LIBRARY_OUTPUT_PATH $&#123;LIB_PATH&#125;)\n#生成动态库，动态库名字SORT_LIB是在根节点文件中定义的\nadd_library($&#123;SORT_LIB&#125; SHARED $&#123;SRC&#125;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>④test1目录</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 当程序某个模块中生成库且在对应CmakeLists文件中指定了库的输出路径，其他模块不需要指定其路径</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">cmake_minimum_required(VERSION 3.0)\nproject(CALCTEST)\naux_source_directory(.&#x2F; SRC)\n#指定头文件路径，HEAD_PATH变量是在根节点文件中定义的\ninclude_directories($&#123;HEAD_PATH&#125;)\nlink_directories($&#123;LIB_PATH&#125;)\n#指定可执行程序要链接的静态库，CALC_LIB变量是在根节点文件中定义的\nlink_libraries($&#123;CALC_LIB&#125;)\n#指定可执行程序生成的路径，EXEC_PATH变量是在根节点文件中定义的\nset(EXECUTABLE_OUTPUT_PATH $&#123;EXEC_PATH&#125;)\n#生成可执行程序，APP_NAME_1变量是在根节点文件中定义的\nadd_executable($&#123;APP_NAME_1&#125; $&#123;SRC&#125;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>⑤test2目录</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">cmake_minimum_required(VERSION 3.0)\nproject(SORTTEST)\naux_source_directory(.&#x2F; SRC)\ninclude_directories($&#123;HEAD_PATH&#125;)\nset(EXECUTABLE_OUTPUT_PATH $&#123;EXEC_PATH&#125;)\nlink_directories($&#123;LIB_PATH&#125;)\nadd_executable($&#123;APP_NAME_2&#125; $&#123;SRC&#125;)\ntarget_link_libraries($&#123;APP_NAME_2&#125; $&#123;SORT_LIB&#125;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>⑥结果</strong></p>\n<blockquote>\n<p>进入到<strong>根节点目录</strong>的<code>build</code><strong>目录</strong>中，执行<code>cmake</code>和<code>make</code>命令，在项目<strong>根目录</strong>的<code>lib</code><strong>目录</strong>中生成了<strong>静态库</strong><code>libcalc.a</code>和<strong>动态库</strong><code>libsort.so</code>，并在项目<strong>根目录</strong>的<code>bin</code><strong>目录</strong>生成了<strong>可执行程序</strong><code>test1</code>和<code>test2</code></p>\n</blockquote>\n<h3 id=\"2-流程控制\"><a href=\"#2-流程控制\" class=\"headerlink\" title=\"2.流程控制\"></a>2.流程控制</h3><h4 id=\"2-1条件判断\"><a href=\"#2-1条件判断\" class=\"headerlink\" title=\"2.1条件判断\"></a>2.1条件判断</h4><p><strong>①<code>if</code>语句</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">if(&lt;condition&gt;)\n  &lt;commands&gt;\nelseif(&lt;condition&gt;)  #可选块，可重复\n  &lt;commands&gt;\nelse()               #可选块\n  &lt;commands&gt;\nendif()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>②<code>condition</code></strong></p>\n<blockquote>\n<p><code>condition</code>的值为<code>1</code>, <code>ON</code>, <code>YES</code>, <code>TRUE</code>, <code>Y,</code> <strong>非零值</strong>，<strong>非空字符串</strong>时，条件判断返回<code>True</code><br><code>condition</code>的值为<code>0</code>，<code>OFF</code>，<code>NO</code>，<code>FALSE</code>，<code>N</code>，<code>IGNORE</code>，<code>NOTFOUND</code>，<strong>空字符串</strong>时，条件判断返回<code>False</code></p>\n</blockquote>\n<p><strong>③相关操作符</strong></p>\n<blockquote>\n<p><strong>逻辑操作</strong>：<code>NOT</code>（非）、<code>AND</code>（与）、<code>OR</code>（或）</p>\n</blockquote>\n<blockquote>\n<p><strong>数值比较</strong>：<code>LESS</code>（小于）、<code>GREATER</code>（大于）、<code>EQUAL</code>（等于）、<code>LESS_EQUAL</code>（小于等于）、<code>GREATER_EQUAL</code>（大于等于）</p>\n</blockquote>\n<blockquote>\n<p><strong>字符串比较</strong>：<strong>同上</strong>，但是需要加上<code>STR</code><strong>前缀</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> CMake还提供了其他判断语句，如if(EXISTS path-to-file-or-directory)则是判断文件或者目录是否存在</div>\n\n<h4 id=\"2-2循环语句\"><a href=\"#2-2循环语句\" class=\"headerlink\" title=\"2.2循环语句\"></a>2.2循环语句</h4><p><strong>①while循环</strong></p>\n<blockquote>\n<p>当<code>condition</code>为<code>False</code>时结束</p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">while(&lt;condition&gt;)\n    &lt;commands&gt;\nendwhile()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>②<code>foreach</code>循环1</strong></p>\n<blockquote>\n<p><code>foreach(&lt;loop_var&gt; RANGE &lt;stop&gt;)</code><br><code>loop_var</code>：<strong>存储每次循环取出的值</strong><br><code>RANGE</code>：关键字，表示<strong>要遍历范围</strong><br><code>stop</code>：这是一个正整数，表示<strong>范围的结束值</strong>，即遍历范围为<code>[0,stop]</code></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">cmake_minimum_required(VERSION 3.2)\nproject(test)\n# 循环\nforeach(item RANGE 10)\n    message(STATUS &quot;当前遍历的值为: $&#123;item&#125;&quot; )\nendforeach()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>③<code>foreach</code>循环2</strong></p>\n<blockquote>\n<p><code>foreach(&lt;loop_var&gt; RANGE &lt;start&gt; &lt;stop&gt; [&lt;step&gt;])</code><br><code>start</code>：表示范围的<strong>起始值</strong><br><code>stop</code>：表示范围的<strong>结束值</strong><br><code>step</code>：循环的<strong>步长</strong>，<strong>默认为1</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">cmake_minimum_required(VERSION 3.2)\nproject(test)\n\nforeach(item RANGE 10 30 2)\n    message(STATUS &quot;当前遍历的值为: $&#123;item&#125;&quot; )\nendforeach()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>④<code>foreach</code>循环3</strong></p>\n<blockquote>\n<p><code>foreach(&lt;loop_var&gt; IN [LISTS [&lt;lists&gt;]] [ITEMS [&lt;items&gt;]])</code><br><code>IN</code>：关键字，对应<code>RANGE</code><br><code>LISTS</code>：关键字，对应的是列表<br><code>ITEMS</code>：关键字，对应的也是列表，但是需要通过<code>$&#123;&#125;</code><strong>将列表中的值取出</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> LISTS关键字和ITEMS至少要存在一个，也可以同时存在，每个后面可以接多个对象</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">cmake_minimum_required(VERSION 3.2)\nproject(test)\n# 创建 list\nset(WORD a b c d)\nset(NAME ace sabo luffy)\n# 遍历 list\nforeach(item IN LISTS WORD ITEMS $&#123;NAME&#125;)\n    message(STATUS &quot;当前遍历的值为: $&#123;item&#125;&quot; )\nendforeach()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>⑤<code>foreach</code>循环4</strong></p>\n<blockquote>\n<p><code>foreach(&lt;loop_var&gt;... IN ZIP_LISTS &lt;lists&gt;)</code><br><code>ZIP_LISTS</code>：关键字</p>\n</blockquote>\n<blockquote>\n<p><strong><code>&lt;loop_var&gt;...</code></strong><br>如果指定了<strong>多个变量名</strong>，则<strong>变量的数量</strong>应该和<strong>列表数</strong>相等<br>若<strong>只给出一个</strong><code>loop_var</code>，则他会<strong>自动创建出对应数量</strong>的<code>loop_var_0</code>到<code>loop_var_N</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 该循环同时对所有列表进行循环，每次循环各个列表对应的值存储在这些变量中</div>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">cmake_minimum_required(VERSION 3.17)\nproject(test)\n# 通过list给列表添加数据\nlist(APPEND WORD hello world &quot;hello world&quot;)\nlist(APPEND NAME ace sabo luffy zoro sanji)\n# 遍历列表\nforeach(item1 item2 IN ZIP_LISTS WORD NAME)\n    message(STATUS &quot;当前遍历的值为: item1 &#x3D; $&#123;item1&#125;, item2&#x3D;$&#123;item2&#125;&quot; )\nendforeach()\n\nmessage(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;)\n# 遍历列表\nforeach(item  IN ZIP_LISTS WORD NAME)\n    message(STATUS &quot;当前遍历的值为: item1 &#x3D; $&#123;item_0&#125;, item2&#x3D;$&#123;item_1&#125;&quot; )\nendforeach()\n\n#[[输出结果如下\n-- 当前遍历的值为: item1 &#x3D; hello, item2&#x3D;ace\n-- 当前遍历的值为: item1 &#x3D; world, item2&#x3D;sabo\n-- 当前遍历的值为: item1 &#x3D; hello world, item2&#x3D;luffy\n-- 当前遍历的值为: item1 &#x3D; , item2&#x3D;zoro\n-- 当前遍历的值为: item1 &#x3D; , item2&#x3D;sanji\n&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n-- 当前遍历的值为: item1 &#x3D; hello, item2&#x3D;ace\n-- 当前遍历的值为: item1 &#x3D; world, item2&#x3D;sabo\n-- 当前遍历的值为: item1 &#x3D; hello world, item2&#x3D;luffy\n-- 当前遍历的值为: item1 &#x3D; , item2&#x3D;zoro\n-- 当前遍历的值为: item1 &#x3D; , item2&#x3D;sanji\n]]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n"},{"title":"操作系统（二）","seo_title":"seo名称","toc":true,"indent":true,"top":false,"comments":1,"archive":true,"cover":false,"mathjax":false,"pin":false,"top_meta":false,"bottom_meta":false,"sidebar":["toc"],"keywords":"文章关键词","updated":"2023-11-07T14:10:58.014Z","img":"/medias/featureimages/2.webp","date":"2023-11-07T14:10:58.014Z","summary":"操作系统概述","_content":"# 操作系统（二）\n## 操作系统概述\n### 1.进程同步\n#### 1.1信号量\n{%list%}\n进程之间需要合作，需要通过信号量来相互通信，从而合理推进进程\n{%endlist%}\n**①代码实现**\n{%list%}\n信号量是内核中的全局变量\n{%endlist%}\n```\nstruct sqmaphore\n{\n  int value; //记录资源个数\n  PCB *queue; //记录等待在该信号量上的进程\n}\n//进程通过函数p申请使用资源，如果资源不足，则沉睡\np(sqmaphore s)\n{\n  s.value--;\n  if(s.value < 0)\n  {\n    sleep(s.queue);\n  }\n}\n//进程通过v生产资源，如果资源不足，则唤醒\nv(sqmaphore s)\n{\n  s.value++;\n  if(s.value <= 0)\n  {\n    wake(s.queue);\n  }\n}\n```\n**②实例**\n>有两个**进程**，分别为**生产者**和**消费者**，**生产者**向缓存区**写入字符**，**消费者**从缓存区**读出字符**\n{%list%}\n不同的进程，对同一个信号量的使用是不相同的，对于生产者，只有缓存区有空位才能工作，对于消费者只有缓存区有数据才能工作\n{%endlist%}\n{%right%}\n其中mutex为互斥信号量，防止生产者和消费者同时对缓存区进行操作\n{%endright%}\n```\n//定义缓存区\nint buffer [BUFFER_SIZE];\n\n//定义信号量\nsqmaphore full = 0;\nsqmaphore empty = BUFFER_SIZE;\nsqmaphore mutex = 1;\n```\n```\n//生产者程序\nProducer(*item,in)\n{\n  P(empty);\n  p(mutex); //互斥信号量\n\n  将item写入到in对应位置;\n\n  v(mutex);\n  v(full);  \n}\n```\n```\n//消费者程序\nConsumer(*item,out)\n{\n  P(full);\n  p(mutex); //互斥信号量\n\n  将out对应位置数据读出;\n\n  v(mutex);\n  v(empty);  \n}\n```\n#### 1.2临界区\n**①引言**\n{%warning%}\n信号量由多个进程共用，但是进程调度可能导致一个进程还没有修改好信号量，就切到另一个相关进程\n{%endwarning%}\n{%right%}\n当一个进程修改但没有修改完信号量时，禁止其他进程修改信号量，即将信号量操作放入临界区中\n{%endright%}\n```\nP1.register = empty;\nP1.register = P1.register - 1;\n//发生进程调度，切到P2进程\nP2.register = empty;\nP2.register = P2.register - 1;\n////发生进程调度，切到P1进程\nempty = P1.register\n```\n**②基本原则**\n>**互斥进入**：只有**一个进程**可以访问\n\n>**有空让进**：当临界区**空闲**时，尽快使得**一个进程**进入\n\n>**优先等待**：进程从**发出进入请求**到**允许进入**的时间不能过长\n```\n剩余区\n\n进入区\n临界区\n退出区\n\n剩余区\n```\n**③实现**\n>**面包店算法**：当进程**想进入临界区**，会获得一个**序号**，**序号最小**的可以**进入临界区**，**退出时**序号变为`0`\n{%list%}\n过于复杂，效率较低\n{%endlist%}\n>**阻止调度**：进入临界区时，**禁止中断（`cli()`）**，直到**退出临界区才允许中断（`sti()`）**\n{%list%}\n只适用于单CPU，因为cli和sti只能禁止当前CPU的中断，其他CPU可能还会进入临界区\n{%endlist%}\n>**硬件原子指令**：**临界区**和**互斥信号量**使用非常相似，只要将**互斥信号量的修改**变为**原子操作**即可，即**锁信号量**\n```\nboolean TestAndSet(boolean &x)\n{\n  boolean rv = x;\n  x = true;\n  return rv;\n}\n\n剩余区\nwhile(TestAndSet(&lock));\n临界区\nlock = false;\n剩余区\n```\n#### 1.3死锁\n**①概述**\n{%warning%}\n多个进程互相等待对方持有资源时，谁都无法执行，这就是死锁\n{%endwarning%}\n>如下，**生产者**使得`mutex`从`1`变为`0`，倘若其在`p(empty)`处**阻塞**，进程**切换到消费者**，**消费者直接阻塞**，无法清空缓冲区，从而导致**生产者和消费者一起一直阻塞**\n```\n//生产者程序\nProducer(*item,in)\n{\n  P(mutex);\n  p(empty); \n\n  将item写入到in对应位置;\n\n  v(mutex);\n  v(full);  \n}\n```\n```\n//消费者程序\nConsumer(*item,out)\n{\n  P(mutex);\n  p(full); \n\n  将out对应位置数据读出;\n\n  v(mutex);\n  v(empty);  \n}\n```\n**②出现条件**\n>**互斥使用**：资源只能被**一个进程占有**\n\n>**不可抢占**：只有对应进程**自动放弃对应资源**，才能被**其他进程**使用\n\n>**请求和保持**：进程需要**先占用一个资源**，然后根据这个资源**申请下一个资源**\n\n>**循环等待**：资源分配中出现**一个环路**\n\n**③处理方法**\n>**预防**：检测每个**资源请求**，如果**造成死锁就自动拒绝**\n{%list%}\n银行家算法：根据每个进程占有的资源、需要的资源和当前空余的资源决定进程执行序列\n{%endlist%}\n>**恢复**：**死锁出现时**，使一些进程**回滚**，**让出资源**\n\n>**忽略**：**忽略死锁**，在**运行一会就关机**的机器上常用\n\n### 2.内存管理\n#### 2.1重定位\n**①引言**\n>**逻辑地址**：**用户程序中直接给出**的地址，如`call 40`中的`40`\n**物理地址**：**存储单元的编号**，是**真实且唯一**的\n{%list%}\n需要通过逻辑地址找到对应的物理地址，即重定位\n{%endlist%}\n**②重定位时机**\n>**编译时**：程序只能放在**内存固定位置**\n\n>**载入时**:程序一旦**载入内存就不能动了**\n\n>**运行时**：**动态**记录**逻辑地址**和**物理地址**的关系\n{%right%}\n一般采用运行时重定位，因为进程在内存中位置是动态变化的，只有卫星等一烧录就不改变的采用编译时重定位\n{%endright%}\n#### 2.2内存分割\n**①程序分段**\n>程序由**多个段**组成，**每个段**有各自的**特点和用途**\n{%list%}\n程序段只读，数据段可写，栈段向下增长等\n{%endlist%}\n**②内存分区**\n>将程序**各个段**放入**内存分区**中，**分区大小根据段大小调整**\n{%list%}\n程序内的逻辑地址由段号和段内偏移组成，每个段号和某块内存区域相对应（记录在进程的LDT表中）\n{%endlist%}\n{%warning%}\n因为不可能每次一个程序段的大小刚好和空闲区域大小相当，内存分区会产生内存碎片，导致内存使用率低\n{%endwarning%}\n>不能**整理内存**将**内存碎片合并**，因为**得不偿失**\n\n![内存分区](/image/OS_2.png)\n**③内存分页**\n>将**程序**分为多个**固定大小的部分**，并将**内存**分为多个**固定大小的页**\n{%list%}\n每个进程也有一个固定的页表，其中记录了两者的对应关系，即用页地址取代段地址\n{%endlist%}\n{%right%}\n内存分页能减少内存的浪费，顶多浪费1页\n{%endright%}\n{%warning%}\n为了减少内存的浪费，页的大小尽量得小，但是会造成页表过大\n{%endwarning%}\n>**页表**需要**连续记录整个内存**，这样**便于查找（O(1)）**，**不连续记录**则需要使用**查找算法**，得不偿失\n\n**④多级页表和快表**\n>**多级页表**：类似于**多级目录**\n{%right%}\n多级页表可以只连续记录使用了那段内存空间，不用记录整个内存空间，可以有效减少页表大小\n{%endright%}\n{%warning%}\n但是多级页表增加了访问的次数，速度会慢一些\n{%endwarning%}\n>**快表（`TLB`）**：一个**寄存器**，存放**经常使用的页**，可以有效**减少访问时间**\n{%right%}\n快表可以通过硬件设置，直接找到对应的页，速度非常快，且由于程序内存访问具有局部性，TLB命中率高\n{%endright%}\n![多级页表](/image/OS_3.png)\n**⑤段页结合**\n{%list%}\n程序员希望使用段，物理内存希望使用页，为了同时满足上层和硬件，将段页结合使用\n{%endlist%}\n>如`call 300`，`300`为**逻辑地址**，根据**LDT表**找到对应**虚拟地址**`00045300`，再根据**页表**找到对应**物理地址**`0007300`\n\n![段页结合](/image/OS_4.png)\n\n#### 2.3内存交换\n{%right%}\n换入换出可以实现大内存，假设虚拟内存有4G，但是实际物理内存只有1G，将访问的部分映射到物理内存即可\n{%endright%}\n**①内存换入**\n>当**MMU**无法根据**用户请求的虚拟地址**找到对应**物理地址**，产生**缺页中断**，调用对应**中断处理程序**，申请**空闲页**，将**磁盘数据读入**，做好**映射关系**，随后**继续执行**\n\n**②内存换出**\n>选择**一页**换出到**磁盘**\n{%list%}\n内存换出类似于进程调度，但是内存换出的频率更高，颗粒度更小\n{%endlist%}\n>**clock算法**：**每一页**都有一个**标志位**，**每次访问**一个页时，**硬件自动设置该位**，为`1`置`0`，并**继续扫描**，为`0`**淘汰**该页\n{%list%}\n为LUR算法粗略实现，即淘汰最近最少使用的页，因为LUR的精细实现代价太大，得不偿失\n{%endlist%}\n{%right%}\n如果缺页情况很少，到最后很可能大部分页标志位为1，退化为FIFO，所以需要再来一个更快的扫描指针定时清除R位\n{%endright%}\n\n### 3.文件系统\n#### 3.1文件树\n{%list%}\n对于用户来说，文件的位置就是它的路径，对于操作系统来说就是区块号，需要将两者相互转换\n{%endlist%}\n**①磁盘分区**\n>**引导区**：存放**引导程序**\n\n>**超级块**：记录磁盘**整体信息**，如**各个区的起始位置**\n\n>**I节点位图**：记录**Inode指针区**的**统计信息**，如有哪些**空闲空间**\n\n>**盘块位图**：记录**数据区**的**统计信息**，如有哪些**空闲空间**\n{%list%}\ninode为linux中记录文件信息（如区块号）的结构\n{%endlist%}\n![磁盘分区](/image/OS_5.png)\n**②路径到inode**\n>如`/home/my`，首先从**Inode指针区第一个位置**找到**根目录**的`inode`指针，从而找到**根目录**的`inode`**结构**\n\n>**根目录**的`inode`**结构**中存放了**各个目录项**的**名字字符串**与其在**Inode指针区的位置**\n\n>**匹配名字字符串**即可找到`home`**目录**的`inode`**结构**，类似的**一层一层寻找下去**\n\n**③inode到区块号**\n>**每个文件**对应的**inode结构**中有一个**索引表**，记录了文件**各个部分对应的区块号**\n\n#### 3.2磁盘定位\n**①原理**\n>**柱面（C）**：描述是**磁头相对磁盘位置**\n\n>**磁头（H）**：描述是使用**哪一个磁头读**\n\n>**扇区（S）**：磁盘的**访问单位**，长度为**512字节**\n{%list%}\n磁头移动到对应磁道，旋转磁盘找到对应的扇区，即根据CHS定位磁盘\n{%endlist%}\n{%right%}\n为了提高计算机读取磁盘的效率，增大读写单位（每次读写扇区的个数），本质上是用空间换时间\n{%endright%}\n![磁盘](/image/OS_6.png)\n**②区块号到CHS**\n>由**磁盘驱动程序**将**区块号**转化为**CHS**\n{%list%}\n为了提升磁盘读写的效率（读取一个区块时，经量少切换磁头），区块在磁盘上是连续且有直接计算关系的：Block = CxHxS+HxS+S\n{%endlist%}\n![区块到CHS](/image/OS_7.png)\n\n#### 3.3磁盘调度\n{%list%}\n当多个区块需要被访问时，一时间只有一个能被访问\n{%endlist%}\n**①磁盘访问时间**\n>由**写入控制器时间**、**寻道时间**、**旋转时间**和**传输时间**组成\n{%list%}\n其中主要部分是寻道时间和旋转时间，即找到对应扇区的时间\n{%endlist%}\n**②调度算法**\n>**电梯算法**：选择**区块号和当前磁头位置距离最小**的区块申请\n{%list%}\n单向选择，只有当一个方向的区块全部选择完，再反方向申请\n{%endlist%}\n\n### 4.设备驱动\n#### 4.1引言\n**①概述**\n>计算机**使用外设的本质**就是**修改外设控制卡的寄存器**，外设工作完毕后，通过**中断**向计算机**传递信息**\n\n**②文件视图**\n>**设备**在**操作系统中**视为一种**特殊的文件**，也是通过类似于`open()`，`read()`等**文件操作函数**操作\n\n\n\n\n\n\n","source":"_posts/操作系统（二）.md","raw":"---\ntitle: 操作系统（二）\nseo_title: seo名称\ntoc: true\nindent: true\ntop: false\ncomments: true\narchive: true\ncover: false\nmathjax: false\npin: false\ntop_meta: false\nbottom_meta: false\nsidebar:\n  - toc\ntag:\n  - 计算机基础\n  - 操作系统\n  - 《操作系统导论》\ncategories: 计算机基础\nkeywords: 文章关键词\nupdated: ''\nimg: /medias/featureimages/2.webp\ndate:\nsummary: 操作系统概述\n---\n# 操作系统（二）\n## 操作系统概述\n### 1.进程同步\n#### 1.1信号量\n{%list%}\n进程之间需要合作，需要通过信号量来相互通信，从而合理推进进程\n{%endlist%}\n**①代码实现**\n{%list%}\n信号量是内核中的全局变量\n{%endlist%}\n```\nstruct sqmaphore\n{\n  int value; //记录资源个数\n  PCB *queue; //记录等待在该信号量上的进程\n}\n//进程通过函数p申请使用资源，如果资源不足，则沉睡\np(sqmaphore s)\n{\n  s.value--;\n  if(s.value < 0)\n  {\n    sleep(s.queue);\n  }\n}\n//进程通过v生产资源，如果资源不足，则唤醒\nv(sqmaphore s)\n{\n  s.value++;\n  if(s.value <= 0)\n  {\n    wake(s.queue);\n  }\n}\n```\n**②实例**\n>有两个**进程**，分别为**生产者**和**消费者**，**生产者**向缓存区**写入字符**，**消费者**从缓存区**读出字符**\n{%list%}\n不同的进程，对同一个信号量的使用是不相同的，对于生产者，只有缓存区有空位才能工作，对于消费者只有缓存区有数据才能工作\n{%endlist%}\n{%right%}\n其中mutex为互斥信号量，防止生产者和消费者同时对缓存区进行操作\n{%endright%}\n```\n//定义缓存区\nint buffer [BUFFER_SIZE];\n\n//定义信号量\nsqmaphore full = 0;\nsqmaphore empty = BUFFER_SIZE;\nsqmaphore mutex = 1;\n```\n```\n//生产者程序\nProducer(*item,in)\n{\n  P(empty);\n  p(mutex); //互斥信号量\n\n  将item写入到in对应位置;\n\n  v(mutex);\n  v(full);  \n}\n```\n```\n//消费者程序\nConsumer(*item,out)\n{\n  P(full);\n  p(mutex); //互斥信号量\n\n  将out对应位置数据读出;\n\n  v(mutex);\n  v(empty);  \n}\n```\n#### 1.2临界区\n**①引言**\n{%warning%}\n信号量由多个进程共用，但是进程调度可能导致一个进程还没有修改好信号量，就切到另一个相关进程\n{%endwarning%}\n{%right%}\n当一个进程修改但没有修改完信号量时，禁止其他进程修改信号量，即将信号量操作放入临界区中\n{%endright%}\n```\nP1.register = empty;\nP1.register = P1.register - 1;\n//发生进程调度，切到P2进程\nP2.register = empty;\nP2.register = P2.register - 1;\n////发生进程调度，切到P1进程\nempty = P1.register\n```\n**②基本原则**\n>**互斥进入**：只有**一个进程**可以访问\n\n>**有空让进**：当临界区**空闲**时，尽快使得**一个进程**进入\n\n>**优先等待**：进程从**发出进入请求**到**允许进入**的时间不能过长\n```\n剩余区\n\n进入区\n临界区\n退出区\n\n剩余区\n```\n**③实现**\n>**面包店算法**：当进程**想进入临界区**，会获得一个**序号**，**序号最小**的可以**进入临界区**，**退出时**序号变为`0`\n{%list%}\n过于复杂，效率较低\n{%endlist%}\n>**阻止调度**：进入临界区时，**禁止中断（`cli()`）**，直到**退出临界区才允许中断（`sti()`）**\n{%list%}\n只适用于单CPU，因为cli和sti只能禁止当前CPU的中断，其他CPU可能还会进入临界区\n{%endlist%}\n>**硬件原子指令**：**临界区**和**互斥信号量**使用非常相似，只要将**互斥信号量的修改**变为**原子操作**即可，即**锁信号量**\n```\nboolean TestAndSet(boolean &x)\n{\n  boolean rv = x;\n  x = true;\n  return rv;\n}\n\n剩余区\nwhile(TestAndSet(&lock));\n临界区\nlock = false;\n剩余区\n```\n#### 1.3死锁\n**①概述**\n{%warning%}\n多个进程互相等待对方持有资源时，谁都无法执行，这就是死锁\n{%endwarning%}\n>如下，**生产者**使得`mutex`从`1`变为`0`，倘若其在`p(empty)`处**阻塞**，进程**切换到消费者**，**消费者直接阻塞**，无法清空缓冲区，从而导致**生产者和消费者一起一直阻塞**\n```\n//生产者程序\nProducer(*item,in)\n{\n  P(mutex);\n  p(empty); \n\n  将item写入到in对应位置;\n\n  v(mutex);\n  v(full);  \n}\n```\n```\n//消费者程序\nConsumer(*item,out)\n{\n  P(mutex);\n  p(full); \n\n  将out对应位置数据读出;\n\n  v(mutex);\n  v(empty);  \n}\n```\n**②出现条件**\n>**互斥使用**：资源只能被**一个进程占有**\n\n>**不可抢占**：只有对应进程**自动放弃对应资源**，才能被**其他进程**使用\n\n>**请求和保持**：进程需要**先占用一个资源**，然后根据这个资源**申请下一个资源**\n\n>**循环等待**：资源分配中出现**一个环路**\n\n**③处理方法**\n>**预防**：检测每个**资源请求**，如果**造成死锁就自动拒绝**\n{%list%}\n银行家算法：根据每个进程占有的资源、需要的资源和当前空余的资源决定进程执行序列\n{%endlist%}\n>**恢复**：**死锁出现时**，使一些进程**回滚**，**让出资源**\n\n>**忽略**：**忽略死锁**，在**运行一会就关机**的机器上常用\n\n### 2.内存管理\n#### 2.1重定位\n**①引言**\n>**逻辑地址**：**用户程序中直接给出**的地址，如`call 40`中的`40`\n**物理地址**：**存储单元的编号**，是**真实且唯一**的\n{%list%}\n需要通过逻辑地址找到对应的物理地址，即重定位\n{%endlist%}\n**②重定位时机**\n>**编译时**：程序只能放在**内存固定位置**\n\n>**载入时**:程序一旦**载入内存就不能动了**\n\n>**运行时**：**动态**记录**逻辑地址**和**物理地址**的关系\n{%right%}\n一般采用运行时重定位，因为进程在内存中位置是动态变化的，只有卫星等一烧录就不改变的采用编译时重定位\n{%endright%}\n#### 2.2内存分割\n**①程序分段**\n>程序由**多个段**组成，**每个段**有各自的**特点和用途**\n{%list%}\n程序段只读，数据段可写，栈段向下增长等\n{%endlist%}\n**②内存分区**\n>将程序**各个段**放入**内存分区**中，**分区大小根据段大小调整**\n{%list%}\n程序内的逻辑地址由段号和段内偏移组成，每个段号和某块内存区域相对应（记录在进程的LDT表中）\n{%endlist%}\n{%warning%}\n因为不可能每次一个程序段的大小刚好和空闲区域大小相当，内存分区会产生内存碎片，导致内存使用率低\n{%endwarning%}\n>不能**整理内存**将**内存碎片合并**，因为**得不偿失**\n\n![内存分区](/image/OS_2.png)\n**③内存分页**\n>将**程序**分为多个**固定大小的部分**，并将**内存**分为多个**固定大小的页**\n{%list%}\n每个进程也有一个固定的页表，其中记录了两者的对应关系，即用页地址取代段地址\n{%endlist%}\n{%right%}\n内存分页能减少内存的浪费，顶多浪费1页\n{%endright%}\n{%warning%}\n为了减少内存的浪费，页的大小尽量得小，但是会造成页表过大\n{%endwarning%}\n>**页表**需要**连续记录整个内存**，这样**便于查找（O(1)）**，**不连续记录**则需要使用**查找算法**，得不偿失\n\n**④多级页表和快表**\n>**多级页表**：类似于**多级目录**\n{%right%}\n多级页表可以只连续记录使用了那段内存空间，不用记录整个内存空间，可以有效减少页表大小\n{%endright%}\n{%warning%}\n但是多级页表增加了访问的次数，速度会慢一些\n{%endwarning%}\n>**快表（`TLB`）**：一个**寄存器**，存放**经常使用的页**，可以有效**减少访问时间**\n{%right%}\n快表可以通过硬件设置，直接找到对应的页，速度非常快，且由于程序内存访问具有局部性，TLB命中率高\n{%endright%}\n![多级页表](/image/OS_3.png)\n**⑤段页结合**\n{%list%}\n程序员希望使用段，物理内存希望使用页，为了同时满足上层和硬件，将段页结合使用\n{%endlist%}\n>如`call 300`，`300`为**逻辑地址**，根据**LDT表**找到对应**虚拟地址**`00045300`，再根据**页表**找到对应**物理地址**`0007300`\n\n![段页结合](/image/OS_4.png)\n\n#### 2.3内存交换\n{%right%}\n换入换出可以实现大内存，假设虚拟内存有4G，但是实际物理内存只有1G，将访问的部分映射到物理内存即可\n{%endright%}\n**①内存换入**\n>当**MMU**无法根据**用户请求的虚拟地址**找到对应**物理地址**，产生**缺页中断**，调用对应**中断处理程序**，申请**空闲页**，将**磁盘数据读入**，做好**映射关系**，随后**继续执行**\n\n**②内存换出**\n>选择**一页**换出到**磁盘**\n{%list%}\n内存换出类似于进程调度，但是内存换出的频率更高，颗粒度更小\n{%endlist%}\n>**clock算法**：**每一页**都有一个**标志位**，**每次访问**一个页时，**硬件自动设置该位**，为`1`置`0`，并**继续扫描**，为`0`**淘汰**该页\n{%list%}\n为LUR算法粗略实现，即淘汰最近最少使用的页，因为LUR的精细实现代价太大，得不偿失\n{%endlist%}\n{%right%}\n如果缺页情况很少，到最后很可能大部分页标志位为1，退化为FIFO，所以需要再来一个更快的扫描指针定时清除R位\n{%endright%}\n\n### 3.文件系统\n#### 3.1文件树\n{%list%}\n对于用户来说，文件的位置就是它的路径，对于操作系统来说就是区块号，需要将两者相互转换\n{%endlist%}\n**①磁盘分区**\n>**引导区**：存放**引导程序**\n\n>**超级块**：记录磁盘**整体信息**，如**各个区的起始位置**\n\n>**I节点位图**：记录**Inode指针区**的**统计信息**，如有哪些**空闲空间**\n\n>**盘块位图**：记录**数据区**的**统计信息**，如有哪些**空闲空间**\n{%list%}\ninode为linux中记录文件信息（如区块号）的结构\n{%endlist%}\n![磁盘分区](/image/OS_5.png)\n**②路径到inode**\n>如`/home/my`，首先从**Inode指针区第一个位置**找到**根目录**的`inode`指针，从而找到**根目录**的`inode`**结构**\n\n>**根目录**的`inode`**结构**中存放了**各个目录项**的**名字字符串**与其在**Inode指针区的位置**\n\n>**匹配名字字符串**即可找到`home`**目录**的`inode`**结构**，类似的**一层一层寻找下去**\n\n**③inode到区块号**\n>**每个文件**对应的**inode结构**中有一个**索引表**，记录了文件**各个部分对应的区块号**\n\n#### 3.2磁盘定位\n**①原理**\n>**柱面（C）**：描述是**磁头相对磁盘位置**\n\n>**磁头（H）**：描述是使用**哪一个磁头读**\n\n>**扇区（S）**：磁盘的**访问单位**，长度为**512字节**\n{%list%}\n磁头移动到对应磁道，旋转磁盘找到对应的扇区，即根据CHS定位磁盘\n{%endlist%}\n{%right%}\n为了提高计算机读取磁盘的效率，增大读写单位（每次读写扇区的个数），本质上是用空间换时间\n{%endright%}\n![磁盘](/image/OS_6.png)\n**②区块号到CHS**\n>由**磁盘驱动程序**将**区块号**转化为**CHS**\n{%list%}\n为了提升磁盘读写的效率（读取一个区块时，经量少切换磁头），区块在磁盘上是连续且有直接计算关系的：Block = CxHxS+HxS+S\n{%endlist%}\n![区块到CHS](/image/OS_7.png)\n\n#### 3.3磁盘调度\n{%list%}\n当多个区块需要被访问时，一时间只有一个能被访问\n{%endlist%}\n**①磁盘访问时间**\n>由**写入控制器时间**、**寻道时间**、**旋转时间**和**传输时间**组成\n{%list%}\n其中主要部分是寻道时间和旋转时间，即找到对应扇区的时间\n{%endlist%}\n**②调度算法**\n>**电梯算法**：选择**区块号和当前磁头位置距离最小**的区块申请\n{%list%}\n单向选择，只有当一个方向的区块全部选择完，再反方向申请\n{%endlist%}\n\n### 4.设备驱动\n#### 4.1引言\n**①概述**\n>计算机**使用外设的本质**就是**修改外设控制卡的寄存器**，外设工作完毕后，通过**中断**向计算机**传递信息**\n\n**②文件视图**\n>**设备**在**操作系统中**视为一种**特殊的文件**，也是通过类似于`open()`，`read()`等**文件操作函数**操作\n\n\n\n\n\n\n","slug":"操作系统（二）","published":1,"_id":"clob1qcni0000ikvdgok9d1l4","layout":"post","photos":[],"link":"","content":"<h1 id=\"操作系统（二）\"><a href=\"#操作系统（二）\" class=\"headerlink\" title=\"操作系统（二）\"></a>操作系统（二）</h1><h2 id=\"操作系统概述\"><a href=\"#操作系统概述\" class=\"headerlink\" title=\"操作系统概述\"></a>操作系统概述</h2><h3 id=\"1-进程同步\"><a href=\"#1-进程同步\" class=\"headerlink\" title=\"1.进程同步\"></a>1.进程同步</h3><h4 id=\"1-1信号量\"><a href=\"#1-1信号量\" class=\"headerlink\" title=\"1.1信号量\"></a>1.1信号量</h4><div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 进程之间需要合作，需要通过信号量来相互通信，从而合理推进进程</div>\n<p><strong>①代码实现</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 信号量是内核中的全局变量</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">struct sqmaphore\n{\n  int value; //记录资源个数\n  PCB *queue; //记录等待在该信号量上的进程\n}\n//进程通过函数p申请使用资源，如果资源不足，则沉睡\np(sqmaphore s)\n{\n  s.value--;\n  if(s.value &lt; 0)\n  {\n    sleep(s.queue);\n  }\n}\n//进程通过v生产资源，如果资源不足，则唤醒\nv(sqmaphore s)\n{\n  s.value++;\n  if(s.value &lt;= 0)\n  {\n    wake(s.queue);\n  }\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>②实例</strong></p>\n<blockquote>\n<p>有两个<strong>进程</strong>，分别为<strong>生产者</strong>和<strong>消费者</strong>，<strong>生产者</strong>向缓存区<strong>写入字符</strong>，<strong>消费者</strong>从缓存区<strong>读出字符</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 不同的进程，对同一个信号量的使用是不相同的，对于生产者，只有缓存区有空位才能工作，对于消费者只有缓存区有数据才能工作</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 其中mutex为互斥信号量，防止生产者和消费者同时对缓存区进行操作</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">//定义缓存区\nint buffer [BUFFER_SIZE];\n\n//定义信号量\nsqmaphore full = 0;\nsqmaphore empty = BUFFER_SIZE;\nsqmaphore mutex = 1;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">//生产者程序\nProducer(*item,in)\n{\n  P(empty);\n  p(mutex); //互斥信号量\n\n  将item写入到in对应位置;\n\n  v(mutex);\n  v(full);  \n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">//消费者程序\nConsumer(*item,out)\n{\n  P(full);\n  p(mutex); //互斥信号量\n\n  将out对应位置数据读出;\n\n  v(mutex);\n  v(empty);  \n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"1-2临界区\"><a href=\"#1-2临界区\" class=\"headerlink\" title=\"1.2临界区\"></a>1.2临界区</h4><p><strong>①引言</strong></p>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 信号量由多个进程共用，但是进程调度可能导致一个进程还没有修改好信号量，就切到另一个相关进程</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 当一个进程修改但没有修改完信号量时，禁止其他进程修改信号量，即将信号量操作放入临界区中</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">P1.register = empty;\nP1.register = P1.register - 1;\n//发生进程调度，切到P2进程\nP2.register = empty;\nP2.register = P2.register - 1;\n////发生进程调度，切到P1进程\nempty = P1.register<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>②基本原则</strong></p>\n<blockquote>\n<p><strong>互斥进入</strong>：只有<strong>一个进程</strong>可以访问</p>\n</blockquote>\n<blockquote>\n<p><strong>有空让进</strong>：当临界区<strong>空闲</strong>时，尽快使得<strong>一个进程</strong>进入</p>\n</blockquote>\n<blockquote>\n<p><strong>优先等待</strong>：进程从<strong>发出进入请求</strong>到<strong>允许进入</strong>的时间不能过长</p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">剩余区\n\n进入区\n临界区\n退出区\n\n剩余区<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>③实现</strong></p>\n<blockquote>\n<p><strong>面包店算法</strong>：当进程<strong>想进入临界区</strong>，会获得一个<strong>序号</strong>，<strong>序号最小</strong>的可以<strong>进入临界区</strong>，<strong>退出时</strong>序号变为<code>0</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 过于复杂，效率较低</div>\n<blockquote>\n<p><strong>阻止调度</strong>：进入临界区时，<strong>禁止中断（<code>cli()</code>）</strong>，直到<strong>退出临界区才允许中断（<code>sti()</code>）</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 只适用于单CPU，因为cli和sti只能禁止当前CPU的中断，其他CPU可能还会进入临界区</div>\n<blockquote>\n<p><strong>硬件原子指令</strong>：<strong>临界区</strong>和<strong>互斥信号量</strong>使用非常相似，只要将<strong>互斥信号量的修改</strong>变为<strong>原子操作</strong>即可，即<strong>锁信号量</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">boolean TestAndSet(boolean &amp;x)\n{\n  boolean rv = x;\n  x = true;\n  return rv;\n}\n\n剩余区\nwhile(TestAndSet(&amp;lock));\n临界区\nlock = false;\n剩余区<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"1-3死锁\"><a href=\"#1-3死锁\" class=\"headerlink\" title=\"1.3死锁\"></a>1.3死锁</h4><p><strong>①概述</strong></p>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 多个进程互相等待对方持有资源时，谁都无法执行，这就是死锁</div>\n<blockquote>\n<p>如下，<strong>生产者</strong>使得<code>mutex</code>从<code>1</code>变为<code>0</code>，倘若其在<code>p(empty)</code>处<strong>阻塞</strong>，进程<strong>切换到消费者</strong>，<strong>消费者直接阻塞</strong>，无法清空缓冲区，从而导致<strong>生产者和消费者一起一直阻塞</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">//生产者程序\nProducer(*item,in)\n{\n  P(mutex);\n  p(empty); \n\n  将item写入到in对应位置;\n\n  v(mutex);\n  v(full);  \n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">//消费者程序\nConsumer(*item,out)\n{\n  P(mutex);\n  p(full); \n\n  将out对应位置数据读出;\n\n  v(mutex);\n  v(empty);  \n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>②出现条件</strong></p>\n<blockquote>\n<p><strong>互斥使用</strong>：资源只能被<strong>一个进程占有</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>不可抢占</strong>：只有对应进程<strong>自动放弃对应资源</strong>，才能被<strong>其他进程</strong>使用</p>\n</blockquote>\n<blockquote>\n<p><strong>请求和保持</strong>：进程需要<strong>先占用一个资源</strong>，然后根据这个资源<strong>申请下一个资源</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>循环等待</strong>：资源分配中出现<strong>一个环路</strong></p>\n</blockquote>\n<p><strong>③处理方法</strong></p>\n<blockquote>\n<p><strong>预防</strong>：检测每个<strong>资源请求</strong>，如果<strong>造成死锁就自动拒绝</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 银行家算法：根据每个进程占有的资源、需要的资源和当前空余的资源决定进程执行序列</div>\n<blockquote>\n<p><strong>恢复</strong>：<strong>死锁出现时</strong>，使一些进程<strong>回滚</strong>，<strong>让出资源</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>忽略</strong>：<strong>忽略死锁</strong>，在<strong>运行一会就关机</strong>的机器上常用</p>\n</blockquote>\n<h3 id=\"2-内存管理\"><a href=\"#2-内存管理\" class=\"headerlink\" title=\"2.内存管理\"></a>2.内存管理</h3><h4 id=\"2-1重定位\"><a href=\"#2-1重定位\" class=\"headerlink\" title=\"2.1重定位\"></a>2.1重定位</h4><p><strong>①引言</strong></p>\n<blockquote>\n<p><strong>逻辑地址</strong>：<strong>用户程序中直接给出</strong>的地址，如<code>call 40</code>中的<code>40</code><br><strong>物理地址</strong>：<strong>存储单元的编号</strong>，是<strong>真实且唯一</strong>的</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 需要通过逻辑地址找到对应的物理地址，即重定位</div>\n<p><strong>②重定位时机</strong></p>\n<blockquote>\n<p><strong>编译时</strong>：程序只能放在<strong>内存固定位置</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>载入时</strong>:程序一旦<strong>载入内存就不能动了</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>运行时</strong>：<strong>动态</strong>记录<strong>逻辑地址</strong>和<strong>物理地址</strong>的关系</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 一般采用运行时重定位，因为进程在内存中位置是动态变化的，只有卫星等一烧录就不改变的采用编译时重定位</div>\n<h4 id=\"2-2内存分割\"><a href=\"#2-2内存分割\" class=\"headerlink\" title=\"2.2内存分割\"></a>2.2内存分割</h4><p><strong>①程序分段</strong></p>\n<blockquote>\n<p>程序由<strong>多个段</strong>组成，<strong>每个段</strong>有各自的<strong>特点和用途</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 程序段只读，数据段可写，栈段向下增长等</div>\n<p><strong>②内存分区</strong></p>\n<blockquote>\n<p>将程序<strong>各个段</strong>放入<strong>内存分区</strong>中，<strong>分区大小根据段大小调整</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 程序内的逻辑地址由段号和段内偏移组成，每个段号和某块内存区域相对应（记录在进程的LDT表中）</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 因为不可能每次一个程序段的大小刚好和空闲区域大小相当，内存分区会产生内存碎片，导致内存使用率低</div>\n<blockquote>\n<p>不能<strong>整理内存</strong>将<strong>内存碎片合并</strong>，因为<strong>得不偿失</strong></p>\n</blockquote>\n<p><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/OS_2.png\" alt=\"内存分区\"><br><strong>③内存分页</strong></p>\n<blockquote>\n<p>将<strong>程序</strong>分为多个<strong>固定大小的部分</strong>，并将<strong>内存</strong>分为多个<strong>固定大小的页</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 每个进程也有一个固定的页表，其中记录了两者的对应关系，即用页地址取代段地址</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 内存分页能减少内存的浪费，顶多浪费1页</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 为了减少内存的浪费，页的大小尽量得小，但是会造成页表过大</div>\n<blockquote>\n<p><strong>页表</strong>需要<strong>连续记录整个内存</strong>，这样<strong>便于查找（O(1)）</strong>，<strong>不连续记录</strong>则需要使用<strong>查找算法</strong>，得不偿失</p>\n</blockquote>\n<p><strong>④多级页表和快表</strong></p>\n<blockquote>\n<p><strong>多级页表</strong>：类似于<strong>多级目录</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 多级页表可以只连续记录使用了那段内存空间，不用记录整个内存空间，可以有效减少页表大小</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 但是多级页表增加了访问的次数，速度会慢一些</div>\n<blockquote>\n<p><strong>快表（<code>TLB</code>）</strong>：一个<strong>寄存器</strong>，存放<strong>经常使用的页</strong>，可以有效<strong>减少访问时间</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 快表可以通过硬件设置，直接找到对应的页，速度非常快，且由于程序内存访问具有局部性，TLB命中率高</div>\n<p><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/OS_3.png\" alt=\"多级页表\"><br><strong>⑤段页结合</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 程序员希望使用段，物理内存希望使用页，为了同时满足上层和硬件，将段页结合使用</div>\n<blockquote>\n<p>如<code>call 300</code>，<code>300</code>为<strong>逻辑地址</strong>，根据<strong>LDT表</strong>找到对应<strong>虚拟地址</strong><code>00045300</code>，再根据<strong>页表</strong>找到对应<strong>物理地址</strong><code>0007300</code></p>\n</blockquote>\n<p><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/OS_4.png\" alt=\"段页结合\"></p>\n<h4 id=\"2-3内存交换\"><a href=\"#2-3内存交换\" class=\"headerlink\" title=\"2.3内存交换\"></a>2.3内存交换</h4><div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 换入换出可以实现大内存，假设虚拟内存有4G，但是实际物理内存只有1G，将访问的部分映射到物理内存即可</div>\n<p><strong>①内存换入</strong></p>\n<blockquote>\n<p>当<strong>MMU</strong>无法根据<strong>用户请求的虚拟地址</strong>找到对应<strong>物理地址</strong>，产生<strong>缺页中断</strong>，调用对应<strong>中断处理程序</strong>，申请<strong>空闲页</strong>，将<strong>磁盘数据读入</strong>，做好<strong>映射关系</strong>，随后<strong>继续执行</strong></p>\n</blockquote>\n<p><strong>②内存换出</strong></p>\n<blockquote>\n<p>选择<strong>一页</strong>换出到<strong>磁盘</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 内存换出类似于进程调度，但是内存换出的频率更高，颗粒度更小</div>\n<blockquote>\n<p><strong>clock算法</strong>：<strong>每一页</strong>都有一个<strong>标志位</strong>，<strong>每次访问</strong>一个页时，<strong>硬件自动设置该位</strong>，为<code>1</code>置<code>0</code>，并<strong>继续扫描</strong>，为<code>0</code><strong>淘汰</strong>该页</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 为LUR算法粗略实现，即淘汰最近最少使用的页，因为LUR的精细实现代价太大，得不偿失</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 如果缺页情况很少，到最后很可能大部分页标志位为1，退化为FIFO，所以需要再来一个更快的扫描指针定时清除R位</div>\n\n<h3 id=\"3-文件系统\"><a href=\"#3-文件系统\" class=\"headerlink\" title=\"3.文件系统\"></a>3.文件系统</h3><h4 id=\"3-1文件树\"><a href=\"#3-1文件树\" class=\"headerlink\" title=\"3.1文件树\"></a>3.1文件树</h4><div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 对于用户来说，文件的位置就是它的路径，对于操作系统来说就是区块号，需要将两者相互转换</div>\n<p><strong>①磁盘分区</strong></p>\n<blockquote>\n<p><strong>引导区</strong>：存放<strong>引导程序</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>超级块</strong>：记录磁盘<strong>整体信息</strong>，如<strong>各个区的起始位置</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>I节点位图</strong>：记录<strong>Inode指针区</strong>的<strong>统计信息</strong>，如有哪些<strong>空闲空间</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>盘块位图</strong>：记录<strong>数据区</strong>的<strong>统计信息</strong>，如有哪些<strong>空闲空间</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> inode为linux中记录文件信息（如区块号）的结构</div>\n<p><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/OS_5.png\" alt=\"磁盘分区\"><br><strong>②路径到inode</strong></p>\n<blockquote>\n<p>如<code>/home/my</code>，首先从<strong>Inode指针区第一个位置</strong>找到<strong>根目录</strong>的<code>inode</code>指针，从而找到<strong>根目录</strong>的<code>inode</code><strong>结构</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>根目录</strong>的<code>inode</code><strong>结构</strong>中存放了<strong>各个目录项</strong>的<strong>名字字符串</strong>与其在<strong>Inode指针区的位置</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>匹配名字字符串</strong>即可找到<code>home</code><strong>目录</strong>的<code>inode</code><strong>结构</strong>，类似的<strong>一层一层寻找下去</strong></p>\n</blockquote>\n<p><strong>③inode到区块号</strong></p>\n<blockquote>\n<p><strong>每个文件</strong>对应的<strong>inode结构</strong>中有一个<strong>索引表</strong>，记录了文件<strong>各个部分对应的区块号</strong></p>\n</blockquote>\n<h4 id=\"3-2磁盘定位\"><a href=\"#3-2磁盘定位\" class=\"headerlink\" title=\"3.2磁盘定位\"></a>3.2磁盘定位</h4><p><strong>①原理</strong></p>\n<blockquote>\n<p><strong>柱面（C）</strong>：描述是<strong>磁头相对磁盘位置</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>磁头（H）</strong>：描述是使用<strong>哪一个磁头读</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>扇区（S）</strong>：磁盘的<strong>访问单位</strong>，长度为<strong>512字节</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 磁头移动到对应磁道，旋转磁盘找到对应的扇区，即根据CHS定位磁盘</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 为了提高计算机读取磁盘的效率，增大读写单位（每次读写扇区的个数），本质上是用空间换时间</div>\n<p><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/OS_6.png\" alt=\"磁盘\"><br><strong>②区块号到CHS</strong></p>\n<blockquote>\n<p>由<strong>磁盘驱动程序</strong>将<strong>区块号</strong>转化为<strong>CHS</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 为了提升磁盘读写的效率（读取一个区块时，经量少切换磁头），区块在磁盘上是连续且有直接计算关系的：Block = CxHxS+HxS+S</div>\n<p><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/OS_7.png\" alt=\"区块到CHS\"></p>\n<h4 id=\"3-3磁盘调度\"><a href=\"#3-3磁盘调度\" class=\"headerlink\" title=\"3.3磁盘调度\"></a>3.3磁盘调度</h4><div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 当多个区块需要被访问时，一时间只有一个能被访问</div>\n<p><strong>①磁盘访问时间</strong></p>\n<blockquote>\n<p>由<strong>写入控制器时间</strong>、<strong>寻道时间</strong>、<strong>旋转时间</strong>和<strong>传输时间</strong>组成</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 其中主要部分是寻道时间和旋转时间，即找到对应扇区的时间</div>\n<p><strong>②调度算法</strong></p>\n<blockquote>\n<p><strong>电梯算法</strong>：选择<strong>区块号和当前磁头位置距离最小</strong>的区块申请</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 单向选择，只有当一个方向的区块全部选择完，再反方向申请</div>\n\n<h3 id=\"4-设备驱动\"><a href=\"#4-设备驱动\" class=\"headerlink\" title=\"4.设备驱动\"></a>4.设备驱动</h3><h4 id=\"4-1引言\"><a href=\"#4-1引言\" class=\"headerlink\" title=\"4.1引言\"></a>4.1引言</h4><p><strong>①概述</strong></p>\n<blockquote>\n<p>计算机<strong>使用外设的本质</strong>就是<strong>修改外设控制卡的寄存器</strong>，外设工作完毕后，通过<strong>中断</strong>向计算机<strong>传递信息</strong></p>\n</blockquote>\n<p><strong>②文件视图</strong></p>\n<blockquote>\n<p><strong>设备</strong>在<strong>操作系统中</strong>视为一种<strong>特殊的文件</strong>，也是通过类似于<code>open()</code>，<code>read()</code>等<strong>文件操作函数</strong>操作</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"操作系统（二）\"><a href=\"#操作系统（二）\" class=\"headerlink\" title=\"操作系统（二）\"></a>操作系统（二）</h1><h2 id=\"操作系统概述\"><a href=\"#操作系统概述\" class=\"headerlink\" title=\"操作系统概述\"></a>操作系统概述</h2><h3 id=\"1-进程同步\"><a href=\"#1-进程同步\" class=\"headerlink\" title=\"1.进程同步\"></a>1.进程同步</h3><h4 id=\"1-1信号量\"><a href=\"#1-1信号量\" class=\"headerlink\" title=\"1.1信号量\"></a>1.1信号量</h4><div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 进程之间需要合作，需要通过信号量来相互通信，从而合理推进进程</div>\n<p><strong>①代码实现</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 信号量是内核中的全局变量</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">struct sqmaphore\n&#123;\n  int value; &#x2F;&#x2F;记录资源个数\n  PCB *queue; &#x2F;&#x2F;记录等待在该信号量上的进程\n&#125;\n&#x2F;&#x2F;进程通过函数p申请使用资源，如果资源不足，则沉睡\np(sqmaphore s)\n&#123;\n  s.value--;\n  if(s.value &lt; 0)\n  &#123;\n    sleep(s.queue);\n  &#125;\n&#125;\n&#x2F;&#x2F;进程通过v生产资源，如果资源不足，则唤醒\nv(sqmaphore s)\n&#123;\n  s.value++;\n  if(s.value &lt;&#x3D; 0)\n  &#123;\n    wake(s.queue);\n  &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>②实例</strong></p>\n<blockquote>\n<p>有两个<strong>进程</strong>，分别为<strong>生产者</strong>和<strong>消费者</strong>，<strong>生产者</strong>向缓存区<strong>写入字符</strong>，<strong>消费者</strong>从缓存区<strong>读出字符</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 不同的进程，对同一个信号量的使用是不相同的，对于生产者，只有缓存区有空位才能工作，对于消费者只有缓存区有数据才能工作</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 其中mutex为互斥信号量，防止生产者和消费者同时对缓存区进行操作</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F;定义缓存区\nint buffer [BUFFER_SIZE];\n\n&#x2F;&#x2F;定义信号量\nsqmaphore full &#x3D; 0;\nsqmaphore empty &#x3D; BUFFER_SIZE;\nsqmaphore mutex &#x3D; 1;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F;生产者程序\nProducer(*item,in)\n&#123;\n  P(empty);\n  p(mutex); &#x2F;&#x2F;互斥信号量\n\n  将item写入到in对应位置;\n\n  v(mutex);\n  v(full);  \n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F;消费者程序\nConsumer(*item,out)\n&#123;\n  P(full);\n  p(mutex); &#x2F;&#x2F;互斥信号量\n\n  将out对应位置数据读出;\n\n  v(mutex);\n  v(empty);  \n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"1-2临界区\"><a href=\"#1-2临界区\" class=\"headerlink\" title=\"1.2临界区\"></a>1.2临界区</h4><p><strong>①引言</strong></p>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 信号量由多个进程共用，但是进程调度可能导致一个进程还没有修改好信号量，就切到另一个相关进程</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 当一个进程修改但没有修改完信号量时，禁止其他进程修改信号量，即将信号量操作放入临界区中</div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">P1.register &#x3D; empty;\nP1.register &#x3D; P1.register - 1;\n&#x2F;&#x2F;发生进程调度，切到P2进程\nP2.register &#x3D; empty;\nP2.register &#x3D; P2.register - 1;\n&#x2F;&#x2F;&#x2F;&#x2F;发生进程调度，切到P1进程\nempty &#x3D; P1.register<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>②基本原则</strong></p>\n<blockquote>\n<p><strong>互斥进入</strong>：只有<strong>一个进程</strong>可以访问</p>\n</blockquote>\n<blockquote>\n<p><strong>有空让进</strong>：当临界区<strong>空闲</strong>时，尽快使得<strong>一个进程</strong>进入</p>\n</blockquote>\n<blockquote>\n<p><strong>优先等待</strong>：进程从<strong>发出进入请求</strong>到<strong>允许进入</strong>的时间不能过长</p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">剩余区\n\n进入区\n临界区\n退出区\n\n剩余区<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>③实现</strong></p>\n<blockquote>\n<p><strong>面包店算法</strong>：当进程<strong>想进入临界区</strong>，会获得一个<strong>序号</strong>，<strong>序号最小</strong>的可以<strong>进入临界区</strong>，<strong>退出时</strong>序号变为<code>0</code></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 过于复杂，效率较低</div>\n<blockquote>\n<p><strong>阻止调度</strong>：进入临界区时，<strong>禁止中断（<code>cli()</code>）</strong>，直到<strong>退出临界区才允许中断（<code>sti()</code>）</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 只适用于单CPU，因为cli和sti只能禁止当前CPU的中断，其他CPU可能还会进入临界区</div>\n<blockquote>\n<p><strong>硬件原子指令</strong>：<strong>临界区</strong>和<strong>互斥信号量</strong>使用非常相似，只要将<strong>互斥信号量的修改</strong>变为<strong>原子操作</strong>即可，即<strong>锁信号量</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">boolean TestAndSet(boolean &amp;x)\n&#123;\n  boolean rv &#x3D; x;\n  x &#x3D; true;\n  return rv;\n&#125;\n\n剩余区\nwhile(TestAndSet(&amp;lock));\n临界区\nlock &#x3D; false;\n剩余区<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"1-3死锁\"><a href=\"#1-3死锁\" class=\"headerlink\" title=\"1.3死锁\"></a>1.3死锁</h4><p><strong>①概述</strong></p>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 多个进程互相等待对方持有资源时，谁都无法执行，这就是死锁</div>\n<blockquote>\n<p>如下，<strong>生产者</strong>使得<code>mutex</code>从<code>1</code>变为<code>0</code>，倘若其在<code>p(empty)</code>处<strong>阻塞</strong>，进程<strong>切换到消费者</strong>，<strong>消费者直接阻塞</strong>，无法清空缓冲区，从而导致<strong>生产者和消费者一起一直阻塞</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F;生产者程序\nProducer(*item,in)\n&#123;\n  P(mutex);\n  p(empty); \n\n  将item写入到in对应位置;\n\n  v(mutex);\n  v(full);  \n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F;消费者程序\nConsumer(*item,out)\n&#123;\n  P(mutex);\n  p(full); \n\n  将out对应位置数据读出;\n\n  v(mutex);\n  v(empty);  \n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>②出现条件</strong></p>\n<blockquote>\n<p><strong>互斥使用</strong>：资源只能被<strong>一个进程占有</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>不可抢占</strong>：只有对应进程<strong>自动放弃对应资源</strong>，才能被<strong>其他进程</strong>使用</p>\n</blockquote>\n<blockquote>\n<p><strong>请求和保持</strong>：进程需要<strong>先占用一个资源</strong>，然后根据这个资源<strong>申请下一个资源</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>循环等待</strong>：资源分配中出现<strong>一个环路</strong></p>\n</blockquote>\n<p><strong>③处理方法</strong></p>\n<blockquote>\n<p><strong>预防</strong>：检测每个<strong>资源请求</strong>，如果<strong>造成死锁就自动拒绝</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 银行家算法：根据每个进程占有的资源、需要的资源和当前空余的资源决定进程执行序列</div>\n<blockquote>\n<p><strong>恢复</strong>：<strong>死锁出现时</strong>，使一些进程<strong>回滚</strong>，<strong>让出资源</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>忽略</strong>：<strong>忽略死锁</strong>，在<strong>运行一会就关机</strong>的机器上常用</p>\n</blockquote>\n<h3 id=\"2-内存管理\"><a href=\"#2-内存管理\" class=\"headerlink\" title=\"2.内存管理\"></a>2.内存管理</h3><h4 id=\"2-1重定位\"><a href=\"#2-1重定位\" class=\"headerlink\" title=\"2.1重定位\"></a>2.1重定位</h4><p><strong>①引言</strong></p>\n<blockquote>\n<p><strong>逻辑地址</strong>：<strong>用户程序中直接给出</strong>的地址，如<code>call 40</code>中的<code>40</code><br><strong>物理地址</strong>：<strong>存储单元的编号</strong>，是<strong>真实且唯一</strong>的</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 需要通过逻辑地址找到对应的物理地址，即重定位</div>\n<p><strong>②重定位时机</strong></p>\n<blockquote>\n<p><strong>编译时</strong>：程序只能放在<strong>内存固定位置</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>载入时</strong>:程序一旦<strong>载入内存就不能动了</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>运行时</strong>：<strong>动态</strong>记录<strong>逻辑地址</strong>和<strong>物理地址</strong>的关系</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 一般采用运行时重定位，因为进程在内存中位置是动态变化的，只有卫星等一烧录就不改变的采用编译时重定位</div>\n<h4 id=\"2-2内存分割\"><a href=\"#2-2内存分割\" class=\"headerlink\" title=\"2.2内存分割\"></a>2.2内存分割</h4><p><strong>①程序分段</strong></p>\n<blockquote>\n<p>程序由<strong>多个段</strong>组成，<strong>每个段</strong>有各自的<strong>特点和用途</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 程序段只读，数据段可写，栈段向下增长等</div>\n<p><strong>②内存分区</strong></p>\n<blockquote>\n<p>将程序<strong>各个段</strong>放入<strong>内存分区</strong>中，<strong>分区大小根据段大小调整</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 程序内的逻辑地址由段号和段内偏移组成，每个段号和某块内存区域相对应（记录在进程的LDT表中）</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 因为不可能每次一个程序段的大小刚好和空闲区域大小相当，内存分区会产生内存碎片，导致内存使用率低</div>\n<blockquote>\n<p>不能<strong>整理内存</strong>将<strong>内存碎片合并</strong>，因为<strong>得不偿失</strong></p>\n</blockquote>\n<p><img src=\"/image/OS_2.png\" alt=\"内存分区\"><br><strong>③内存分页</strong></p>\n<blockquote>\n<p>将<strong>程序</strong>分为多个<strong>固定大小的部分</strong>，并将<strong>内存</strong>分为多个<strong>固定大小的页</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 每个进程也有一个固定的页表，其中记录了两者的对应关系，即用页地址取代段地址</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 内存分页能减少内存的浪费，顶多浪费1页</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 为了减少内存的浪费，页的大小尽量得小，但是会造成页表过大</div>\n<blockquote>\n<p><strong>页表</strong>需要<strong>连续记录整个内存</strong>，这样<strong>便于查找（O(1)）</strong>，<strong>不连续记录</strong>则需要使用<strong>查找算法</strong>，得不偿失</p>\n</blockquote>\n<p><strong>④多级页表和快表</strong></p>\n<blockquote>\n<p><strong>多级页表</strong>：类似于<strong>多级目录</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 多级页表可以只连续记录使用了那段内存空间，不用记录整个内存空间，可以有效减少页表大小</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 但是多级页表增加了访问的次数，速度会慢一些</div>\n<blockquote>\n<p><strong>快表（<code>TLB</code>）</strong>：一个<strong>寄存器</strong>，存放<strong>经常使用的页</strong>，可以有效<strong>减少访问时间</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 快表可以通过硬件设置，直接找到对应的页，速度非常快，且由于程序内存访问具有局部性，TLB命中率高</div>\n<p><img src=\"/image/OS_3.png\" alt=\"多级页表\"><br><strong>⑤段页结合</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 程序员希望使用段，物理内存希望使用页，为了同时满足上层和硬件，将段页结合使用</div>\n<blockquote>\n<p>如<code>call 300</code>，<code>300</code>为<strong>逻辑地址</strong>，根据<strong>LDT表</strong>找到对应<strong>虚拟地址</strong><code>00045300</code>，再根据<strong>页表</strong>找到对应<strong>物理地址</strong><code>0007300</code></p>\n</blockquote>\n<p><img src=\"/image/OS_4.png\" alt=\"段页结合\"></p>\n<h4 id=\"2-3内存交换\"><a href=\"#2-3内存交换\" class=\"headerlink\" title=\"2.3内存交换\"></a>2.3内存交换</h4><div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 换入换出可以实现大内存，假设虚拟内存有4G，但是实际物理内存只有1G，将访问的部分映射到物理内存即可</div>\n<p><strong>①内存换入</strong></p>\n<blockquote>\n<p>当<strong>MMU</strong>无法根据<strong>用户请求的虚拟地址</strong>找到对应<strong>物理地址</strong>，产生<strong>缺页中断</strong>，调用对应<strong>中断处理程序</strong>，申请<strong>空闲页</strong>，将<strong>磁盘数据读入</strong>，做好<strong>映射关系</strong>，随后<strong>继续执行</strong></p>\n</blockquote>\n<p><strong>②内存换出</strong></p>\n<blockquote>\n<p>选择<strong>一页</strong>换出到<strong>磁盘</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 内存换出类似于进程调度，但是内存换出的频率更高，颗粒度更小</div>\n<blockquote>\n<p><strong>clock算法</strong>：<strong>每一页</strong>都有一个<strong>标志位</strong>，<strong>每次访问</strong>一个页时，<strong>硬件自动设置该位</strong>，为<code>1</code>置<code>0</code>，并<strong>继续扫描</strong>，为<code>0</code><strong>淘汰</strong>该页</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 为LUR算法粗略实现，即淘汰最近最少使用的页，因为LUR的精细实现代价太大，得不偿失</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 如果缺页情况很少，到最后很可能大部分页标志位为1，退化为FIFO，所以需要再来一个更快的扫描指针定时清除R位</div>\n\n<h3 id=\"3-文件系统\"><a href=\"#3-文件系统\" class=\"headerlink\" title=\"3.文件系统\"></a>3.文件系统</h3><h4 id=\"3-1文件树\"><a href=\"#3-1文件树\" class=\"headerlink\" title=\"3.1文件树\"></a>3.1文件树</h4><div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 对于用户来说，文件的位置就是它的路径，对于操作系统来说就是区块号，需要将两者相互转换</div>\n<p><strong>①磁盘分区</strong></p>\n<blockquote>\n<p><strong>引导区</strong>：存放<strong>引导程序</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>超级块</strong>：记录磁盘<strong>整体信息</strong>，如<strong>各个区的起始位置</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>I节点位图</strong>：记录<strong>Inode指针区</strong>的<strong>统计信息</strong>，如有哪些<strong>空闲空间</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>盘块位图</strong>：记录<strong>数据区</strong>的<strong>统计信息</strong>，如有哪些<strong>空闲空间</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> inode为linux中记录文件信息（如区块号）的结构</div>\n<p><img src=\"/image/OS_5.png\" alt=\"磁盘分区\"><br><strong>②路径到inode</strong></p>\n<blockquote>\n<p>如<code>/home/my</code>，首先从<strong>Inode指针区第一个位置</strong>找到<strong>根目录</strong>的<code>inode</code>指针，从而找到<strong>根目录</strong>的<code>inode</code><strong>结构</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>根目录</strong>的<code>inode</code><strong>结构</strong>中存放了<strong>各个目录项</strong>的<strong>名字字符串</strong>与其在<strong>Inode指针区的位置</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>匹配名字字符串</strong>即可找到<code>home</code><strong>目录</strong>的<code>inode</code><strong>结构</strong>，类似的<strong>一层一层寻找下去</strong></p>\n</blockquote>\n<p><strong>③inode到区块号</strong></p>\n<blockquote>\n<p><strong>每个文件</strong>对应的<strong>inode结构</strong>中有一个<strong>索引表</strong>，记录了文件<strong>各个部分对应的区块号</strong></p>\n</blockquote>\n<h4 id=\"3-2磁盘定位\"><a href=\"#3-2磁盘定位\" class=\"headerlink\" title=\"3.2磁盘定位\"></a>3.2磁盘定位</h4><p><strong>①原理</strong></p>\n<blockquote>\n<p><strong>柱面（C）</strong>：描述是<strong>磁头相对磁盘位置</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>磁头（H）</strong>：描述是使用<strong>哪一个磁头读</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>扇区（S）</strong>：磁盘的<strong>访问单位</strong>，长度为<strong>512字节</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 磁头移动到对应磁道，旋转磁盘找到对应的扇区，即根据CHS定位磁盘</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 为了提高计算机读取磁盘的效率，增大读写单位（每次读写扇区的个数），本质上是用空间换时间</div>\n<p><img src=\"/image/OS_6.png\" alt=\"磁盘\"><br><strong>②区块号到CHS</strong></p>\n<blockquote>\n<p>由<strong>磁盘驱动程序</strong>将<strong>区块号</strong>转化为<strong>CHS</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 为了提升磁盘读写的效率（读取一个区块时，经量少切换磁头），区块在磁盘上是连续且有直接计算关系的：Block = CxHxS+HxS+S</div>\n<p><img src=\"/image/OS_7.png\" alt=\"区块到CHS\"></p>\n<h4 id=\"3-3磁盘调度\"><a href=\"#3-3磁盘调度\" class=\"headerlink\" title=\"3.3磁盘调度\"></a>3.3磁盘调度</h4><div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 当多个区块需要被访问时，一时间只有一个能被访问</div>\n<p><strong>①磁盘访问时间</strong></p>\n<blockquote>\n<p>由<strong>写入控制器时间</strong>、<strong>寻道时间</strong>、<strong>旋转时间</strong>和<strong>传输时间</strong>组成</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 其中主要部分是寻道时间和旋转时间，即找到对应扇区的时间</div>\n<p><strong>②调度算法</strong></p>\n<blockquote>\n<p><strong>电梯算法</strong>：选择<strong>区块号和当前磁头位置距离最小</strong>的区块申请</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 单向选择，只有当一个方向的区块全部选择完，再反方向申请</div>\n\n<h3 id=\"4-设备驱动\"><a href=\"#4-设备驱动\" class=\"headerlink\" title=\"4.设备驱动\"></a>4.设备驱动</h3><h4 id=\"4-1引言\"><a href=\"#4-1引言\" class=\"headerlink\" title=\"4.1引言\"></a>4.1引言</h4><p><strong>①概述</strong></p>\n<blockquote>\n<p>计算机<strong>使用外设的本质</strong>就是<strong>修改外设控制卡的寄存器</strong>，外设工作完毕后，通过<strong>中断</strong>向计算机<strong>传递信息</strong></p>\n</blockquote>\n<p><strong>②文件视图</strong></p>\n<blockquote>\n<p><strong>设备</strong>在<strong>操作系统中</strong>视为一种<strong>特殊的文件</strong>，也是通过类似于<code>open()</code>，<code>read()</code>等<strong>文件操作函数</strong>操作</p>\n</blockquote>\n"},{"title":"计算机网络（一）","seo_title":"seo名称","toc":true,"indent":true,"top":false,"comments":1,"archive":true,"cover":false,"mathjax":false,"pin":false,"top_meta":false,"bottom_meta":false,"sidebar":["toc"],"keywords":"文章关键词","updated":"2023-11-07T14:10:58.029Z","img":"/medias/featureimages/31.webp","date":"2023-11-07T14:10:58.029Z","summary":"计算机网络","_content":"# 计算机网络（一）\n## 计算机网络基础\n### 1.引言\n#### 1.1基本概念\n**①网络**\n>由若干**节点**和连接节点的**链路**组成\n{%list%}\n按照拓扑类型可分为总线型、星型、环形和网状型\n{%endlist%}\n\n**②互联网**\n>**多个网络**由**路由器**互联，形成**互联网**\n{%list%}\n因特网是最大的互联网，使用TCP/IP协议\n{%endlist%}\n\n**③ISP**\n>**因特网服务提供商**，如中国**电信**、中国**联通**等\n{%list%}\n类似于树结构，只要有子节点就是父节点，所以个人也可以成为某种意义上的ISP\n{%endlist%}\n\n**④分组交换**\n{%list%}\n计算机网络传输信息方式\n{%endlist%}\n>将**数据**分成**多个包**，每个包由**描述信息**和**数据部分**组成\n\n>**路由器**收到包后，**暂时存储**，根据**描述信息**送到**下一个路由器**，直到送到**目标地址**\n\n>**目的地址**收到**所有包**后，根据**描述信息**将其**组合到一起**\n{%right%}\n无需建立连接、线路利用率高、出错时重发数据量小\n{%endright%}\n{%wrong%}\n有转发时延、需要传递额外的信息、出错频率变大\n{%endwrong%}\n\n**⑤网络性能指标**\n>**速率**：**设备**在**单位时间**传递的**比特数**\n\n>**带宽**：**网络**中**一个点**到**另一个点**的**最高速率**\n\n>**吞吐量**：**单位时间**内能**通过整个网络**的数据量，受到**带宽**和**速率**的限制\n\n>**时延**：由**发送时延**、**传播时延**和**处理时延**组成\n\n>**利用率**：网络中所有**信道利用率**的**加权平均**\n\n>**丢包率**：一定时间内，**丢失的分组**数量占**总分组**数量的**比例**\n{%right%}\n利用率最好保持在50%左右，因为利用率越高，时延越大\n{%endright%}\n{%list%}\n当分包出现误码，或者网络拥塞时会被丢弃，主要为后者\n{%endlist%}\n\n#### 1.2TCP/IP体系结构\n**①构成**\n{%right%}\n真实的TCP/IP结构只有应用层、运输层、网络层和接口层四层，为了方便理解，将接口层拆解为链路层和物理层\n{%endright%}\n{%list%}\n网络层是核心\n{%endlist%}\n>**应用层**：解决**进程间的交互**问题\n\n>**运输层**：解决**进程**之间**基于网络通信**的问题\n\n>**网络层**：解决多个**分组**在**网络间传输**的问题\n\n>**链路层**：解决**分组**在**一个网络中传输**的问题\n\n>**物理层**：解决使用**何种信号传输比特**的问题\n\n**②基本概念**\n>**实体**：可以**发送和接收消息**的**硬件**或者**软件**\n{%list%}\n收发双方相同层次的对应实体为对等实体\n{%endlist%}\n>**协议**：控制两个**对等实体**进行**逻辑通信的规则**，**对等层次**之间交换的**数据包**称为**协议数据单元PDU**\n{%list%}\n如应用层的HTTP协议，运输层的TCP协议，网络层的IP协议，链路层的CSMA协议，物理层的曼彻斯特编码等\n{%endlist%}\n>**服务**：**下层**给**相邻上层**提供的**功能接口**，**相邻层**之间交换的**数据包**称为**服务数据单元SDU**\n{%list%}\n相邻两层通过服务访问点交换信息，通过服务原语沟通\n{%endlist%}\n\n**③工作原理概述**\n{%right%}\n本质上层层包装，层层读取信息，以用户向一个网站服务器发出访问申请为例\n{%endright%}\n>**应用层**将**HTTP报文**发送给**运输层**\n{%list%}\nHTTP报文用于个人电脑和服务端的通信\n{%endlist%}\n>**运输层**给**HTTP报文**添加**TCP首部**，形成**TCP报文段**，并将其发送给**网络层**\n{%list%}\nTCP首部用于区分进程并实现可靠传输\n{%endlist%}\n>**网络层**给**TCP报文段**添加**IP首部**，形成**IP数据报**，并将其发送给**链路层**\n{%list%}\nIP首部使其可被路由器转发\n{%endlist%}\n>**链路层**给**IP数据报**添加**ETH首部**和**ETH尾部**，形成**帧**，并将其发送给**物理层**\n{%list%}\nETH首部包含了目的地址和源地址，ETH尾部用于检查其是否有误码\n{%endlist%}\n>**物理层**将**帧**转化为**01序列**，添加**前导码**，发送到**下一个端口**\n{%list%}\n前导码让下一个端口做好接收准备\n{%endlist%}\n>运送到**路由器**后，一层一层**读取信息（如从IP首部获得转发端口）**，再一层一层**包装**发送到**下一个端口**，如此往复，直到**到达目的地**\n{%list%}\n路由器由于没有进程，所以没有应用端和运输端\n{%endlist%}\n![TCP/IP体系结构工作原理](/image/JW_1.png)\n\n### 2.物理层\n#### 2.1引言\n**①协议**\n>**比特流传递时**的**描述信息**，可分为**机械特性**、**电气特性**、**功能特性**和**过程特性**\n{%list%}\n物理层考虑的是如何在不同的传输媒体上传输数据比特流，传输媒体可分为导引型（如光纤）和非导引型（如wifi）\n{%endlist%}\n**②传输方式**\n>**串行传输**：一次发送**一个比特**\n**并行传输**：一次发送**多个比特**\n{%list%}\n计算机内部通信采用并行传输，计算机之间通信采用串行传输\n{%endlist%}\n>**同步传输**：**字节**之间**没有间隔**，需要保证**收发双方时钟同步**\n**异步传输**：**字节**之间有**不固定的间隔**，在**每个字节前后**加上**起始位**和**结束位**\n\n#### 2.2编码与调制\n**①引言**\n{%list%}\n对于数字信号和模拟信号，编码和调制的含义不同，计算机网络主要使用数字信号，故只介绍数字信号\n{%endlist%}\n>**编码**：**不改变信号性质**，仅仅对**信号波形**进行变换\n\n>**调制**：将**数字信号**的**频率范围搬移到较高的频段**，并**转化为模拟信号**\n\n![信号传递过程](/image/JW_2.png)\n\n**②编码方法**\n>**曼彻斯特编码**：在**每个码元**的**中间时刻**发生**跳变**，使用**正负跳变**表示比特\n\n>**差分曼彻斯特编码**：跳变**仅仅表示时钟**，使用**码元开始处电平是否变化**表示比特\n\n**③调制方法**\n>**基本调制方法**有**调幅**、**调频**和**调相**，但是这样**一个码元**只包含**一个比特信息**\n{%list%}\n采用混合调制方法，如正交振幅调制QAM，一个码元可以表示16种信息\n{%endlist%}\n#### 2.3信道极限容量\n**①引言**\n{%warning%}\n当信号通过信道传输时，可能会导致失真，失真严重时将无法识别\n{%endwarning%}\n>**影响因素**：**码元传输速率**、**信号传输距离**、**噪声干扰**和**传输媒体质量**等\n\n**②奈式准则**\n>为了避免**码间串扰**。**码元传输速率**是有**上限**的\n{%warning%}\n奈式准则是理想情况（无噪声），实际上能传输的最高码元速率要远低于奈式准则给出的\n{%endwarning%}\n**③香农公式**\n>给出了**带宽受限**且有**高斯白噪声干扰**的信道的**极限信息传输速率**\n{%right%}\n想要提高信息的传输速率必须采用更好的调制方法和信道的信噪比\n{%endright%}\n\n### 3.链路层\n#### 3.1基本功能\n**①包装成帧**\n>**帧头**和**帧尾**包含重要的**控制信息**\n{%list%}\n主要内容为目的地址、源地址和帧校验序列\n{%endlist%}\n{%right%}\n如果帧的其他部分也包含帧定界标志，需要与真正的帧定界符相区分，如插入“转义字符”\n{%endright%}\n**②差错检测**\n>**传输过程**中，**比特**可能发生**反转**或者**丢失**，通过**帧校验序列**检测\n{%list%}\n常用的检测方法为循环冗余检测，两边对数据采用同样的算法，若结果一致则无误码\n{%endlist%}\n**③可靠传输**\n>当出现**分组错误**、**分组丢失**、**分组失序**和**分组重复**等错误时，需要发送方**重新发送**\n{%list%}\n可靠传输不是必须的，通常误码率高时（如无线传输），需要可靠传输服务\n{%endlist%}\n{%right%}\n可靠传输这一概念并不局限于链路层\n{%endright%}\n#### 3.2可靠传输协议\n**①停止等待协议SW**\n>**接收方**：每次**接收一个分组**，若接收到**正确的分组**，发送**确认分组**，**反之**则发送**否认分组**\n\n>**发送方**：每次**发送一个分组**，只有**接收到确认分组**后再**发送下一分组**，接收到**否认分组**则**重新发送**\n{%list%}\n成功确认的分组将会从缓存中删除\n{%endlist%}\n{%right%}\n使用超时计时器以防分组丢失，给分组添加序号防止分组重复和分组迟到\n{%endright%}\n{%warning%}\n该方法的信道利用率较低，因为每次发送一个分组就需要等待一个往返时间\n{%endwarning%}\n**②回退N帧协议GBN**\n>**发送方**：每次**发送N个分组**，若**N个分组均正确**，则发送**下一批分组**，若收到**NAKy否认分组**，则这一批分组中**y以及y之后的分组全部重发**\n\n>**接收方**：每次接**收一个分组**并**逐个确认**，若接收到的**第x个分组以及之前的分组全部正确**，则发送**ACKx确认分组**，若**第y个分组发生错误**，则发送**NAKy否认分组**\n{%right%}\n每次可以发送多个分组，提高了信道的利用率\n{%endright%}\n{%warning%}\n一个分组的错误会导致后续分组的重传，当信道质量较差时，效率较低\n{%endwarning%}\n**③选择重传协议SR**\n>**发送方**：**可发送的分组范围**称为**发送窗口**，**落入发送窗口**且**没有被发送**的分组会被**发送**，**发送窗口**一直**向前移动**，只有收到**确认分组**的位置才能**顺利通过**，否则会被**卡住（超时或者收到错误分组）**，被**卡住**的地方**重新发送**\n\n>**接收方**：**接收的分组范围**称为**接收窗口**，**落入接收窗口**的分组会被**逐个确认**，并发送**对应的信号**，**接收窗口**一直**向前移动**，只有**确认正确**的位置才能**顺利通过**\n{%right%}\n减小了错误分组对发送其他分组的影响\n{%endright%}\n\n#### 3.3媒体介入控制MAC\n**①引言**\n协调多个发送和接收站点对一个共享传输媒体的占用\n\n静态划分信道：将频率和时间分给不同的用户\n\n**②CSMA/CD协议**\n>**多址接入MA**：**多个设备**连接在**一条总线**上，**竞争**使用\n\n>**载波监听CS**：每个设备在**发送帧之前**，**检测总线**是否**空闲（有96比特时间）**，如果**有则发送**\n{%list%}\n96比特时间\n{%endlist%}\n>**碰撞检测CD**：每个**发送帧**的设备**边发送边检测碰撞**，一旦总线上出现碰撞，则立即停止发送，一段时间后重新发送\n\nSIFS：保证一个站点能做好准备，从发送方式切换到接收方式\n\n碰撞：在一个设备发送帧的过程中，其他设备也要发送帧\n先检测到碰撞信号的设备停止发送\n两个帧信号相遇\n帧的长度不能太小，必须保证发送该帧的时间大于争用期，否则需要填充\n\n帧长也有上限\nppp协议\n用户只有获取到ISP分配的合法IP地址，才能连入因特网\n组成：对各种协议数据报的封装方法、链路控制协议LCP（建立配置数据链路的连接），网络控制协议用于支持不同的网络层协议\n\n检测到载波并建立物理层连接后，由静止变为建立状态\nLCP协商一些配置选项（如鉴别协议），若成功，则进入鉴别状态，反之则变为静止\n如果无需鉴别或鉴别成功则进入网络状态，反之则进入终止状态\n进行NCP配置，配置完成后就进入打开状态\n当请求终止或者出现故障就进入终止状态\n载波停止进入静止状态\n\nmac地址是每个接口独有的，用于标识各个主机\n协调各个主机争用总线\n从比特流中区分地址和数据\n\nip地址到mac地址\n\n\nip层\n如何标识网络中的各个主机\n路由器如何转发分组\n\n运输层\n分组传递给哪个应用？\n出现错误如何处理？\n","source":"_posts/计算机网络（一）.md","raw":"---\ntitle: 计算机网络（一）\nseo_title: seo名称\ntoc: true\nindent: true\ntop: false\ncomments: true\narchive: true\ncover: false\nmathjax: false\npin: false\ntop_meta: false\nbottom_meta: false\nsidebar:\n  - toc\ntag:\n  - 计算机网络\n  - 《计算机网络自顶向下》\ncategories: 计算机基础\nkeywords: 文章关键词\nupdated: ''\nimg: /medias/featureimages/31.webp\ndate:\nsummary: 计算机网络\n---\n# 计算机网络（一）\n## 计算机网络基础\n### 1.引言\n#### 1.1基本概念\n**①网络**\n>由若干**节点**和连接节点的**链路**组成\n{%list%}\n按照拓扑类型可分为总线型、星型、环形和网状型\n{%endlist%}\n\n**②互联网**\n>**多个网络**由**路由器**互联，形成**互联网**\n{%list%}\n因特网是最大的互联网，使用TCP/IP协议\n{%endlist%}\n\n**③ISP**\n>**因特网服务提供商**，如中国**电信**、中国**联通**等\n{%list%}\n类似于树结构，只要有子节点就是父节点，所以个人也可以成为某种意义上的ISP\n{%endlist%}\n\n**④分组交换**\n{%list%}\n计算机网络传输信息方式\n{%endlist%}\n>将**数据**分成**多个包**，每个包由**描述信息**和**数据部分**组成\n\n>**路由器**收到包后，**暂时存储**，根据**描述信息**送到**下一个路由器**，直到送到**目标地址**\n\n>**目的地址**收到**所有包**后，根据**描述信息**将其**组合到一起**\n{%right%}\n无需建立连接、线路利用率高、出错时重发数据量小\n{%endright%}\n{%wrong%}\n有转发时延、需要传递额外的信息、出错频率变大\n{%endwrong%}\n\n**⑤网络性能指标**\n>**速率**：**设备**在**单位时间**传递的**比特数**\n\n>**带宽**：**网络**中**一个点**到**另一个点**的**最高速率**\n\n>**吞吐量**：**单位时间**内能**通过整个网络**的数据量，受到**带宽**和**速率**的限制\n\n>**时延**：由**发送时延**、**传播时延**和**处理时延**组成\n\n>**利用率**：网络中所有**信道利用率**的**加权平均**\n\n>**丢包率**：一定时间内，**丢失的分组**数量占**总分组**数量的**比例**\n{%right%}\n利用率最好保持在50%左右，因为利用率越高，时延越大\n{%endright%}\n{%list%}\n当分包出现误码，或者网络拥塞时会被丢弃，主要为后者\n{%endlist%}\n\n#### 1.2TCP/IP体系结构\n**①构成**\n{%right%}\n真实的TCP/IP结构只有应用层、运输层、网络层和接口层四层，为了方便理解，将接口层拆解为链路层和物理层\n{%endright%}\n{%list%}\n网络层是核心\n{%endlist%}\n>**应用层**：解决**进程间的交互**问题\n\n>**运输层**：解决**进程**之间**基于网络通信**的问题\n\n>**网络层**：解决多个**分组**在**网络间传输**的问题\n\n>**链路层**：解决**分组**在**一个网络中传输**的问题\n\n>**物理层**：解决使用**何种信号传输比特**的问题\n\n**②基本概念**\n>**实体**：可以**发送和接收消息**的**硬件**或者**软件**\n{%list%}\n收发双方相同层次的对应实体为对等实体\n{%endlist%}\n>**协议**：控制两个**对等实体**进行**逻辑通信的规则**，**对等层次**之间交换的**数据包**称为**协议数据单元PDU**\n{%list%}\n如应用层的HTTP协议，运输层的TCP协议，网络层的IP协议，链路层的CSMA协议，物理层的曼彻斯特编码等\n{%endlist%}\n>**服务**：**下层**给**相邻上层**提供的**功能接口**，**相邻层**之间交换的**数据包**称为**服务数据单元SDU**\n{%list%}\n相邻两层通过服务访问点交换信息，通过服务原语沟通\n{%endlist%}\n\n**③工作原理概述**\n{%right%}\n本质上层层包装，层层读取信息，以用户向一个网站服务器发出访问申请为例\n{%endright%}\n>**应用层**将**HTTP报文**发送给**运输层**\n{%list%}\nHTTP报文用于个人电脑和服务端的通信\n{%endlist%}\n>**运输层**给**HTTP报文**添加**TCP首部**，形成**TCP报文段**，并将其发送给**网络层**\n{%list%}\nTCP首部用于区分进程并实现可靠传输\n{%endlist%}\n>**网络层**给**TCP报文段**添加**IP首部**，形成**IP数据报**，并将其发送给**链路层**\n{%list%}\nIP首部使其可被路由器转发\n{%endlist%}\n>**链路层**给**IP数据报**添加**ETH首部**和**ETH尾部**，形成**帧**，并将其发送给**物理层**\n{%list%}\nETH首部包含了目的地址和源地址，ETH尾部用于检查其是否有误码\n{%endlist%}\n>**物理层**将**帧**转化为**01序列**，添加**前导码**，发送到**下一个端口**\n{%list%}\n前导码让下一个端口做好接收准备\n{%endlist%}\n>运送到**路由器**后，一层一层**读取信息（如从IP首部获得转发端口）**，再一层一层**包装**发送到**下一个端口**，如此往复，直到**到达目的地**\n{%list%}\n路由器由于没有进程，所以没有应用端和运输端\n{%endlist%}\n![TCP/IP体系结构工作原理](/image/JW_1.png)\n\n### 2.物理层\n#### 2.1引言\n**①协议**\n>**比特流传递时**的**描述信息**，可分为**机械特性**、**电气特性**、**功能特性**和**过程特性**\n{%list%}\n物理层考虑的是如何在不同的传输媒体上传输数据比特流，传输媒体可分为导引型（如光纤）和非导引型（如wifi）\n{%endlist%}\n**②传输方式**\n>**串行传输**：一次发送**一个比特**\n**并行传输**：一次发送**多个比特**\n{%list%}\n计算机内部通信采用并行传输，计算机之间通信采用串行传输\n{%endlist%}\n>**同步传输**：**字节**之间**没有间隔**，需要保证**收发双方时钟同步**\n**异步传输**：**字节**之间有**不固定的间隔**，在**每个字节前后**加上**起始位**和**结束位**\n\n#### 2.2编码与调制\n**①引言**\n{%list%}\n对于数字信号和模拟信号，编码和调制的含义不同，计算机网络主要使用数字信号，故只介绍数字信号\n{%endlist%}\n>**编码**：**不改变信号性质**，仅仅对**信号波形**进行变换\n\n>**调制**：将**数字信号**的**频率范围搬移到较高的频段**，并**转化为模拟信号**\n\n![信号传递过程](/image/JW_2.png)\n\n**②编码方法**\n>**曼彻斯特编码**：在**每个码元**的**中间时刻**发生**跳变**，使用**正负跳变**表示比特\n\n>**差分曼彻斯特编码**：跳变**仅仅表示时钟**，使用**码元开始处电平是否变化**表示比特\n\n**③调制方法**\n>**基本调制方法**有**调幅**、**调频**和**调相**，但是这样**一个码元**只包含**一个比特信息**\n{%list%}\n采用混合调制方法，如正交振幅调制QAM，一个码元可以表示16种信息\n{%endlist%}\n#### 2.3信道极限容量\n**①引言**\n{%warning%}\n当信号通过信道传输时，可能会导致失真，失真严重时将无法识别\n{%endwarning%}\n>**影响因素**：**码元传输速率**、**信号传输距离**、**噪声干扰**和**传输媒体质量**等\n\n**②奈式准则**\n>为了避免**码间串扰**。**码元传输速率**是有**上限**的\n{%warning%}\n奈式准则是理想情况（无噪声），实际上能传输的最高码元速率要远低于奈式准则给出的\n{%endwarning%}\n**③香农公式**\n>给出了**带宽受限**且有**高斯白噪声干扰**的信道的**极限信息传输速率**\n{%right%}\n想要提高信息的传输速率必须采用更好的调制方法和信道的信噪比\n{%endright%}\n\n### 3.链路层\n#### 3.1基本功能\n**①包装成帧**\n>**帧头**和**帧尾**包含重要的**控制信息**\n{%list%}\n主要内容为目的地址、源地址和帧校验序列\n{%endlist%}\n{%right%}\n如果帧的其他部分也包含帧定界标志，需要与真正的帧定界符相区分，如插入“转义字符”\n{%endright%}\n**②差错检测**\n>**传输过程**中，**比特**可能发生**反转**或者**丢失**，通过**帧校验序列**检测\n{%list%}\n常用的检测方法为循环冗余检测，两边对数据采用同样的算法，若结果一致则无误码\n{%endlist%}\n**③可靠传输**\n>当出现**分组错误**、**分组丢失**、**分组失序**和**分组重复**等错误时，需要发送方**重新发送**\n{%list%}\n可靠传输不是必须的，通常误码率高时（如无线传输），需要可靠传输服务\n{%endlist%}\n{%right%}\n可靠传输这一概念并不局限于链路层\n{%endright%}\n#### 3.2可靠传输协议\n**①停止等待协议SW**\n>**接收方**：每次**接收一个分组**，若接收到**正确的分组**，发送**确认分组**，**反之**则发送**否认分组**\n\n>**发送方**：每次**发送一个分组**，只有**接收到确认分组**后再**发送下一分组**，接收到**否认分组**则**重新发送**\n{%list%}\n成功确认的分组将会从缓存中删除\n{%endlist%}\n{%right%}\n使用超时计时器以防分组丢失，给分组添加序号防止分组重复和分组迟到\n{%endright%}\n{%warning%}\n该方法的信道利用率较低，因为每次发送一个分组就需要等待一个往返时间\n{%endwarning%}\n**②回退N帧协议GBN**\n>**发送方**：每次**发送N个分组**，若**N个分组均正确**，则发送**下一批分组**，若收到**NAKy否认分组**，则这一批分组中**y以及y之后的分组全部重发**\n\n>**接收方**：每次接**收一个分组**并**逐个确认**，若接收到的**第x个分组以及之前的分组全部正确**，则发送**ACKx确认分组**，若**第y个分组发生错误**，则发送**NAKy否认分组**\n{%right%}\n每次可以发送多个分组，提高了信道的利用率\n{%endright%}\n{%warning%}\n一个分组的错误会导致后续分组的重传，当信道质量较差时，效率较低\n{%endwarning%}\n**③选择重传协议SR**\n>**发送方**：**可发送的分组范围**称为**发送窗口**，**落入发送窗口**且**没有被发送**的分组会被**发送**，**发送窗口**一直**向前移动**，只有收到**确认分组**的位置才能**顺利通过**，否则会被**卡住（超时或者收到错误分组）**，被**卡住**的地方**重新发送**\n\n>**接收方**：**接收的分组范围**称为**接收窗口**，**落入接收窗口**的分组会被**逐个确认**，并发送**对应的信号**，**接收窗口**一直**向前移动**，只有**确认正确**的位置才能**顺利通过**\n{%right%}\n减小了错误分组对发送其他分组的影响\n{%endright%}\n\n#### 3.3媒体介入控制MAC\n**①引言**\n协调多个发送和接收站点对一个共享传输媒体的占用\n\n静态划分信道：将频率和时间分给不同的用户\n\n**②CSMA/CD协议**\n>**多址接入MA**：**多个设备**连接在**一条总线**上，**竞争**使用\n\n>**载波监听CS**：每个设备在**发送帧之前**，**检测总线**是否**空闲（有96比特时间）**，如果**有则发送**\n{%list%}\n96比特时间\n{%endlist%}\n>**碰撞检测CD**：每个**发送帧**的设备**边发送边检测碰撞**，一旦总线上出现碰撞，则立即停止发送，一段时间后重新发送\n\nSIFS：保证一个站点能做好准备，从发送方式切换到接收方式\n\n碰撞：在一个设备发送帧的过程中，其他设备也要发送帧\n先检测到碰撞信号的设备停止发送\n两个帧信号相遇\n帧的长度不能太小，必须保证发送该帧的时间大于争用期，否则需要填充\n\n帧长也有上限\nppp协议\n用户只有获取到ISP分配的合法IP地址，才能连入因特网\n组成：对各种协议数据报的封装方法、链路控制协议LCP（建立配置数据链路的连接），网络控制协议用于支持不同的网络层协议\n\n检测到载波并建立物理层连接后，由静止变为建立状态\nLCP协商一些配置选项（如鉴别协议），若成功，则进入鉴别状态，反之则变为静止\n如果无需鉴别或鉴别成功则进入网络状态，反之则进入终止状态\n进行NCP配置，配置完成后就进入打开状态\n当请求终止或者出现故障就进入终止状态\n载波停止进入静止状态\n\nmac地址是每个接口独有的，用于标识各个主机\n协调各个主机争用总线\n从比特流中区分地址和数据\n\nip地址到mac地址\n\n\nip层\n如何标识网络中的各个主机\n路由器如何转发分组\n\n运输层\n分组传递给哪个应用？\n出现错误如何处理？\n","slug":"计算机网络（一）","published":1,"_id":"clodx7qy70000ywvd2snlaort","layout":"post","photos":[],"link":"","content":"<h1 id=\"计算机网络（一）\"><a href=\"#计算机网络（一）\" class=\"headerlink\" title=\"计算机网络（一）\"></a>计算机网络（一）</h1><h2 id=\"计算机网络基础\"><a href=\"#计算机网络基础\" class=\"headerlink\" title=\"计算机网络基础\"></a>计算机网络基础</h2><h3 id=\"1-引言\"><a href=\"#1-引言\" class=\"headerlink\" title=\"1.引言\"></a>1.引言</h3><h4 id=\"1-1基本概念\"><a href=\"#1-1基本概念\" class=\"headerlink\" title=\"1.1基本概念\"></a>1.1基本概念</h4><p><strong>①网络</strong></p>\n<blockquote>\n<p>由若干<strong>节点</strong>和连接节点的<strong>链路</strong>组成</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 按照拓扑类型可分为总线型、星型、环形和网状型</div>\n\n<p><strong>②互联网</strong></p>\n<blockquote>\n<p><strong>多个网络</strong>由<strong>路由器</strong>互联，形成<strong>互联网</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 因特网是最大的互联网，使用TCP/IP协议</div>\n\n<p><strong>③ISP</strong></p>\n<blockquote>\n<p><strong>因特网服务提供商</strong>，如中国<strong>电信</strong>、中国<strong>联通</strong>等</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 类似于树结构，只要有子节点就是父节点，所以个人也可以成为某种意义上的ISP</div>\n\n<p><strong>④分组交换</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 计算机网络传输信息方式</div>\n<blockquote>\n<p>将<strong>数据</strong>分成<strong>多个包</strong>，每个包由<strong>描述信息</strong>和<strong>数据部分</strong>组成</p>\n</blockquote>\n<blockquote>\n<p><strong>路由器</strong>收到包后，<strong>暂时存储</strong>，根据<strong>描述信息</strong>送到<strong>下一个路由器</strong>，直到送到<strong>目标地址</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>目的地址</strong>收到<strong>所有包</strong>后，根据<strong>描述信息</strong>将其<strong>组合到一起</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 无需建立连接、线路利用率高、出错时重发数据量小</div>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 有转发时延、需要传递额外的信息、出错频率变大</div>\n\n<p><strong>⑤网络性能指标</strong></p>\n<blockquote>\n<p><strong>速率</strong>：<strong>设备</strong>在<strong>单位时间</strong>传递的<strong>比特数</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>带宽</strong>：<strong>网络</strong>中<strong>一个点</strong>到<strong>另一个点</strong>的<strong>最高速率</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>吞吐量</strong>：<strong>单位时间</strong>内能<strong>通过整个网络</strong>的数据量，受到<strong>带宽</strong>和<strong>速率</strong>的限制</p>\n</blockquote>\n<blockquote>\n<p><strong>时延</strong>：由<strong>发送时延</strong>、<strong>传播时延</strong>和<strong>处理时延</strong>组成</p>\n</blockquote>\n<blockquote>\n<p><strong>利用率</strong>：网络中所有<strong>信道利用率</strong>的<strong>加权平均</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>丢包率</strong>：一定时间内，<strong>丢失的分组</strong>数量占<strong>总分组</strong>数量的<strong>比例</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 利用率最好保持在50%左右，因为利用率越高，时延越大</div>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 当分包出现误码，或者网络拥塞时会被丢弃，主要为后者</div>\n\n<h4 id=\"1-2TCP-x2F-IP体系结构\"><a href=\"#1-2TCP-x2F-IP体系结构\" class=\"headerlink\" title=\"1.2TCP/IP体系结构\"></a>1.2TCP/IP体系结构</h4><p><strong>①构成</strong></p>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 真实的TCP/IP结构只有应用层、运输层、网络层和接口层四层，为了方便理解，将接口层拆解为链路层和物理层</div>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 网络层是核心</div>\n<blockquote>\n<p><strong>应用层</strong>：解决<strong>进程间的交互</strong>问题</p>\n</blockquote>\n<blockquote>\n<p><strong>运输层</strong>：解决<strong>进程</strong>之间<strong>基于网络通信</strong>的问题</p>\n</blockquote>\n<blockquote>\n<p><strong>网络层</strong>：解决多个<strong>分组</strong>在<strong>网络间传输</strong>的问题</p>\n</blockquote>\n<blockquote>\n<p><strong>链路层</strong>：解决<strong>分组</strong>在<strong>一个网络中传输</strong>的问题</p>\n</blockquote>\n<blockquote>\n<p><strong>物理层</strong>：解决使用<strong>何种信号传输比特</strong>的问题</p>\n</blockquote>\n<p><strong>②基本概念</strong></p>\n<blockquote>\n<p><strong>实体</strong>：可以<strong>发送和接收消息</strong>的<strong>硬件</strong>或者<strong>软件</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 收发双方相同层次的对应实体为对等实体</div>\n<blockquote>\n<p><strong>协议</strong>：控制两个<strong>对等实体</strong>进行<strong>逻辑通信的规则</strong>，<strong>对等层次</strong>之间交换的<strong>数据包</strong>称为<strong>协议数据单元PDU</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 如应用层的HTTP协议，运输层的TCP协议，网络层的IP协议，链路层的CSMA协议，物理层的曼彻斯特编码等</div>\n<blockquote>\n<p><strong>服务</strong>：<strong>下层</strong>给<strong>相邻上层</strong>提供的<strong>功能接口</strong>，<strong>相邻层</strong>之间交换的<strong>数据包</strong>称为<strong>服务数据单元SDU</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 相邻两层通过服务访问点交换信息，通过服务原语沟通</div>\n\n<p><strong>③工作原理概述</strong></p>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 本质上层层包装，层层读取信息，以用户向一个网站服务器发出访问申请为例</div>\n<blockquote>\n<p><strong>应用层</strong>将<strong>HTTP报文</strong>发送给<strong>运输层</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> HTTP报文用于个人电脑和服务端的通信</div>\n<blockquote>\n<p><strong>运输层</strong>给<strong>HTTP报文</strong>添加<strong>TCP首部</strong>，形成<strong>TCP报文段</strong>，并将其发送给<strong>网络层</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> TCP首部用于区分进程并实现可靠传输</div>\n<blockquote>\n<p><strong>网络层</strong>给<strong>TCP报文段</strong>添加<strong>IP首部</strong>，形成<strong>IP数据报</strong>，并将其发送给<strong>链路层</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> IP首部使其可被路由器转发</div>\n<blockquote>\n<p><strong>链路层</strong>给<strong>IP数据报</strong>添加<strong>ETH首部</strong>和<strong>ETH尾部</strong>，形成<strong>帧</strong>，并将其发送给<strong>物理层</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> ETH首部包含了目的地址和源地址，ETH尾部用于检查其是否有误码</div>\n<blockquote>\n<p><strong>物理层</strong>将<strong>帧</strong>转化为<strong>01序列</strong>，添加<strong>前导码</strong>，发送到<strong>下一个端口</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 前导码让下一个端口做好接收准备</div>\n<blockquote>\n<p>运送到<strong>路由器</strong>后，一层一层<strong>读取信息（如从IP首部获得转发端口）</strong>，再一层一层<strong>包装</strong>发送到<strong>下一个端口</strong>，如此往复，直到<strong>到达目的地</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 路由器由于没有进程，所以没有应用端和运输端</div>\n<p><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/JW_1.png\" alt=\"TCP/IP体系结构工作原理\"></p>\n<h3 id=\"2-物理层\"><a href=\"#2-物理层\" class=\"headerlink\" title=\"2.物理层\"></a>2.物理层</h3><h4 id=\"2-1引言\"><a href=\"#2-1引言\" class=\"headerlink\" title=\"2.1引言\"></a>2.1引言</h4><p><strong>①协议</strong></p>\n<blockquote>\n<p><strong>比特流传递时</strong>的<strong>描述信息</strong>，可分为<strong>机械特性</strong>、<strong>电气特性</strong>、<strong>功能特性</strong>和<strong>过程特性</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 物理层考虑的是如何在不同的传输媒体上传输数据比特流，传输媒体可分为导引型（如光纤）和非导引型（如wifi）</div>\n<p><strong>②传输方式</strong></p>\n<blockquote>\n<p><strong>串行传输</strong>：一次发送<strong>一个比特</strong><br><strong>并行传输</strong>：一次发送<strong>多个比特</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 计算机内部通信采用并行传输，计算机之间通信采用串行传输</div>\n<blockquote>\n<p><strong>同步传输</strong>：<strong>字节</strong>之间<strong>没有间隔</strong>，需要保证<strong>收发双方时钟同步</strong><br><strong>异步传输</strong>：<strong>字节</strong>之间有<strong>不固定的间隔</strong>，在<strong>每个字节前后</strong>加上<strong>起始位</strong>和<strong>结束位</strong></p>\n</blockquote>\n<h4 id=\"2-2编码与调制\"><a href=\"#2-2编码与调制\" class=\"headerlink\" title=\"2.2编码与调制\"></a>2.2编码与调制</h4><p><strong>①引言</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 对于数字信号和模拟信号，编码和调制的含义不同，计算机网络主要使用数字信号，故只介绍数字信号</div>\n<blockquote>\n<p><strong>编码</strong>：<strong>不改变信号性质</strong>，仅仅对<strong>信号波形</strong>进行变换</p>\n</blockquote>\n<blockquote>\n<p><strong>调制</strong>：将<strong>数字信号</strong>的<strong>频率范围搬移到较高的频段</strong>，并<strong>转化为模拟信号</strong></p>\n</blockquote>\n<p><img src=\"/images/loading.gif# eg ./images/loading.gif\" data-original=\"/image/JW_2.png\" alt=\"信号传递过程\"></p>\n<p><strong>②编码方法</strong></p>\n<blockquote>\n<p><strong>曼彻斯特编码</strong>：在<strong>每个码元</strong>的<strong>中间时刻</strong>发生<strong>跳变</strong>，使用<strong>正负跳变</strong>表示比特</p>\n</blockquote>\n<blockquote>\n<p><strong>差分曼彻斯特编码</strong>：跳变<strong>仅仅表示时钟</strong>，使用<strong>码元开始处电平是否变化</strong>表示比特</p>\n</blockquote>\n<p><strong>③调制方法</strong></p>\n<blockquote>\n<p><strong>基本调制方法</strong>有<strong>调幅</strong>、<strong>调频</strong>和<strong>调相</strong>，但是这样<strong>一个码元</strong>只包含<strong>一个比特信息</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 采用混合调制方法，如正交振幅调制QAM，一个码元可以表示16种信息</div>\n<h4 id=\"2-3信道极限容量\"><a href=\"#2-3信道极限容量\" class=\"headerlink\" title=\"2.3信道极限容量\"></a>2.3信道极限容量</h4><p><strong>①引言</strong></p>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 当信号通过信道传输时，可能会导致失真，失真严重时将无法识别</div>\n<blockquote>\n<p><strong>影响因素</strong>：<strong>码元传输速率</strong>、<strong>信号传输距离</strong>、<strong>噪声干扰</strong>和<strong>传输媒体质量</strong>等</p>\n</blockquote>\n<p><strong>②奈式准则</strong></p>\n<blockquote>\n<p>为了避免<strong>码间串扰</strong>。<strong>码元传输速率</strong>是有<strong>上限</strong>的</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 奈式准则是理想情况（无噪声），实际上能传输的最高码元速率要远低于奈式准则给出的</div>\n<p><strong>③香农公式</strong></p>\n<blockquote>\n<p>给出了<strong>带宽受限</strong>且有<strong>高斯白噪声干扰</strong>的信道的<strong>极限信息传输速率</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 想要提高信息的传输速率必须采用更好的调制方法和信道的信噪比</div>\n\n<h3 id=\"3-链路层\"><a href=\"#3-链路层\" class=\"headerlink\" title=\"3.链路层\"></a>3.链路层</h3><h4 id=\"3-1基本功能\"><a href=\"#3-1基本功能\" class=\"headerlink\" title=\"3.1基本功能\"></a>3.1基本功能</h4><p><strong>①包装成帧</strong></p>\n<blockquote>\n<p><strong>帧头</strong>和<strong>帧尾</strong>包含重要的<strong>控制信息</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 主要内容为目的地址、源地址和帧校验序列</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 如果帧的其他部分也包含帧定界标志，需要与真正的帧定界符相区分，如插入“转义字符”</div>\n<p><strong>②差错检测</strong></p>\n<blockquote>\n<p><strong>传输过程</strong>中，<strong>比特</strong>可能发生<strong>反转</strong>或者<strong>丢失</strong>，通过<strong>帧校验序列</strong>检测</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 常用的检测方法为循环冗余检测，两边对数据采用同样的算法，若结果一致则无误码</div>\n<p><strong>③可靠传输</strong></p>\n<blockquote>\n<p>当出现<strong>分组错误</strong>、<strong>分组丢失</strong>、<strong>分组失序</strong>和<strong>分组重复</strong>等错误时，需要发送方<strong>重新发送</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 可靠传输不是必须的，通常误码率高时（如无线传输），需要可靠传输服务</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 可靠传输这一概念并不局限于链路层</div>\n<h4 id=\"3-2可靠传输协议\"><a href=\"#3-2可靠传输协议\" class=\"headerlink\" title=\"3.2可靠传输协议\"></a>3.2可靠传输协议</h4><p><strong>①停止等待协议SW</strong></p>\n<blockquote>\n<p><strong>接收方</strong>：每次<strong>接收一个分组</strong>，若接收到<strong>正确的分组</strong>，发送<strong>确认分组</strong>，<strong>反之</strong>则发送<strong>否认分组</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>发送方</strong>：每次<strong>发送一个分组</strong>，只有<strong>接收到确认分组</strong>后再<strong>发送下一分组</strong>，接收到<strong>否认分组</strong>则<strong>重新发送</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 成功确认的分组将会从缓存中删除</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 使用超时计时器以防分组丢失，给分组添加序号防止分组重复和分组迟到</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 该方法的信道利用率较低，因为每次发送一个分组就需要等待一个往返时间</div>\n<p><strong>②回退N帧协议GBN</strong></p>\n<blockquote>\n<p><strong>发送方</strong>：每次<strong>发送N个分组</strong>，若<strong>N个分组均正确</strong>，则发送<strong>下一批分组</strong>，若收到<strong>NAKy否认分组</strong>，则这一批分组中<strong>y以及y之后的分组全部重发</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>接收方</strong>：每次接<strong>收一个分组</strong>并<strong>逐个确认</strong>，若接收到的<strong>第x个分组以及之前的分组全部正确</strong>，则发送<strong>ACKx确认分组</strong>，若<strong>第y个分组发生错误</strong>，则发送<strong>NAKy否认分组</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 每次可以发送多个分组，提高了信道的利用率</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 一个分组的错误会导致后续分组的重传，当信道质量较差时，效率较低</div>\n<p><strong>③选择重传协议SR</strong></p>\n<blockquote>\n<p><strong>发送方</strong>：<strong>可发送的分组范围</strong>称为<strong>发送窗口</strong>，<strong>落入发送窗口</strong>且<strong>没有被发送</strong>的分组会被<strong>发送</strong>，<strong>发送窗口</strong>一直<strong>向前移动</strong>，只有收到<strong>确认分组</strong>的位置才能<strong>顺利通过</strong>，否则会被<strong>卡住（超时或者收到错误分组）</strong>，被<strong>卡住</strong>的地方<strong>重新发送</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>接收方</strong>：<strong>接收的分组范围</strong>称为<strong>接收窗口</strong>，<strong>落入接收窗口</strong>的分组会被<strong>逐个确认</strong>，并发送<strong>对应的信号</strong>，<strong>接收窗口</strong>一直<strong>向前移动</strong>，只有<strong>确认正确</strong>的位置才能<strong>顺利通过</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 减小了错误分组对发送其他分组的影响</div>\n\n<h4 id=\"3-3媒体介入控制MAC\"><a href=\"#3-3媒体介入控制MAC\" class=\"headerlink\" title=\"3.3媒体介入控制MAC\"></a>3.3媒体介入控制MAC</h4><p><strong>①引言</strong><br>协调多个发送和接收站点对一个共享传输媒体的占用</p>\n<p>静态划分信道：将频率和时间分给不同的用户</p>\n<p><strong>②CSMA/CD协议</strong></p>\n<blockquote>\n<p><strong>多址接入MA</strong>：<strong>多个设备</strong>连接在<strong>一条总线</strong>上，<strong>竞争</strong>使用</p>\n</blockquote>\n<blockquote>\n<p><strong>载波监听CS</strong>：每个设备在<strong>发送帧之前</strong>，<strong>检测总线</strong>是否<strong>空闲（有96比特时间）</strong>，如果<strong>有则发送</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 96比特时间</div>\n<blockquote>\n<p><strong>碰撞检测CD</strong>：每个<strong>发送帧</strong>的设备<strong>边发送边检测碰撞</strong>，一旦总线上出现碰撞，则立即停止发送，一段时间后重新发送</p>\n</blockquote>\n<p>SIFS：保证一个站点能做好准备，从发送方式切换到接收方式</p>\n<p>碰撞：在一个设备发送帧的过程中，其他设备也要发送帧<br>先检测到碰撞信号的设备停止发送<br>两个帧信号相遇<br>帧的长度不能太小，必须保证发送该帧的时间大于争用期，否则需要填充</p>\n<p>帧长也有上限<br>ppp协议<br>用户只有获取到ISP分配的合法IP地址，才能连入因特网<br>组成：对各种协议数据报的封装方法、链路控制协议LCP（建立配置数据链路的连接），网络控制协议用于支持不同的网络层协议</p>\n<p>检测到载波并建立物理层连接后，由静止变为建立状态<br>LCP协商一些配置选项（如鉴别协议），若成功，则进入鉴别状态，反之则变为静止<br>如果无需鉴别或鉴别成功则进入网络状态，反之则进入终止状态<br>进行NCP配置，配置完成后就进入打开状态<br>当请求终止或者出现故障就进入终止状态<br>载波停止进入静止状态</p>\n<p>mac地址是每个接口独有的，用于标识各个主机<br>协调各个主机争用总线<br>从比特流中区分地址和数据</p>\n<p>ip地址到mac地址</p>\n<p>ip层<br>如何标识网络中的各个主机<br>路由器如何转发分组</p>\n<p>运输层<br>分组传递给哪个应用？<br>出现错误如何处理？</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"计算机网络（一）\"><a href=\"#计算机网络（一）\" class=\"headerlink\" title=\"计算机网络（一）\"></a>计算机网络（一）</h1><h2 id=\"计算机网络基础\"><a href=\"#计算机网络基础\" class=\"headerlink\" title=\"计算机网络基础\"></a>计算机网络基础</h2><h3 id=\"1-引言\"><a href=\"#1-引言\" class=\"headerlink\" title=\"1.引言\"></a>1.引言</h3><h4 id=\"1-1基本概念\"><a href=\"#1-1基本概念\" class=\"headerlink\" title=\"1.1基本概念\"></a>1.1基本概念</h4><p><strong>①网络</strong></p>\n<blockquote>\n<p>由若干<strong>节点</strong>和连接节点的<strong>链路</strong>组成</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 按照拓扑类型可分为总线型、星型、环形和网状型</div>\n\n<p><strong>②互联网</strong></p>\n<blockquote>\n<p><strong>多个网络</strong>由<strong>路由器</strong>互联，形成<strong>互联网</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 因特网是最大的互联网，使用TCP/IP协议</div>\n\n<p><strong>③ISP</strong></p>\n<blockquote>\n<p><strong>因特网服务提供商</strong>，如中国<strong>电信</strong>、中国<strong>联通</strong>等</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 类似于树结构，只要有子节点就是父节点，所以个人也可以成为某种意义上的ISP</div>\n\n<p><strong>④分组交换</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 计算机网络传输信息方式</div>\n<blockquote>\n<p>将<strong>数据</strong>分成<strong>多个包</strong>，每个包由<strong>描述信息</strong>和<strong>数据部分</strong>组成</p>\n</blockquote>\n<blockquote>\n<p><strong>路由器</strong>收到包后，<strong>暂时存储</strong>，根据<strong>描述信息</strong>送到<strong>下一个路由器</strong>，直到送到<strong>目标地址</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>目的地址</strong>收到<strong>所有包</strong>后，根据<strong>描述信息</strong>将其<strong>组合到一起</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 无需建立连接、线路利用率高、出错时重发数据量小</div>\n<div class=\"uk-alert uk-alert-danger\"><i class=\"fas fa-exclamation-triangle\"></i> 有转发时延、需要传递额外的信息、出错频率变大</div>\n\n<p><strong>⑤网络性能指标</strong></p>\n<blockquote>\n<p><strong>速率</strong>：<strong>设备</strong>在<strong>单位时间</strong>传递的<strong>比特数</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>带宽</strong>：<strong>网络</strong>中<strong>一个点</strong>到<strong>另一个点</strong>的<strong>最高速率</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>吞吐量</strong>：<strong>单位时间</strong>内能<strong>通过整个网络</strong>的数据量，受到<strong>带宽</strong>和<strong>速率</strong>的限制</p>\n</blockquote>\n<blockquote>\n<p><strong>时延</strong>：由<strong>发送时延</strong>、<strong>传播时延</strong>和<strong>处理时延</strong>组成</p>\n</blockquote>\n<blockquote>\n<p><strong>利用率</strong>：网络中所有<strong>信道利用率</strong>的<strong>加权平均</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>丢包率</strong>：一定时间内，<strong>丢失的分组</strong>数量占<strong>总分组</strong>数量的<strong>比例</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 利用率最好保持在50%左右，因为利用率越高，时延越大</div>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 当分包出现误码，或者网络拥塞时会被丢弃，主要为后者</div>\n\n<h4 id=\"1-2TCP-x2F-IP体系结构\"><a href=\"#1-2TCP-x2F-IP体系结构\" class=\"headerlink\" title=\"1.2TCP&#x2F;IP体系结构\"></a>1.2TCP&#x2F;IP体系结构</h4><p><strong>①构成</strong></p>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 真实的TCP/IP结构只有应用层、运输层、网络层和接口层四层，为了方便理解，将接口层拆解为链路层和物理层</div>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 网络层是核心</div>\n<blockquote>\n<p><strong>应用层</strong>：解决<strong>进程间的交互</strong>问题</p>\n</blockquote>\n<blockquote>\n<p><strong>运输层</strong>：解决<strong>进程</strong>之间<strong>基于网络通信</strong>的问题</p>\n</blockquote>\n<blockquote>\n<p><strong>网络层</strong>：解决多个<strong>分组</strong>在<strong>网络间传输</strong>的问题</p>\n</blockquote>\n<blockquote>\n<p><strong>链路层</strong>：解决<strong>分组</strong>在<strong>一个网络中传输</strong>的问题</p>\n</blockquote>\n<blockquote>\n<p><strong>物理层</strong>：解决使用<strong>何种信号传输比特</strong>的问题</p>\n</blockquote>\n<p><strong>②基本概念</strong></p>\n<blockquote>\n<p><strong>实体</strong>：可以<strong>发送和接收消息</strong>的<strong>硬件</strong>或者<strong>软件</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 收发双方相同层次的对应实体为对等实体</div>\n<blockquote>\n<p><strong>协议</strong>：控制两个<strong>对等实体</strong>进行<strong>逻辑通信的规则</strong>，<strong>对等层次</strong>之间交换的<strong>数据包</strong>称为<strong>协议数据单元PDU</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 如应用层的HTTP协议，运输层的TCP协议，网络层的IP协议，链路层的CSMA协议，物理层的曼彻斯特编码等</div>\n<blockquote>\n<p><strong>服务</strong>：<strong>下层</strong>给<strong>相邻上层</strong>提供的<strong>功能接口</strong>，<strong>相邻层</strong>之间交换的<strong>数据包</strong>称为<strong>服务数据单元SDU</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 相邻两层通过服务访问点交换信息，通过服务原语沟通</div>\n\n<p><strong>③工作原理概述</strong></p>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 本质上层层包装，层层读取信息，以用户向一个网站服务器发出访问申请为例</div>\n<blockquote>\n<p><strong>应用层</strong>将<strong>HTTP报文</strong>发送给<strong>运输层</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> HTTP报文用于个人电脑和服务端的通信</div>\n<blockquote>\n<p><strong>运输层</strong>给<strong>HTTP报文</strong>添加<strong>TCP首部</strong>，形成<strong>TCP报文段</strong>，并将其发送给<strong>网络层</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> TCP首部用于区分进程并实现可靠传输</div>\n<blockquote>\n<p><strong>网络层</strong>给<strong>TCP报文段</strong>添加<strong>IP首部</strong>，形成<strong>IP数据报</strong>，并将其发送给<strong>链路层</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> IP首部使其可被路由器转发</div>\n<blockquote>\n<p><strong>链路层</strong>给<strong>IP数据报</strong>添加<strong>ETH首部</strong>和<strong>ETH尾部</strong>，形成<strong>帧</strong>，并将其发送给<strong>物理层</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> ETH首部包含了目的地址和源地址，ETH尾部用于检查其是否有误码</div>\n<blockquote>\n<p><strong>物理层</strong>将<strong>帧</strong>转化为<strong>01序列</strong>，添加<strong>前导码</strong>，发送到<strong>下一个端口</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 前导码让下一个端口做好接收准备</div>\n<blockquote>\n<p>运送到<strong>路由器</strong>后，一层一层<strong>读取信息（如从IP首部获得转发端口）</strong>，再一层一层<strong>包装</strong>发送到<strong>下一个端口</strong>，如此往复，直到<strong>到达目的地</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 路由器由于没有进程，所以没有应用端和运输端</div>\n<p><img src=\"/image/JW_1.png\" alt=\"TCP/IP体系结构工作原理\"></p>\n<h3 id=\"2-物理层\"><a href=\"#2-物理层\" class=\"headerlink\" title=\"2.物理层\"></a>2.物理层</h3><h4 id=\"2-1引言\"><a href=\"#2-1引言\" class=\"headerlink\" title=\"2.1引言\"></a>2.1引言</h4><p><strong>①协议</strong></p>\n<blockquote>\n<p><strong>比特流传递时</strong>的<strong>描述信息</strong>，可分为<strong>机械特性</strong>、<strong>电气特性</strong>、<strong>功能特性</strong>和<strong>过程特性</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 物理层考虑的是如何在不同的传输媒体上传输数据比特流，传输媒体可分为导引型（如光纤）和非导引型（如wifi）</div>\n<p><strong>②传输方式</strong></p>\n<blockquote>\n<p><strong>串行传输</strong>：一次发送<strong>一个比特</strong><br><strong>并行传输</strong>：一次发送<strong>多个比特</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 计算机内部通信采用并行传输，计算机之间通信采用串行传输</div>\n<blockquote>\n<p><strong>同步传输</strong>：<strong>字节</strong>之间<strong>没有间隔</strong>，需要保证<strong>收发双方时钟同步</strong><br><strong>异步传输</strong>：<strong>字节</strong>之间有<strong>不固定的间隔</strong>，在<strong>每个字节前后</strong>加上<strong>起始位</strong>和<strong>结束位</strong></p>\n</blockquote>\n<h4 id=\"2-2编码与调制\"><a href=\"#2-2编码与调制\" class=\"headerlink\" title=\"2.2编码与调制\"></a>2.2编码与调制</h4><p><strong>①引言</strong></p>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 对于数字信号和模拟信号，编码和调制的含义不同，计算机网络主要使用数字信号，故只介绍数字信号</div>\n<blockquote>\n<p><strong>编码</strong>：<strong>不改变信号性质</strong>，仅仅对<strong>信号波形</strong>进行变换</p>\n</blockquote>\n<blockquote>\n<p><strong>调制</strong>：将<strong>数字信号</strong>的<strong>频率范围搬移到较高的频段</strong>，并<strong>转化为模拟信号</strong></p>\n</blockquote>\n<p><img src=\"/image/JW_2.png\" alt=\"信号传递过程\"></p>\n<p><strong>②编码方法</strong></p>\n<blockquote>\n<p><strong>曼彻斯特编码</strong>：在<strong>每个码元</strong>的<strong>中间时刻</strong>发生<strong>跳变</strong>，使用<strong>正负跳变</strong>表示比特</p>\n</blockquote>\n<blockquote>\n<p><strong>差分曼彻斯特编码</strong>：跳变<strong>仅仅表示时钟</strong>，使用<strong>码元开始处电平是否变化</strong>表示比特</p>\n</blockquote>\n<p><strong>③调制方法</strong></p>\n<blockquote>\n<p><strong>基本调制方法</strong>有<strong>调幅</strong>、<strong>调频</strong>和<strong>调相</strong>，但是这样<strong>一个码元</strong>只包含<strong>一个比特信息</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 采用混合调制方法，如正交振幅调制QAM，一个码元可以表示16种信息</div>\n<h4 id=\"2-3信道极限容量\"><a href=\"#2-3信道极限容量\" class=\"headerlink\" title=\"2.3信道极限容量\"></a>2.3信道极限容量</h4><p><strong>①引言</strong></p>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 当信号通过信道传输时，可能会导致失真，失真严重时将无法识别</div>\n<blockquote>\n<p><strong>影响因素</strong>：<strong>码元传输速率</strong>、<strong>信号传输距离</strong>、<strong>噪声干扰</strong>和<strong>传输媒体质量</strong>等</p>\n</blockquote>\n<p><strong>②奈式准则</strong></p>\n<blockquote>\n<p>为了避免<strong>码间串扰</strong>。<strong>码元传输速率</strong>是有<strong>上限</strong>的</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 奈式准则是理想情况（无噪声），实际上能传输的最高码元速率要远低于奈式准则给出的</div>\n<p><strong>③香农公式</strong></p>\n<blockquote>\n<p>给出了<strong>带宽受限</strong>且有<strong>高斯白噪声干扰</strong>的信道的<strong>极限信息传输速率</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 想要提高信息的传输速率必须采用更好的调制方法和信道的信噪比</div>\n\n<h3 id=\"3-链路层\"><a href=\"#3-链路层\" class=\"headerlink\" title=\"3.链路层\"></a>3.链路层</h3><h4 id=\"3-1基本功能\"><a href=\"#3-1基本功能\" class=\"headerlink\" title=\"3.1基本功能\"></a>3.1基本功能</h4><p><strong>①包装成帧</strong></p>\n<blockquote>\n<p><strong>帧头</strong>和<strong>帧尾</strong>包含重要的<strong>控制信息</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 主要内容为目的地址、源地址和帧校验序列</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 如果帧的其他部分也包含帧定界标志，需要与真正的帧定界符相区分，如插入“转义字符”</div>\n<p><strong>②差错检测</strong></p>\n<blockquote>\n<p><strong>传输过程</strong>中，<strong>比特</strong>可能发生<strong>反转</strong>或者<strong>丢失</strong>，通过<strong>帧校验序列</strong>检测</p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 常用的检测方法为循环冗余检测，两边对数据采用同样的算法，若结果一致则无误码</div>\n<p><strong>③可靠传输</strong></p>\n<blockquote>\n<p>当出现<strong>分组错误</strong>、<strong>分组丢失</strong>、<strong>分组失序</strong>和<strong>分组重复</strong>等错误时，需要发送方<strong>重新发送</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 可靠传输不是必须的，通常误码率高时（如无线传输），需要可靠传输服务</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 可靠传输这一概念并不局限于链路层</div>\n<h4 id=\"3-2可靠传输协议\"><a href=\"#3-2可靠传输协议\" class=\"headerlink\" title=\"3.2可靠传输协议\"></a>3.2可靠传输协议</h4><p><strong>①停止等待协议SW</strong></p>\n<blockquote>\n<p><strong>接收方</strong>：每次<strong>接收一个分组</strong>，若接收到<strong>正确的分组</strong>，发送<strong>确认分组</strong>，<strong>反之</strong>则发送<strong>否认分组</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>发送方</strong>：每次<strong>发送一个分组</strong>，只有<strong>接收到确认分组</strong>后再<strong>发送下一分组</strong>，接收到<strong>否认分组</strong>则<strong>重新发送</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 成功确认的分组将会从缓存中删除</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 使用超时计时器以防分组丢失，给分组添加序号防止分组重复和分组迟到</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 该方法的信道利用率较低，因为每次发送一个分组就需要等待一个往返时间</div>\n<p><strong>②回退N帧协议GBN</strong></p>\n<blockquote>\n<p><strong>发送方</strong>：每次<strong>发送N个分组</strong>，若<strong>N个分组均正确</strong>，则发送<strong>下一批分组</strong>，若收到<strong>NAKy否认分组</strong>，则这一批分组中<strong>y以及y之后的分组全部重发</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>接收方</strong>：每次接<strong>收一个分组</strong>并<strong>逐个确认</strong>，若接收到的<strong>第x个分组以及之前的分组全部正确</strong>，则发送<strong>ACKx确认分组</strong>，若<strong>第y个分组发生错误</strong>，则发送<strong>NAKy否认分组</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 每次可以发送多个分组，提高了信道的利用率</div>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 一个分组的错误会导致后续分组的重传，当信道质量较差时，效率较低</div>\n<p><strong>③选择重传协议SR</strong></p>\n<blockquote>\n<p><strong>发送方</strong>：<strong>可发送的分组范围</strong>称为<strong>发送窗口</strong>，<strong>落入发送窗口</strong>且<strong>没有被发送</strong>的分组会被<strong>发送</strong>，<strong>发送窗口</strong>一直<strong>向前移动</strong>，只有收到<strong>确认分组</strong>的位置才能<strong>顺利通过</strong>，否则会被<strong>卡住（超时或者收到错误分组）</strong>，被<strong>卡住</strong>的地方<strong>重新发送</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>接收方</strong>：<strong>接收的分组范围</strong>称为<strong>接收窗口</strong>，<strong>落入接收窗口</strong>的分组会被<strong>逐个确认</strong>，并发送<strong>对应的信号</strong>，<strong>接收窗口</strong>一直<strong>向前移动</strong>，只有<strong>确认正确</strong>的位置才能<strong>顺利通过</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 减小了错误分组对发送其他分组的影响</div>\n\n<h4 id=\"3-3媒体介入控制MAC\"><a href=\"#3-3媒体介入控制MAC\" class=\"headerlink\" title=\"3.3媒体介入控制MAC\"></a>3.3媒体介入控制MAC</h4><p><strong>①引言</strong><br>协调多个发送和接收站点对一个共享传输媒体的占用</p>\n<p>静态划分信道：将频率和时间分给不同的用户</p>\n<p><strong>②CSMA&#x2F;CD协议</strong></p>\n<blockquote>\n<p><strong>多址接入MA</strong>：<strong>多个设备</strong>连接在<strong>一条总线</strong>上，<strong>竞争</strong>使用</p>\n</blockquote>\n<blockquote>\n<p><strong>载波监听CS</strong>：每个设备在<strong>发送帧之前</strong>，<strong>检测总线</strong>是否<strong>空闲（有96比特时间）</strong>，如果<strong>有则发送</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 96比特时间</div>\n<blockquote>\n<p><strong>碰撞检测CD</strong>：每个<strong>发送帧</strong>的设备<strong>边发送边检测碰撞</strong>，一旦总线上出现碰撞，则立即停止发送，一段时间后重新发送</p>\n</blockquote>\n<p>SIFS：保证一个站点能做好准备，从发送方式切换到接收方式</p>\n<p>碰撞：在一个设备发送帧的过程中，其他设备也要发送帧<br>先检测到碰撞信号的设备停止发送<br>两个帧信号相遇<br>帧的长度不能太小，必须保证发送该帧的时间大于争用期，否则需要填充</p>\n<p>帧长也有上限<br>ppp协议<br>用户只有获取到ISP分配的合法IP地址，才能连入因特网<br>组成：对各种协议数据报的封装方法、链路控制协议LCP（建立配置数据链路的连接），网络控制协议用于支持不同的网络层协议</p>\n<p>检测到载波并建立物理层连接后，由静止变为建立状态<br>LCP协商一些配置选项（如鉴别协议），若成功，则进入鉴别状态，反之则变为静止<br>如果无需鉴别或鉴别成功则进入网络状态，反之则进入终止状态<br>进行NCP配置，配置完成后就进入打开状态<br>当请求终止或者出现故障就进入终止状态<br>载波停止进入静止状态</p>\n<p>mac地址是每个接口独有的，用于标识各个主机<br>协调各个主机争用总线<br>从比特流中区分地址和数据</p>\n<p>ip地址到mac地址</p>\n<p>ip层<br>如何标识网络中的各个主机<br>路由器如何转发分组</p>\n<p>运输层<br>分组传递给哪个应用？<br>出现错误如何处理？</p>\n"},{"title":"数据结构与算法（七）","seo_title":"seo名称","toc":true,"indent":true,"top":false,"comments":1,"archive":true,"cover":false,"mathjax":false,"pin":false,"top_meta":false,"bottom_meta":false,"sidebar":["toc"],"keywords":"文章关键词","updated":"2023-11-07T14:10:58.014Z","img":"/medias/featureimages/10.webp","date":"2023-11-07T14:10:58.014Z","summary":"搜索算法","_content":"### 1.查找\n**1.1静态查找**：没有插入和删除操作，只有查找\n**①顺序查找**：以数组为例，从数组尾端向首端（下标为0）查找\n>**哨兵**：在查找过程中，需要判断**值是否找到**以及是否**到达边界**，可以**将边界元素设置为需要查找的值**，查找返回结果要么是对应值的下标，要么是0（边界下标）\n\n**②二分查找**：总共有三个位置（首端、中端和尾端），每次将中端元素和对应值比较，然后根据大小关系更新这三个位置（新首端or新尾端根据大小关系决定哪一个变化，变化的一端由旧中端决定），当**首端大于尾端**，查找结束\n**1.2动态查找**：除查找外，还有插入和删除操作","source":"_posts/数据结构与算法（七）.md","raw":"---\ntitle: 数据结构与算法（七）\nseo_title: seo名称\ntoc: true\nindent: true\ntop: false\ncomments: true\narchive: true\ncover: false\nmathjax: false\npin: false\ntop_meta: false\nbottom_meta: false\nsidebar:\n  - toc\ntag:\n  - 数据结构与算法\n  - 计算机基础\n  - 《hello 算法》\ncategories: 计算机基础\nkeywords: 文章关键词\nupdated: ''\nimg: /medias/featureimages/10.webp\ndate:\nsummary: 搜索算法\n---\n### 1.查找\n**1.1静态查找**：没有插入和删除操作，只有查找\n**①顺序查找**：以数组为例，从数组尾端向首端（下标为0）查找\n>**哨兵**：在查找过程中，需要判断**值是否找到**以及是否**到达边界**，可以**将边界元素设置为需要查找的值**，查找返回结果要么是对应值的下标，要么是0（边界下标）\n\n**②二分查找**：总共有三个位置（首端、中端和尾端），每次将中端元素和对应值比较，然后根据大小关系更新这三个位置（新首端or新尾端根据大小关系决定哪一个变化，变化的一端由旧中端决定），当**首端大于尾端**，查找结束\n**1.2动态查找**：除查找外，还有插入和删除操作","slug":"数据结构与算法（七）","published":1,"_id":"cloo17nk7000094vdcod2gy68","layout":"post","photos":[],"link":"","content":"<h3 id=\"1-查找\"><a href=\"#1-查找\" class=\"headerlink\" title=\"1.查找\"></a>1.查找</h3><p><strong>1.1静态查找</strong>：没有插入和删除操作，只有查找<br><strong>①顺序查找</strong>：以数组为例，从数组尾端向首端（下标为0）查找</p>\n<blockquote>\n<p><strong>哨兵</strong>：在查找过程中，需要判断<strong>值是否找到</strong>以及是否<strong>到达边界</strong>，可以<strong>将边界元素设置为需要查找的值</strong>，查找返回结果要么是对应值的下标，要么是0（边界下标）</p>\n</blockquote>\n<p><strong>②二分查找</strong>：总共有三个位置（首端、中端和尾端），每次将中端元素和对应值比较，然后根据大小关系更新这三个位置（新首端or新尾端根据大小关系决定哪一个变化，变化的一端由旧中端决定），当<strong>首端大于尾端</strong>，查找结束<br><strong>1.2动态查找</strong>：除查找外，还有插入和删除操作</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h3 id=\"1-查找\"><a href=\"#1-查找\" class=\"headerlink\" title=\"1.查找\"></a>1.查找</h3><p><strong>1.1静态查找</strong>：没有插入和删除操作，只有查找<br><strong>①顺序查找</strong>：以数组为例，从数组尾端向首端（下标为0）查找</p>\n<blockquote>\n<p><strong>哨兵</strong>：在查找过程中，需要判断<strong>值是否找到</strong>以及是否<strong>到达边界</strong>，可以<strong>将边界元素设置为需要查找的值</strong>，查找返回结果要么是对应值的下标，要么是0（边界下标）</p>\n</blockquote>\n<p><strong>②二分查找</strong>：总共有三个位置（首端、中端和尾端），每次将中端元素和对应值比较，然后根据大小关系更新这三个位置（新首端or新尾端根据大小关系决定哪一个变化，变化的一端由旧中端决定），当<strong>首端大于尾端</strong>，查找结束<br><strong>1.2动态查找</strong>：除查找外，还有插入和删除操作</p>\n"},{"title":"Linux工作流（一）","seo_title":"seo名称","toc":true,"indent":true,"top":false,"comments":1,"archive":true,"cover":false,"mathjax":false,"pin":false,"top_meta":false,"bottom_meta":false,"sidebar":["toc"],"keywords":"文章关键词","updated":"2023-11-07T14:10:58.014Z","img":"/medias/featureimages/41.webp","date":"2023-11-07T14:10:58.014Z","summary":"Linux常见命令","_content":"# Linux工作流（一）\n\n","source":"_posts/Linux工作流（一）.md","raw":"---\ntitle: Linux工作流（一）\nseo_title: seo名称\ntoc: true\nindent: true\ntop: false\ncomments: true\narchive: true\ncover: false\nmathjax: false\npin: false\ntop_meta: false\nbottom_meta: false\nsidebar:\n  - toc\ntag:\n  - Linux\n  - 工作流\ncategories: 工作流\nkeywords: 文章关键词\nupdated: ''\nimg: /medias/featureimages/41.webp\ndate:\nsummary: Linux常见命令\n---\n# Linux工作流（一）\n\n","slug":"Linux工作流（一）","published":1,"_id":"cloodiuq30000yndz2aly2u9s","layout":"post","photos":[],"link":"","content":"<h1 id=\"Linux工作流（一）\"><a href=\"#Linux工作流（一）\" class=\"headerlink\" title=\"Linux工作流（一）\"></a>Linux工作流（一）</h1>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"Linux工作流（一）\"><a href=\"#Linux工作流（一）\" class=\"headerlink\" title=\"Linux工作流（一）\"></a>Linux工作流（一）</h1>"},{"title":"NeoVim工作流（一）","seo_title":"seo名称","toc":true,"indent":true,"top":false,"comments":1,"archive":true,"cover":false,"mathjax":false,"pin":false,"top_meta":false,"bottom_meta":false,"sidebar":["toc"],"keywords":"文章关键词","updated":"2023-11-09T04:23:02.447Z","img":"/medias/featureimages/15.webp","date":"2023-11-09T04:23:02.447Z","summary":"Vim编辑器使用","_content":"# Vim工作流（一）\n","source":"_posts/NeoVim工作流（一）.md","raw":"---\ntitle: NeoVim工作流（一）\nseo_title: seo名称\ntoc: true\nindent: true\ntop: false\ncomments: true\narchive: true\ncover: false\nmathjax: false\npin: false\ntop_meta: false\nbottom_meta: false\nsidebar:\n  - toc\ntag:\n  - Vim编辑器\ncategories: 工作流\nkeywords: 文章关键词\nupdated: ''\nimg: /medias/featureimages/15.webp\ndate:\nsummary: Vim编辑器使用\n---\n# Vim工作流（一）\n","slug":"NeoVim工作流（一）","published":1,"layout":"post","photos":[],"link":"","_id":"cloqoof6c0000pgvdbv0cfgob","content":"<h1 id=\"Vim工作流（一）\"><a href=\"#Vim工作流（一）\" class=\"headerlink\" title=\"Vim工作流（一）\"></a>Vim工作流（一）</h1>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"Vim工作流（一）\"><a href=\"#Vim工作流（一）\" class=\"headerlink\" title=\"Vim工作流（一）\"></a>Vim工作流（一）</h1>"},{"title":"小技能大作用","seo_title":"seo名称","toc":true,"indent":true,"top":false,"comments":1,"archive":true,"cover":false,"mathjax":false,"pin":false,"top_meta":false,"bottom_meta":false,"sidebar":["toc"],"keywords":"文章关键词","updated":"2023-11-09T04:23:02.447Z","img":"/medias/featureimages/38.webp","date":"2023-11-09T04:23:02.447Z","summary":"信息检索","_content":"# 小技能大作用\n## 容易被人忽视的小技能\n### 1.信息检索\n#### 1.1搜索语法\n{%list%}\n主要介绍谷歌的搜索语法，因为谷歌目前最准确\n{%endlist%}\n{%right%}\n搜索语法主要是一些限制性语句，用于精准定位\n{%endright%}\n**①关键词限制**\n>`intitle:[关键词]`：**标题**需要包含对应**关键词**\n\n>`allintitle:[关键词1] [关键词2]...[关键词n]`：同上，**标题**需要**同时**包含**多个关键词**\n\n>`intext:[关键词1] [关键词2]...[关键词n]`：**文章内容**中必须**同时**包含对应**关键词**\n\n>`inurl:[关键词]`：**链接**必须包含的**关键词**\n{%list%}\n这些关键词也可以使用英文双引号\"\"进行限制，表示关键词连续完整出现，否则可能是同音字和近义词等\n{%endlist%}\n**②其他限制**\n>`site:[完整的域名]` ：限制**来源网址**\n{%list%}\n与inurl不同，增加该限制后，来源网址是唯一的\n{%endlist%}\n>`imagesize[长x宽]:[lenthxwidth]`:限制**图片大小**\n\n>`filetype:[文件后缀]`：限制**文件格式**\n{%warning%}\n关键词之间以及限制选项之间需要使用空格隔开\n{%endwarning%}\n#### 1.2资源网站\n>**搜索引擎**：google\n\n>**报告**：199it.com\n\n>**学术论文**：谷歌学术、scihub\n\n>**电子书**：zlibarary、鸠摩搜书\n\n>**视频**：coursera、youtube\n\n>**素材**：pexels、piaxbay\n\n>**网盘搜索引擎**：如**百度云盘**的**盘搜搜**\n{%list%}\n可以在save.tube上从其中对应网站下载高清素材，且有版权的网站都有对应的下载器\n{%endlist%}\n{%right%}\n直接谷歌xx行业必逛的网站、best xxx sites或者在similarsites中输入域名找相似网站\n{%endright%}\n#### 1.3在线工具\n>**canva**：一款**在线设计**工具，可以制作**海报**、**视频**和**概念图**等\n\n>**remove**：**抠图**\n\n>**腾讯智影**：**文字转语音**\n\n>**clipchamp**：**在线剪辑视频**\n\n","source":"_posts/信息检索.md","raw":"---\ntitle: 小技能大作用\nseo_title: seo名称\ntoc: true\nindent: true\ntop: false\ncomments: true\narchive: true\ncover: false\nmathjax: false\npin: false\ntop_meta: false\nbottom_meta: false\nsidebar:\n  - toc\ntag:\n  - 信息检索\ncategories: 软技能\nkeywords: 文章关键词\nupdated: ''\nimg: /medias/featureimages/38.webp\ndate:\nsummary: 信息检索\n---\n# 小技能大作用\n## 容易被人忽视的小技能\n### 1.信息检索\n#### 1.1搜索语法\n{%list%}\n主要介绍谷歌的搜索语法，因为谷歌目前最准确\n{%endlist%}\n{%right%}\n搜索语法主要是一些限制性语句，用于精准定位\n{%endright%}\n**①关键词限制**\n>`intitle:[关键词]`：**标题**需要包含对应**关键词**\n\n>`allintitle:[关键词1] [关键词2]...[关键词n]`：同上，**标题**需要**同时**包含**多个关键词**\n\n>`intext:[关键词1] [关键词2]...[关键词n]`：**文章内容**中必须**同时**包含对应**关键词**\n\n>`inurl:[关键词]`：**链接**必须包含的**关键词**\n{%list%}\n这些关键词也可以使用英文双引号\"\"进行限制，表示关键词连续完整出现，否则可能是同音字和近义词等\n{%endlist%}\n**②其他限制**\n>`site:[完整的域名]` ：限制**来源网址**\n{%list%}\n与inurl不同，增加该限制后，来源网址是唯一的\n{%endlist%}\n>`imagesize[长x宽]:[lenthxwidth]`:限制**图片大小**\n\n>`filetype:[文件后缀]`：限制**文件格式**\n{%warning%}\n关键词之间以及限制选项之间需要使用空格隔开\n{%endwarning%}\n#### 1.2资源网站\n>**搜索引擎**：google\n\n>**报告**：199it.com\n\n>**学术论文**：谷歌学术、scihub\n\n>**电子书**：zlibarary、鸠摩搜书\n\n>**视频**：coursera、youtube\n\n>**素材**：pexels、piaxbay\n\n>**网盘搜索引擎**：如**百度云盘**的**盘搜搜**\n{%list%}\n可以在save.tube上从其中对应网站下载高清素材，且有版权的网站都有对应的下载器\n{%endlist%}\n{%right%}\n直接谷歌xx行业必逛的网站、best xxx sites或者在similarsites中输入域名找相似网站\n{%endright%}\n#### 1.3在线工具\n>**canva**：一款**在线设计**工具，可以制作**海报**、**视频**和**概念图**等\n\n>**remove**：**抠图**\n\n>**腾讯智影**：**文字转语音**\n\n>**clipchamp**：**在线剪辑视频**\n\n","slug":"信息检索","published":1,"layout":"post","photos":[],"link":"","_id":"cloqoof6f0003pgvd8lk83l00","content":"<h1 id=\"小技能大作用\"><a href=\"#小技能大作用\" class=\"headerlink\" title=\"小技能大作用\"></a>小技能大作用</h1><h2 id=\"容易被人忽视的小技能\"><a href=\"#容易被人忽视的小技能\" class=\"headerlink\" title=\"容易被人忽视的小技能\"></a>容易被人忽视的小技能</h2><h3 id=\"1-信息检索\"><a href=\"#1-信息检索\" class=\"headerlink\" title=\"1.信息检索\"></a>1.信息检索</h3><h4 id=\"1-1搜索语法\"><a href=\"#1-1搜索语法\" class=\"headerlink\" title=\"1.1搜索语法\"></a>1.1搜索语法</h4><div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 主要介绍谷歌的搜索语法，因为谷歌目前最准确</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 搜索语法主要是一些限制性语句，用于精准定位</div>\n<p><strong>①关键词限制</strong></p>\n<blockquote>\n<p><code>intitle:[关键词]</code>：<strong>标题</strong>需要包含对应<strong>关键词</strong></p>\n</blockquote>\n<blockquote>\n<p><code>allintitle:[关键词1] [关键词2]...[关键词n]</code>：同上，<strong>标题</strong>需要<strong>同时</strong>包含<strong>多个关键词</strong></p>\n</blockquote>\n<blockquote>\n<p><code>intext:[关键词1] [关键词2]...[关键词n]</code>：<strong>文章内容</strong>中必须<strong>同时</strong>包含对应<strong>关键词</strong></p>\n</blockquote>\n<blockquote>\n<p><code>inurl:[关键词]</code>：<strong>链接</strong>必须包含的<strong>关键词</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 这些关键词也可以使用英文双引号\"\"进行限制，表示关键词连续完整出现，否则可能是同音字和近义词等</div>\n<p><strong>②其他限制</strong></p>\n<blockquote>\n<p><code>site:[完整的域名]</code> ：限制<strong>来源网址</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 与inurl不同，增加该限制后，来源网址是唯一的</div>\n<blockquote>\n<p><code>imagesize[长x宽]:[lenthxwidth]</code>:限制<strong>图片大小</strong></p>\n</blockquote>\n<blockquote>\n<p><code>filetype:[文件后缀]</code>：限制<strong>文件格式</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 关键词之间以及限制选项之间需要使用空格隔开</div>\n<h4 id=\"1-2资源网站\"><a href=\"#1-2资源网站\" class=\"headerlink\" title=\"1.2资源网站\"></a>1.2资源网站</h4><blockquote>\n<p><strong>搜索引擎</strong>：google</p>\n</blockquote>\n<blockquote>\n<p><strong>报告</strong>：199it.com</p>\n</blockquote>\n<blockquote>\n<p><strong>学术论文</strong>：谷歌学术、scihub</p>\n</blockquote>\n<blockquote>\n<p><strong>电子书</strong>：zlibarary、鸠摩搜书</p>\n</blockquote>\n<blockquote>\n<p><strong>视频</strong>：coursera、youtube</p>\n</blockquote>\n<blockquote>\n<p><strong>素材</strong>：pexels、piaxbay</p>\n</blockquote>\n<blockquote>\n<p><strong>网盘搜索引擎</strong>：如<strong>百度云盘</strong>的<strong>盘搜搜</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 可以在save.tube上从其中对应网站下载高清素材，且有版权的网站都有对应的下载器</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 直接谷歌xx行业必逛的网站、best xxx sites或者在similarsites中输入域名找相似网站</div>\n<h4 id=\"1-3在线工具\"><a href=\"#1-3在线工具\" class=\"headerlink\" title=\"1.3在线工具\"></a>1.3在线工具</h4><blockquote>\n<p><strong>canva</strong>：一款<strong>在线设计</strong>工具，可以制作<strong>海报</strong>、<strong>视频</strong>和<strong>概念图</strong>等</p>\n</blockquote>\n<blockquote>\n<p><strong>remove</strong>：<strong>抠图</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>腾讯智影</strong>：<strong>文字转语音</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>clipchamp</strong>：<strong>在线剪辑视频</strong></p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"小技能大作用\"><a href=\"#小技能大作用\" class=\"headerlink\" title=\"小技能大作用\"></a>小技能大作用</h1><h2 id=\"容易被人忽视的小技能\"><a href=\"#容易被人忽视的小技能\" class=\"headerlink\" title=\"容易被人忽视的小技能\"></a>容易被人忽视的小技能</h2><h3 id=\"1-信息检索\"><a href=\"#1-信息检索\" class=\"headerlink\" title=\"1.信息检索\"></a>1.信息检索</h3><h4 id=\"1-1搜索语法\"><a href=\"#1-1搜索语法\" class=\"headerlink\" title=\"1.1搜索语法\"></a>1.1搜索语法</h4><div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 主要介绍谷歌的搜索语法，因为谷歌目前最准确</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 搜索语法主要是一些限制性语句，用于精准定位</div>\n<p><strong>①关键词限制</strong></p>\n<blockquote>\n<p><code>intitle:[关键词]</code>：<strong>标题</strong>需要包含对应<strong>关键词</strong></p>\n</blockquote>\n<blockquote>\n<p><code>allintitle:[关键词1] [关键词2]...[关键词n]</code>：同上，<strong>标题</strong>需要<strong>同时</strong>包含<strong>多个关键词</strong></p>\n</blockquote>\n<blockquote>\n<p><code>intext:[关键词1] [关键词2]...[关键词n]</code>：<strong>文章内容</strong>中必须<strong>同时</strong>包含对应<strong>关键词</strong></p>\n</blockquote>\n<blockquote>\n<p><code>inurl:[关键词]</code>：<strong>链接</strong>必须包含的<strong>关键词</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 这些关键词也可以使用英文双引号\"\"进行限制，表示关键词连续完整出现，否则可能是同音字和近义词等</div>\n<p><strong>②其他限制</strong></p>\n<blockquote>\n<p><code>site:[完整的域名]</code> ：限制<strong>来源网址</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 与inurl不同，增加该限制后，来源网址是唯一的</div>\n<blockquote>\n<p><code>imagesize[长x宽]:[lenthxwidth]</code>:限制<strong>图片大小</strong></p>\n</blockquote>\n<blockquote>\n<p><code>filetype:[文件后缀]</code>：限制<strong>文件格式</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-warning\"><i class=\"fa fa-exclamation-circle\"></i> 关键词之间以及限制选项之间需要使用空格隔开</div>\n<h4 id=\"1-2资源网站\"><a href=\"#1-2资源网站\" class=\"headerlink\" title=\"1.2资源网站\"></a>1.2资源网站</h4><blockquote>\n<p><strong>搜索引擎</strong>：google</p>\n</blockquote>\n<blockquote>\n<p><strong>报告</strong>：199it.com</p>\n</blockquote>\n<blockquote>\n<p><strong>学术论文</strong>：谷歌学术、scihub</p>\n</blockquote>\n<blockquote>\n<p><strong>电子书</strong>：zlibarary、鸠摩搜书</p>\n</blockquote>\n<blockquote>\n<p><strong>视频</strong>：coursera、youtube</p>\n</blockquote>\n<blockquote>\n<p><strong>素材</strong>：pexels、piaxbay</p>\n</blockquote>\n<blockquote>\n<p><strong>网盘搜索引擎</strong>：如<strong>百度云盘</strong>的<strong>盘搜搜</strong></p>\n</blockquote>\n<div class=\"uk-alert uk-alert-list\"><i class=\"fas fa-list-ul\"></i> 可以在save.tube上从其中对应网站下载高清素材，且有版权的网站都有对应的下载器</div>\n<div class=\"uk-alert uk-alert-success\"><i class=\"fa fa-check-circle\"></i> 直接谷歌xx行业必逛的网站、best xxx sites或者在similarsites中输入域名找相似网站</div>\n<h4 id=\"1-3在线工具\"><a href=\"#1-3在线工具\" class=\"headerlink\" title=\"1.3在线工具\"></a>1.3在线工具</h4><blockquote>\n<p><strong>canva</strong>：一款<strong>在线设计</strong>工具，可以制作<strong>海报</strong>、<strong>视频</strong>和<strong>概念图</strong>等</p>\n</blockquote>\n<blockquote>\n<p><strong>remove</strong>：<strong>抠图</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>腾讯智影</strong>：<strong>文字转语音</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>clipchamp</strong>：<strong>在线剪辑视频</strong></p>\n</blockquote>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clmkphbez00039gvd1augd3p2","category_id":"clmkphbf000049gvdeaoj1vx0","_id":"clmkphbf7000s9gvdgtjh4atf"},{"post_id":"clmkphbf7000x9gvdc21achf0","category_id":"clmkphbf6000o9gvd1zz203r9","_id":"clmkphbf900179gvd6zyd0451"},{"post_id":"clmkphbf2000b9gvdfluv3ge8","category_id":"clmkphbf7000v9gvd699dgl31","_id":"clmkphbfa001c9gvdh7u025by"},{"post_id":"clmkphbf800149gvd85bw8xif","category_id":"clmkphbf000049gvdeaoj1vx0","_id":"clmkphbfa001i9gvd6vzf6zd5"},{"post_id":"clmkphbf4000g9gvda6gigk2j","category_id":"clmkphbf800119gvd0d2q2cwr","_id":"clmkphbfb001m9gvd078egow2"},{"post_id":"clmkphbf900169gvdc4oo19nj","category_id":"clmkphbf6000o9gvd1zz203r9","_id":"clmkphbfb001o9gvd4sjl5vdo"},{"post_id":"clmkphbf9001b9gvdbje5a3wf","category_id":"clmkphbf6000o9gvd1zz203r9","_id":"clmkphbfc001s9gvdh9bz2w5j"},{"post_id":"clmkphbfa001e9gvdbdrh2mss","category_id":"clmkphbf000049gvdeaoj1vx0","_id":"clmkphbfc001v9gvdbrdw4703"},{"post_id":"clmkphbf5000k9gvd05v00wcn","category_id":"clmkphbf900199gvd2v2ccv1y","_id":"clmkphbfd00209gvddt8pbzeq"},{"post_id":"clmkphbfa001h9gvd5wrr5jvs","category_id":"clmkphbf000049gvdeaoj1vx0","_id":"clmkphbfd00239gvd4pxf4wnt"},{"post_id":"clmkphbf6000m9gvd185z5g4j","category_id":"clmkphbf6000o9gvd1zz203r9","_id":"clmkphbfe00279gvd0sl9058h"},{"post_id":"clmkphbf6000r9gvd2k8h6z91","category_id":"clmkphbf800119gvd0d2q2cwr","_id":"clmkphbfe00299gvd6isodttt"},{"post_id":"clmkphbf7000t9gvddjyrf668","category_id":"clmkphbf7000v9gvd699dgl31","_id":"clmkphbff002d9gvdaooi3mu8"},{"post_id":"clmkphbfe00269gvddorl278e","category_id":"clmkphbfd00249gvd2fi18t8y","_id":"clmkphbff002g9gvd3drlfavm"},{"post_id":"clmkphbfb001l9gvd2lx4fdxi","category_id":"clmkphbfd00249gvd2fi18t8y","_id":"clmkphbfg002l9gvd46mn5o1d"},{"post_id":"clmkphbfe00289gvdcj3i8nxz","category_id":"clmkphbfd00249gvd2fi18t8y","_id":"clmkphbfg002o9gvd5dengf78"},{"post_id":"clmkphbff002c9gvd4tls62qa","category_id":"clmkphbf000049gvdeaoj1vx0","_id":"clmkphbfh002q9gvdhbh10ulv"},{"post_id":"clmkphbfb001n9gvd7gnm9ab1","category_id":"clmkphbfe002a9gvd2g7lg2ar","_id":"clmkphbfh002s9gvd1hesa8qs"},{"post_id":"clmkphbfc001r9gvdbnjw4h5c","category_id":"clmkphbfd00249gvd2fi18t8y","_id":"clmkphbfh002z9gvdcs6r2gfq"},{"post_id":"clmkphbfc001u9gvd4w2vdco5","category_id":"clmkphbfd00249gvd2fi18t8y","_id":"clmkphbfh00349gvd8lu44l7s"},{"post_id":"clmkphbfd001z9gvd2vn1bujv","category_id":"clmkphbfd00249gvd2fi18t8y","_id":"clmkphbfi00369gvdaqohaxdr"},{"post_id":"clmkphbfd00229gvdcjvr5v9t","category_id":"clmkphbfd00249gvd2fi18t8y","_id":"clmkphbfi00389gvdeu0u0jmd"},{"post_id":"clmra3hn80000p0vd0ob98wa4","category_id":"clmkphbf000049gvdeaoj1vx0","_id":"clmra6h570009p0vd0ehe5nxm"},{"post_id":"clmru730l0000osvdhqlhe0uz","category_id":"clmkphbf000049gvdeaoj1vx0","_id":"clmru730p0003osvd4fige8fn"},{"post_id":"clmrufa6h0000pkvd3m8r0063","category_id":"clmkphbf000049gvdeaoj1vx0","_id":"clmrufa6l0003pkvdc2ck7g7c"},{"post_id":"clngwzrbo0000awvdhz9kcfzj","category_id":"clmkphbf000049gvdeaoj1vx0","_id":"clngwzrbq0003awvd84yvcsqa"},{"post_id":"clnig9wty0000l0vde96w4z21","category_id":"clmkphbfd00249gvd2fi18t8y","_id":"clnl82b5q0000iovd375jh7k7"},{"post_id":"clnlpp14r0000bwvdg5du2a76","category_id":"clmkphbf000049gvdeaoj1vx0","_id":"clnlpqhsd0005bwvd1at1h4ac"},{"post_id":"clnvkqwyu0000v0vd12a6g59g","category_id":"clmkphbf6000o9gvd1zz203r9","_id":"clnvkqwz10004v0vd8tl8cfdr"},{"post_id":"clnvkqwyz0001v0vd23z07ifj","category_id":"clmkphbf6000o9gvd1zz203r9","_id":"clnvkqwz20006v0vd35gc1n2q"},{"post_id":"clob1qcni0000ikvdgok9d1l4","category_id":"clmkphbfd00249gvd2fi18t8y","_id":"clob1qcnj0003ikvda6tt74fz"},{"post_id":"clodx7qy70000ywvd2snlaort","category_id":"clmkphbfd00249gvd2fi18t8y","_id":"clodx9epy0006ywvd1zt11ucw"},{"post_id":"cloo17nk7000094vdcod2gy68","category_id":"clmkphbfd00249gvd2fi18t8y","_id":"cloo17nkb000394vd3w6z3554"},{"post_id":"clnqzk3ru0000csvd1dnu5ix9","category_id":"clooet64e00006ovd1koz9934","_id":"clooet64l00026ovdhom05026"},{"post_id":"cloodiuq30000yndz2aly2u9s","category_id":"clooet64e00006ovd1koz9934","_id":"clooet64l00036ovdbktjcjm6"},{"post_id":"cloqoof6c0000pgvdbv0cfgob","category_id":"clooet64e00006ovd1koz9934","_id":"cloqoof6e0002pgvd9tmzagpy"},{"post_id":"cloqoof6f0003pgvd8lk83l00","category_id":"clmkphbf6000o9gvd1zz203r9","_id":"cloqoof6j0005pgvdbm8i6sr6"}],"PostTag":[{"post_id":"clmkphbez00039gvd1augd3p2","tag_id":"clmkphbf5000j9gvd9ul66krq","_id":"clmkphbf8000y9gvd6n1q7xme"},{"post_id":"clmkphbez00039gvd1augd3p2","tag_id":"clmkphbf6000q9gvd75167itr","_id":"clmkphbf800129gvde583c97d"},{"post_id":"clmkphbf2000b9gvdfluv3ge8","tag_id":"clmkphbfc001q9gvdcpbodrny","_id":"clmkphbfd00219gvd82lu4jky"},{"post_id":"clmkphbf4000g9gvda6gigk2j","tag_id":"clmkphbff002b9gvdfdzy3ej8","_id":"clmkphbfg002m9gvd23zj8gna"},{"post_id":"clmkphbf5000k9gvd05v00wcn","tag_id":"clmkphbff002j9gvd12ochqga","_id":"clmkphbfh002x9gvd34i54ueu"},{"post_id":"clmkphbf5000k9gvd05v00wcn","tag_id":"clmkphbfh002r9gvde7uz02pv","_id":"clmkphbfh00309gvd75yt5gdy"},{"post_id":"clmkphbf6000m9gvd185z5g4j","tag_id":"clmkphbfh002v9gvd0jmr45yx","_id":"clmkphbfh00339gvd7k907mlf"},{"post_id":"clmkphbf6000r9gvd2k8h6z91","tag_id":"clmkphbff002b9gvdfdzy3ej8","_id":"clmkphbfi00379gvd3z52dzb8"},{"post_id":"clmkphbf7000t9gvddjyrf668","tag_id":"clmkphbfh00359gvd4gly4hk1","_id":"clmkphbfi003b9gvd9nj7d4rq"},{"post_id":"clmkphbf7000t9gvddjyrf668","tag_id":"clmkphbfi00399gvd38355qt8","_id":"clmkphbfi003c9gvd5kbfhzy2"},{"post_id":"clmkphbf7000x9gvdc21achf0","tag_id":"clmkphbfi003a9gvdd37594ii","_id":"clmkphbfi003e9gvd8wz87r5f"},{"post_id":"clmkphbf800149gvd85bw8xif","tag_id":"clmkphbfi003d9gvd6p6sh0tf","_id":"clmkphbfi003h9gvdaqd76id2"},{"post_id":"clmkphbf800149gvd85bw8xif","tag_id":"clmkphbfi003f9gvdel1qcvzn","_id":"clmkphbfi003i9gvdewxicpge"},{"post_id":"clmkphbf900169gvdc4oo19nj","tag_id":"clmkphbfi003a9gvdd37594ii","_id":"clmkphbfj003l9gvdhdnv0os9"},{"post_id":"clmkphbf900169gvdc4oo19nj","tag_id":"clmkphbff002j9gvd12ochqga","_id":"clmkphbfj003m9gvd10qleix4"},{"post_id":"clmkphbf9001b9gvdbje5a3wf","tag_id":"clmkphbfj003k9gvd8nnigfvp","_id":"clmkphbfj003o9gvdaqt16d8i"},{"post_id":"clmkphbfa001e9gvdbdrh2mss","tag_id":"clmkphbfi003f9gvdel1qcvzn","_id":"clmkphbfj003r9gvdbahd8btv"},{"post_id":"clmkphbfa001e9gvdbdrh2mss","tag_id":"clmkphbfi003d9gvd6p6sh0tf","_id":"clmkphbfj003s9gvdbpwx8fj0"},{"post_id":"clmkphbfa001h9gvd5wrr5jvs","tag_id":"clmkphbfi003d9gvd6p6sh0tf","_id":"clmkphbfj003v9gvdhv81htk4"},{"post_id":"clmkphbfa001h9gvd5wrr5jvs","tag_id":"clmkphbfi003f9gvdel1qcvzn","_id":"clmkphbfj003w9gvd8mmifn6t"},{"post_id":"clmkphbfb001l9gvd2lx4fdxi","tag_id":"clmkphbfj003u9gvd0zrb0omx","_id":"clmkphbfj00409gvd6k3b8ghf"},{"post_id":"clmkphbfb001l9gvd2lx4fdxi","tag_id":"clmkphbfh00359gvd4gly4hk1","_id":"clmkphbfj00419gvd4b333u1m"},{"post_id":"clmkphbfb001l9gvd2lx4fdxi","tag_id":"clmkphbfj003y9gvdekym9nav","_id":"clmkphbfk00439gvd64bxh75p"},{"post_id":"clmkphbfb001n9gvd7gnm9ab1","tag_id":"clmkphbfj003z9gvdfhdy4xcc","_id":"clmkphbfk00459gvda09xa1g3"},{"post_id":"clmkphbfb001n9gvd7gnm9ab1","tag_id":"clmkphbfi003f9gvdel1qcvzn","_id":"clmkphbfk00469gvd34zy608m"},{"post_id":"clmkphbfc001r9gvdbnjw4h5c","tag_id":"clmkphbfj003u9gvd0zrb0omx","_id":"clmkphbfk00499gvd6vqm26wl"},{"post_id":"clmkphbfc001r9gvdbnjw4h5c","tag_id":"clmkphbfk00479gvdfjrz4r2p","_id":"clmkphbfk004a9gvd7upi8mkj"},{"post_id":"clmkphbfc001u9gvd4w2vdco5","tag_id":"clmkphbfk00479gvdfjrz4r2p","_id":"clmkphbfk004d9gvd6pp3ddg1"},{"post_id":"clmkphbfc001u9gvd4w2vdco5","tag_id":"clmkphbfj003u9gvd0zrb0omx","_id":"clmkphbfk004e9gvd9csjcodc"},{"post_id":"clmkphbfd001z9gvd2vn1bujv","tag_id":"clmkphbfj003u9gvd0zrb0omx","_id":"clmkphbfl004h9gvddjura9o0"},{"post_id":"clmkphbfd001z9gvd2vn1bujv","tag_id":"clmkphbfk00479gvdfjrz4r2p","_id":"clmkphbfl004i9gvd6c7z95r9"},{"post_id":"clmkphbfd00229gvdcjvr5v9t","tag_id":"clmkphbfj003u9gvd0zrb0omx","_id":"clmkphbfl004l9gvdel6zansf"},{"post_id":"clmkphbfd00229gvdcjvr5v9t","tag_id":"clmkphbfk00479gvdfjrz4r2p","_id":"clmkphbfl004m9gvd5mc32jp0"},{"post_id":"clmkphbfe00269gvddorl278e","tag_id":"clmkphbfj003u9gvd0zrb0omx","_id":"clmkphbfl004p9gvdhb6m9hhz"},{"post_id":"clmkphbfe00269gvddorl278e","tag_id":"clmkphbfk00479gvdfjrz4r2p","_id":"clmkphbfl004q9gvdd3izel3i"},{"post_id":"clmkphbfe00289gvdcj3i8nxz","tag_id":"clmkphbfj003u9gvd0zrb0omx","_id":"clmkphbfl004t9gvd0jgz4yh0"},{"post_id":"clmkphbfe00289gvdcj3i8nxz","tag_id":"clmkphbfk00479gvdfjrz4r2p","_id":"clmkphbfl004u9gvda1pr43p8"},{"post_id":"clmkphbff002c9gvd4tls62qa","tag_id":"clmkphbfl004s9gvd8jzu0xfs","_id":"clmkphbfl004x9gvd8q4ybxlt"},{"post_id":"clmkphbff002c9gvd4tls62qa","tag_id":"clmkphbfl004v9gvdb5l76aig","_id":"clmkphbfl004y9gvde6hw2k1r"},{"post_id":"clmra3hn80000p0vd0ob98wa4","tag_id":"clmkphbfl004s9gvd8jzu0xfs","_id":"clmra6h560007p0vddcl8fqwi"},{"post_id":"clmra3hn80000p0vd0ob98wa4","tag_id":"clmkphbfl004v9gvdb5l76aig","_id":"clmra6h560008p0vd244ie8qo"},{"post_id":"clmru730l0000osvdhqlhe0uz","tag_id":"clmkphbf5000j9gvd9ul66krq","_id":"clmru730p0001osvd92so5xaa"},{"post_id":"clmru730l0000osvdhqlhe0uz","tag_id":"clmkphbf6000q9gvd75167itr","_id":"clmru730p0002osvd0ovq4pfl"},{"post_id":"clmrufa6h0000pkvd3m8r0063","tag_id":"clmkphbf5000j9gvd9ul66krq","_id":"clmrufa6l0001pkvdfz4f2x6x"},{"post_id":"clmrufa6h0000pkvd3m8r0063","tag_id":"clmkphbf6000q9gvd75167itr","_id":"clmrufa6l0002pkvd9yugaafm"},{"post_id":"clngwzrbo0000awvdhz9kcfzj","tag_id":"clmkphbfl004s9gvd8jzu0xfs","_id":"clngwzrbq0001awvd6yxfdgg8"},{"post_id":"clngwzrbo0000awvdhz9kcfzj","tag_id":"clmkphbfl004v9gvdb5l76aig","_id":"clngwzrbq0002awvd1mb02f93"},{"post_id":"clnig9wty0000l0vde96w4z21","tag_id":"clnig9wu10001l0vddd0ae9h5","_id":"clnig9wu50004l0vd5odaft2w"},{"post_id":"clnig9wty0000l0vde96w4z21","tag_id":"clnig9wu50003l0vd5zpzbmra","_id":"clnig9wu50005l0vd40201hde"},{"post_id":"clnlpp14r0000bwvdg5du2a76","tag_id":"clnlpqhsd0004bwvd9zao5bnb","_id":"clnlpqhse0007bwvdcol35hiu"},{"post_id":"clnlpp14r0000bwvdg5du2a76","tag_id":"clnlpqhsd0006bwvd8kuk1a9p","_id":"clnlpqhse0008bwvddtz9d3hs"},{"post_id":"clnqzk3ru0000csvd1dnu5ix9","tag_id":"clnqzk3rv0001csvdb0xphw2a","_id":"clnqzk3ry0004csvd4n226ovs"},{"post_id":"clnqzk3ru0000csvd1dnu5ix9","tag_id":"clnqzk3rx0003csvd2be6hrf1","_id":"clnqzk3ry0005csvd2fx566t6"},{"post_id":"clnvkqwyu0000v0vd12a6g59g","tag_id":"clnqzk3rv0001csvdb0xphw2a","_id":"clnvkqwz10002v0vdggypf3ra"},{"post_id":"clnvkqwyu0000v0vd12a6g59g","tag_id":"clnsw4qgr0001vwvd6a4e28d7","_id":"clnvkqwz10003v0vddsa2hl1h"},{"post_id":"clnvkqwyz0001v0vd23z07ifj","tag_id":"clnqzk3rv0001csvdb0xphw2a","_id":"clnvkqwz20005v0vd9g434ren"},{"post_id":"clnvkqwyz0001v0vd23z07ifj","tag_id":"clnsw4qgr0001vwvd6a4e28d7","_id":"clnvkqwz20007v0vdez23a6rd"},{"post_id":"clob1qcni0000ikvdgok9d1l4","tag_id":"clmkphbfj003u9gvd0zrb0omx","_id":"clob1qcnj0001ikvd3cqc109h"},{"post_id":"clob1qcni0000ikvdgok9d1l4","tag_id":"clmkphbfh00359gvd4gly4hk1","_id":"clob1qcnj0002ikvd14ov2v99"},{"post_id":"clob1qcni0000ikvdgok9d1l4","tag_id":"clmkphbfj003y9gvdekym9nav","_id":"clob1qcnj0004ikvdh0r47pyv"},{"post_id":"clodx7qy70000ywvd2snlaort","tag_id":"clodxgj590007ywvd18k3g6q4","_id":"clodxgj590008ywvd0kjqh7ia"},{"post_id":"clodx7qy70000ywvd2snlaort","tag_id":"clodyw085000bywvd2ql4h2vu","_id":"clodyw085000cywvd5p7p388i"},{"post_id":"clmkphbfc001r9gvdbnjw4h5c","tag_id":"clofdsjg2000dywvdgqnm6din","_id":"clofdsjg2000eywvd1uyd9i6g"},{"post_id":"clmkphbfc001u9gvd4w2vdco5","tag_id":"clonwar7h00007svd3a1o250m","_id":"clonwar7l00017svdgwh3f97a"},{"post_id":"cloo17nk7000094vdcod2gy68","tag_id":"clmkphbfk00479gvdfjrz4r2p","_id":"cloo17nkb000194vdcpqz1r58"},{"post_id":"cloo17nk7000094vdcod2gy68","tag_id":"clmkphbfj003u9gvd0zrb0omx","_id":"cloo17nkb000294vdg7g7a38a"},{"post_id":"cloo17nk7000094vdcod2gy68","tag_id":"clonwar7h00007svd3a1o250m","_id":"cloo17nkb000494vdgx2v3wwj"},{"post_id":"clmkphbfe00289gvdcj3i8nxz","tag_id":"clonwar7h00007svd3a1o250m","_id":"cloo17nke000594vddpb3g4ij"},{"post_id":"clmkphbf9001b9gvdbje5a3wf","tag_id":"cloodiuq80004yndz0pkk4nak","_id":"cloodiuqa0005yndz9d30hu92"},{"post_id":"cloodiuq30000yndz2aly2u9s","tag_id":"clmkphbfh002v9gvd0jmr45yx","_id":"clooet64m00046ovdg5xfdk63"},{"post_id":"cloodiuq30000yndz2aly2u9s","tag_id":"clooet64k00016ovd8d04dkx3","_id":"clooet64n00056ovd4x2jcwjk"},{"post_id":"cloqoof6c0000pgvdbv0cfgob","tag_id":"clooet64o00076ovderbi6mvu","_id":"cloqoof6d0001pgvddy0la6ky"},{"post_id":"cloqoof6f0003pgvd8lk83l00","tag_id":"cloqoof6g0004pgvd6zz46jax","_id":"cloqoof6k0006pgvdfv6khj9s"}],"Tag":[{"name":"Cpp","_id":"clmkphbf100059gvd7i622xcj"},{"name":"《Essential C++》","_id":"clmkphbf3000d9gvd0jxchjev"},{"name":"C语言","_id":"clmkphbf5000j9gvd9ul66krq"},{"name":"《C和指针》","_id":"clmkphbf6000q9gvd75167itr"},{"name":"C4D","_id":"clmkphbf9001a9gvd2snz0rpr"},{"name":"建模渲染","_id":"clmkphbfa001k9gvdbn3t263q"},{"name":"LeeCode","_id":"clmkphbfc001q9gvdcpbodrny"},{"name":"Linux内核","_id":"clmkphbff002b9gvdfdzy3ej8"},{"name":"软技能","_id":"clmkphbff002j9gvd12ochqga"},{"name":"代码开发实战","_id":"clmkphbfh002r9gvde7uz02pv"},{"name":"Linux","_id":"clmkphbfh002v9gvd0jmr45yx"},{"name":"操作系统","_id":"clmkphbfh00359gvd4gly4hk1"},{"name":"MITS6.081","_id":"clmkphbfi00399gvd38355qt8"},{"name":"PPT","_id":"clmkphbfi003a9gvdd37594ii"},{"name":"编程语言","_id":"clmkphbfi003d9gvd6p6sh0tf"},{"name":"python","_id":"clmkphbfi003f9gvdel1qcvzn"},{"name":"Hexo","_id":"clmkphbfj003k9gvd8nnigfvp"},{"name":"计算机基础","_id":"clmkphbfj003u9gvd0zrb0omx"},{"name":"《操作系统导论》","_id":"clmkphbfj003y9gvdekym9nav"},{"name":"深度学习","_id":"clmkphbfj003z9gvdfhdy4xcc"},{"name":"数据结构与算法","_id":"clmkphbfk00479gvdfjrz4r2p"},{"name":"汇编语言","_id":"clmkphbfl004s9gvd8jzu0xfs"},{"name":"《汇编语言》","_id":"clmkphbfl004v9gvdb5l76aig"},{"name":"CSAPP","_id":"clmkphbfl004z9gvd1wog15p2"},{"name":"《GoogleC++编程规范》","_id":"clmkphbfm00509gvdbj1s2dx6"},{"name":"编程风格","_id":"clmkphbfm00539gvdcdst068i"},{"name":"面向对象","_id":"clmkphbfm00549gvdhl5t11a5"},{"name":"《面向对象分析与设计》","_id":"clmkphbfm00579gvd174dhc6y"},{"name":"标签一","_id":"clmra3hn90002p0vd5ghm0lvx"},{"name":"标签二","_id":"clmra3hna0003p0vdejby7ulp"},{"name":"计算机组成原理","_id":"clnig9wu10001l0vddd0ae9h5"},{"name":"《计算机组成原理》","_id":"clnig9wu50003l0vd5zpzbmra"},{"name":"《C++primer》","_id":"clnlpqhsd0004bwvd9zao5bnb"},{"name":"C++","_id":"clnlpqhsd0006bwvd8kuk1a9p"},{"name":"代码工具","_id":"clnqzk3rv0001csvdb0xphw2a"},{"name":"Git","_id":"clnqzk3rx0003csvd2be6hrf1"},{"name":"Cmake","_id":"clnsw4qgr0001vwvd6a4e28d7"},{"name":"计算机网络","_id":"clodxgj590007ywvd18k3g6q4"},{"name":"《计算机网络》","_id":"clodxgtt10009ywvd75fycj86"},{"name":"《计算机网络自顶向下》","_id":"clodyw085000bywvd2ql4h2vu"},{"name":"《hello算法》","_id":"clofdsjg2000dywvdgqnm6din"},{"name":"《hello 算法》","_id":"clonwar7h00007svd3a1o250m"},{"name":"静态博客框架","_id":"cloodiuq80004yndz0pkk4nak"},{"name":"工作流","_id":"clooet64k00016ovd8d04dkx3"},{"name":"Vim编辑器","_id":"clooet64o00076ovderbi6mvu"},{"name":"信息检索","_id":"cloqoof6g0004pgvd6zz46jax"}]}}